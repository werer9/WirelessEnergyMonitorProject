
EE209.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00001cd8  00001d6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ad  00800140  00800140  00001dac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d76  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001089  00000000  00000000  00003d86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c9d  00000000  00000000  00004e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b4  00000000  00000000  00005aac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000910  00000000  00000000  00005f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d6c  00000000  00000000  00006870  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  000075dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__ctors_end>
       4:	0c 94 49 03 	jmp	0x692	; 0x692 <__vector_1>
       8:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__vector_2>
       c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      10:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      14:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      18:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      24:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      28:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      2c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      34:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      40:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      44:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      48:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      4c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      50:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      54:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      58:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      5c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      60:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      64:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      68:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      6c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      70:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      74:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      78:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      7c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      80:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      84:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      88:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      8c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      90:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      94:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      98:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      9c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      ac:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      b0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      b4:	05 a8       	ldd	r0, Z+53	; 0x35
      b6:	4c cd       	rjmp	.-1384   	; 0xfffffb50 <__eeprom_end+0xff7efb50>
      b8:	b2 d4       	rcall	.+2404   	; 0xa1e <get_uart_string+0x118>
      ba:	4e b9       	out	0x0e, r20	; 14
      bc:	38 36       	cpi	r19, 0x68	; 104
      be:	a9 02       	muls	r26, r25
      c0:	0c 50       	subi	r16, 0x0C	; 12
      c2:	b9 91       	ld	r27, Y+
      c4:	86 88       	ldd	r8, Z+22	; 0x16
      c6:	08 3c       	cpi	r16, 0xC8	; 200
      c8:	a6 aa       	std	Z+54, r10	; 0x36
      ca:	aa 2a       	or	r10, r26
      cc:	be 00       	.word	0x00be	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240

000000d2 <__trampolines_end>:
      d2:	6e 61       	ori	r22, 0x1E	; 30
      d4:	6e 00       	.word	0x006e	; ????

000000d6 <__c.2332>:
      d6:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      e6:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      f6:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     106:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     116:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     126:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     136:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     146:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     156:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     166:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     176:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     186:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     196:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1a6:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1b6:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1c6:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	d8 e0       	ldi	r29, 0x08	; 8
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61

000001e0 <__do_copy_data>:
     1e0:	11 e0       	ldi	r17, 0x01	; 1
     1e2:	a0 e0       	ldi	r26, 0x00	; 0
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	e8 ed       	ldi	r30, 0xD8	; 216
     1e8:	fc e1       	ldi	r31, 0x1C	; 28
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x10>
     1ec:	05 90       	lpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a0 34       	cpi	r26, 0x40	; 64
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0xc>

000001f6 <__do_clear_bss>:
     1f6:	22 e0       	ldi	r18, 0x02	; 2
     1f8:	a0 e4       	ldi	r26, 0x40	; 64
     1fa:	b1 e0       	ldi	r27, 0x01	; 1
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	ad 3e       	cpi	r26, 0xED	; 237
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 14 06 	call	0xc28	; 0xc28 <main>
     20a:	0c 94 6a 0e 	jmp	0x1cd4	; 0x1cd4 <_exit>

0000020e <__bad_interrupt>:
     20e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000212 <read_adc_mv>:


uint16_t read_adc_mv(uint8_t channel)
{
	// clear ADMUX
	ADMUX &= 0xF0;
     212:	ec e7       	ldi	r30, 0x7C	; 124
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	90 81       	ld	r25, Z
     218:	90 7f       	andi	r25, 0xF0	; 240
     21a:	90 83       	st	Z, r25
	// set least significant 4 bits to channel
	ADMUX |= channel;
     21c:	90 81       	ld	r25, Z
     21e:	89 2b       	or	r24, r25
     220:	80 83       	st	Z, r24
	// start conversion
	ADCSRA |= (1<<ADSC);
     222:	ea e7       	ldi	r30, 0x7A	; 122
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	80 81       	ld	r24, Z
     228:	80 64       	ori	r24, 0x40	; 64
     22a:	80 83       	st	Z, r24
	// wait until conversion is finished
	while (ADCSRA & (1<<ADSC));
     22c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     230:	86 fd       	sbrc	r24, 6
     232:	fc cf       	rjmp	.-8      	; 0x22c <read_adc_mv+0x1a>
	
	// read full 10 bits of ADC registers
	uint16_t adc_output = ADCW;
     234:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     238:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	// convert reading into millivolts
	uint32_t mv = (uint32_t)adc_output * ((uint32_t)5000/1023);
     23c:	a0 e0       	ldi	r26, 0x00	; 0
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	88 0f       	add	r24, r24
     242:	99 1f       	adc	r25, r25
     244:	aa 1f       	adc	r26, r26
     246:	bb 1f       	adc	r27, r27
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	aa 1f       	adc	r26, r26
     24e:	bb 1f       	adc	r27, r27
	return (uint16_t)mv;
}
     250:	08 95       	ret

00000252 <adc_init>:

void adc_init() 
{
	// set ADMUX to read from VCC
	ADMUX |= (1<<REFS0);
     252:	ec e7       	ldi	r30, 0x7C	; 124
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	80 64       	ori	r24, 0x40	; 64
     25a:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     25c:	80 81       	ld	r24, Z
     25e:	8f 77       	andi	r24, 0x7F	; 127
     260:	80 83       	st	Z, r24
	// clear channel selection
	ADMUX &= 0xF0;
     262:	80 81       	ld	r24, Z
     264:	80 7f       	andi	r24, 0xF0	; 240
     266:	80 83       	st	Z, r24
	// enable conversions, scale by system clock by 128
	ADCSRA |= (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     268:	ea e7       	ldi	r30, 0x7A	; 122
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	87 68       	ori	r24, 0x87	; 135
     270:	80 83       	st	Z, r24
     272:	08 95       	ret

00000274 <fsmInit>:
#include "fsm.h"

// initialis fsm with function pointers
void fsmInit(struct functionPointers *fsmFunctions) 
{
    functions = fsmFunctions;
     274:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <functions+0x1>
     278:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <functions>
    state = STATE_INIT;
     27c:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <state>
    voltageTriggerIndex = 0;
     280:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <voltageTriggerIndex>
    currentTriggerIndex = 0;
     284:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <currentTriggerIndex>
	
	triggerSize = 0;
     288:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <triggerSize>
	peakVoltage = 0;
     28c:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <peakVoltage+0x1>
     290:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <peakVoltage>
	peakCurrent = 0;
     294:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <peakCurrent+0x1>
     298:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <peakCurrent>
	voltage = 0;
     29c:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <voltage+0x1>
     2a0:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <voltage>
	current = 0;
     2a4:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <current+0x1>
     2a8:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <current>
	phase = 0;
     2ac:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <phase+0x1>
     2b0:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <phase>
	pf = 0;
     2b4:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <pf+0x1>
     2b8:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <pf>
	power = 0;
     2bc:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <power+0x1>
     2c0:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <power>
     2c4:	08 95       	ret

000002c6 <stateInit>:

// init state
void stateInit()
{
    // init uart
    functions->uart_init(BAUD);
     2c6:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     2ca:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     2ce:	01 90       	ld	r0, Z+
     2d0:	f0 81       	ld	r31, Z
     2d2:	e0 2d       	mov	r30, r0
     2d4:	80 e8       	ldi	r24, 0x80	; 128
     2d6:	95 e2       	ldi	r25, 0x25	; 37
     2d8:	09 95       	icall
    // init io
    functions->io_init();
     2da:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     2de:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     2e2:	02 80       	ldd	r0, Z+2	; 0x02
     2e4:	f3 81       	ldd	r31, Z+3	; 0x03
     2e6:	e0 2d       	mov	r30, r0
     2e8:	09 95       	icall
    // init adc
    functions->adc_init();
     2ea:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     2ee:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     2f2:	04 80       	ldd	r0, Z+4	; 0x04
     2f4:	f5 81       	ldd	r31, Z+5	; 0x05
     2f6:	e0 2d       	mov	r30, r0
     2f8:	09 95       	icall
    // init timer
    functions->timer_init();
     2fa:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     2fe:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     302:	06 80       	ldd	r0, Z+6	; 0x06
     304:	f7 81       	ldd	r31, Z+7	; 0x07
     306:	e0 2d       	mov	r30, r0
     308:	09 95       	icall
    // init interrupts
    functions->int_init(voltageTriggerTimes, currentTriggerTimes, SIZE, functions->get_time);
     30a:	a0 91 0b 02 	lds	r26, 0x020B	; 0x80020b <functions>
     30e:	b0 91 0c 02 	lds	r27, 0x020C	; 0x80020c <functions+0x1>
     312:	18 96       	adiw	r26, 0x08	; 8
     314:	ed 91       	ld	r30, X+
     316:	fc 91       	ld	r31, X
     318:	19 97       	sbiw	r26, 0x09	; 9
     31a:	54 96       	adiw	r26, 0x14	; 20
     31c:	2d 91       	ld	r18, X+
     31e:	3c 91       	ld	r19, X
     320:	55 97       	sbiw	r26, 0x15	; 21
     322:	42 e3       	ldi	r20, 0x32	; 50
     324:	67 ea       	ldi	r22, 0xA7	; 167
     326:	71 e0       	ldi	r23, 0x01	; 1
     328:	8a e1       	ldi	r24, 0x1A	; 26
     32a:	92 e0       	ldi	r25, 0x02	; 2
     32c:	09 95       	icall
    // change state on function completion
    state = STATE_READ_POWER;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <state>
     334:	08 95       	ret

00000336 <stateReadPower>:
}

// read power state
void stateReadPower()
{
     336:	1f 93       	push	r17
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
    // enable interrupts and reset timer
	functions->timer_reset();
     33c:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     340:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     344:	06 88       	ldd	r0, Z+22	; 0x16
     346:	f7 89       	ldd	r31, Z+23	; 0x17
     348:	e0 2d       	mov	r30, r0
     34a:	09 95       	icall
	//functions->timer_init();
    functions->enable_interrupts();
     34c:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     350:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     354:	00 88       	ldd	r0, Z+16	; 0x10
     356:	f1 89       	ldd	r31, Z+17	; 0x11
     358:	e0 2d       	mov	r30, r0
     35a:	09 95       	icall
    for (int8_t j = 0; j < SIZE; j++) {
     35c:	10 e0       	ldi	r17, 0x00	; 0
     35e:	22 c0       	rjmp	.+68     	; 0x3a4 <stateReadPower+0x6e>
		voltages[j] = functions->read_adc(VOLTAGE_PIN);
     360:	c1 2f       	mov	r28, r17
     362:	01 2e       	mov	r0, r17
     364:	00 0c       	add	r0, r0
     366:	dd 0b       	sbc	r29, r29
     368:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     36c:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     370:	02 88       	ldd	r0, Z+18	; 0x12
     372:	f3 89       	ldd	r31, Z+19	; 0x13
     374:	e0 2d       	mov	r30, r0
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	09 95       	icall
     37a:	cc 0f       	add	r28, r28
     37c:	dd 1f       	adc	r29, r29
     37e:	fe 01       	movw	r30, r28
     380:	e0 5c       	subi	r30, 0xC0	; 192
     382:	fe 4f       	sbci	r31, 0xFE	; 254
     384:	91 83       	std	Z+1, r25	; 0x01
     386:	80 83       	st	Z, r24
        //voltageTimes[j] = functions->get_time();
        currents[j] = functions->read_adc(CURRENT_PIN);
     388:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     38c:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     390:	02 88       	ldd	r0, Z+18	; 0x12
     392:	f3 89       	ldd	r31, Z+19	; 0x13
     394:	e0 2d       	mov	r30, r0
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	09 95       	icall
     39a:	c2 58       	subi	r28, 0x82	; 130
     39c:	dd 4f       	sbci	r29, 0xFD	; 253
     39e:	99 83       	std	Y+1, r25	; 0x01
     3a0:	88 83       	st	Y, r24
{
    // enable interrupts and reset timer
	functions->timer_reset();
	//functions->timer_init();
    functions->enable_interrupts();
    for (int8_t j = 0; j < SIZE; j++) {
     3a2:	1f 5f       	subi	r17, 0xFF	; 255
     3a4:	12 33       	cpi	r17, 0x32	; 50
     3a6:	e4 f2       	brlt	.-72     	; 0x360 <stateReadPower+0x2a>
        currents[j] = functions->read_adc(CURRENT_PIN);
        //currentTimes[j] = functions->get_time();
    }

    // disable interrupts - prevent the trigger array from overflowing
    functions->disable_interrupts();
     3a8:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     3ac:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     3b0:	06 84       	ldd	r0, Z+14	; 0x0e
     3b2:	f7 85       	ldd	r31, Z+15	; 0x0f
     3b4:	e0 2d       	mov	r30, r0
     3b6:	09 95       	icall

    // possible change the implementation to avoid interrupts by setting a 
    // volatile boolean with an int
    
    // need to add condition for state change
    state = STATE_CALCULATE_POWER;
     3b8:	82 e0       	ldi	r24, 0x02	; 2
     3ba:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <state>
}
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	08 95       	ret

000003c6 <stateCalculatePower>:

// calculate power state
void stateCalculatePower()
{  
    // calculate peak, RMS
    peakVoltage = functions->find_peak(voltages, SIZE);
     3c6:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     3ca:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     3ce:	00 8c       	ldd	r0, Z+24	; 0x18
     3d0:	f1 8d       	ldd	r31, Z+25	; 0x19
     3d2:	e0 2d       	mov	r30, r0
     3d4:	62 e3       	ldi	r22, 0x32	; 50
     3d6:	80 e4       	ldi	r24, 0x40	; 64
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	09 95       	icall
     3dc:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <peakVoltage+0x1>
     3e0:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <peakVoltage>
    peakCurrent = functions->find_peak(currents, SIZE);
     3e4:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     3e8:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     3ec:	00 8c       	ldd	r0, Z+24	; 0x18
     3ee:	f1 8d       	ldd	r31, Z+25	; 0x19
     3f0:	e0 2d       	mov	r30, r0
     3f2:	62 e3       	ldi	r22, 0x32	; 50
     3f4:	8e e7       	ldi	r24, 0x7E	; 126
     3f6:	92 e0       	ldi	r25, 0x02	; 2
     3f8:	09 95       	icall
     3fa:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <peakCurrent+0x1>
     3fe:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <peakCurrent>
    voltage = functions->calculate_RMS(peakVoltage);
     402:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     406:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     40a:	02 8c       	ldd	r0, Z+26	; 0x1a
     40c:	f3 8d       	ldd	r31, Z+27	; 0x1b
     40e:	e0 2d       	mov	r30, r0
     410:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <peakVoltage>
     414:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <peakVoltage+0x1>
     418:	09 95       	icall
     41a:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <voltage+0x1>
     41e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <voltage>
    current = functions->calculate_RMS(peakCurrent);
     422:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     426:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     42a:	02 8c       	ldd	r0, Z+26	; 0x1a
     42c:	f3 8d       	ldd	r31, Z+27	; 0x1b
     42e:	e0 2d       	mov	r30, r0
     430:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <peakCurrent>
     434:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <peakCurrent+0x1>
     438:	09 95       	icall
     43a:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <current+0x1>
     43e:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <current>

    // calculate phase of two signals
    phase = functions->get_phase_difference(voltageTriggerTimes, voltageTriggerIndex,
     442:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     446:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     44a:	04 8c       	ldd	r0, Z+28	; 0x1c
     44c:	f5 8d       	ldd	r31, Z+29	; 0x1d
     44e:	e0 2d       	mov	r30, r0
     450:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <currentTriggerIndex>
     454:	47 ea       	ldi	r20, 0xA7	; 167
     456:	51 e0       	ldi	r21, 0x01	; 1
     458:	60 91 a4 01 	lds	r22, 0x01A4	; 0x8001a4 <voltageTriggerIndex>
     45c:	8a e1       	ldi	r24, 0x1A	; 26
     45e:	92 e0       	ldi	r25, 0x02	; 2
     460:	09 95       	icall
     462:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <phase+0x1>
     466:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <phase>
            currentTriggerTimes, currentTriggerIndex);
    
    // place holder phase
    pf = functions->calculate_power_factor(phase);
     46a:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     46e:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     472:	06 8c       	ldd	r0, Z+30	; 0x1e
     474:	f7 8d       	ldd	r31, Z+31	; 0x1f
     476:	e0 2d       	mov	r30, r0
     478:	09 95       	icall
     47a:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <pf+0x1>
     47e:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <pf>
    power = functions->calculate_average_power(voltage, 
     482:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     486:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     48a:	00 a0       	ldd	r0, Z+32	; 0x20
     48c:	f1 a1       	ldd	r31, Z+33	; 0x21
     48e:	e0 2d       	mov	r30, r0
     490:	60 91 16 02 	lds	r22, 0x0216	; 0x800216 <current>
     494:	70 91 17 02 	lds	r23, 0x0217	; 0x800217 <current+0x1>
     498:	ac 01       	movw	r20, r24
     49a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <voltage>
     49e:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <voltage+0x1>
     4a2:	09 95       	icall
     4a4:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <power+0x1>
     4a8:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <power>
            current, pf);
    
    // start iterating over the trigger arrays from zero
    // this effectively resets the array
    voltageTriggerIndex = 0;
     4ac:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <voltageTriggerIndex>
    currentTriggerIndex = 0;
     4b0:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <currentTriggerIndex>
    
	// reset interrupt handler
	//functions->int_init(voltageTriggerTimes, currentTriggerTimes, SIZE, functions->get_time);
    // new state needed to be added for correct transition
    state = STATE_TRANSMIT_POWER;
     4b4:	83 e0       	ldi	r24, 0x03	; 3
     4b6:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <state>
     4ba:	08 95       	ret

000004bc <stateTransmitPower>:
}

// transmit the power over UART
void stateTransmitPower()
{
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	cd b7       	in	r28, 0x3d	; 61
     4c2:	de b7       	in	r29, 0x3e	; 62
     4c4:	60 97       	sbiw	r28, 0x10	; 16
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	f8 94       	cli
     4ca:	de bf       	out	0x3e, r29	; 62
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	cd bf       	out	0x3d, r28	; 61
    char dataString[16];
    functions->get_uart_string(power, dataString, 'P');
     4d0:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     4d4:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     4d8:	02 84       	ldd	r0, Z+10	; 0x0a
     4da:	f3 85       	ldd	r31, Z+11	; 0x0b
     4dc:	e0 2d       	mov	r30, r0
     4de:	40 e5       	ldi	r20, 0x50	; 80
     4e0:	be 01       	movw	r22, r28
     4e2:	6f 5f       	subi	r22, 0xFF	; 255
     4e4:	7f 4f       	sbci	r23, 0xFF	; 255
     4e6:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <power>
     4ea:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <power+0x1>
     4ee:	09 95       	icall
    functions->uart_write(dataString);
     4f0:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     4f4:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     4f8:	04 84       	ldd	r0, Z+12	; 0x0c
     4fa:	f5 85       	ldd	r31, Z+13	; 0x0d
     4fc:	e0 2d       	mov	r30, r0
     4fe:	ce 01       	movw	r24, r28
     500:	01 96       	adiw	r24, 0x01	; 1
     502:	09 95       	icall
	functions->get_uart_string(pf, dataString, 'F');
     504:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     508:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     50c:	02 84       	ldd	r0, Z+10	; 0x0a
     50e:	f3 85       	ldd	r31, Z+11	; 0x0b
     510:	e0 2d       	mov	r30, r0
     512:	46 e4       	ldi	r20, 0x46	; 70
     514:	be 01       	movw	r22, r28
     516:	6f 5f       	subi	r22, 0xFF	; 255
     518:	7f 4f       	sbci	r23, 0xFF	; 255
     51a:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <pf>
     51e:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <pf+0x1>
     522:	09 95       	icall
	functions->uart_write(dataString);
     524:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     528:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     52c:	04 84       	ldd	r0, Z+12	; 0x0c
     52e:	f5 85       	ldd	r31, Z+13	; 0x0d
     530:	e0 2d       	mov	r30, r0
     532:	ce 01       	movw	r24, r28
     534:	01 96       	adiw	r24, 0x01	; 1
     536:	09 95       	icall
	functions->get_uart_string(voltage, dataString, 'V');
     538:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     53c:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     540:	02 84       	ldd	r0, Z+10	; 0x0a
     542:	f3 85       	ldd	r31, Z+11	; 0x0b
     544:	e0 2d       	mov	r30, r0
     546:	46 e5       	ldi	r20, 0x56	; 86
     548:	be 01       	movw	r22, r28
     54a:	6f 5f       	subi	r22, 0xFF	; 255
     54c:	7f 4f       	sbci	r23, 0xFF	; 255
     54e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <voltage>
     552:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <voltage+0x1>
     556:	09 95       	icall
	functions->uart_write(dataString);
     558:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     55c:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     560:	04 84       	ldd	r0, Z+12	; 0x0c
     562:	f5 85       	ldd	r31, Z+13	; 0x0d
     564:	e0 2d       	mov	r30, r0
     566:	ce 01       	movw	r24, r28
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	09 95       	icall
	functions->get_uart_string(current, dataString, 'I');
     56c:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     570:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     574:	02 84       	ldd	r0, Z+10	; 0x0a
     576:	f3 85       	ldd	r31, Z+11	; 0x0b
     578:	e0 2d       	mov	r30, r0
     57a:	49 e4       	ldi	r20, 0x49	; 73
     57c:	be 01       	movw	r22, r28
     57e:	6f 5f       	subi	r22, 0xFF	; 255
     580:	7f 4f       	sbci	r23, 0xFF	; 255
     582:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <current>
     586:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <current+0x1>
     58a:	09 95       	icall
	functions->uart_write(dataString);
     58c:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     590:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     594:	04 84       	ldd	r0, Z+12	; 0x0c
     596:	f5 85       	ldd	r31, Z+13	; 0x0d
     598:	e0 2d       	mov	r30, r0
     59a:	ce 01       	movw	r24, r28
     59c:	01 96       	adiw	r24, 0x01	; 1
     59e:	09 95       	icall

    state = STATE_READ_POWER;
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <state>
     5a6:	60 96       	adiw	r28, 0x10	; 16
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	de bf       	out	0x3e, r29	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	cd bf       	out	0x3d, r28	; 61
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	08 95       	ret

000005b8 <run>:
}
// main fsm function
int run()
{ 
    while (1) {
        switch(state) {
     5b8:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <state>
     5bc:	81 30       	cpi	r24, 0x01	; 1
     5be:	49 f0       	breq	.+18     	; 0x5d2 <run+0x1a>
     5c0:	28 f0       	brcs	.+10     	; 0x5cc <run+0x14>
     5c2:	82 30       	cpi	r24, 0x02	; 2
     5c4:	49 f0       	breq	.+18     	; 0x5d8 <run+0x20>
     5c6:	83 30       	cpi	r24, 0x03	; 3
     5c8:	51 f0       	breq	.+20     	; 0x5de <run+0x26>
     5ca:	0c c0       	rjmp	.+24     	; 0x5e4 <run+0x2c>
            case STATE_INIT:
                // set this to correct ubbr
                stateInit();
     5cc:	0e 94 63 01 	call	0x2c6	; 0x2c6 <stateInit>
                break;
     5d0:	f3 cf       	rjmp	.-26     	; 0x5b8 <run>
            case STATE_READ_POWER:
                // read data from adc and store it
                stateReadPower();
     5d2:	0e 94 9b 01 	call	0x336	; 0x336 <stateReadPower>
                break;
     5d6:	f0 cf       	rjmp	.-32     	; 0x5b8 <run>
            case STATE_CALCULATE_POWER:
                // use data from adc to calculate power
                stateCalculatePower();
     5d8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <stateCalculatePower>
                break;
     5dc:	ed cf       	rjmp	.-38     	; 0x5b8 <run>
            case STATE_TRANSMIT_POWER:
                // send power to bt module with uart
                stateTransmitPower();
     5de:	0e 94 5e 02 	call	0x4bc	; 0x4bc <stateTransmitPower>
                break;
     5e2:	ea cf       	rjmp	.-44     	; 0x5b8 <run>
                break;
        }
    }

    return 0;
}
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	08 95       	ret

000005ea <io_init>:
#include "gpio.h"

void io_init()
{
	//Set all PORTC pins as inputs
	DDRC = 0x00;
     5ea:	17 b8       	out	0x07, r1	; 7
     5ec:	08 95       	ret

000005ee <enable_interrupts>:
	interrupt_handler(1);
}

void enable_interrupts()
{
	sei();
     5ee:	78 94       	sei
     5f0:	08 95       	ret

000005f2 <disable_interrupts>:
}
void disable_interrupts()
{
	cli();
     5f2:	f8 94       	cli
     5f4:	08 95       	ret

000005f6 <interrupt_init>:
{
	
	voltageTriggers = voltageTriggers;
	currentTriggers = currentTriggers;
	size = size;
	get_time_func = get_time_ptr;
     5f6:	30 93 e7 02 	sts	0x02E7, r19	; 0x8002e7 <get_time_func+0x1>
     5fa:	20 93 e6 02 	sts	0x02E6, r18	; 0x8002e6 <get_time_func>
	currentIndex = 0;
     5fe:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <currentIndex>
	voltageIndex = 0;
     602:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <voltageIndex>
     606:	08 95       	ret

00000608 <interrupt_handler>:
}

void interrupt_handler(uint8_t interruptPin)
{
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
	switch (interruptPin)
     60c:	88 23       	and	r24, r24
     60e:	19 f0       	breq	.+6      	; 0x616 <interrupt_handler+0xe>
     610:	81 30       	cpi	r24, 0x01	; 1
     612:	f9 f0       	breq	.+62     	; 0x652 <interrupt_handler+0x4a>
     614:	3b c0       	rjmp	.+118    	; 0x68c <interrupt_handler+0x84>
	{
		case 0:
			if (currentIndex == size)
     616:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <currentIndex>
     61a:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <size>
     61e:	98 17       	cp	r25, r24
     620:	a9 f1       	breq	.+106    	; 0x68c <interrupt_handler+0x84>
				break;
			currentTriggers[currentIndex++] = get_time_func();
     622:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <currentTriggers>
     626:	30 91 ec 02 	lds	r19, 0x02EC	; 0x8002ec <currentTriggers+0x1>
     62a:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <currentIndex>
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	98 0f       	add	r25, r24
     632:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <currentIndex>
     636:	c8 2f       	mov	r28, r24
     638:	d0 e0       	ldi	r29, 0x00	; 0
     63a:	cc 0f       	add	r28, r28
     63c:	dd 1f       	adc	r29, r29
     63e:	c2 0f       	add	r28, r18
     640:	d3 1f       	adc	r29, r19
     642:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <get_time_func>
     646:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <get_time_func+0x1>
     64a:	09 95       	icall
     64c:	99 83       	std	Y+1, r25	; 0x01
     64e:	88 83       	st	Y, r24
			break;
     650:	1d c0       	rjmp	.+58     	; 0x68c <interrupt_handler+0x84>
		case 1:
			if (voltageIndex == size)
     652:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <voltageIndex>
     656:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <size>
     65a:	98 17       	cp	r25, r24
     65c:	b9 f0       	breq	.+46     	; 0x68c <interrupt_handler+0x84>
				break;
			voltageTriggers[voltageIndex++] = get_time_func();
     65e:	20 91 e8 02 	lds	r18, 0x02E8	; 0x8002e8 <voltageTriggers>
     662:	30 91 e9 02 	lds	r19, 0x02E9	; 0x8002e9 <voltageTriggers+0x1>
     666:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <voltageIndex>
     66a:	91 e0       	ldi	r25, 0x01	; 1
     66c:	98 0f       	add	r25, r24
     66e:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <voltageIndex>
     672:	c8 2f       	mov	r28, r24
     674:	d0 e0       	ldi	r29, 0x00	; 0
     676:	cc 0f       	add	r28, r28
     678:	dd 1f       	adc	r29, r29
     67a:	c2 0f       	add	r28, r18
     67c:	d3 1f       	adc	r29, r19
     67e:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <get_time_func>
     682:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <get_time_func+0x1>
     686:	09 95       	icall
     688:	99 83       	std	Y+1, r25	; 0x01
     68a:	88 83       	st	Y, r24
			break;
		default:
			break;
	}
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <__vector_1>:

#include "interrupt.h"

// handle interrupts during cycle
ISR(INT0_vect)
{
     692:	1f 92       	push	r1
     694:	0f 92       	push	r0
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	0f 92       	push	r0
     69a:	11 24       	eor	r1, r1
     69c:	2f 93       	push	r18
     69e:	3f 93       	push	r19
     6a0:	4f 93       	push	r20
     6a2:	5f 93       	push	r21
     6a4:	6f 93       	push	r22
     6a6:	7f 93       	push	r23
     6a8:	8f 93       	push	r24
     6aa:	9f 93       	push	r25
     6ac:	af 93       	push	r26
     6ae:	bf 93       	push	r27
     6b0:	ef 93       	push	r30
     6b2:	ff 93       	push	r31
	interrupt_handler(0);
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	0e 94 04 03 	call	0x608	; 0x608 <interrupt_handler>
}
     6ba:	ff 91       	pop	r31
     6bc:	ef 91       	pop	r30
     6be:	bf 91       	pop	r27
     6c0:	af 91       	pop	r26
     6c2:	9f 91       	pop	r25
     6c4:	8f 91       	pop	r24
     6c6:	7f 91       	pop	r23
     6c8:	6f 91       	pop	r22
     6ca:	5f 91       	pop	r21
     6cc:	4f 91       	pop	r20
     6ce:	3f 91       	pop	r19
     6d0:	2f 91       	pop	r18
     6d2:	0f 90       	pop	r0
     6d4:	0f be       	out	0x3f, r0	; 63
     6d6:	0f 90       	pop	r0
     6d8:	1f 90       	pop	r1
     6da:	18 95       	reti

000006dc <__vector_2>:

ISR(INT1_vect)
{
     6dc:	1f 92       	push	r1
     6de:	0f 92       	push	r0
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	0f 92       	push	r0
     6e4:	11 24       	eor	r1, r1
     6e6:	2f 93       	push	r18
     6e8:	3f 93       	push	r19
     6ea:	4f 93       	push	r20
     6ec:	5f 93       	push	r21
     6ee:	6f 93       	push	r22
     6f0:	7f 93       	push	r23
     6f2:	8f 93       	push	r24
     6f4:	9f 93       	push	r25
     6f6:	af 93       	push	r26
     6f8:	bf 93       	push	r27
     6fa:	ef 93       	push	r30
     6fc:	ff 93       	push	r31
	interrupt_handler(1);
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	0e 94 04 03 	call	0x608	; 0x608 <interrupt_handler>
}
     704:	ff 91       	pop	r31
     706:	ef 91       	pop	r30
     708:	bf 91       	pop	r27
     70a:	af 91       	pop	r26
     70c:	9f 91       	pop	r25
     70e:	8f 91       	pop	r24
     710:	7f 91       	pop	r23
     712:	6f 91       	pop	r22
     714:	5f 91       	pop	r21
     716:	4f 91       	pop	r20
     718:	3f 91       	pop	r19
     71a:	2f 91       	pop	r18
     71c:	0f 90       	pop	r0
     71e:	0f be       	out	0x3f, r0	; 63
     720:	0f 90       	pop	r0
     722:	1f 90       	pop	r1
     724:	18 95       	reti

00000726 <findPeak>:
	return (uint16_t)sample/pow(2,bits) * maxVal;
}

// find peak value of sinusoidal wave
uint16_t findPeak(uint16_t *samples, uint8_t size)
{
     726:	dc 01       	movw	r26, r24
	uint16_t peak = 0;
	// iterate over samples and use largest value as peak
	for (uint8_t i = 0; i < size; i++) {
     728:	90 e0       	ldi	r25, 0x00	; 0
}

// find peak value of sinusoidal wave
uint16_t findPeak(uint16_t *samples, uint8_t size)
{
	uint16_t peak = 0;
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	50 e0       	ldi	r21, 0x00	; 0
	// iterate over samples and use largest value as peak
	for (uint8_t i = 0; i < size; i++) {
     72e:	0d c0       	rjmp	.+26     	; 0x74a <findPeak+0x24>
		if (samples[i] > peak)
     730:	e9 2f       	mov	r30, r25
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	ee 0f       	add	r30, r30
     736:	ff 1f       	adc	r31, r31
     738:	ea 0f       	add	r30, r26
     73a:	fb 1f       	adc	r31, r27
     73c:	20 81       	ld	r18, Z
     73e:	31 81       	ldd	r19, Z+1	; 0x01
     740:	42 17       	cp	r20, r18
     742:	53 07       	cpc	r21, r19
     744:	08 f4       	brcc	.+2      	; 0x748 <findPeak+0x22>
			peak = samples[i];
     746:	a9 01       	movw	r20, r18
// find peak value of sinusoidal wave
uint16_t findPeak(uint16_t *samples, uint8_t size)
{
	uint16_t peak = 0;
	// iterate over samples and use largest value as peak
	for (uint8_t i = 0; i < size; i++) {
     748:	9f 5f       	subi	r25, 0xFF	; 255
     74a:	96 17       	cp	r25, r22
     74c:	88 f3       	brcs	.-30     	; 0x730 <findPeak+0xa>
		if (samples[i] > peak)
			peak = samples[i];
	}
	
	return peak;
}
     74e:	ca 01       	movw	r24, r20
     750:	08 95       	ret

00000752 <calculateRMS>:

// calculate the rms value from peak value of sinusoid
uint16_t calculateRMS(uint16_t peak)
{
	return peak/ROOT_2;
     752:	bc 01       	movw	r22, r24
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	0e 94 de 06 	call	0xdbc	; 0xdbc <__floatunsisf>
     75c:	2e ee       	ldi	r18, 0xEE	; 238
     75e:	34 e0       	ldi	r19, 0x04	; 4
     760:	45 eb       	ldi	r20, 0xB5	; 181
     762:	5f e3       	ldi	r21, 0x3F	; 63
     764:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divsf3>
     768:	0e 94 af 06 	call	0xd5e	; 0xd5e <__fixunssfsi>
}
     76c:	cb 01       	movw	r24, r22
     76e:	08 95       	ret

00000770 <getPhaseDifference>:
{
	uint16_t phaseDifference = 0;
	uint16_t Tz = 0;
	uint16_t Tp = 0;

	if (size1 < 3 || size2 < 3)
     770:	63 30       	cpi	r22, 0x03	; 3
     772:	a8 f1       	brcs	.+106    	; 0x7de <getPhaseDifference+0x6e>
     774:	23 30       	cpi	r18, 0x03	; 3
     776:	b0 f1       	brcs	.+108    	; 0x7e4 <getPhaseDifference+0x74>
		return phaseDifference;

	if (crossTimes1[0] > crossTimes2[0]) {
     778:	fc 01       	movw	r30, r24
     77a:	60 81       	ld	r22, Z
     77c:	71 81       	ldd	r23, Z+1	; 0x01
     77e:	fa 01       	movw	r30, r20
     780:	20 81       	ld	r18, Z
     782:	31 81       	ldd	r19, Z+1	; 0x01
     784:	26 17       	cp	r18, r22
     786:	37 07       	cpc	r19, r23
     788:	50 f4       	brcc	.+20     	; 0x79e <getPhaseDifference+0x2e>
		Tz = crossTimes2[0] - crossTimes2[2];
     78a:	44 81       	ldd	r20, Z+4	; 0x04
     78c:	55 81       	ldd	r21, Z+5	; 0x05
     78e:	24 1b       	sub	r18, r20
     790:	35 0b       	sbc	r19, r21
		Tp = crossTimes1[2] - crossTimes2[2];
     792:	fc 01       	movw	r30, r24
     794:	64 81       	ldd	r22, Z+4	; 0x04
     796:	75 81       	ldd	r23, Z+5	; 0x05
     798:	64 1b       	sub	r22, r20
     79a:	75 0b       	sbc	r23, r21
     79c:	13 c0       	rjmp	.+38     	; 0x7c4 <getPhaseDifference+0x54>
	} else if (crossTimes1[0] < crossTimes2[0]) {
     79e:	62 17       	cp	r22, r18
     7a0:	73 07       	cpc	r23, r19
     7a2:	60 f4       	brcc	.+24     	; 0x7bc <getPhaseDifference+0x4c>
		Tz = crossTimes1[0] - crossTimes1[2];
     7a4:	fc 01       	movw	r30, r24
     7a6:	84 81       	ldd	r24, Z+4	; 0x04
     7a8:	95 81       	ldd	r25, Z+5	; 0x05
     7aa:	9b 01       	movw	r18, r22
     7ac:	28 1b       	sub	r18, r24
     7ae:	39 0b       	sbc	r19, r25
		Tp = crossTimes2[2] - crossTimes1[2];
     7b0:	fa 01       	movw	r30, r20
     7b2:	64 81       	ldd	r22, Z+4	; 0x04
     7b4:	75 81       	ldd	r23, Z+5	; 0x05
     7b6:	68 1b       	sub	r22, r24
     7b8:	79 0b       	sbc	r23, r25
     7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <getPhaseDifference+0x54>
uint16_t getPhaseDifference(uint16_t *crossTimes1, uint8_t size1, 
		uint16_t *crossTimes2, uint8_t size2) 
{
	uint16_t phaseDifference = 0;
	uint16_t Tz = 0;
	uint16_t Tp = 0;
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	70 e0       	ldi	r23, 0x00	; 0
// since these are more accurate
uint16_t getPhaseDifference(uint16_t *crossTimes1, uint8_t size1, 
		uint16_t *crossTimes2, uint8_t size2) 
{
	uint16_t phaseDifference = 0;
	uint16_t Tz = 0;
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	30 e0       	ldi	r19, 0x00	; 0
	} else if (crossTimes1[0] < crossTimes2[0]) {
		Tz = crossTimes1[0] - crossTimes1[2];
		Tp = crossTimes2[2] - crossTimes1[2];
	}

	phaseDifference = 360 * (Tz/Tp);
     7c4:	c9 01       	movw	r24, r18
     7c6:	0e 94 44 0c 	call	0x1888	; 0x1888 <__udivmodhi4>
     7ca:	28 e6       	ldi	r18, 0x68	; 104
     7cc:	31 e0       	ldi	r19, 0x01	; 1
     7ce:	62 9f       	mul	r22, r18
     7d0:	c0 01       	movw	r24, r0
     7d2:	63 9f       	mul	r22, r19
     7d4:	90 0d       	add	r25, r0
     7d6:	72 9f       	mul	r23, r18
     7d8:	90 0d       	add	r25, r0
     7da:	11 24       	eor	r1, r1

	return phaseDifference;
     7dc:	08 95       	ret
	uint16_t phaseDifference = 0;
	uint16_t Tz = 0;
	uint16_t Tp = 0;

	if (size1 < 3 || size2 < 3)
		return phaseDifference;
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	08 95       	ret
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
	}

	phaseDifference = 360 * (Tz/Tp);

	return phaseDifference;
}
     7e8:	08 95       	ret

000007ea <calculatePowerFactor>:

// calculate power factor
uint16_t calculatePowerFactor(uint16_t phase) 
{
	phase *= (PI/180);
     7ea:	bc 01       	movw	r22, r24
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 de 06 	call	0xdbc	; 0xdbc <__floatunsisf>
     7f4:	2e e2       	ldi	r18, 0x2E	; 46
     7f6:	3a ef       	ldi	r19, 0xFA	; 250
     7f8:	4e e8       	ldi	r20, 0x8E	; 142
     7fa:	5c e3       	ldi	r21, 0x3C	; 60
     7fc:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     800:	0e 94 af 06 	call	0xd5e	; 0xd5e <__fixunssfsi>
	return (cos(phase) * 1000);
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	0e 94 de 06 	call	0xdbc	; 0xdbc <__floatunsisf>
     80c:	0e 94 38 06 	call	0xc70	; 0xc70 <cos>
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	4a e7       	ldi	r20, 0x7A	; 122
     816:	54 e4       	ldi	r21, 0x44	; 68
     818:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     81c:	0e 94 af 06 	call	0xd5e	; 0xd5e <__fixunssfsi>
}
     820:	cb 01       	movw	r24, r22
     822:	08 95       	ret

00000824 <calculateAveragePower>:

// calculate average power using standard equation
uint16_t calculateAveragePower(uint16_t Vrms, uint16_t Irms, uint16_t pf)
{
     824:	fb 01       	movw	r30, r22
	double p = (Vrms/1000 * Irms/1000 * pf/1000);
     826:	9c 01       	movw	r18, r24
     828:	36 95       	lsr	r19
     82a:	27 95       	ror	r18
     82c:	36 95       	lsr	r19
     82e:	27 95       	ror	r18
     830:	36 95       	lsr	r19
     832:	27 95       	ror	r18
     834:	a5 ec       	ldi	r26, 0xC5	; 197
     836:	b0 e2       	ldi	r27, 0x20	; 32
     838:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__umulhisi3>
     83c:	92 95       	swap	r25
     83e:	82 95       	swap	r24
     840:	8f 70       	andi	r24, 0x0F	; 15
     842:	89 27       	eor	r24, r25
     844:	9f 70       	andi	r25, 0x0F	; 15
     846:	89 27       	eor	r24, r25
     848:	8e 9f       	mul	r24, r30
     84a:	90 01       	movw	r18, r0
     84c:	8f 9f       	mul	r24, r31
     84e:	30 0d       	add	r19, r0
     850:	9e 9f       	mul	r25, r30
     852:	30 0d       	add	r19, r0
     854:	11 24       	eor	r1, r1
     856:	36 95       	lsr	r19
     858:	27 95       	ror	r18
     85a:	36 95       	lsr	r19
     85c:	27 95       	ror	r18
     85e:	36 95       	lsr	r19
     860:	27 95       	ror	r18
     862:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__umulhisi3>
     866:	92 95       	swap	r25
     868:	82 95       	swap	r24
     86a:	8f 70       	andi	r24, 0x0F	; 15
     86c:	89 27       	eor	r24, r25
     86e:	9f 70       	andi	r25, 0x0F	; 15
     870:	89 27       	eor	r24, r25
     872:	84 9f       	mul	r24, r20
     874:	90 01       	movw	r18, r0
     876:	85 9f       	mul	r24, r21
     878:	30 0d       	add	r19, r0
     87a:	94 9f       	mul	r25, r20
     87c:	30 0d       	add	r19, r0
     87e:	11 24       	eor	r1, r1
     880:	36 95       	lsr	r19
     882:	27 95       	ror	r18
     884:	36 95       	lsr	r19
     886:	27 95       	ror	r18
     888:	36 95       	lsr	r19
     88a:	27 95       	ror	r18
     88c:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__umulhisi3>
     890:	92 95       	swap	r25
     892:	82 95       	swap	r24
     894:	8f 70       	andi	r24, 0x0F	; 15
     896:	89 27       	eor	r24, r25
     898:	9f 70       	andi	r25, 0x0F	; 15
     89a:	89 27       	eor	r24, r25
     89c:	bc 01       	movw	r22, r24
     89e:	80 e0       	ldi	r24, 0x00	; 0
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0e 94 de 06 	call	0xdbc	; 0xdbc <__floatunsisf>
	return (uint16_t)(p*1000);
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	4a e7       	ldi	r20, 0x7A	; 122
     8ac:	54 e4       	ldi	r21, 0x44	; 68
     8ae:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
     8b2:	0e 94 af 06 	call	0xd5e	; 0xd5e <__fixunssfsi>
}
     8b6:	cb 01       	movw	r24, r22
     8b8:	08 95       	ret

000008ba <timer_init>:
void timer_init()
{
	//Sets a 256 prescaler, new Frequency = 62.5kHz
	//Time Period for 1 count = 0.000016s = 16us
	//Time Period for 65535 counts = 1.04856s
	TCCR1B |= (1<<CS12);
     8ba:	e1 e8       	ldi	r30, 0x81	; 129
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	84 60       	ori	r24, 0x04	; 4
     8c2:	80 83       	st	Z, r24
     8c4:	08 95       	ret

000008c6 <resetTimer>:
}

void resetTimer()
{
	// clear the timer counter
	TCNT1 = 0;
     8c6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     8ca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     8ce:	08 95       	ret

000008d0 <getTimerCount>:
}

uint16_t getTimerCount()
{
	//returns the current value stored in the two 8-bit TIMER1 Registers
	return TCNT1;
     8d0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     8d4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
}
     8d8:	08 95       	ret

000008da <calculateTime>:
uint16_t calculateTime(uint16_t scale)
{
	// set scale into time, convert clock speed from Hz to MHz to scale time to us
	double step = 1/((double)(F_CPU/1000000)/256);
	// multiply timer register by value of time step
	double timeSeconds = step * getTimerCount();
     8da:	0e 94 68 04 	call	0x8d0	; 0x8d0 <getTimerCount>
     8de:	bc 01       	movw	r22, r24
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 de 06 	call	0xdbc	; 0xdbc <__floatunsisf>
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	40 e8       	ldi	r20, 0x80	; 128
     8ee:	51 e4       	ldi	r21, 0x41	; 65
     8f0:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
	return (uint16_t)(timeSeconds);
     8f4:	0e 94 af 06 	call	0xd5e	; 0xd5e <__fixunssfsi>
}
     8f8:	cb 01       	movw	r24, r22
     8fa:	08 95       	ret

000008fc <get_time>:

uint16_t get_time()
{
	// returns the current timer count to the function caller
	return calculateTime(TIMER_PRESCALER);
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	0e 94 6d 04 	call	0x8da	; 0x8da <calculateTime>
     904:	08 95       	ret

00000906 <get_uart_string>:
 */ 
#include "uart.h"

// get uart string
void get_uart_string(uint16_t val, char *string, char ident)
{
     906:	ff 92       	push	r15
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	cf 93       	push	r28
     90e:	df 93       	push	r29
     910:	8c 01       	movw	r16, r24
     912:	d6 2f       	mov	r29, r22
     914:	f7 2e       	mov	r15, r23
     916:	c4 2f       	mov	r28, r20
	double value = 0;
	switch (ident) {
     918:	49 34       	cpi	r20, 0x49	; 73
     91a:	09 f4       	brne	.+2      	; 0x91e <get_uart_string+0x18>
     91c:	65 c0       	rjmp	.+202    	; 0x9e8 <get_uart_string+0xe2>
     91e:	20 f4       	brcc	.+8      	; 0x928 <get_uart_string+0x22>
     920:	46 34       	cpi	r20, 0x46	; 70
     922:	09 f4       	brne	.+2      	; 0x926 <get_uart_string+0x20>
     924:	76 c0       	rjmp	.+236    	; 0xa12 <get_uart_string+0x10c>
     926:	28 c1       	rjmp	.+592    	; 0xb78 <get_uart_string+0x272>
     928:	40 35       	cpi	r20, 0x50	; 80
     92a:	09 f4       	brne	.+2      	; 0x92e <get_uart_string+0x28>
     92c:	cc c0       	rjmp	.+408    	; 0xac6 <get_uart_string+0x1c0>
     92e:	46 35       	cpi	r20, 0x56	; 86
     930:	09 f0       	breq	.+2      	; 0x934 <get_uart_string+0x2e>
     932:	22 c1       	rjmp	.+580    	; 0xb78 <get_uart_string+0x272>
		case 'V':
			value = (double)((double)val/1000);
     934:	bc 01       	movw	r22, r24
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	0e 94 de 06 	call	0xdbc	; 0xdbc <__floatunsisf>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	4a e7       	ldi	r20, 0x7A	; 122
     944:	54 e4       	ldi	r21, 0x44	; 68
     946:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divsf3>
     94a:	46 2f       	mov	r20, r22
     94c:	57 2f       	mov	r21, r23
     94e:	e8 2f       	mov	r30, r24
     950:	f9 2f       	mov	r31, r25
			if (val % 1000 == 0)
     952:	98 01       	movw	r18, r16
     954:	36 95       	lsr	r19
     956:	27 95       	ror	r18
     958:	36 95       	lsr	r19
     95a:	27 95       	ror	r18
     95c:	36 95       	lsr	r19
     95e:	27 95       	ror	r18
     960:	a5 ec       	ldi	r26, 0xC5	; 197
     962:	b0 e2       	ldi	r27, 0x20	; 32
     964:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__umulhisi3>
     968:	92 95       	swap	r25
     96a:	82 95       	swap	r24
     96c:	8f 70       	andi	r24, 0x0F	; 15
     96e:	89 27       	eor	r24, r25
     970:	9f 70       	andi	r25, 0x0F	; 15
     972:	89 27       	eor	r24, r25
     974:	68 ee       	ldi	r22, 0xE8	; 232
     976:	73 e0       	ldi	r23, 0x03	; 3
     978:	86 9f       	mul	r24, r22
     97a:	90 01       	movw	r18, r0
     97c:	87 9f       	mul	r24, r23
     97e:	30 0d       	add	r19, r0
     980:	96 9f       	mul	r25, r22
     982:	30 0d       	add	r19, r0
     984:	11 24       	eor	r1, r1
     986:	02 17       	cp	r16, r18
     988:	13 07       	cpc	r17, r19
     98a:	b9 f4       	brne	.+46     	; 0x9ba <get_uart_string+0xb4>
				sprintf(string, "%c=%04g\n", ident, value);
     98c:	ff 93       	push	r31
     98e:	ef 93       	push	r30
     990:	5f 93       	push	r21
     992:	4f 93       	push	r20
     994:	1f 92       	push	r1
     996:	cf 93       	push	r28
     998:	82 e2       	ldi	r24, 0x22	; 34
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	9f 93       	push	r25
     99e:	8f 93       	push	r24
     9a0:	ff 92       	push	r15
     9a2:	df 93       	push	r29
     9a4:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <sprintf>
     9a8:	8d b7       	in	r24, 0x3d	; 61
     9aa:	9e b7       	in	r25, 0x3e	; 62
     9ac:	0a 96       	adiw	r24, 0x0a	; 10
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	f8 94       	cli
     9b2:	9e bf       	out	0x3e, r25	; 62
     9b4:	0f be       	out	0x3f, r0	; 63
     9b6:	8d bf       	out	0x3d, r24	; 61
     9b8:	df c0       	rjmp	.+446    	; 0xb78 <get_uart_string+0x272>
			else
				sprintf(string, "%c=%05g\n", ident, value);
     9ba:	ff 93       	push	r31
     9bc:	ef 93       	push	r30
     9be:	5f 93       	push	r21
     9c0:	4f 93       	push	r20
     9c2:	1f 92       	push	r1
     9c4:	cf 93       	push	r28
     9c6:	8b e2       	ldi	r24, 0x2B	; 43
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	9f 93       	push	r25
     9cc:	8f 93       	push	r24
     9ce:	ff 92       	push	r15
     9d0:	df 93       	push	r29
     9d2:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <sprintf>
     9d6:	8d b7       	in	r24, 0x3d	; 61
     9d8:	9e b7       	in	r25, 0x3e	; 62
     9da:	0a 96       	adiw	r24, 0x0a	; 10
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	f8 94       	cli
     9e0:	9e bf       	out	0x3e, r25	; 62
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	8d bf       	out	0x3d, r24	; 61
     9e6:	c8 c0       	rjmp	.+400    	; 0xb78 <get_uart_string+0x272>
			break;
		case 'I':
			sprintf(string, "%c=%04u\n", ident, val);
     9e8:	1f 93       	push	r17
     9ea:	8f 93       	push	r24
     9ec:	1f 92       	push	r1
     9ee:	4f 93       	push	r20
     9f0:	84 e3       	ldi	r24, 0x34	; 52
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	9f 93       	push	r25
     9f6:	8f 93       	push	r24
     9f8:	7f 93       	push	r23
     9fa:	6f 93       	push	r22
     9fc:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <sprintf>
			break;
     a00:	8d b7       	in	r24, 0x3d	; 61
     a02:	9e b7       	in	r25, 0x3e	; 62
     a04:	08 96       	adiw	r24, 0x08	; 8
     a06:	0f b6       	in	r0, 0x3f	; 63
     a08:	f8 94       	cli
     a0a:	9e bf       	out	0x3e, r25	; 62
     a0c:	0f be       	out	0x3f, r0	; 63
     a0e:	8d bf       	out	0x3d, r24	; 61
     a10:	b3 c0       	rjmp	.+358    	; 0xb78 <get_uart_string+0x272>
		case 'F':
			value = (double)((double)val/1000);
     a12:	bc 01       	movw	r22, r24
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 de 06 	call	0xdbc	; 0xdbc <__floatunsisf>
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	4a e7       	ldi	r20, 0x7A	; 122
     a22:	54 e4       	ldi	r21, 0x44	; 68
     a24:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divsf3>
     a28:	46 2f       	mov	r20, r22
     a2a:	57 2f       	mov	r21, r23
     a2c:	e8 2f       	mov	r30, r24
     a2e:	f9 2f       	mov	r31, r25
			if (val % 1000 == 0)
     a30:	98 01       	movw	r18, r16
     a32:	36 95       	lsr	r19
     a34:	27 95       	ror	r18
     a36:	36 95       	lsr	r19
     a38:	27 95       	ror	r18
     a3a:	36 95       	lsr	r19
     a3c:	27 95       	ror	r18
     a3e:	a5 ec       	ldi	r26, 0xC5	; 197
     a40:	b0 e2       	ldi	r27, 0x20	; 32
     a42:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__umulhisi3>
     a46:	92 95       	swap	r25
     a48:	82 95       	swap	r24
     a4a:	8f 70       	andi	r24, 0x0F	; 15
     a4c:	89 27       	eor	r24, r25
     a4e:	9f 70       	andi	r25, 0x0F	; 15
     a50:	89 27       	eor	r24, r25
     a52:	68 ee       	ldi	r22, 0xE8	; 232
     a54:	73 e0       	ldi	r23, 0x03	; 3
     a56:	86 9f       	mul	r24, r22
     a58:	90 01       	movw	r18, r0
     a5a:	87 9f       	mul	r24, r23
     a5c:	30 0d       	add	r19, r0
     a5e:	96 9f       	mul	r25, r22
     a60:	30 0d       	add	r19, r0
     a62:	11 24       	eor	r1, r1
     a64:	02 17       	cp	r16, r18
     a66:	13 07       	cpc	r17, r19
     a68:	b9 f4       	brne	.+46     	; 0xa98 <get_uart_string+0x192>
				sprintf(string, "%c=%04g\n", ident, value);
     a6a:	ff 93       	push	r31
     a6c:	ef 93       	push	r30
     a6e:	5f 93       	push	r21
     a70:	4f 93       	push	r20
     a72:	1f 92       	push	r1
     a74:	cf 93       	push	r28
     a76:	82 e2       	ldi	r24, 0x22	; 34
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	9f 93       	push	r25
     a7c:	8f 93       	push	r24
     a7e:	ff 92       	push	r15
     a80:	df 93       	push	r29
     a82:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <sprintf>
     a86:	8d b7       	in	r24, 0x3d	; 61
     a88:	9e b7       	in	r25, 0x3e	; 62
     a8a:	0a 96       	adiw	r24, 0x0a	; 10
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	9e bf       	out	0x3e, r25	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	8d bf       	out	0x3d, r24	; 61
     a96:	70 c0       	rjmp	.+224    	; 0xb78 <get_uart_string+0x272>
			else
				sprintf(string, "%c=%05g\n", ident, value);
     a98:	ff 93       	push	r31
     a9a:	ef 93       	push	r30
     a9c:	5f 93       	push	r21
     a9e:	4f 93       	push	r20
     aa0:	1f 92       	push	r1
     aa2:	cf 93       	push	r28
     aa4:	8b e2       	ldi	r24, 0x2B	; 43
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	9f 93       	push	r25
     aaa:	8f 93       	push	r24
     aac:	ff 92       	push	r15
     aae:	df 93       	push	r29
     ab0:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <sprintf>
     ab4:	8d b7       	in	r24, 0x3d	; 61
     ab6:	9e b7       	in	r25, 0x3e	; 62
     ab8:	0a 96       	adiw	r24, 0x0a	; 10
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	f8 94       	cli
     abe:	9e bf       	out	0x3e, r25	; 62
     ac0:	0f be       	out	0x3f, r0	; 63
     ac2:	8d bf       	out	0x3d, r24	; 61
     ac4:	59 c0       	rjmp	.+178    	; 0xb78 <get_uart_string+0x272>
			break;
		case 'P':
			value = (double)((double)val/1000);
     ac6:	bc 01       	movw	r22, r24
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 de 06 	call	0xdbc	; 0xdbc <__floatunsisf>
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	4a e7       	ldi	r20, 0x7A	; 122
     ad6:	54 e4       	ldi	r21, 0x44	; 68
     ad8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <__divsf3>
     adc:	46 2f       	mov	r20, r22
     ade:	57 2f       	mov	r21, r23
     ae0:	e8 2f       	mov	r30, r24
     ae2:	f9 2f       	mov	r31, r25
			if (val % 1000 == 0)
     ae4:	98 01       	movw	r18, r16
     ae6:	36 95       	lsr	r19
     ae8:	27 95       	ror	r18
     aea:	36 95       	lsr	r19
     aec:	27 95       	ror	r18
     aee:	36 95       	lsr	r19
     af0:	27 95       	ror	r18
     af2:	a5 ec       	ldi	r26, 0xC5	; 197
     af4:	b0 e2       	ldi	r27, 0x20	; 32
     af6:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <__umulhisi3>
     afa:	92 95       	swap	r25
     afc:	82 95       	swap	r24
     afe:	8f 70       	andi	r24, 0x0F	; 15
     b00:	89 27       	eor	r24, r25
     b02:	9f 70       	andi	r25, 0x0F	; 15
     b04:	89 27       	eor	r24, r25
     b06:	68 ee       	ldi	r22, 0xE8	; 232
     b08:	73 e0       	ldi	r23, 0x03	; 3
     b0a:	86 9f       	mul	r24, r22
     b0c:	90 01       	movw	r18, r0
     b0e:	87 9f       	mul	r24, r23
     b10:	30 0d       	add	r19, r0
     b12:	96 9f       	mul	r25, r22
     b14:	30 0d       	add	r19, r0
     b16:	11 24       	eor	r1, r1
     b18:	02 17       	cp	r16, r18
     b1a:	13 07       	cpc	r17, r19
     b1c:	b9 f4       	brne	.+46     	; 0xb4c <get_uart_string+0x246>
				sprintf(string, "%c=%04g\n", ident, value);
     b1e:	ff 93       	push	r31
     b20:	ef 93       	push	r30
     b22:	5f 93       	push	r21
     b24:	4f 93       	push	r20
     b26:	1f 92       	push	r1
     b28:	cf 93       	push	r28
     b2a:	82 e2       	ldi	r24, 0x22	; 34
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	9f 93       	push	r25
     b30:	8f 93       	push	r24
     b32:	ff 92       	push	r15
     b34:	df 93       	push	r29
     b36:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <sprintf>
     b3a:	8d b7       	in	r24, 0x3d	; 61
     b3c:	9e b7       	in	r25, 0x3e	; 62
     b3e:	0a 96       	adiw	r24, 0x0a	; 10
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	9e bf       	out	0x3e, r25	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	8d bf       	out	0x3d, r24	; 61
     b4a:	16 c0       	rjmp	.+44     	; 0xb78 <get_uart_string+0x272>
			else
				sprintf(string, "%c=%05g\n", ident, value);
     b4c:	ff 93       	push	r31
     b4e:	ef 93       	push	r30
     b50:	5f 93       	push	r21
     b52:	4f 93       	push	r20
     b54:	1f 92       	push	r1
     b56:	cf 93       	push	r28
     b58:	8b e2       	ldi	r24, 0x2B	; 43
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	9f 93       	push	r25
     b5e:	8f 93       	push	r24
     b60:	ff 92       	push	r15
     b62:	df 93       	push	r29
     b64:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <sprintf>
     b68:	8d b7       	in	r24, 0x3d	; 61
     b6a:	9e b7       	in	r25, 0x3e	; 62
     b6c:	0a 96       	adiw	r24, 0x0a	; 10
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	9e bf       	out	0x3e, r25	; 62
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	8d bf       	out	0x3d, r24	; 61
			break;
	}
}
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ff 90       	pop	r15
     b82:	08 95       	ret

00000b84 <calculateUBRR>:

// calculate corrext ubrr
uint16_t calculateUBRR(uint16_t baud)
{
	return (uint16_t)(F_CPU/(16*(unsigned long)baud) - 1);
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	88 0f       	add	r24, r24
     b8a:	99 1f       	adc	r25, r25
     b8c:	aa 1f       	adc	r26, r26
     b8e:	bb 1f       	adc	r27, r27
     b90:	88 0f       	add	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	aa 1f       	adc	r26, r26
     b96:	bb 1f       	adc	r27, r27
     b98:	9c 01       	movw	r18, r24
     b9a:	ad 01       	movw	r20, r26
     b9c:	22 0f       	add	r18, r18
     b9e:	33 1f       	adc	r19, r19
     ba0:	44 1f       	adc	r20, r20
     ba2:	55 1f       	adc	r21, r21
     ba4:	22 0f       	add	r18, r18
     ba6:	33 1f       	adc	r19, r19
     ba8:	44 1f       	adc	r20, r20
     baa:	55 1f       	adc	r21, r21
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	74 e2       	ldi	r23, 0x24	; 36
     bb0:	84 ef       	ldi	r24, 0xF4	; 244
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <__udivmodsi4>
}
     bb8:	c9 01       	movw	r24, r18
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	08 95       	ret

00000bbe <uart_init>:

// uart init function
void uart_init(uint16_t baud)
{	
	uint16_t ubrr = calculateUBRR(baud);
     bbe:	0e 94 c2 05 	call	0xb84	; 0xb84 <calculateUBRR>
     bc2:	9c 01       	movw	r18, r24
	// Enable TX and RX
	UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
     bc4:	e1 ec       	ldi	r30, 0xC1	; 193
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	90 81       	ld	r25, Z
     bca:	98 61       	ori	r25, 0x18	; 24
     bcc:	90 83       	st	Z, r25
	// set character size to 8-bit
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
     bce:	e2 ec       	ldi	r30, 0xC2	; 194
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	90 81       	ld	r25, Z
     bd4:	96 60       	ori	r25, 0x06	; 6
     bd6:	90 83       	st	Z, r25
	UCSR0C &= ~(1<<UPM00);
     bd8:	90 81       	ld	r25, Z
     bda:	9f 7e       	andi	r25, 0xEF	; 239
     bdc:	90 83       	st	Z, r25
	UCSR0C &= ~(1<<UPM01);
     bde:	90 81       	ld	r25, Z
     be0:	9f 7d       	andi	r25, 0xDF	; 223
     be2:	90 83       	st	Z, r25
	// Set the baud rate
	UBRR0 = ubrr;
     be4:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     be8:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     bec:	08 95       	ret

00000bee <uart_transmit>:

// uart transmit function
void uart_transmit(uint8_t data)
{
	// wait until transmitter is ready
	while ((1<<UDRE0 & UCSR0A) == 0x00) {;} // do nothing
     bee:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     bf2:	95 ff       	sbrs	r25, 5
     bf4:	fc cf       	rjmp	.-8      	; 0xbee <uart_transmit>
	// transmit data
	UDR0 = data;
     bf6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     bfa:	08 95       	ret

00000bfc <uart_write>:
}

// uart write function
// write multiple characters at once
void uart_write(char *data) 
{
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	8c 01       	movw	r16, r24
	int i = 0;
     c06:	c0 e0       	ldi	r28, 0x00	; 0
     c08:	d0 e0       	ldi	r29, 0x00	; 0
	while (data[i] != '\0') {
     c0a:	03 c0       	rjmp	.+6      	; 0xc12 <uart_write+0x16>
		uart_transmit(data[i]);
     c0c:	0e 94 f7 05 	call	0xbee	; 0xbee <uart_transmit>
		i++;
     c10:	21 96       	adiw	r28, 0x01	; 1
// uart write function
// write multiple characters at once
void uart_write(char *data) 
{
	int i = 0;
	while (data[i] != '\0') {
     c12:	f8 01       	movw	r30, r16
     c14:	ec 0f       	add	r30, r28
     c16:	fd 1f       	adc	r31, r29
     c18:	80 81       	ld	r24, Z
     c1a:	81 11       	cpse	r24, r1
     c1c:	f7 cf       	rjmp	.-18     	; 0xc0c <uart_write+0x10>
		uart_transmit(data[i]);
		i++;
	}
}
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	08 95       	ret

00000c28 <main>:

// finite state machines
#include "lib/fsm.h"

int main(void) 
{
     c28:	cf 93       	push	r28
     c2a:	df 93       	push	r29
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	a2 97       	sbiw	r28, 0x22	; 34
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	de bf       	out	0x3e, r29	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	cd bf       	out	0x3d, r28	; 61
	// create function pointer struct
	struct functionPointers funcs = {
     c3c:	82 e2       	ldi	r24, 0x22	; 34
     c3e:	e0 e0       	ldi	r30, 0x00	; 0
     c40:	f1 e0       	ldi	r31, 0x01	; 1
     c42:	de 01       	movw	r26, r28
     c44:	11 96       	adiw	r26, 0x01	; 1
     c46:	01 90       	ld	r0, Z+
     c48:	0d 92       	st	X+, r0
     c4a:	8a 95       	dec	r24
     c4c:	e1 f7       	brne	.-8      	; 0xc46 <main+0x1e>
		.calculate_average_power = calculateAveragePower,
	};
	
	
	// init fsm by passing structs to it
	fsmInit(&funcs);
     c4e:	ce 01       	movw	r24, r28
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	0e 94 3a 01 	call	0x274	; 0x274 <fsmInit>
	
	run();
     c56:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <run>
}
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	a2 96       	adiw	r28, 0x22	; 34
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	08 95       	ret

00000c70 <cos>:
     c70:	0e 94 34 07 	call	0xe68	; 0xe68 <__fp_rempio2>
     c74:	e3 95       	inc	r30
     c76:	0c 94 6e 07 	jmp	0xedc	; 0xedc <__fp_sinus>

00000c7a <__divsf3>:
     c7a:	0e 94 51 06 	call	0xca2	; 0xca2 <__divsf3x>
     c7e:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_round>
     c82:	0e 94 2b 07 	call	0xe56	; 0xe56 <__fp_pscB>
     c86:	58 f0       	brcs	.+22     	; 0xc9e <__divsf3+0x24>
     c88:	0e 94 24 07 	call	0xe48	; 0xe48 <__fp_pscA>
     c8c:	40 f0       	brcs	.+16     	; 0xc9e <__divsf3+0x24>
     c8e:	29 f4       	brne	.+10     	; 0xc9a <__divsf3+0x20>
     c90:	5f 3f       	cpi	r21, 0xFF	; 255
     c92:	29 f0       	breq	.+10     	; 0xc9e <__divsf3+0x24>
     c94:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__fp_inf>
     c98:	51 11       	cpse	r21, r1
     c9a:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_szero>
     c9e:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__fp_nan>

00000ca2 <__divsf3x>:
     ca2:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_split3>
     ca6:	68 f3       	brcs	.-38     	; 0xc82 <__divsf3+0x8>

00000ca8 <__divsf3_pse>:
     ca8:	99 23       	and	r25, r25
     caa:	b1 f3       	breq	.-20     	; 0xc98 <__divsf3+0x1e>
     cac:	55 23       	and	r21, r21
     cae:	91 f3       	breq	.-28     	; 0xc94 <__divsf3+0x1a>
     cb0:	95 1b       	sub	r25, r21
     cb2:	55 0b       	sbc	r21, r21
     cb4:	bb 27       	eor	r27, r27
     cb6:	aa 27       	eor	r26, r26
     cb8:	62 17       	cp	r22, r18
     cba:	73 07       	cpc	r23, r19
     cbc:	84 07       	cpc	r24, r20
     cbe:	38 f0       	brcs	.+14     	; 0xcce <__divsf3_pse+0x26>
     cc0:	9f 5f       	subi	r25, 0xFF	; 255
     cc2:	5f 4f       	sbci	r21, 0xFF	; 255
     cc4:	22 0f       	add	r18, r18
     cc6:	33 1f       	adc	r19, r19
     cc8:	44 1f       	adc	r20, r20
     cca:	aa 1f       	adc	r26, r26
     ccc:	a9 f3       	breq	.-22     	; 0xcb8 <__divsf3_pse+0x10>
     cce:	35 d0       	rcall	.+106    	; 0xd3a <__divsf3_pse+0x92>
     cd0:	0e 2e       	mov	r0, r30
     cd2:	3a f0       	brmi	.+14     	; 0xce2 <__divsf3_pse+0x3a>
     cd4:	e0 e8       	ldi	r30, 0x80	; 128
     cd6:	32 d0       	rcall	.+100    	; 0xd3c <__divsf3_pse+0x94>
     cd8:	91 50       	subi	r25, 0x01	; 1
     cda:	50 40       	sbci	r21, 0x00	; 0
     cdc:	e6 95       	lsr	r30
     cde:	00 1c       	adc	r0, r0
     ce0:	ca f7       	brpl	.-14     	; 0xcd4 <__divsf3_pse+0x2c>
     ce2:	2b d0       	rcall	.+86     	; 0xd3a <__divsf3_pse+0x92>
     ce4:	fe 2f       	mov	r31, r30
     ce6:	29 d0       	rcall	.+82     	; 0xd3a <__divsf3_pse+0x92>
     ce8:	66 0f       	add	r22, r22
     cea:	77 1f       	adc	r23, r23
     cec:	88 1f       	adc	r24, r24
     cee:	bb 1f       	adc	r27, r27
     cf0:	26 17       	cp	r18, r22
     cf2:	37 07       	cpc	r19, r23
     cf4:	48 07       	cpc	r20, r24
     cf6:	ab 07       	cpc	r26, r27
     cf8:	b0 e8       	ldi	r27, 0x80	; 128
     cfa:	09 f0       	breq	.+2      	; 0xcfe <__divsf3_pse+0x56>
     cfc:	bb 0b       	sbc	r27, r27
     cfe:	80 2d       	mov	r24, r0
     d00:	bf 01       	movw	r22, r30
     d02:	ff 27       	eor	r31, r31
     d04:	93 58       	subi	r25, 0x83	; 131
     d06:	5f 4f       	sbci	r21, 0xFF	; 255
     d08:	3a f0       	brmi	.+14     	; 0xd18 <__divsf3_pse+0x70>
     d0a:	9e 3f       	cpi	r25, 0xFE	; 254
     d0c:	51 05       	cpc	r21, r1
     d0e:	78 f0       	brcs	.+30     	; 0xd2e <__divsf3_pse+0x86>
     d10:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__fp_inf>
     d14:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_szero>
     d18:	5f 3f       	cpi	r21, 0xFF	; 255
     d1a:	e4 f3       	brlt	.-8      	; 0xd14 <__divsf3_pse+0x6c>
     d1c:	98 3e       	cpi	r25, 0xE8	; 232
     d1e:	d4 f3       	brlt	.-12     	; 0xd14 <__divsf3_pse+0x6c>
     d20:	86 95       	lsr	r24
     d22:	77 95       	ror	r23
     d24:	67 95       	ror	r22
     d26:	b7 95       	ror	r27
     d28:	f7 95       	ror	r31
     d2a:	9f 5f       	subi	r25, 0xFF	; 255
     d2c:	c9 f7       	brne	.-14     	; 0xd20 <__divsf3_pse+0x78>
     d2e:	88 0f       	add	r24, r24
     d30:	91 1d       	adc	r25, r1
     d32:	96 95       	lsr	r25
     d34:	87 95       	ror	r24
     d36:	97 f9       	bld	r25, 7
     d38:	08 95       	ret
     d3a:	e1 e0       	ldi	r30, 0x01	; 1
     d3c:	66 0f       	add	r22, r22
     d3e:	77 1f       	adc	r23, r23
     d40:	88 1f       	adc	r24, r24
     d42:	bb 1f       	adc	r27, r27
     d44:	62 17       	cp	r22, r18
     d46:	73 07       	cpc	r23, r19
     d48:	84 07       	cpc	r24, r20
     d4a:	ba 07       	cpc	r27, r26
     d4c:	20 f0       	brcs	.+8      	; 0xd56 <__divsf3_pse+0xae>
     d4e:	62 1b       	sub	r22, r18
     d50:	73 0b       	sbc	r23, r19
     d52:	84 0b       	sbc	r24, r20
     d54:	ba 0b       	sbc	r27, r26
     d56:	ee 1f       	adc	r30, r30
     d58:	88 f7       	brcc	.-30     	; 0xd3c <__divsf3_pse+0x94>
     d5a:	e0 95       	com	r30
     d5c:	08 95       	ret

00000d5e <__fixunssfsi>:
     d5e:	0e 94 8a 07 	call	0xf14	; 0xf14 <__fp_splitA>
     d62:	88 f0       	brcs	.+34     	; 0xd86 <__fixunssfsi+0x28>
     d64:	9f 57       	subi	r25, 0x7F	; 127
     d66:	98 f0       	brcs	.+38     	; 0xd8e <__fixunssfsi+0x30>
     d68:	b9 2f       	mov	r27, r25
     d6a:	99 27       	eor	r25, r25
     d6c:	b7 51       	subi	r27, 0x17	; 23
     d6e:	b0 f0       	brcs	.+44     	; 0xd9c <__fixunssfsi+0x3e>
     d70:	e1 f0       	breq	.+56     	; 0xdaa <__fixunssfsi+0x4c>
     d72:	66 0f       	add	r22, r22
     d74:	77 1f       	adc	r23, r23
     d76:	88 1f       	adc	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	1a f0       	brmi	.+6      	; 0xd82 <__fixunssfsi+0x24>
     d7c:	ba 95       	dec	r27
     d7e:	c9 f7       	brne	.-14     	; 0xd72 <__fixunssfsi+0x14>
     d80:	14 c0       	rjmp	.+40     	; 0xdaa <__fixunssfsi+0x4c>
     d82:	b1 30       	cpi	r27, 0x01	; 1
     d84:	91 f0       	breq	.+36     	; 0xdaa <__fixunssfsi+0x4c>
     d86:	0e 94 a4 07 	call	0xf48	; 0xf48 <__fp_zero>
     d8a:	b1 e0       	ldi	r27, 0x01	; 1
     d8c:	08 95       	ret
     d8e:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__fp_zero>
     d92:	67 2f       	mov	r22, r23
     d94:	78 2f       	mov	r23, r24
     d96:	88 27       	eor	r24, r24
     d98:	b8 5f       	subi	r27, 0xF8	; 248
     d9a:	39 f0       	breq	.+14     	; 0xdaa <__fixunssfsi+0x4c>
     d9c:	b9 3f       	cpi	r27, 0xF9	; 249
     d9e:	cc f3       	brlt	.-14     	; 0xd92 <__fixunssfsi+0x34>
     da0:	86 95       	lsr	r24
     da2:	77 95       	ror	r23
     da4:	67 95       	ror	r22
     da6:	b3 95       	inc	r27
     da8:	d9 f7       	brne	.-10     	; 0xda0 <__fixunssfsi+0x42>
     daa:	3e f4       	brtc	.+14     	; 0xdba <__fixunssfsi+0x5c>
     dac:	90 95       	com	r25
     dae:	80 95       	com	r24
     db0:	70 95       	com	r23
     db2:	61 95       	neg	r22
     db4:	7f 4f       	sbci	r23, 0xFF	; 255
     db6:	8f 4f       	sbci	r24, 0xFF	; 255
     db8:	9f 4f       	sbci	r25, 0xFF	; 255
     dba:	08 95       	ret

00000dbc <__floatunsisf>:
     dbc:	e8 94       	clt
     dbe:	09 c0       	rjmp	.+18     	; 0xdd2 <__floatsisf+0x12>

00000dc0 <__floatsisf>:
     dc0:	97 fb       	bst	r25, 7
     dc2:	3e f4       	brtc	.+14     	; 0xdd2 <__floatsisf+0x12>
     dc4:	90 95       	com	r25
     dc6:	80 95       	com	r24
     dc8:	70 95       	com	r23
     dca:	61 95       	neg	r22
     dcc:	7f 4f       	sbci	r23, 0xFF	; 255
     dce:	8f 4f       	sbci	r24, 0xFF	; 255
     dd0:	9f 4f       	sbci	r25, 0xFF	; 255
     dd2:	99 23       	and	r25, r25
     dd4:	a9 f0       	breq	.+42     	; 0xe00 <__floatsisf+0x40>
     dd6:	f9 2f       	mov	r31, r25
     dd8:	96 e9       	ldi	r25, 0x96	; 150
     dda:	bb 27       	eor	r27, r27
     ddc:	93 95       	inc	r25
     dde:	f6 95       	lsr	r31
     de0:	87 95       	ror	r24
     de2:	77 95       	ror	r23
     de4:	67 95       	ror	r22
     de6:	b7 95       	ror	r27
     de8:	f1 11       	cpse	r31, r1
     dea:	f8 cf       	rjmp	.-16     	; 0xddc <__floatsisf+0x1c>
     dec:	fa f4       	brpl	.+62     	; 0xe2c <__floatsisf+0x6c>
     dee:	bb 0f       	add	r27, r27
     df0:	11 f4       	brne	.+4      	; 0xdf6 <__floatsisf+0x36>
     df2:	60 ff       	sbrs	r22, 0
     df4:	1b c0       	rjmp	.+54     	; 0xe2c <__floatsisf+0x6c>
     df6:	6f 5f       	subi	r22, 0xFF	; 255
     df8:	7f 4f       	sbci	r23, 0xFF	; 255
     dfa:	8f 4f       	sbci	r24, 0xFF	; 255
     dfc:	9f 4f       	sbci	r25, 0xFF	; 255
     dfe:	16 c0       	rjmp	.+44     	; 0xe2c <__floatsisf+0x6c>
     e00:	88 23       	and	r24, r24
     e02:	11 f0       	breq	.+4      	; 0xe08 <__floatsisf+0x48>
     e04:	96 e9       	ldi	r25, 0x96	; 150
     e06:	11 c0       	rjmp	.+34     	; 0xe2a <__floatsisf+0x6a>
     e08:	77 23       	and	r23, r23
     e0a:	21 f0       	breq	.+8      	; 0xe14 <__floatsisf+0x54>
     e0c:	9e e8       	ldi	r25, 0x8E	; 142
     e0e:	87 2f       	mov	r24, r23
     e10:	76 2f       	mov	r23, r22
     e12:	05 c0       	rjmp	.+10     	; 0xe1e <__floatsisf+0x5e>
     e14:	66 23       	and	r22, r22
     e16:	71 f0       	breq	.+28     	; 0xe34 <__floatsisf+0x74>
     e18:	96 e8       	ldi	r25, 0x86	; 134
     e1a:	86 2f       	mov	r24, r22
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	2a f0       	brmi	.+10     	; 0xe2c <__floatsisf+0x6c>
     e22:	9a 95       	dec	r25
     e24:	66 0f       	add	r22, r22
     e26:	77 1f       	adc	r23, r23
     e28:	88 1f       	adc	r24, r24
     e2a:	da f7       	brpl	.-10     	; 0xe22 <__floatsisf+0x62>
     e2c:	88 0f       	add	r24, r24
     e2e:	96 95       	lsr	r25
     e30:	87 95       	ror	r24
     e32:	97 f9       	bld	r25, 7
     e34:	08 95       	ret

00000e36 <__fp_inf>:
     e36:	97 f9       	bld	r25, 7
     e38:	9f 67       	ori	r25, 0x7F	; 127
     e3a:	80 e8       	ldi	r24, 0x80	; 128
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	08 95       	ret

00000e42 <__fp_nan>:
     e42:	9f ef       	ldi	r25, 0xFF	; 255
     e44:	80 ec       	ldi	r24, 0xC0	; 192
     e46:	08 95       	ret

00000e48 <__fp_pscA>:
     e48:	00 24       	eor	r0, r0
     e4a:	0a 94       	dec	r0
     e4c:	16 16       	cp	r1, r22
     e4e:	17 06       	cpc	r1, r23
     e50:	18 06       	cpc	r1, r24
     e52:	09 06       	cpc	r0, r25
     e54:	08 95       	ret

00000e56 <__fp_pscB>:
     e56:	00 24       	eor	r0, r0
     e58:	0a 94       	dec	r0
     e5a:	12 16       	cp	r1, r18
     e5c:	13 06       	cpc	r1, r19
     e5e:	14 06       	cpc	r1, r20
     e60:	05 06       	cpc	r0, r21
     e62:	08 95       	ret
     e64:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__fp_nan>

00000e68 <__fp_rempio2>:
     e68:	0e 94 8a 07 	call	0xf14	; 0xf14 <__fp_splitA>
     e6c:	d8 f3       	brcs	.-10     	; 0xe64 <__fp_pscB+0xe>
     e6e:	e8 94       	clt
     e70:	e0 e0       	ldi	r30, 0x00	; 0
     e72:	bb 27       	eor	r27, r27
     e74:	9f 57       	subi	r25, 0x7F	; 127
     e76:	f0 f0       	brcs	.+60     	; 0xeb4 <__fp_rempio2+0x4c>
     e78:	2a ed       	ldi	r18, 0xDA	; 218
     e7a:	3f e0       	ldi	r19, 0x0F	; 15
     e7c:	49 ec       	ldi	r20, 0xC9	; 201
     e7e:	06 c0       	rjmp	.+12     	; 0xe8c <__fp_rempio2+0x24>
     e80:	ee 0f       	add	r30, r30
     e82:	bb 0f       	add	r27, r27
     e84:	66 1f       	adc	r22, r22
     e86:	77 1f       	adc	r23, r23
     e88:	88 1f       	adc	r24, r24
     e8a:	28 f0       	brcs	.+10     	; 0xe96 <__fp_rempio2+0x2e>
     e8c:	b2 3a       	cpi	r27, 0xA2	; 162
     e8e:	62 07       	cpc	r22, r18
     e90:	73 07       	cpc	r23, r19
     e92:	84 07       	cpc	r24, r20
     e94:	28 f0       	brcs	.+10     	; 0xea0 <__fp_rempio2+0x38>
     e96:	b2 5a       	subi	r27, 0xA2	; 162
     e98:	62 0b       	sbc	r22, r18
     e9a:	73 0b       	sbc	r23, r19
     e9c:	84 0b       	sbc	r24, r20
     e9e:	e3 95       	inc	r30
     ea0:	9a 95       	dec	r25
     ea2:	72 f7       	brpl	.-36     	; 0xe80 <__fp_rempio2+0x18>
     ea4:	80 38       	cpi	r24, 0x80	; 128
     ea6:	30 f4       	brcc	.+12     	; 0xeb4 <__fp_rempio2+0x4c>
     ea8:	9a 95       	dec	r25
     eaa:	bb 0f       	add	r27, r27
     eac:	66 1f       	adc	r22, r22
     eae:	77 1f       	adc	r23, r23
     eb0:	88 1f       	adc	r24, r24
     eb2:	d2 f7       	brpl	.-12     	; 0xea8 <__fp_rempio2+0x40>
     eb4:	90 48       	sbci	r25, 0x80	; 128
     eb6:	0c 94 80 08 	jmp	0x1100	; 0x1100 <__fp_mpack_finite>

00000eba <__fp_round>:
     eba:	09 2e       	mov	r0, r25
     ebc:	03 94       	inc	r0
     ebe:	00 0c       	add	r0, r0
     ec0:	11 f4       	brne	.+4      	; 0xec6 <__fp_round+0xc>
     ec2:	88 23       	and	r24, r24
     ec4:	52 f0       	brmi	.+20     	; 0xeda <__fp_round+0x20>
     ec6:	bb 0f       	add	r27, r27
     ec8:	40 f4       	brcc	.+16     	; 0xeda <__fp_round+0x20>
     eca:	bf 2b       	or	r27, r31
     ecc:	11 f4       	brne	.+4      	; 0xed2 <__fp_round+0x18>
     ece:	60 ff       	sbrs	r22, 0
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <__fp_round+0x20>
     ed2:	6f 5f       	subi	r22, 0xFF	; 255
     ed4:	7f 4f       	sbci	r23, 0xFF	; 255
     ed6:	8f 4f       	sbci	r24, 0xFF	; 255
     ed8:	9f 4f       	sbci	r25, 0xFF	; 255
     eda:	08 95       	ret

00000edc <__fp_sinus>:
     edc:	ef 93       	push	r30
     ede:	e0 ff       	sbrs	r30, 0
     ee0:	07 c0       	rjmp	.+14     	; 0xef0 <__fp_sinus+0x14>
     ee2:	a2 ea       	ldi	r26, 0xA2	; 162
     ee4:	2a ed       	ldi	r18, 0xDA	; 218
     ee6:	3f e0       	ldi	r19, 0x0F	; 15
     ee8:	49 ec       	ldi	r20, 0xC9	; 201
     eea:	5f eb       	ldi	r21, 0xBF	; 191
     eec:	0e 94 29 08 	call	0x1052	; 0x1052 <__addsf3x>
     ef0:	0e 94 5d 07 	call	0xeba	; 0xeba <__fp_round>
     ef4:	0f 90       	pop	r0
     ef6:	03 94       	inc	r0
     ef8:	01 fc       	sbrc	r0, 1
     efa:	90 58       	subi	r25, 0x80	; 128
     efc:	e4 eb       	ldi	r30, 0xB4	; 180
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	0c 94 b3 08 	jmp	0x1166	; 0x1166 <__fp_powsodd>

00000f04 <__fp_split3>:
     f04:	57 fd       	sbrc	r21, 7
     f06:	90 58       	subi	r25, 0x80	; 128
     f08:	44 0f       	add	r20, r20
     f0a:	55 1f       	adc	r21, r21
     f0c:	59 f0       	breq	.+22     	; 0xf24 <__fp_splitA+0x10>
     f0e:	5f 3f       	cpi	r21, 0xFF	; 255
     f10:	71 f0       	breq	.+28     	; 0xf2e <__fp_splitA+0x1a>
     f12:	47 95       	ror	r20

00000f14 <__fp_splitA>:
     f14:	88 0f       	add	r24, r24
     f16:	97 fb       	bst	r25, 7
     f18:	99 1f       	adc	r25, r25
     f1a:	61 f0       	breq	.+24     	; 0xf34 <__fp_splitA+0x20>
     f1c:	9f 3f       	cpi	r25, 0xFF	; 255
     f1e:	79 f0       	breq	.+30     	; 0xf3e <__fp_splitA+0x2a>
     f20:	87 95       	ror	r24
     f22:	08 95       	ret
     f24:	12 16       	cp	r1, r18
     f26:	13 06       	cpc	r1, r19
     f28:	14 06       	cpc	r1, r20
     f2a:	55 1f       	adc	r21, r21
     f2c:	f2 cf       	rjmp	.-28     	; 0xf12 <__fp_split3+0xe>
     f2e:	46 95       	lsr	r20
     f30:	f1 df       	rcall	.-30     	; 0xf14 <__fp_splitA>
     f32:	08 c0       	rjmp	.+16     	; 0xf44 <__fp_splitA+0x30>
     f34:	16 16       	cp	r1, r22
     f36:	17 06       	cpc	r1, r23
     f38:	18 06       	cpc	r1, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	f1 cf       	rjmp	.-30     	; 0xf20 <__fp_splitA+0xc>
     f3e:	86 95       	lsr	r24
     f40:	71 05       	cpc	r23, r1
     f42:	61 05       	cpc	r22, r1
     f44:	08 94       	sec
     f46:	08 95       	ret

00000f48 <__fp_zero>:
     f48:	e8 94       	clt

00000f4a <__fp_szero>:
     f4a:	bb 27       	eor	r27, r27
     f4c:	66 27       	eor	r22, r22
     f4e:	77 27       	eor	r23, r23
     f50:	cb 01       	movw	r24, r22
     f52:	97 f9       	bld	r25, 7
     f54:	08 95       	ret

00000f56 <__mulsf3>:
     f56:	0e 94 be 07 	call	0xf7c	; 0xf7c <__mulsf3x>
     f5a:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_round>
     f5e:	0e 94 24 07 	call	0xe48	; 0xe48 <__fp_pscA>
     f62:	38 f0       	brcs	.+14     	; 0xf72 <__mulsf3+0x1c>
     f64:	0e 94 2b 07 	call	0xe56	; 0xe56 <__fp_pscB>
     f68:	20 f0       	brcs	.+8      	; 0xf72 <__mulsf3+0x1c>
     f6a:	95 23       	and	r25, r21
     f6c:	11 f0       	breq	.+4      	; 0xf72 <__mulsf3+0x1c>
     f6e:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__fp_inf>
     f72:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__fp_nan>
     f76:	11 24       	eor	r1, r1
     f78:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_szero>

00000f7c <__mulsf3x>:
     f7c:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_split3>
     f80:	70 f3       	brcs	.-36     	; 0xf5e <__mulsf3+0x8>

00000f82 <__mulsf3_pse>:
     f82:	95 9f       	mul	r25, r21
     f84:	c1 f3       	breq	.-16     	; 0xf76 <__mulsf3+0x20>
     f86:	95 0f       	add	r25, r21
     f88:	50 e0       	ldi	r21, 0x00	; 0
     f8a:	55 1f       	adc	r21, r21
     f8c:	62 9f       	mul	r22, r18
     f8e:	f0 01       	movw	r30, r0
     f90:	72 9f       	mul	r23, r18
     f92:	bb 27       	eor	r27, r27
     f94:	f0 0d       	add	r31, r0
     f96:	b1 1d       	adc	r27, r1
     f98:	63 9f       	mul	r22, r19
     f9a:	aa 27       	eor	r26, r26
     f9c:	f0 0d       	add	r31, r0
     f9e:	b1 1d       	adc	r27, r1
     fa0:	aa 1f       	adc	r26, r26
     fa2:	64 9f       	mul	r22, r20
     fa4:	66 27       	eor	r22, r22
     fa6:	b0 0d       	add	r27, r0
     fa8:	a1 1d       	adc	r26, r1
     faa:	66 1f       	adc	r22, r22
     fac:	82 9f       	mul	r24, r18
     fae:	22 27       	eor	r18, r18
     fb0:	b0 0d       	add	r27, r0
     fb2:	a1 1d       	adc	r26, r1
     fb4:	62 1f       	adc	r22, r18
     fb6:	73 9f       	mul	r23, r19
     fb8:	b0 0d       	add	r27, r0
     fba:	a1 1d       	adc	r26, r1
     fbc:	62 1f       	adc	r22, r18
     fbe:	83 9f       	mul	r24, r19
     fc0:	a0 0d       	add	r26, r0
     fc2:	61 1d       	adc	r22, r1
     fc4:	22 1f       	adc	r18, r18
     fc6:	74 9f       	mul	r23, r20
     fc8:	33 27       	eor	r19, r19
     fca:	a0 0d       	add	r26, r0
     fcc:	61 1d       	adc	r22, r1
     fce:	23 1f       	adc	r18, r19
     fd0:	84 9f       	mul	r24, r20
     fd2:	60 0d       	add	r22, r0
     fd4:	21 1d       	adc	r18, r1
     fd6:	82 2f       	mov	r24, r18
     fd8:	76 2f       	mov	r23, r22
     fda:	6a 2f       	mov	r22, r26
     fdc:	11 24       	eor	r1, r1
     fde:	9f 57       	subi	r25, 0x7F	; 127
     fe0:	50 40       	sbci	r21, 0x00	; 0
     fe2:	9a f0       	brmi	.+38     	; 0x100a <__mulsf3_pse+0x88>
     fe4:	f1 f0       	breq	.+60     	; 0x1022 <__mulsf3_pse+0xa0>
     fe6:	88 23       	and	r24, r24
     fe8:	4a f0       	brmi	.+18     	; 0xffc <__mulsf3_pse+0x7a>
     fea:	ee 0f       	add	r30, r30
     fec:	ff 1f       	adc	r31, r31
     fee:	bb 1f       	adc	r27, r27
     ff0:	66 1f       	adc	r22, r22
     ff2:	77 1f       	adc	r23, r23
     ff4:	88 1f       	adc	r24, r24
     ff6:	91 50       	subi	r25, 0x01	; 1
     ff8:	50 40       	sbci	r21, 0x00	; 0
     ffa:	a9 f7       	brne	.-22     	; 0xfe6 <__mulsf3_pse+0x64>
     ffc:	9e 3f       	cpi	r25, 0xFE	; 254
     ffe:	51 05       	cpc	r21, r1
    1000:	80 f0       	brcs	.+32     	; 0x1022 <__mulsf3_pse+0xa0>
    1002:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__fp_inf>
    1006:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_szero>
    100a:	5f 3f       	cpi	r21, 0xFF	; 255
    100c:	e4 f3       	brlt	.-8      	; 0x1006 <__mulsf3_pse+0x84>
    100e:	98 3e       	cpi	r25, 0xE8	; 232
    1010:	d4 f3       	brlt	.-12     	; 0x1006 <__mulsf3_pse+0x84>
    1012:	86 95       	lsr	r24
    1014:	77 95       	ror	r23
    1016:	67 95       	ror	r22
    1018:	b7 95       	ror	r27
    101a:	f7 95       	ror	r31
    101c:	e7 95       	ror	r30
    101e:	9f 5f       	subi	r25, 0xFF	; 255
    1020:	c1 f7       	brne	.-16     	; 0x1012 <__mulsf3_pse+0x90>
    1022:	fe 2b       	or	r31, r30
    1024:	88 0f       	add	r24, r24
    1026:	91 1d       	adc	r25, r1
    1028:	96 95       	lsr	r25
    102a:	87 95       	ror	r24
    102c:	97 f9       	bld	r25, 7
    102e:	08 95       	ret
    1030:	0e 94 24 07 	call	0xe48	; 0xe48 <__fp_pscA>
    1034:	38 f0       	brcs	.+14     	; 0x1044 <__mulsf3_pse+0xc2>
    1036:	0e 94 2b 07 	call	0xe56	; 0xe56 <__fp_pscB>
    103a:	20 f0       	brcs	.+8      	; 0x1044 <__mulsf3_pse+0xc2>
    103c:	39 f4       	brne	.+14     	; 0x104c <__mulsf3_pse+0xca>
    103e:	9f 3f       	cpi	r25, 0xFF	; 255
    1040:	19 f4       	brne	.+6      	; 0x1048 <__mulsf3_pse+0xc6>
    1042:	26 f4       	brtc	.+8      	; 0x104c <__mulsf3_pse+0xca>
    1044:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__fp_nan>
    1048:	0e f4       	brtc	.+2      	; 0x104c <__mulsf3_pse+0xca>
    104a:	e0 95       	com	r30
    104c:	e7 fb       	bst	r30, 7
    104e:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__fp_inf>

00001052 <__addsf3x>:
    1052:	e9 2f       	mov	r30, r25
    1054:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_split3>
    1058:	58 f3       	brcs	.-42     	; 0x1030 <__mulsf3_pse+0xae>
    105a:	ba 17       	cp	r27, r26
    105c:	62 07       	cpc	r22, r18
    105e:	73 07       	cpc	r23, r19
    1060:	84 07       	cpc	r24, r20
    1062:	95 07       	cpc	r25, r21
    1064:	20 f0       	brcs	.+8      	; 0x106e <__addsf3x+0x1c>
    1066:	79 f4       	brne	.+30     	; 0x1086 <__addsf3x+0x34>
    1068:	a6 f5       	brtc	.+104    	; 0x10d2 <__addsf3x+0x80>
    106a:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__fp_zero>
    106e:	0e f4       	brtc	.+2      	; 0x1072 <__addsf3x+0x20>
    1070:	e0 95       	com	r30
    1072:	0b 2e       	mov	r0, r27
    1074:	ba 2f       	mov	r27, r26
    1076:	a0 2d       	mov	r26, r0
    1078:	0b 01       	movw	r0, r22
    107a:	b9 01       	movw	r22, r18
    107c:	90 01       	movw	r18, r0
    107e:	0c 01       	movw	r0, r24
    1080:	ca 01       	movw	r24, r20
    1082:	a0 01       	movw	r20, r0
    1084:	11 24       	eor	r1, r1
    1086:	ff 27       	eor	r31, r31
    1088:	59 1b       	sub	r21, r25
    108a:	99 f0       	breq	.+38     	; 0x10b2 <__addsf3x+0x60>
    108c:	59 3f       	cpi	r21, 0xF9	; 249
    108e:	50 f4       	brcc	.+20     	; 0x10a4 <__addsf3x+0x52>
    1090:	50 3e       	cpi	r21, 0xE0	; 224
    1092:	68 f1       	brcs	.+90     	; 0x10ee <__addsf3x+0x9c>
    1094:	1a 16       	cp	r1, r26
    1096:	f0 40       	sbci	r31, 0x00	; 0
    1098:	a2 2f       	mov	r26, r18
    109a:	23 2f       	mov	r18, r19
    109c:	34 2f       	mov	r19, r20
    109e:	44 27       	eor	r20, r20
    10a0:	58 5f       	subi	r21, 0xF8	; 248
    10a2:	f3 cf       	rjmp	.-26     	; 0x108a <__addsf3x+0x38>
    10a4:	46 95       	lsr	r20
    10a6:	37 95       	ror	r19
    10a8:	27 95       	ror	r18
    10aa:	a7 95       	ror	r26
    10ac:	f0 40       	sbci	r31, 0x00	; 0
    10ae:	53 95       	inc	r21
    10b0:	c9 f7       	brne	.-14     	; 0x10a4 <__addsf3x+0x52>
    10b2:	7e f4       	brtc	.+30     	; 0x10d2 <__addsf3x+0x80>
    10b4:	1f 16       	cp	r1, r31
    10b6:	ba 0b       	sbc	r27, r26
    10b8:	62 0b       	sbc	r22, r18
    10ba:	73 0b       	sbc	r23, r19
    10bc:	84 0b       	sbc	r24, r20
    10be:	ba f0       	brmi	.+46     	; 0x10ee <__addsf3x+0x9c>
    10c0:	91 50       	subi	r25, 0x01	; 1
    10c2:	a1 f0       	breq	.+40     	; 0x10ec <__addsf3x+0x9a>
    10c4:	ff 0f       	add	r31, r31
    10c6:	bb 1f       	adc	r27, r27
    10c8:	66 1f       	adc	r22, r22
    10ca:	77 1f       	adc	r23, r23
    10cc:	88 1f       	adc	r24, r24
    10ce:	c2 f7       	brpl	.-16     	; 0x10c0 <__addsf3x+0x6e>
    10d0:	0e c0       	rjmp	.+28     	; 0x10ee <__addsf3x+0x9c>
    10d2:	ba 0f       	add	r27, r26
    10d4:	62 1f       	adc	r22, r18
    10d6:	73 1f       	adc	r23, r19
    10d8:	84 1f       	adc	r24, r20
    10da:	48 f4       	brcc	.+18     	; 0x10ee <__addsf3x+0x9c>
    10dc:	87 95       	ror	r24
    10de:	77 95       	ror	r23
    10e0:	67 95       	ror	r22
    10e2:	b7 95       	ror	r27
    10e4:	f7 95       	ror	r31
    10e6:	9e 3f       	cpi	r25, 0xFE	; 254
    10e8:	08 f0       	brcs	.+2      	; 0x10ec <__addsf3x+0x9a>
    10ea:	b0 cf       	rjmp	.-160    	; 0x104c <__mulsf3_pse+0xca>
    10ec:	93 95       	inc	r25
    10ee:	88 0f       	add	r24, r24
    10f0:	08 f0       	brcs	.+2      	; 0x10f4 <__addsf3x+0xa2>
    10f2:	99 27       	eor	r25, r25
    10f4:	ee 0f       	add	r30, r30
    10f6:	97 95       	ror	r25
    10f8:	87 95       	ror	r24
    10fa:	08 95       	ret

000010fc <__fp_mpack>:
    10fc:	9f 3f       	cpi	r25, 0xFF	; 255
    10fe:	31 f0       	breq	.+12     	; 0x110c <__fp_mpack_finite+0xc>

00001100 <__fp_mpack_finite>:
    1100:	91 50       	subi	r25, 0x01	; 1
    1102:	20 f4       	brcc	.+8      	; 0x110c <__fp_mpack_finite+0xc>
    1104:	87 95       	ror	r24
    1106:	77 95       	ror	r23
    1108:	67 95       	ror	r22
    110a:	b7 95       	ror	r27
    110c:	88 0f       	add	r24, r24
    110e:	91 1d       	adc	r25, r1
    1110:	96 95       	lsr	r25
    1112:	87 95       	ror	r24
    1114:	97 f9       	bld	r25, 7
    1116:	08 95       	ret

00001118 <__fp_powser>:
    1118:	df 93       	push	r29
    111a:	cf 93       	push	r28
    111c:	1f 93       	push	r17
    111e:	0f 93       	push	r16
    1120:	ff 92       	push	r15
    1122:	ef 92       	push	r14
    1124:	df 92       	push	r13
    1126:	7b 01       	movw	r14, r22
    1128:	8c 01       	movw	r16, r24
    112a:	68 94       	set
    112c:	06 c0       	rjmp	.+12     	; 0x113a <__fp_powser+0x22>
    112e:	da 2e       	mov	r13, r26
    1130:	ef 01       	movw	r28, r30
    1132:	0e 94 be 07 	call	0xf7c	; 0xf7c <__mulsf3x>
    1136:	fe 01       	movw	r30, r28
    1138:	e8 94       	clt
    113a:	a5 91       	lpm	r26, Z+
    113c:	25 91       	lpm	r18, Z+
    113e:	35 91       	lpm	r19, Z+
    1140:	45 91       	lpm	r20, Z+
    1142:	55 91       	lpm	r21, Z+
    1144:	a6 f3       	brts	.-24     	; 0x112e <__fp_powser+0x16>
    1146:	ef 01       	movw	r28, r30
    1148:	0e 94 29 08 	call	0x1052	; 0x1052 <__addsf3x>
    114c:	fe 01       	movw	r30, r28
    114e:	97 01       	movw	r18, r14
    1150:	a8 01       	movw	r20, r16
    1152:	da 94       	dec	r13
    1154:	69 f7       	brne	.-38     	; 0x1130 <__fp_powser+0x18>
    1156:	df 90       	pop	r13
    1158:	ef 90       	pop	r14
    115a:	ff 90       	pop	r15
    115c:	0f 91       	pop	r16
    115e:	1f 91       	pop	r17
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <__fp_powsodd>:
    1166:	9f 93       	push	r25
    1168:	8f 93       	push	r24
    116a:	7f 93       	push	r23
    116c:	6f 93       	push	r22
    116e:	ff 93       	push	r31
    1170:	ef 93       	push	r30
    1172:	9b 01       	movw	r18, r22
    1174:	ac 01       	movw	r20, r24
    1176:	0e 94 ab 07 	call	0xf56	; 0xf56 <__mulsf3>
    117a:	ef 91       	pop	r30
    117c:	ff 91       	pop	r31
    117e:	0e 94 8c 08 	call	0x1118	; 0x1118 <__fp_powser>
    1182:	2f 91       	pop	r18
    1184:	3f 91       	pop	r19
    1186:	4f 91       	pop	r20
    1188:	5f 91       	pop	r21
    118a:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__mulsf3>

0000118e <vfprintf>:
    118e:	a0 e1       	ldi	r26, 0x10	; 16
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	ed ec       	ldi	r30, 0xCD	; 205
    1194:	f8 e0       	ldi	r31, 0x08	; 8
    1196:	0c 94 89 0c 	jmp	0x1912	; 0x1912 <__prologue_saves__>
    119a:	7c 01       	movw	r14, r24
    119c:	1b 01       	movw	r2, r22
    119e:	6a 01       	movw	r12, r20
    11a0:	fc 01       	movw	r30, r24
    11a2:	17 82       	std	Z+7, r1	; 0x07
    11a4:	16 82       	std	Z+6, r1	; 0x06
    11a6:	83 81       	ldd	r24, Z+3	; 0x03
    11a8:	81 ff       	sbrs	r24, 1
    11aa:	44 c3       	rjmp	.+1672   	; 0x1834 <vfprintf+0x6a6>
    11ac:	9e 01       	movw	r18, r28
    11ae:	2f 5f       	subi	r18, 0xFF	; 255
    11b0:	3f 4f       	sbci	r19, 0xFF	; 255
    11b2:	39 01       	movw	r6, r18
    11b4:	f7 01       	movw	r30, r14
    11b6:	93 81       	ldd	r25, Z+3	; 0x03
    11b8:	f1 01       	movw	r30, r2
    11ba:	93 fd       	sbrc	r25, 3
    11bc:	85 91       	lpm	r24, Z+
    11be:	93 ff       	sbrs	r25, 3
    11c0:	81 91       	ld	r24, Z+
    11c2:	1f 01       	movw	r2, r30
    11c4:	88 23       	and	r24, r24
    11c6:	09 f4       	brne	.+2      	; 0x11ca <vfprintf+0x3c>
    11c8:	31 c3       	rjmp	.+1634   	; 0x182c <vfprintf+0x69e>
    11ca:	85 32       	cpi	r24, 0x25	; 37
    11cc:	39 f4       	brne	.+14     	; 0x11dc <vfprintf+0x4e>
    11ce:	93 fd       	sbrc	r25, 3
    11d0:	85 91       	lpm	r24, Z+
    11d2:	93 ff       	sbrs	r25, 3
    11d4:	81 91       	ld	r24, Z+
    11d6:	1f 01       	movw	r2, r30
    11d8:	85 32       	cpi	r24, 0x25	; 37
    11da:	39 f4       	brne	.+14     	; 0x11ea <vfprintf+0x5c>
    11dc:	b7 01       	movw	r22, r14
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    11e4:	56 01       	movw	r10, r12
    11e6:	65 01       	movw	r12, r10
    11e8:	e5 cf       	rjmp	.-54     	; 0x11b4 <vfprintf+0x26>
    11ea:	10 e0       	ldi	r17, 0x00	; 0
    11ec:	51 2c       	mov	r5, r1
    11ee:	91 2c       	mov	r9, r1
    11f0:	ff e1       	ldi	r31, 0x1F	; 31
    11f2:	f9 15       	cp	r31, r9
    11f4:	d8 f0       	brcs	.+54     	; 0x122c <vfprintf+0x9e>
    11f6:	8b 32       	cpi	r24, 0x2B	; 43
    11f8:	79 f0       	breq	.+30     	; 0x1218 <vfprintf+0x8a>
    11fa:	38 f4       	brcc	.+14     	; 0x120a <vfprintf+0x7c>
    11fc:	80 32       	cpi	r24, 0x20	; 32
    11fe:	79 f0       	breq	.+30     	; 0x121e <vfprintf+0x90>
    1200:	83 32       	cpi	r24, 0x23	; 35
    1202:	a1 f4       	brne	.+40     	; 0x122c <vfprintf+0x9e>
    1204:	f9 2d       	mov	r31, r9
    1206:	f0 61       	ori	r31, 0x10	; 16
    1208:	2e c0       	rjmp	.+92     	; 0x1266 <vfprintf+0xd8>
    120a:	8d 32       	cpi	r24, 0x2D	; 45
    120c:	61 f0       	breq	.+24     	; 0x1226 <vfprintf+0x98>
    120e:	80 33       	cpi	r24, 0x30	; 48
    1210:	69 f4       	brne	.+26     	; 0x122c <vfprintf+0x9e>
    1212:	29 2d       	mov	r18, r9
    1214:	21 60       	ori	r18, 0x01	; 1
    1216:	2d c0       	rjmp	.+90     	; 0x1272 <vfprintf+0xe4>
    1218:	39 2d       	mov	r19, r9
    121a:	32 60       	ori	r19, 0x02	; 2
    121c:	93 2e       	mov	r9, r19
    121e:	89 2d       	mov	r24, r9
    1220:	84 60       	ori	r24, 0x04	; 4
    1222:	98 2e       	mov	r9, r24
    1224:	2a c0       	rjmp	.+84     	; 0x127a <vfprintf+0xec>
    1226:	e9 2d       	mov	r30, r9
    1228:	e8 60       	ori	r30, 0x08	; 8
    122a:	15 c0       	rjmp	.+42     	; 0x1256 <vfprintf+0xc8>
    122c:	97 fc       	sbrc	r9, 7
    122e:	2d c0       	rjmp	.+90     	; 0x128a <vfprintf+0xfc>
    1230:	20 ed       	ldi	r18, 0xD0	; 208
    1232:	28 0f       	add	r18, r24
    1234:	2a 30       	cpi	r18, 0x0A	; 10
    1236:	88 f4       	brcc	.+34     	; 0x125a <vfprintf+0xcc>
    1238:	96 fe       	sbrs	r9, 6
    123a:	06 c0       	rjmp	.+12     	; 0x1248 <vfprintf+0xba>
    123c:	3a e0       	ldi	r19, 0x0A	; 10
    123e:	13 9f       	mul	r17, r19
    1240:	20 0d       	add	r18, r0
    1242:	11 24       	eor	r1, r1
    1244:	12 2f       	mov	r17, r18
    1246:	19 c0       	rjmp	.+50     	; 0x127a <vfprintf+0xec>
    1248:	8a e0       	ldi	r24, 0x0A	; 10
    124a:	58 9e       	mul	r5, r24
    124c:	20 0d       	add	r18, r0
    124e:	11 24       	eor	r1, r1
    1250:	52 2e       	mov	r5, r18
    1252:	e9 2d       	mov	r30, r9
    1254:	e0 62       	ori	r30, 0x20	; 32
    1256:	9e 2e       	mov	r9, r30
    1258:	10 c0       	rjmp	.+32     	; 0x127a <vfprintf+0xec>
    125a:	8e 32       	cpi	r24, 0x2E	; 46
    125c:	31 f4       	brne	.+12     	; 0x126a <vfprintf+0xdc>
    125e:	96 fc       	sbrc	r9, 6
    1260:	e5 c2       	rjmp	.+1482   	; 0x182c <vfprintf+0x69e>
    1262:	f9 2d       	mov	r31, r9
    1264:	f0 64       	ori	r31, 0x40	; 64
    1266:	9f 2e       	mov	r9, r31
    1268:	08 c0       	rjmp	.+16     	; 0x127a <vfprintf+0xec>
    126a:	8c 36       	cpi	r24, 0x6C	; 108
    126c:	21 f4       	brne	.+8      	; 0x1276 <vfprintf+0xe8>
    126e:	29 2d       	mov	r18, r9
    1270:	20 68       	ori	r18, 0x80	; 128
    1272:	92 2e       	mov	r9, r18
    1274:	02 c0       	rjmp	.+4      	; 0x127a <vfprintf+0xec>
    1276:	88 36       	cpi	r24, 0x68	; 104
    1278:	41 f4       	brne	.+16     	; 0x128a <vfprintf+0xfc>
    127a:	f1 01       	movw	r30, r2
    127c:	93 fd       	sbrc	r25, 3
    127e:	85 91       	lpm	r24, Z+
    1280:	93 ff       	sbrs	r25, 3
    1282:	81 91       	ld	r24, Z+
    1284:	1f 01       	movw	r2, r30
    1286:	81 11       	cpse	r24, r1
    1288:	b3 cf       	rjmp	.-154    	; 0x11f0 <vfprintf+0x62>
    128a:	9b eb       	ldi	r25, 0xBB	; 187
    128c:	98 0f       	add	r25, r24
    128e:	93 30       	cpi	r25, 0x03	; 3
    1290:	20 f4       	brcc	.+8      	; 0x129a <vfprintf+0x10c>
    1292:	99 2d       	mov	r25, r9
    1294:	90 61       	ori	r25, 0x10	; 16
    1296:	80 5e       	subi	r24, 0xE0	; 224
    1298:	07 c0       	rjmp	.+14     	; 0x12a8 <vfprintf+0x11a>
    129a:	9b e9       	ldi	r25, 0x9B	; 155
    129c:	98 0f       	add	r25, r24
    129e:	93 30       	cpi	r25, 0x03	; 3
    12a0:	08 f0       	brcs	.+2      	; 0x12a4 <vfprintf+0x116>
    12a2:	66 c1       	rjmp	.+716    	; 0x1570 <vfprintf+0x3e2>
    12a4:	99 2d       	mov	r25, r9
    12a6:	9f 7e       	andi	r25, 0xEF	; 239
    12a8:	96 ff       	sbrs	r25, 6
    12aa:	16 e0       	ldi	r17, 0x06	; 6
    12ac:	9f 73       	andi	r25, 0x3F	; 63
    12ae:	99 2e       	mov	r9, r25
    12b0:	85 36       	cpi	r24, 0x65	; 101
    12b2:	19 f4       	brne	.+6      	; 0x12ba <vfprintf+0x12c>
    12b4:	90 64       	ori	r25, 0x40	; 64
    12b6:	99 2e       	mov	r9, r25
    12b8:	08 c0       	rjmp	.+16     	; 0x12ca <vfprintf+0x13c>
    12ba:	86 36       	cpi	r24, 0x66	; 102
    12bc:	21 f4       	brne	.+8      	; 0x12c6 <vfprintf+0x138>
    12be:	39 2f       	mov	r19, r25
    12c0:	30 68       	ori	r19, 0x80	; 128
    12c2:	93 2e       	mov	r9, r19
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <vfprintf+0x13c>
    12c6:	11 11       	cpse	r17, r1
    12c8:	11 50       	subi	r17, 0x01	; 1
    12ca:	97 fe       	sbrs	r9, 7
    12cc:	07 c0       	rjmp	.+14     	; 0x12dc <vfprintf+0x14e>
    12ce:	1c 33       	cpi	r17, 0x3C	; 60
    12d0:	50 f4       	brcc	.+20     	; 0x12e6 <vfprintf+0x158>
    12d2:	44 24       	eor	r4, r4
    12d4:	43 94       	inc	r4
    12d6:	41 0e       	add	r4, r17
    12d8:	27 e0       	ldi	r18, 0x07	; 7
    12da:	0b c0       	rjmp	.+22     	; 0x12f2 <vfprintf+0x164>
    12dc:	18 30       	cpi	r17, 0x08	; 8
    12de:	38 f0       	brcs	.+14     	; 0x12ee <vfprintf+0x160>
    12e0:	27 e0       	ldi	r18, 0x07	; 7
    12e2:	17 e0       	ldi	r17, 0x07	; 7
    12e4:	05 c0       	rjmp	.+10     	; 0x12f0 <vfprintf+0x162>
    12e6:	27 e0       	ldi	r18, 0x07	; 7
    12e8:	9c e3       	ldi	r25, 0x3C	; 60
    12ea:	49 2e       	mov	r4, r25
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <vfprintf+0x164>
    12ee:	21 2f       	mov	r18, r17
    12f0:	41 2c       	mov	r4, r1
    12f2:	56 01       	movw	r10, r12
    12f4:	84 e0       	ldi	r24, 0x04	; 4
    12f6:	a8 0e       	add	r10, r24
    12f8:	b1 1c       	adc	r11, r1
    12fa:	f6 01       	movw	r30, r12
    12fc:	60 81       	ld	r22, Z
    12fe:	71 81       	ldd	r23, Z+1	; 0x01
    1300:	82 81       	ldd	r24, Z+2	; 0x02
    1302:	93 81       	ldd	r25, Z+3	; 0x03
    1304:	04 2d       	mov	r16, r4
    1306:	a3 01       	movw	r20, r6
    1308:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__ftoa_engine>
    130c:	6c 01       	movw	r12, r24
    130e:	f9 81       	ldd	r31, Y+1	; 0x01
    1310:	fc 87       	std	Y+12, r31	; 0x0c
    1312:	f0 ff       	sbrs	r31, 0
    1314:	02 c0       	rjmp	.+4      	; 0x131a <vfprintf+0x18c>
    1316:	f3 ff       	sbrs	r31, 3
    1318:	06 c0       	rjmp	.+12     	; 0x1326 <vfprintf+0x198>
    131a:	91 fc       	sbrc	r9, 1
    131c:	06 c0       	rjmp	.+12     	; 0x132a <vfprintf+0x19c>
    131e:	92 fe       	sbrs	r9, 2
    1320:	06 c0       	rjmp	.+12     	; 0x132e <vfprintf+0x1a0>
    1322:	00 e2       	ldi	r16, 0x20	; 32
    1324:	05 c0       	rjmp	.+10     	; 0x1330 <vfprintf+0x1a2>
    1326:	0d e2       	ldi	r16, 0x2D	; 45
    1328:	03 c0       	rjmp	.+6      	; 0x1330 <vfprintf+0x1a2>
    132a:	0b e2       	ldi	r16, 0x2B	; 43
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <vfprintf+0x1a2>
    132e:	00 e0       	ldi	r16, 0x00	; 0
    1330:	8c 85       	ldd	r24, Y+12	; 0x0c
    1332:	8c 70       	andi	r24, 0x0C	; 12
    1334:	19 f0       	breq	.+6      	; 0x133c <vfprintf+0x1ae>
    1336:	01 11       	cpse	r16, r1
    1338:	5a c2       	rjmp	.+1204   	; 0x17ee <vfprintf+0x660>
    133a:	9b c2       	rjmp	.+1334   	; 0x1872 <vfprintf+0x6e4>
    133c:	97 fe       	sbrs	r9, 7
    133e:	10 c0       	rjmp	.+32     	; 0x1360 <vfprintf+0x1d2>
    1340:	4c 0c       	add	r4, r12
    1342:	fc 85       	ldd	r31, Y+12	; 0x0c
    1344:	f4 ff       	sbrs	r31, 4
    1346:	04 c0       	rjmp	.+8      	; 0x1350 <vfprintf+0x1c2>
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	81 33       	cpi	r24, 0x31	; 49
    134c:	09 f4       	brne	.+2      	; 0x1350 <vfprintf+0x1c2>
    134e:	4a 94       	dec	r4
    1350:	14 14       	cp	r1, r4
    1352:	74 f5       	brge	.+92     	; 0x13b0 <vfprintf+0x222>
    1354:	28 e0       	ldi	r18, 0x08	; 8
    1356:	24 15       	cp	r18, r4
    1358:	78 f5       	brcc	.+94     	; 0x13b8 <vfprintf+0x22a>
    135a:	88 e0       	ldi	r24, 0x08	; 8
    135c:	48 2e       	mov	r4, r24
    135e:	2c c0       	rjmp	.+88     	; 0x13b8 <vfprintf+0x22a>
    1360:	96 fc       	sbrc	r9, 6
    1362:	2a c0       	rjmp	.+84     	; 0x13b8 <vfprintf+0x22a>
    1364:	81 2f       	mov	r24, r17
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	8c 15       	cp	r24, r12
    136a:	9d 05       	cpc	r25, r13
    136c:	9c f0       	brlt	.+38     	; 0x1394 <vfprintf+0x206>
    136e:	3c ef       	ldi	r19, 0xFC	; 252
    1370:	c3 16       	cp	r12, r19
    1372:	3f ef       	ldi	r19, 0xFF	; 255
    1374:	d3 06       	cpc	r13, r19
    1376:	74 f0       	brlt	.+28     	; 0x1394 <vfprintf+0x206>
    1378:	89 2d       	mov	r24, r9
    137a:	80 68       	ori	r24, 0x80	; 128
    137c:	98 2e       	mov	r9, r24
    137e:	0a c0       	rjmp	.+20     	; 0x1394 <vfprintf+0x206>
    1380:	e2 e0       	ldi	r30, 0x02	; 2
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	ec 0f       	add	r30, r28
    1386:	fd 1f       	adc	r31, r29
    1388:	e1 0f       	add	r30, r17
    138a:	f1 1d       	adc	r31, r1
    138c:	80 81       	ld	r24, Z
    138e:	80 33       	cpi	r24, 0x30	; 48
    1390:	19 f4       	brne	.+6      	; 0x1398 <vfprintf+0x20a>
    1392:	11 50       	subi	r17, 0x01	; 1
    1394:	11 11       	cpse	r17, r1
    1396:	f4 cf       	rjmp	.-24     	; 0x1380 <vfprintf+0x1f2>
    1398:	97 fe       	sbrs	r9, 7
    139a:	0e c0       	rjmp	.+28     	; 0x13b8 <vfprintf+0x22a>
    139c:	44 24       	eor	r4, r4
    139e:	43 94       	inc	r4
    13a0:	41 0e       	add	r4, r17
    13a2:	81 2f       	mov	r24, r17
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	c8 16       	cp	r12, r24
    13a8:	d9 06       	cpc	r13, r25
    13aa:	2c f4       	brge	.+10     	; 0x13b6 <vfprintf+0x228>
    13ac:	1c 19       	sub	r17, r12
    13ae:	04 c0       	rjmp	.+8      	; 0x13b8 <vfprintf+0x22a>
    13b0:	44 24       	eor	r4, r4
    13b2:	43 94       	inc	r4
    13b4:	01 c0       	rjmp	.+2      	; 0x13b8 <vfprintf+0x22a>
    13b6:	10 e0       	ldi	r17, 0x00	; 0
    13b8:	97 fe       	sbrs	r9, 7
    13ba:	06 c0       	rjmp	.+12     	; 0x13c8 <vfprintf+0x23a>
    13bc:	1c 14       	cp	r1, r12
    13be:	1d 04       	cpc	r1, r13
    13c0:	34 f4       	brge	.+12     	; 0x13ce <vfprintf+0x240>
    13c2:	c6 01       	movw	r24, r12
    13c4:	01 96       	adiw	r24, 0x01	; 1
    13c6:	05 c0       	rjmp	.+10     	; 0x13d2 <vfprintf+0x244>
    13c8:	85 e0       	ldi	r24, 0x05	; 5
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <vfprintf+0x244>
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	01 11       	cpse	r16, r1
    13d4:	01 96       	adiw	r24, 0x01	; 1
    13d6:	11 23       	and	r17, r17
    13d8:	31 f0       	breq	.+12     	; 0x13e6 <vfprintf+0x258>
    13da:	21 2f       	mov	r18, r17
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	2f 5f       	subi	r18, 0xFF	; 255
    13e0:	3f 4f       	sbci	r19, 0xFF	; 255
    13e2:	82 0f       	add	r24, r18
    13e4:	93 1f       	adc	r25, r19
    13e6:	25 2d       	mov	r18, r5
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	82 17       	cp	r24, r18
    13ec:	93 07       	cpc	r25, r19
    13ee:	14 f4       	brge	.+4      	; 0x13f4 <vfprintf+0x266>
    13f0:	58 1a       	sub	r5, r24
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <vfprintf+0x268>
    13f4:	51 2c       	mov	r5, r1
    13f6:	89 2d       	mov	r24, r9
    13f8:	89 70       	andi	r24, 0x09	; 9
    13fa:	49 f4       	brne	.+18     	; 0x140e <vfprintf+0x280>
    13fc:	55 20       	and	r5, r5
    13fe:	39 f0       	breq	.+14     	; 0x140e <vfprintf+0x280>
    1400:	b7 01       	movw	r22, r14
    1402:	80 e2       	ldi	r24, 0x20	; 32
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    140a:	5a 94       	dec	r5
    140c:	f7 cf       	rjmp	.-18     	; 0x13fc <vfprintf+0x26e>
    140e:	00 23       	and	r16, r16
    1410:	29 f0       	breq	.+10     	; 0x141c <vfprintf+0x28e>
    1412:	b7 01       	movw	r22, r14
    1414:	80 2f       	mov	r24, r16
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    141c:	93 fc       	sbrc	r9, 3
    141e:	09 c0       	rjmp	.+18     	; 0x1432 <vfprintf+0x2a4>
    1420:	55 20       	and	r5, r5
    1422:	39 f0       	breq	.+14     	; 0x1432 <vfprintf+0x2a4>
    1424:	b7 01       	movw	r22, r14
    1426:	80 e3       	ldi	r24, 0x30	; 48
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    142e:	5a 94       	dec	r5
    1430:	f7 cf       	rjmp	.-18     	; 0x1420 <vfprintf+0x292>
    1432:	97 fe       	sbrs	r9, 7
    1434:	4c c0       	rjmp	.+152    	; 0x14ce <vfprintf+0x340>
    1436:	46 01       	movw	r8, r12
    1438:	d7 fe       	sbrs	r13, 7
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <vfprintf+0x2b2>
    143c:	81 2c       	mov	r8, r1
    143e:	91 2c       	mov	r9, r1
    1440:	c6 01       	movw	r24, r12
    1442:	88 19       	sub	r24, r8
    1444:	99 09       	sbc	r25, r9
    1446:	f3 01       	movw	r30, r6
    1448:	e8 0f       	add	r30, r24
    144a:	f9 1f       	adc	r31, r25
    144c:	fe 87       	std	Y+14, r31	; 0x0e
    144e:	ed 87       	std	Y+13, r30	; 0x0d
    1450:	96 01       	movw	r18, r12
    1452:	24 19       	sub	r18, r4
    1454:	31 09       	sbc	r19, r1
    1456:	38 8b       	std	Y+16, r19	; 0x10
    1458:	2f 87       	std	Y+15, r18	; 0x0f
    145a:	01 2f       	mov	r16, r17
    145c:	10 e0       	ldi	r17, 0x00	; 0
    145e:	11 95       	neg	r17
    1460:	01 95       	neg	r16
    1462:	11 09       	sbc	r17, r1
    1464:	3f ef       	ldi	r19, 0xFF	; 255
    1466:	83 16       	cp	r8, r19
    1468:	93 06       	cpc	r9, r19
    146a:	29 f4       	brne	.+10     	; 0x1476 <vfprintf+0x2e8>
    146c:	b7 01       	movw	r22, r14
    146e:	8e e2       	ldi	r24, 0x2E	; 46
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    1476:	c8 14       	cp	r12, r8
    1478:	d9 04       	cpc	r13, r9
    147a:	4c f0       	brlt	.+18     	; 0x148e <vfprintf+0x300>
    147c:	8f 85       	ldd	r24, Y+15	; 0x0f
    147e:	98 89       	ldd	r25, Y+16	; 0x10
    1480:	88 15       	cp	r24, r8
    1482:	99 05       	cpc	r25, r9
    1484:	24 f4       	brge	.+8      	; 0x148e <vfprintf+0x300>
    1486:	ed 85       	ldd	r30, Y+13	; 0x0d
    1488:	fe 85       	ldd	r31, Y+14	; 0x0e
    148a:	81 81       	ldd	r24, Z+1	; 0x01
    148c:	01 c0       	rjmp	.+2      	; 0x1490 <vfprintf+0x302>
    148e:	80 e3       	ldi	r24, 0x30	; 48
    1490:	f1 e0       	ldi	r31, 0x01	; 1
    1492:	8f 1a       	sub	r8, r31
    1494:	91 08       	sbc	r9, r1
    1496:	2d 85       	ldd	r18, Y+13	; 0x0d
    1498:	3e 85       	ldd	r19, Y+14	; 0x0e
    149a:	2f 5f       	subi	r18, 0xFF	; 255
    149c:	3f 4f       	sbci	r19, 0xFF	; 255
    149e:	3e 87       	std	Y+14, r19	; 0x0e
    14a0:	2d 87       	std	Y+13, r18	; 0x0d
    14a2:	80 16       	cp	r8, r16
    14a4:	91 06       	cpc	r9, r17
    14a6:	2c f0       	brlt	.+10     	; 0x14b2 <vfprintf+0x324>
    14a8:	b7 01       	movw	r22, r14
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    14b0:	d9 cf       	rjmp	.-78     	; 0x1464 <vfprintf+0x2d6>
    14b2:	c8 14       	cp	r12, r8
    14b4:	d9 04       	cpc	r13, r9
    14b6:	41 f4       	brne	.+16     	; 0x14c8 <vfprintf+0x33a>
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	96 33       	cpi	r25, 0x36	; 54
    14bc:	20 f4       	brcc	.+8      	; 0x14c6 <vfprintf+0x338>
    14be:	95 33       	cpi	r25, 0x35	; 53
    14c0:	19 f4       	brne	.+6      	; 0x14c8 <vfprintf+0x33a>
    14c2:	3c 85       	ldd	r19, Y+12	; 0x0c
    14c4:	34 ff       	sbrs	r19, 4
    14c6:	81 e3       	ldi	r24, 0x31	; 49
    14c8:	b7 01       	movw	r22, r14
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	4e c0       	rjmp	.+156    	; 0x156a <vfprintf+0x3dc>
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	81 33       	cpi	r24, 0x31	; 49
    14d2:	19 f0       	breq	.+6      	; 0x14da <vfprintf+0x34c>
    14d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    14d6:	9f 7e       	andi	r25, 0xEF	; 239
    14d8:	9c 87       	std	Y+12, r25	; 0x0c
    14da:	b7 01       	movw	r22, r14
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    14e2:	11 11       	cpse	r17, r1
    14e4:	05 c0       	rjmp	.+10     	; 0x14f0 <vfprintf+0x362>
    14e6:	94 fc       	sbrc	r9, 4
    14e8:	18 c0       	rjmp	.+48     	; 0x151a <vfprintf+0x38c>
    14ea:	85 e6       	ldi	r24, 0x65	; 101
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	17 c0       	rjmp	.+46     	; 0x151e <vfprintf+0x390>
    14f0:	b7 01       	movw	r22, r14
    14f2:	8e e2       	ldi	r24, 0x2E	; 46
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    14fa:	1e 5f       	subi	r17, 0xFE	; 254
    14fc:	82 e0       	ldi	r24, 0x02	; 2
    14fe:	01 e0       	ldi	r16, 0x01	; 1
    1500:	08 0f       	add	r16, r24
    1502:	f3 01       	movw	r30, r6
    1504:	e8 0f       	add	r30, r24
    1506:	f1 1d       	adc	r31, r1
    1508:	80 81       	ld	r24, Z
    150a:	b7 01       	movw	r22, r14
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    1512:	80 2f       	mov	r24, r16
    1514:	01 13       	cpse	r16, r17
    1516:	f3 cf       	rjmp	.-26     	; 0x14fe <vfprintf+0x370>
    1518:	e6 cf       	rjmp	.-52     	; 0x14e6 <vfprintf+0x358>
    151a:	85 e4       	ldi	r24, 0x45	; 69
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	b7 01       	movw	r22, r14
    1520:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    1524:	d7 fc       	sbrc	r13, 7
    1526:	06 c0       	rjmp	.+12     	; 0x1534 <vfprintf+0x3a6>
    1528:	c1 14       	cp	r12, r1
    152a:	d1 04       	cpc	r13, r1
    152c:	41 f4       	brne	.+16     	; 0x153e <vfprintf+0x3b0>
    152e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1530:	e4 ff       	sbrs	r30, 4
    1532:	05 c0       	rjmp	.+10     	; 0x153e <vfprintf+0x3b0>
    1534:	d1 94       	neg	r13
    1536:	c1 94       	neg	r12
    1538:	d1 08       	sbc	r13, r1
    153a:	8d e2       	ldi	r24, 0x2D	; 45
    153c:	01 c0       	rjmp	.+2      	; 0x1540 <vfprintf+0x3b2>
    153e:	8b e2       	ldi	r24, 0x2B	; 43
    1540:	b7 01       	movw	r22, r14
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    1548:	80 e3       	ldi	r24, 0x30	; 48
    154a:	2a e0       	ldi	r18, 0x0A	; 10
    154c:	c2 16       	cp	r12, r18
    154e:	d1 04       	cpc	r13, r1
    1550:	2c f0       	brlt	.+10     	; 0x155c <vfprintf+0x3ce>
    1552:	8f 5f       	subi	r24, 0xFF	; 255
    1554:	fa e0       	ldi	r31, 0x0A	; 10
    1556:	cf 1a       	sub	r12, r31
    1558:	d1 08       	sbc	r13, r1
    155a:	f7 cf       	rjmp	.-18     	; 0x154a <vfprintf+0x3bc>
    155c:	b7 01       	movw	r22, r14
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    1564:	b7 01       	movw	r22, r14
    1566:	c6 01       	movw	r24, r12
    1568:	c0 96       	adiw	r24, 0x30	; 48
    156a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    156e:	54 c1       	rjmp	.+680    	; 0x1818 <vfprintf+0x68a>
    1570:	83 36       	cpi	r24, 0x63	; 99
    1572:	31 f0       	breq	.+12     	; 0x1580 <vfprintf+0x3f2>
    1574:	83 37       	cpi	r24, 0x73	; 115
    1576:	79 f0       	breq	.+30     	; 0x1596 <vfprintf+0x408>
    1578:	83 35       	cpi	r24, 0x53	; 83
    157a:	09 f0       	breq	.+2      	; 0x157e <vfprintf+0x3f0>
    157c:	56 c0       	rjmp	.+172    	; 0x162a <vfprintf+0x49c>
    157e:	20 c0       	rjmp	.+64     	; 0x15c0 <vfprintf+0x432>
    1580:	56 01       	movw	r10, r12
    1582:	32 e0       	ldi	r19, 0x02	; 2
    1584:	a3 0e       	add	r10, r19
    1586:	b1 1c       	adc	r11, r1
    1588:	f6 01       	movw	r30, r12
    158a:	80 81       	ld	r24, Z
    158c:	89 83       	std	Y+1, r24	; 0x01
    158e:	01 e0       	ldi	r16, 0x01	; 1
    1590:	10 e0       	ldi	r17, 0x00	; 0
    1592:	63 01       	movw	r12, r6
    1594:	12 c0       	rjmp	.+36     	; 0x15ba <vfprintf+0x42c>
    1596:	56 01       	movw	r10, r12
    1598:	f2 e0       	ldi	r31, 0x02	; 2
    159a:	af 0e       	add	r10, r31
    159c:	b1 1c       	adc	r11, r1
    159e:	f6 01       	movw	r30, r12
    15a0:	c0 80       	ld	r12, Z
    15a2:	d1 80       	ldd	r13, Z+1	; 0x01
    15a4:	96 fe       	sbrs	r9, 6
    15a6:	03 c0       	rjmp	.+6      	; 0x15ae <vfprintf+0x420>
    15a8:	61 2f       	mov	r22, r17
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <vfprintf+0x424>
    15ae:	6f ef       	ldi	r22, 0xFF	; 255
    15b0:	7f ef       	ldi	r23, 0xFF	; 255
    15b2:	c6 01       	movw	r24, r12
    15b4:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <strnlen>
    15b8:	8c 01       	movw	r16, r24
    15ba:	f9 2d       	mov	r31, r9
    15bc:	ff 77       	andi	r31, 0x7F	; 127
    15be:	14 c0       	rjmp	.+40     	; 0x15e8 <vfprintf+0x45a>
    15c0:	56 01       	movw	r10, r12
    15c2:	22 e0       	ldi	r18, 0x02	; 2
    15c4:	a2 0e       	add	r10, r18
    15c6:	b1 1c       	adc	r11, r1
    15c8:	f6 01       	movw	r30, r12
    15ca:	c0 80       	ld	r12, Z
    15cc:	d1 80       	ldd	r13, Z+1	; 0x01
    15ce:	96 fe       	sbrs	r9, 6
    15d0:	03 c0       	rjmp	.+6      	; 0x15d8 <vfprintf+0x44a>
    15d2:	61 2f       	mov	r22, r17
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <vfprintf+0x44e>
    15d8:	6f ef       	ldi	r22, 0xFF	; 255
    15da:	7f ef       	ldi	r23, 0xFF	; 255
    15dc:	c6 01       	movw	r24, r12
    15de:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <strnlen_P>
    15e2:	8c 01       	movw	r16, r24
    15e4:	f9 2d       	mov	r31, r9
    15e6:	f0 68       	ori	r31, 0x80	; 128
    15e8:	9f 2e       	mov	r9, r31
    15ea:	f3 fd       	sbrc	r31, 3
    15ec:	1a c0       	rjmp	.+52     	; 0x1622 <vfprintf+0x494>
    15ee:	85 2d       	mov	r24, r5
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	08 17       	cp	r16, r24
    15f4:	19 07       	cpc	r17, r25
    15f6:	a8 f4       	brcc	.+42     	; 0x1622 <vfprintf+0x494>
    15f8:	b7 01       	movw	r22, r14
    15fa:	80 e2       	ldi	r24, 0x20	; 32
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    1602:	5a 94       	dec	r5
    1604:	f4 cf       	rjmp	.-24     	; 0x15ee <vfprintf+0x460>
    1606:	f6 01       	movw	r30, r12
    1608:	97 fc       	sbrc	r9, 7
    160a:	85 91       	lpm	r24, Z+
    160c:	97 fe       	sbrs	r9, 7
    160e:	81 91       	ld	r24, Z+
    1610:	6f 01       	movw	r12, r30
    1612:	b7 01       	movw	r22, r14
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    161a:	51 10       	cpse	r5, r1
    161c:	5a 94       	dec	r5
    161e:	01 50       	subi	r16, 0x01	; 1
    1620:	11 09       	sbc	r17, r1
    1622:	01 15       	cp	r16, r1
    1624:	11 05       	cpc	r17, r1
    1626:	79 f7       	brne	.-34     	; 0x1606 <vfprintf+0x478>
    1628:	f7 c0       	rjmp	.+494    	; 0x1818 <vfprintf+0x68a>
    162a:	84 36       	cpi	r24, 0x64	; 100
    162c:	11 f0       	breq	.+4      	; 0x1632 <vfprintf+0x4a4>
    162e:	89 36       	cpi	r24, 0x69	; 105
    1630:	61 f5       	brne	.+88     	; 0x168a <vfprintf+0x4fc>
    1632:	56 01       	movw	r10, r12
    1634:	97 fe       	sbrs	r9, 7
    1636:	09 c0       	rjmp	.+18     	; 0x164a <vfprintf+0x4bc>
    1638:	24 e0       	ldi	r18, 0x04	; 4
    163a:	a2 0e       	add	r10, r18
    163c:	b1 1c       	adc	r11, r1
    163e:	f6 01       	movw	r30, r12
    1640:	60 81       	ld	r22, Z
    1642:	71 81       	ldd	r23, Z+1	; 0x01
    1644:	82 81       	ldd	r24, Z+2	; 0x02
    1646:	93 81       	ldd	r25, Z+3	; 0x03
    1648:	0a c0       	rjmp	.+20     	; 0x165e <vfprintf+0x4d0>
    164a:	f2 e0       	ldi	r31, 0x02	; 2
    164c:	af 0e       	add	r10, r31
    164e:	b1 1c       	adc	r11, r1
    1650:	f6 01       	movw	r30, r12
    1652:	60 81       	ld	r22, Z
    1654:	71 81       	ldd	r23, Z+1	; 0x01
    1656:	07 2e       	mov	r0, r23
    1658:	00 0c       	add	r0, r0
    165a:	88 0b       	sbc	r24, r24
    165c:	99 0b       	sbc	r25, r25
    165e:	f9 2d       	mov	r31, r9
    1660:	ff 76       	andi	r31, 0x6F	; 111
    1662:	9f 2e       	mov	r9, r31
    1664:	97 ff       	sbrs	r25, 7
    1666:	09 c0       	rjmp	.+18     	; 0x167a <vfprintf+0x4ec>
    1668:	90 95       	com	r25
    166a:	80 95       	com	r24
    166c:	70 95       	com	r23
    166e:	61 95       	neg	r22
    1670:	7f 4f       	sbci	r23, 0xFF	; 255
    1672:	8f 4f       	sbci	r24, 0xFF	; 255
    1674:	9f 4f       	sbci	r25, 0xFF	; 255
    1676:	f0 68       	ori	r31, 0x80	; 128
    1678:	9f 2e       	mov	r9, r31
    167a:	2a e0       	ldi	r18, 0x0A	; 10
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	a3 01       	movw	r20, r6
    1680:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__ultoa_invert>
    1684:	c8 2e       	mov	r12, r24
    1686:	c6 18       	sub	r12, r6
    1688:	3f c0       	rjmp	.+126    	; 0x1708 <vfprintf+0x57a>
    168a:	09 2d       	mov	r16, r9
    168c:	85 37       	cpi	r24, 0x75	; 117
    168e:	21 f4       	brne	.+8      	; 0x1698 <vfprintf+0x50a>
    1690:	0f 7e       	andi	r16, 0xEF	; 239
    1692:	2a e0       	ldi	r18, 0x0A	; 10
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	1d c0       	rjmp	.+58     	; 0x16d2 <vfprintf+0x544>
    1698:	09 7f       	andi	r16, 0xF9	; 249
    169a:	8f 36       	cpi	r24, 0x6F	; 111
    169c:	91 f0       	breq	.+36     	; 0x16c2 <vfprintf+0x534>
    169e:	18 f4       	brcc	.+6      	; 0x16a6 <vfprintf+0x518>
    16a0:	88 35       	cpi	r24, 0x58	; 88
    16a2:	59 f0       	breq	.+22     	; 0x16ba <vfprintf+0x52c>
    16a4:	c3 c0       	rjmp	.+390    	; 0x182c <vfprintf+0x69e>
    16a6:	80 37       	cpi	r24, 0x70	; 112
    16a8:	19 f0       	breq	.+6      	; 0x16b0 <vfprintf+0x522>
    16aa:	88 37       	cpi	r24, 0x78	; 120
    16ac:	11 f0       	breq	.+4      	; 0x16b2 <vfprintf+0x524>
    16ae:	be c0       	rjmp	.+380    	; 0x182c <vfprintf+0x69e>
    16b0:	00 61       	ori	r16, 0x10	; 16
    16b2:	04 ff       	sbrs	r16, 4
    16b4:	09 c0       	rjmp	.+18     	; 0x16c8 <vfprintf+0x53a>
    16b6:	04 60       	ori	r16, 0x04	; 4
    16b8:	07 c0       	rjmp	.+14     	; 0x16c8 <vfprintf+0x53a>
    16ba:	94 fe       	sbrs	r9, 4
    16bc:	08 c0       	rjmp	.+16     	; 0x16ce <vfprintf+0x540>
    16be:	06 60       	ori	r16, 0x06	; 6
    16c0:	06 c0       	rjmp	.+12     	; 0x16ce <vfprintf+0x540>
    16c2:	28 e0       	ldi	r18, 0x08	; 8
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	05 c0       	rjmp	.+10     	; 0x16d2 <vfprintf+0x544>
    16c8:	20 e1       	ldi	r18, 0x10	; 16
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <vfprintf+0x544>
    16ce:	20 e1       	ldi	r18, 0x10	; 16
    16d0:	32 e0       	ldi	r19, 0x02	; 2
    16d2:	56 01       	movw	r10, r12
    16d4:	07 ff       	sbrs	r16, 7
    16d6:	09 c0       	rjmp	.+18     	; 0x16ea <vfprintf+0x55c>
    16d8:	84 e0       	ldi	r24, 0x04	; 4
    16da:	a8 0e       	add	r10, r24
    16dc:	b1 1c       	adc	r11, r1
    16de:	f6 01       	movw	r30, r12
    16e0:	60 81       	ld	r22, Z
    16e2:	71 81       	ldd	r23, Z+1	; 0x01
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	93 81       	ldd	r25, Z+3	; 0x03
    16e8:	08 c0       	rjmp	.+16     	; 0x16fa <vfprintf+0x56c>
    16ea:	f2 e0       	ldi	r31, 0x02	; 2
    16ec:	af 0e       	add	r10, r31
    16ee:	b1 1c       	adc	r11, r1
    16f0:	f6 01       	movw	r30, r12
    16f2:	60 81       	ld	r22, Z
    16f4:	71 81       	ldd	r23, Z+1	; 0x01
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	a3 01       	movw	r20, r6
    16fc:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__ultoa_invert>
    1700:	c8 2e       	mov	r12, r24
    1702:	c6 18       	sub	r12, r6
    1704:	0f 77       	andi	r16, 0x7F	; 127
    1706:	90 2e       	mov	r9, r16
    1708:	96 fe       	sbrs	r9, 6
    170a:	0b c0       	rjmp	.+22     	; 0x1722 <vfprintf+0x594>
    170c:	09 2d       	mov	r16, r9
    170e:	0e 7f       	andi	r16, 0xFE	; 254
    1710:	c1 16       	cp	r12, r17
    1712:	50 f4       	brcc	.+20     	; 0x1728 <vfprintf+0x59a>
    1714:	94 fe       	sbrs	r9, 4
    1716:	0a c0       	rjmp	.+20     	; 0x172c <vfprintf+0x59e>
    1718:	92 fc       	sbrc	r9, 2
    171a:	08 c0       	rjmp	.+16     	; 0x172c <vfprintf+0x59e>
    171c:	09 2d       	mov	r16, r9
    171e:	0e 7e       	andi	r16, 0xEE	; 238
    1720:	05 c0       	rjmp	.+10     	; 0x172c <vfprintf+0x59e>
    1722:	dc 2c       	mov	r13, r12
    1724:	09 2d       	mov	r16, r9
    1726:	03 c0       	rjmp	.+6      	; 0x172e <vfprintf+0x5a0>
    1728:	dc 2c       	mov	r13, r12
    172a:	01 c0       	rjmp	.+2      	; 0x172e <vfprintf+0x5a0>
    172c:	d1 2e       	mov	r13, r17
    172e:	04 ff       	sbrs	r16, 4
    1730:	0d c0       	rjmp	.+26     	; 0x174c <vfprintf+0x5be>
    1732:	fe 01       	movw	r30, r28
    1734:	ec 0d       	add	r30, r12
    1736:	f1 1d       	adc	r31, r1
    1738:	80 81       	ld	r24, Z
    173a:	80 33       	cpi	r24, 0x30	; 48
    173c:	11 f4       	brne	.+4      	; 0x1742 <vfprintf+0x5b4>
    173e:	09 7e       	andi	r16, 0xE9	; 233
    1740:	09 c0       	rjmp	.+18     	; 0x1754 <vfprintf+0x5c6>
    1742:	02 ff       	sbrs	r16, 2
    1744:	06 c0       	rjmp	.+12     	; 0x1752 <vfprintf+0x5c4>
    1746:	d3 94       	inc	r13
    1748:	d3 94       	inc	r13
    174a:	04 c0       	rjmp	.+8      	; 0x1754 <vfprintf+0x5c6>
    174c:	80 2f       	mov	r24, r16
    174e:	86 78       	andi	r24, 0x86	; 134
    1750:	09 f0       	breq	.+2      	; 0x1754 <vfprintf+0x5c6>
    1752:	d3 94       	inc	r13
    1754:	03 fd       	sbrc	r16, 3
    1756:	11 c0       	rjmp	.+34     	; 0x177a <vfprintf+0x5ec>
    1758:	00 ff       	sbrs	r16, 0
    175a:	06 c0       	rjmp	.+12     	; 0x1768 <vfprintf+0x5da>
    175c:	1c 2d       	mov	r17, r12
    175e:	d5 14       	cp	r13, r5
    1760:	80 f4       	brcc	.+32     	; 0x1782 <vfprintf+0x5f4>
    1762:	15 0d       	add	r17, r5
    1764:	1d 19       	sub	r17, r13
    1766:	0d c0       	rjmp	.+26     	; 0x1782 <vfprintf+0x5f4>
    1768:	d5 14       	cp	r13, r5
    176a:	58 f4       	brcc	.+22     	; 0x1782 <vfprintf+0x5f4>
    176c:	b7 01       	movw	r22, r14
    176e:	80 e2       	ldi	r24, 0x20	; 32
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    1776:	d3 94       	inc	r13
    1778:	f7 cf       	rjmp	.-18     	; 0x1768 <vfprintf+0x5da>
    177a:	d5 14       	cp	r13, r5
    177c:	10 f4       	brcc	.+4      	; 0x1782 <vfprintf+0x5f4>
    177e:	5d 18       	sub	r5, r13
    1780:	01 c0       	rjmp	.+2      	; 0x1784 <vfprintf+0x5f6>
    1782:	51 2c       	mov	r5, r1
    1784:	04 ff       	sbrs	r16, 4
    1786:	10 c0       	rjmp	.+32     	; 0x17a8 <vfprintf+0x61a>
    1788:	b7 01       	movw	r22, r14
    178a:	80 e3       	ldi	r24, 0x30	; 48
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    1792:	02 ff       	sbrs	r16, 2
    1794:	17 c0       	rjmp	.+46     	; 0x17c4 <vfprintf+0x636>
    1796:	01 fd       	sbrc	r16, 1
    1798:	03 c0       	rjmp	.+6      	; 0x17a0 <vfprintf+0x612>
    179a:	88 e7       	ldi	r24, 0x78	; 120
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	02 c0       	rjmp	.+4      	; 0x17a4 <vfprintf+0x616>
    17a0:	88 e5       	ldi	r24, 0x58	; 88
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	b7 01       	movw	r22, r14
    17a6:	0c c0       	rjmp	.+24     	; 0x17c0 <vfprintf+0x632>
    17a8:	80 2f       	mov	r24, r16
    17aa:	86 78       	andi	r24, 0x86	; 134
    17ac:	59 f0       	breq	.+22     	; 0x17c4 <vfprintf+0x636>
    17ae:	01 ff       	sbrs	r16, 1
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <vfprintf+0x628>
    17b2:	8b e2       	ldi	r24, 0x2B	; 43
    17b4:	01 c0       	rjmp	.+2      	; 0x17b8 <vfprintf+0x62a>
    17b6:	80 e2       	ldi	r24, 0x20	; 32
    17b8:	07 fd       	sbrc	r16, 7
    17ba:	8d e2       	ldi	r24, 0x2D	; 45
    17bc:	b7 01       	movw	r22, r14
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    17c4:	c1 16       	cp	r12, r17
    17c6:	38 f4       	brcc	.+14     	; 0x17d6 <vfprintf+0x648>
    17c8:	b7 01       	movw	r22, r14
    17ca:	80 e3       	ldi	r24, 0x30	; 48
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    17d2:	11 50       	subi	r17, 0x01	; 1
    17d4:	f7 cf       	rjmp	.-18     	; 0x17c4 <vfprintf+0x636>
    17d6:	ca 94       	dec	r12
    17d8:	f3 01       	movw	r30, r6
    17da:	ec 0d       	add	r30, r12
    17dc:	f1 1d       	adc	r31, r1
    17de:	80 81       	ld	r24, Z
    17e0:	b7 01       	movw	r22, r14
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    17e8:	c1 10       	cpse	r12, r1
    17ea:	f5 cf       	rjmp	.-22     	; 0x17d6 <vfprintf+0x648>
    17ec:	15 c0       	rjmp	.+42     	; 0x1818 <vfprintf+0x68a>
    17ee:	f4 e0       	ldi	r31, 0x04	; 4
    17f0:	f5 15       	cp	r31, r5
    17f2:	60 f5       	brcc	.+88     	; 0x184c <vfprintf+0x6be>
    17f4:	84 e0       	ldi	r24, 0x04	; 4
    17f6:	58 1a       	sub	r5, r24
    17f8:	93 fe       	sbrs	r9, 3
    17fa:	1f c0       	rjmp	.+62     	; 0x183a <vfprintf+0x6ac>
    17fc:	01 11       	cpse	r16, r1
    17fe:	27 c0       	rjmp	.+78     	; 0x184e <vfprintf+0x6c0>
    1800:	2c 85       	ldd	r18, Y+12	; 0x0c
    1802:	23 ff       	sbrs	r18, 3
    1804:	2a c0       	rjmp	.+84     	; 0x185a <vfprintf+0x6cc>
    1806:	02 ed       	ldi	r16, 0xD2	; 210
    1808:	10 e0       	ldi	r17, 0x00	; 0
    180a:	39 2d       	mov	r19, r9
    180c:	30 71       	andi	r19, 0x10	; 16
    180e:	93 2e       	mov	r9, r19
    1810:	f8 01       	movw	r30, r16
    1812:	84 91       	lpm	r24, Z
    1814:	81 11       	cpse	r24, r1
    1816:	24 c0       	rjmp	.+72     	; 0x1860 <vfprintf+0x6d2>
    1818:	55 20       	and	r5, r5
    181a:	09 f4       	brne	.+2      	; 0x181e <vfprintf+0x690>
    181c:	e4 cc       	rjmp	.-1592   	; 0x11e6 <vfprintf+0x58>
    181e:	b7 01       	movw	r22, r14
    1820:	80 e2       	ldi	r24, 0x20	; 32
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    1828:	5a 94       	dec	r5
    182a:	f6 cf       	rjmp	.-20     	; 0x1818 <vfprintf+0x68a>
    182c:	f7 01       	movw	r30, r14
    182e:	86 81       	ldd	r24, Z+6	; 0x06
    1830:	97 81       	ldd	r25, Z+7	; 0x07
    1832:	26 c0       	rjmp	.+76     	; 0x1880 <vfprintf+0x6f2>
    1834:	8f ef       	ldi	r24, 0xFF	; 255
    1836:	9f ef       	ldi	r25, 0xFF	; 255
    1838:	23 c0       	rjmp	.+70     	; 0x1880 <vfprintf+0x6f2>
    183a:	b7 01       	movw	r22, r14
    183c:	80 e2       	ldi	r24, 0x20	; 32
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    1844:	5a 94       	dec	r5
    1846:	51 10       	cpse	r5, r1
    1848:	f8 cf       	rjmp	.-16     	; 0x183a <vfprintf+0x6ac>
    184a:	d8 cf       	rjmp	.-80     	; 0x17fc <vfprintf+0x66e>
    184c:	51 2c       	mov	r5, r1
    184e:	b7 01       	movw	r22, r14
    1850:	80 2f       	mov	r24, r16
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    1858:	d3 cf       	rjmp	.-90     	; 0x1800 <vfprintf+0x672>
    185a:	06 ed       	ldi	r16, 0xD6	; 214
    185c:	10 e0       	ldi	r17, 0x00	; 0
    185e:	d5 cf       	rjmp	.-86     	; 0x180a <vfprintf+0x67c>
    1860:	91 10       	cpse	r9, r1
    1862:	80 52       	subi	r24, 0x20	; 32
    1864:	b7 01       	movw	r22, r14
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <fputc>
    186c:	0f 5f       	subi	r16, 0xFF	; 255
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	cf cf       	rjmp	.-98     	; 0x1810 <vfprintf+0x682>
    1872:	23 e0       	ldi	r18, 0x03	; 3
    1874:	25 15       	cp	r18, r5
    1876:	10 f4       	brcc	.+4      	; 0x187c <vfprintf+0x6ee>
    1878:	83 e0       	ldi	r24, 0x03	; 3
    187a:	bd cf       	rjmp	.-134    	; 0x17f6 <vfprintf+0x668>
    187c:	51 2c       	mov	r5, r1
    187e:	c0 cf       	rjmp	.-128    	; 0x1800 <vfprintf+0x672>
    1880:	60 96       	adiw	r28, 0x10	; 16
    1882:	e2 e1       	ldi	r30, 0x12	; 18
    1884:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__epilogue_restores__>

00001888 <__udivmodhi4>:
    1888:	aa 1b       	sub	r26, r26
    188a:	bb 1b       	sub	r27, r27
    188c:	51 e1       	ldi	r21, 0x11	; 17
    188e:	07 c0       	rjmp	.+14     	; 0x189e <__udivmodhi4_ep>

00001890 <__udivmodhi4_loop>:
    1890:	aa 1f       	adc	r26, r26
    1892:	bb 1f       	adc	r27, r27
    1894:	a6 17       	cp	r26, r22
    1896:	b7 07       	cpc	r27, r23
    1898:	10 f0       	brcs	.+4      	; 0x189e <__udivmodhi4_ep>
    189a:	a6 1b       	sub	r26, r22
    189c:	b7 0b       	sbc	r27, r23

0000189e <__udivmodhi4_ep>:
    189e:	88 1f       	adc	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	5a 95       	dec	r21
    18a4:	a9 f7       	brne	.-22     	; 0x1890 <__udivmodhi4_loop>
    18a6:	80 95       	com	r24
    18a8:	90 95       	com	r25
    18aa:	bc 01       	movw	r22, r24
    18ac:	cd 01       	movw	r24, r26
    18ae:	08 95       	ret

000018b0 <__udivmodsi4>:
    18b0:	a1 e2       	ldi	r26, 0x21	; 33
    18b2:	1a 2e       	mov	r1, r26
    18b4:	aa 1b       	sub	r26, r26
    18b6:	bb 1b       	sub	r27, r27
    18b8:	fd 01       	movw	r30, r26
    18ba:	0d c0       	rjmp	.+26     	; 0x18d6 <__udivmodsi4_ep>

000018bc <__udivmodsi4_loop>:
    18bc:	aa 1f       	adc	r26, r26
    18be:	bb 1f       	adc	r27, r27
    18c0:	ee 1f       	adc	r30, r30
    18c2:	ff 1f       	adc	r31, r31
    18c4:	a2 17       	cp	r26, r18
    18c6:	b3 07       	cpc	r27, r19
    18c8:	e4 07       	cpc	r30, r20
    18ca:	f5 07       	cpc	r31, r21
    18cc:	20 f0       	brcs	.+8      	; 0x18d6 <__udivmodsi4_ep>
    18ce:	a2 1b       	sub	r26, r18
    18d0:	b3 0b       	sbc	r27, r19
    18d2:	e4 0b       	sbc	r30, r20
    18d4:	f5 0b       	sbc	r31, r21

000018d6 <__udivmodsi4_ep>:
    18d6:	66 1f       	adc	r22, r22
    18d8:	77 1f       	adc	r23, r23
    18da:	88 1f       	adc	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	1a 94       	dec	r1
    18e0:	69 f7       	brne	.-38     	; 0x18bc <__udivmodsi4_loop>
    18e2:	60 95       	com	r22
    18e4:	70 95       	com	r23
    18e6:	80 95       	com	r24
    18e8:	90 95       	com	r25
    18ea:	9b 01       	movw	r18, r22
    18ec:	ac 01       	movw	r20, r24
    18ee:	bd 01       	movw	r22, r26
    18f0:	cf 01       	movw	r24, r30
    18f2:	08 95       	ret

000018f4 <__umulhisi3>:
    18f4:	a2 9f       	mul	r26, r18
    18f6:	b0 01       	movw	r22, r0
    18f8:	b3 9f       	mul	r27, r19
    18fa:	c0 01       	movw	r24, r0
    18fc:	a3 9f       	mul	r26, r19
    18fe:	70 0d       	add	r23, r0
    1900:	81 1d       	adc	r24, r1
    1902:	11 24       	eor	r1, r1
    1904:	91 1d       	adc	r25, r1
    1906:	b2 9f       	mul	r27, r18
    1908:	70 0d       	add	r23, r0
    190a:	81 1d       	adc	r24, r1
    190c:	11 24       	eor	r1, r1
    190e:	91 1d       	adc	r25, r1
    1910:	08 95       	ret

00001912 <__prologue_saves__>:
    1912:	2f 92       	push	r2
    1914:	3f 92       	push	r3
    1916:	4f 92       	push	r4
    1918:	5f 92       	push	r5
    191a:	6f 92       	push	r6
    191c:	7f 92       	push	r7
    191e:	8f 92       	push	r8
    1920:	9f 92       	push	r9
    1922:	af 92       	push	r10
    1924:	bf 92       	push	r11
    1926:	cf 92       	push	r12
    1928:	df 92       	push	r13
    192a:	ef 92       	push	r14
    192c:	ff 92       	push	r15
    192e:	0f 93       	push	r16
    1930:	1f 93       	push	r17
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	ca 1b       	sub	r28, r26
    193c:	db 0b       	sbc	r29, r27
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	cd bf       	out	0x3d, r28	; 61
    1948:	09 94       	ijmp

0000194a <__epilogue_restores__>:
    194a:	2a 88       	ldd	r2, Y+18	; 0x12
    194c:	39 88       	ldd	r3, Y+17	; 0x11
    194e:	48 88       	ldd	r4, Y+16	; 0x10
    1950:	5f 84       	ldd	r5, Y+15	; 0x0f
    1952:	6e 84       	ldd	r6, Y+14	; 0x0e
    1954:	7d 84       	ldd	r7, Y+13	; 0x0d
    1956:	8c 84       	ldd	r8, Y+12	; 0x0c
    1958:	9b 84       	ldd	r9, Y+11	; 0x0b
    195a:	aa 84       	ldd	r10, Y+10	; 0x0a
    195c:	b9 84       	ldd	r11, Y+9	; 0x09
    195e:	c8 84       	ldd	r12, Y+8	; 0x08
    1960:	df 80       	ldd	r13, Y+7	; 0x07
    1962:	ee 80       	ldd	r14, Y+6	; 0x06
    1964:	fd 80       	ldd	r15, Y+5	; 0x05
    1966:	0c 81       	ldd	r16, Y+4	; 0x04
    1968:	1b 81       	ldd	r17, Y+3	; 0x03
    196a:	aa 81       	ldd	r26, Y+2	; 0x02
    196c:	b9 81       	ldd	r27, Y+1	; 0x01
    196e:	ce 0f       	add	r28, r30
    1970:	d1 1d       	adc	r29, r1
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	ed 01       	movw	r28, r26
    197e:	08 95       	ret

00001980 <__ftoa_engine>:
    1980:	28 30       	cpi	r18, 0x08	; 8
    1982:	08 f0       	brcs	.+2      	; 0x1986 <__ftoa_engine+0x6>
    1984:	27 e0       	ldi	r18, 0x07	; 7
    1986:	33 27       	eor	r19, r19
    1988:	da 01       	movw	r26, r20
    198a:	99 0f       	add	r25, r25
    198c:	31 1d       	adc	r19, r1
    198e:	87 fd       	sbrc	r24, 7
    1990:	91 60       	ori	r25, 0x01	; 1
    1992:	00 96       	adiw	r24, 0x00	; 0
    1994:	61 05       	cpc	r22, r1
    1996:	71 05       	cpc	r23, r1
    1998:	39 f4       	brne	.+14     	; 0x19a8 <__ftoa_engine+0x28>
    199a:	32 60       	ori	r19, 0x02	; 2
    199c:	2e 5f       	subi	r18, 0xFE	; 254
    199e:	3d 93       	st	X+, r19
    19a0:	30 e3       	ldi	r19, 0x30	; 48
    19a2:	2a 95       	dec	r18
    19a4:	e1 f7       	brne	.-8      	; 0x199e <__ftoa_engine+0x1e>
    19a6:	08 95       	ret
    19a8:	9f 3f       	cpi	r25, 0xFF	; 255
    19aa:	30 f0       	brcs	.+12     	; 0x19b8 <__ftoa_engine+0x38>
    19ac:	80 38       	cpi	r24, 0x80	; 128
    19ae:	71 05       	cpc	r23, r1
    19b0:	61 05       	cpc	r22, r1
    19b2:	09 f0       	breq	.+2      	; 0x19b6 <__ftoa_engine+0x36>
    19b4:	3c 5f       	subi	r19, 0xFC	; 252
    19b6:	3c 5f       	subi	r19, 0xFC	; 252
    19b8:	3d 93       	st	X+, r19
    19ba:	91 30       	cpi	r25, 0x01	; 1
    19bc:	08 f0       	brcs	.+2      	; 0x19c0 <__ftoa_engine+0x40>
    19be:	80 68       	ori	r24, 0x80	; 128
    19c0:	91 1d       	adc	r25, r1
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	1f 93       	push	r17
    19c8:	0f 93       	push	r16
    19ca:	ff 92       	push	r15
    19cc:	ef 92       	push	r14
    19ce:	19 2f       	mov	r17, r25
    19d0:	98 7f       	andi	r25, 0xF8	; 248
    19d2:	96 95       	lsr	r25
    19d4:	e9 2f       	mov	r30, r25
    19d6:	96 95       	lsr	r25
    19d8:	96 95       	lsr	r25
    19da:	e9 0f       	add	r30, r25
    19dc:	ff 27       	eor	r31, r31
    19de:	ec 5c       	subi	r30, 0xCC	; 204
    19e0:	fe 4f       	sbci	r31, 0xFE	; 254
    19e2:	99 27       	eor	r25, r25
    19e4:	33 27       	eor	r19, r19
    19e6:	ee 24       	eor	r14, r14
    19e8:	ff 24       	eor	r15, r15
    19ea:	a7 01       	movw	r20, r14
    19ec:	e7 01       	movw	r28, r14
    19ee:	05 90       	lpm	r0, Z+
    19f0:	08 94       	sec
    19f2:	07 94       	ror	r0
    19f4:	28 f4       	brcc	.+10     	; 0x1a00 <__ftoa_engine+0x80>
    19f6:	36 0f       	add	r19, r22
    19f8:	e7 1e       	adc	r14, r23
    19fa:	f8 1e       	adc	r15, r24
    19fc:	49 1f       	adc	r20, r25
    19fe:	51 1d       	adc	r21, r1
    1a00:	66 0f       	add	r22, r22
    1a02:	77 1f       	adc	r23, r23
    1a04:	88 1f       	adc	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	06 94       	lsr	r0
    1a0a:	a1 f7       	brne	.-24     	; 0x19f4 <__ftoa_engine+0x74>
    1a0c:	05 90       	lpm	r0, Z+
    1a0e:	07 94       	ror	r0
    1a10:	28 f4       	brcc	.+10     	; 0x1a1c <__ftoa_engine+0x9c>
    1a12:	e7 0e       	add	r14, r23
    1a14:	f8 1e       	adc	r15, r24
    1a16:	49 1f       	adc	r20, r25
    1a18:	56 1f       	adc	r21, r22
    1a1a:	c1 1d       	adc	r28, r1
    1a1c:	77 0f       	add	r23, r23
    1a1e:	88 1f       	adc	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	66 1f       	adc	r22, r22
    1a24:	06 94       	lsr	r0
    1a26:	a1 f7       	brne	.-24     	; 0x1a10 <__ftoa_engine+0x90>
    1a28:	05 90       	lpm	r0, Z+
    1a2a:	07 94       	ror	r0
    1a2c:	28 f4       	brcc	.+10     	; 0x1a38 <__ftoa_engine+0xb8>
    1a2e:	f8 0e       	add	r15, r24
    1a30:	49 1f       	adc	r20, r25
    1a32:	56 1f       	adc	r21, r22
    1a34:	c7 1f       	adc	r28, r23
    1a36:	d1 1d       	adc	r29, r1
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	66 1f       	adc	r22, r22
    1a3e:	77 1f       	adc	r23, r23
    1a40:	06 94       	lsr	r0
    1a42:	a1 f7       	brne	.-24     	; 0x1a2c <__ftoa_engine+0xac>
    1a44:	05 90       	lpm	r0, Z+
    1a46:	07 94       	ror	r0
    1a48:	20 f4       	brcc	.+8      	; 0x1a52 <__ftoa_engine+0xd2>
    1a4a:	49 0f       	add	r20, r25
    1a4c:	56 1f       	adc	r21, r22
    1a4e:	c7 1f       	adc	r28, r23
    1a50:	d8 1f       	adc	r29, r24
    1a52:	99 0f       	add	r25, r25
    1a54:	66 1f       	adc	r22, r22
    1a56:	77 1f       	adc	r23, r23
    1a58:	88 1f       	adc	r24, r24
    1a5a:	06 94       	lsr	r0
    1a5c:	a9 f7       	brne	.-22     	; 0x1a48 <__ftoa_engine+0xc8>
    1a5e:	84 91       	lpm	r24, Z
    1a60:	10 95       	com	r17
    1a62:	17 70       	andi	r17, 0x07	; 7
    1a64:	41 f0       	breq	.+16     	; 0x1a76 <__ftoa_engine+0xf6>
    1a66:	d6 95       	lsr	r29
    1a68:	c7 95       	ror	r28
    1a6a:	57 95       	ror	r21
    1a6c:	47 95       	ror	r20
    1a6e:	f7 94       	ror	r15
    1a70:	e7 94       	ror	r14
    1a72:	1a 95       	dec	r17
    1a74:	c1 f7       	brne	.-16     	; 0x1a66 <__ftoa_engine+0xe6>
    1a76:	ea ed       	ldi	r30, 0xDA	; 218
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	68 94       	set
    1a7c:	15 90       	lpm	r1, Z+
    1a7e:	15 91       	lpm	r17, Z+
    1a80:	35 91       	lpm	r19, Z+
    1a82:	65 91       	lpm	r22, Z+
    1a84:	95 91       	lpm	r25, Z+
    1a86:	05 90       	lpm	r0, Z+
    1a88:	7f e2       	ldi	r23, 0x2F	; 47
    1a8a:	73 95       	inc	r23
    1a8c:	e1 18       	sub	r14, r1
    1a8e:	f1 0a       	sbc	r15, r17
    1a90:	43 0b       	sbc	r20, r19
    1a92:	56 0b       	sbc	r21, r22
    1a94:	c9 0b       	sbc	r28, r25
    1a96:	d0 09       	sbc	r29, r0
    1a98:	c0 f7       	brcc	.-16     	; 0x1a8a <__ftoa_engine+0x10a>
    1a9a:	e1 0c       	add	r14, r1
    1a9c:	f1 1e       	adc	r15, r17
    1a9e:	43 1f       	adc	r20, r19
    1aa0:	56 1f       	adc	r21, r22
    1aa2:	c9 1f       	adc	r28, r25
    1aa4:	d0 1d       	adc	r29, r0
    1aa6:	7e f4       	brtc	.+30     	; 0x1ac6 <__ftoa_engine+0x146>
    1aa8:	70 33       	cpi	r23, 0x30	; 48
    1aaa:	11 f4       	brne	.+4      	; 0x1ab0 <__ftoa_engine+0x130>
    1aac:	8a 95       	dec	r24
    1aae:	e6 cf       	rjmp	.-52     	; 0x1a7c <__ftoa_engine+0xfc>
    1ab0:	e8 94       	clt
    1ab2:	01 50       	subi	r16, 0x01	; 1
    1ab4:	30 f0       	brcs	.+12     	; 0x1ac2 <__ftoa_engine+0x142>
    1ab6:	08 0f       	add	r16, r24
    1ab8:	0a f4       	brpl	.+2      	; 0x1abc <__ftoa_engine+0x13c>
    1aba:	00 27       	eor	r16, r16
    1abc:	02 17       	cp	r16, r18
    1abe:	08 f4       	brcc	.+2      	; 0x1ac2 <__ftoa_engine+0x142>
    1ac0:	20 2f       	mov	r18, r16
    1ac2:	23 95       	inc	r18
    1ac4:	02 2f       	mov	r16, r18
    1ac6:	7a 33       	cpi	r23, 0x3A	; 58
    1ac8:	28 f0       	brcs	.+10     	; 0x1ad4 <__ftoa_engine+0x154>
    1aca:	79 e3       	ldi	r23, 0x39	; 57
    1acc:	7d 93       	st	X+, r23
    1ace:	2a 95       	dec	r18
    1ad0:	e9 f7       	brne	.-6      	; 0x1acc <__ftoa_engine+0x14c>
    1ad2:	10 c0       	rjmp	.+32     	; 0x1af4 <__ftoa_engine+0x174>
    1ad4:	7d 93       	st	X+, r23
    1ad6:	2a 95       	dec	r18
    1ad8:	89 f6       	brne	.-94     	; 0x1a7c <__ftoa_engine+0xfc>
    1ada:	06 94       	lsr	r0
    1adc:	97 95       	ror	r25
    1ade:	67 95       	ror	r22
    1ae0:	37 95       	ror	r19
    1ae2:	17 95       	ror	r17
    1ae4:	17 94       	ror	r1
    1ae6:	e1 18       	sub	r14, r1
    1ae8:	f1 0a       	sbc	r15, r17
    1aea:	43 0b       	sbc	r20, r19
    1aec:	56 0b       	sbc	r21, r22
    1aee:	c9 0b       	sbc	r28, r25
    1af0:	d0 09       	sbc	r29, r0
    1af2:	98 f0       	brcs	.+38     	; 0x1b1a <__ftoa_engine+0x19a>
    1af4:	23 95       	inc	r18
    1af6:	7e 91       	ld	r23, -X
    1af8:	73 95       	inc	r23
    1afa:	7a 33       	cpi	r23, 0x3A	; 58
    1afc:	08 f0       	brcs	.+2      	; 0x1b00 <__ftoa_engine+0x180>
    1afe:	70 e3       	ldi	r23, 0x30	; 48
    1b00:	7c 93       	st	X, r23
    1b02:	20 13       	cpse	r18, r16
    1b04:	b8 f7       	brcc	.-18     	; 0x1af4 <__ftoa_engine+0x174>
    1b06:	7e 91       	ld	r23, -X
    1b08:	70 61       	ori	r23, 0x10	; 16
    1b0a:	7d 93       	st	X+, r23
    1b0c:	30 f0       	brcs	.+12     	; 0x1b1a <__ftoa_engine+0x19a>
    1b0e:	83 95       	inc	r24
    1b10:	71 e3       	ldi	r23, 0x31	; 49
    1b12:	7d 93       	st	X+, r23
    1b14:	70 e3       	ldi	r23, 0x30	; 48
    1b16:	2a 95       	dec	r18
    1b18:	e1 f7       	brne	.-8      	; 0x1b12 <__ftoa_engine+0x192>
    1b1a:	11 24       	eor	r1, r1
    1b1c:	ef 90       	pop	r14
    1b1e:	ff 90       	pop	r15
    1b20:	0f 91       	pop	r16
    1b22:	1f 91       	pop	r17
    1b24:	cf 91       	pop	r28
    1b26:	df 91       	pop	r29
    1b28:	99 27       	eor	r25, r25
    1b2a:	87 fd       	sbrc	r24, 7
    1b2c:	90 95       	com	r25
    1b2e:	08 95       	ret

00001b30 <strnlen_P>:
    1b30:	fc 01       	movw	r30, r24
    1b32:	05 90       	lpm	r0, Z+
    1b34:	61 50       	subi	r22, 0x01	; 1
    1b36:	70 40       	sbci	r23, 0x00	; 0
    1b38:	01 10       	cpse	r0, r1
    1b3a:	d8 f7       	brcc	.-10     	; 0x1b32 <strnlen_P+0x2>
    1b3c:	80 95       	com	r24
    1b3e:	90 95       	com	r25
    1b40:	8e 0f       	add	r24, r30
    1b42:	9f 1f       	adc	r25, r31
    1b44:	08 95       	ret

00001b46 <strnlen>:
    1b46:	fc 01       	movw	r30, r24
    1b48:	61 50       	subi	r22, 0x01	; 1
    1b4a:	70 40       	sbci	r23, 0x00	; 0
    1b4c:	01 90       	ld	r0, Z+
    1b4e:	01 10       	cpse	r0, r1
    1b50:	d8 f7       	brcc	.-10     	; 0x1b48 <strnlen+0x2>
    1b52:	80 95       	com	r24
    1b54:	90 95       	com	r25
    1b56:	8e 0f       	add	r24, r30
    1b58:	9f 1f       	adc	r25, r31
    1b5a:	08 95       	ret

00001b5c <fputc>:
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	fb 01       	movw	r30, r22
    1b66:	23 81       	ldd	r18, Z+3	; 0x03
    1b68:	21 fd       	sbrc	r18, 1
    1b6a:	03 c0       	rjmp	.+6      	; 0x1b72 <fputc+0x16>
    1b6c:	8f ef       	ldi	r24, 0xFF	; 255
    1b6e:	9f ef       	ldi	r25, 0xFF	; 255
    1b70:	2c c0       	rjmp	.+88     	; 0x1bca <fputc+0x6e>
    1b72:	22 ff       	sbrs	r18, 2
    1b74:	16 c0       	rjmp	.+44     	; 0x1ba2 <fputc+0x46>
    1b76:	46 81       	ldd	r20, Z+6	; 0x06
    1b78:	57 81       	ldd	r21, Z+7	; 0x07
    1b7a:	24 81       	ldd	r18, Z+4	; 0x04
    1b7c:	35 81       	ldd	r19, Z+5	; 0x05
    1b7e:	42 17       	cp	r20, r18
    1b80:	53 07       	cpc	r21, r19
    1b82:	44 f4       	brge	.+16     	; 0x1b94 <fputc+0x38>
    1b84:	a0 81       	ld	r26, Z
    1b86:	b1 81       	ldd	r27, Z+1	; 0x01
    1b88:	9d 01       	movw	r18, r26
    1b8a:	2f 5f       	subi	r18, 0xFF	; 255
    1b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8e:	31 83       	std	Z+1, r19	; 0x01
    1b90:	20 83       	st	Z, r18
    1b92:	8c 93       	st	X, r24
    1b94:	26 81       	ldd	r18, Z+6	; 0x06
    1b96:	37 81       	ldd	r19, Z+7	; 0x07
    1b98:	2f 5f       	subi	r18, 0xFF	; 255
    1b9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b9c:	37 83       	std	Z+7, r19	; 0x07
    1b9e:	26 83       	std	Z+6, r18	; 0x06
    1ba0:	14 c0       	rjmp	.+40     	; 0x1bca <fputc+0x6e>
    1ba2:	8b 01       	movw	r16, r22
    1ba4:	ec 01       	movw	r28, r24
    1ba6:	fb 01       	movw	r30, r22
    1ba8:	00 84       	ldd	r0, Z+8	; 0x08
    1baa:	f1 85       	ldd	r31, Z+9	; 0x09
    1bac:	e0 2d       	mov	r30, r0
    1bae:	09 95       	icall
    1bb0:	89 2b       	or	r24, r25
    1bb2:	e1 f6       	brne	.-72     	; 0x1b6c <fputc+0x10>
    1bb4:	d8 01       	movw	r26, r16
    1bb6:	16 96       	adiw	r26, 0x06	; 6
    1bb8:	8d 91       	ld	r24, X+
    1bba:	9c 91       	ld	r25, X
    1bbc:	17 97       	sbiw	r26, 0x07	; 7
    1bbe:	01 96       	adiw	r24, 0x01	; 1
    1bc0:	17 96       	adiw	r26, 0x07	; 7
    1bc2:	9c 93       	st	X, r25
    1bc4:	8e 93       	st	-X, r24
    1bc6:	16 97       	sbiw	r26, 0x06	; 6
    1bc8:	ce 01       	movw	r24, r28
    1bca:	df 91       	pop	r29
    1bcc:	cf 91       	pop	r28
    1bce:	1f 91       	pop	r17
    1bd0:	0f 91       	pop	r16
    1bd2:	08 95       	ret

00001bd4 <sprintf>:
    1bd4:	ae e0       	ldi	r26, 0x0E	; 14
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	e0 ef       	ldi	r30, 0xF0	; 240
    1bda:	fd e0       	ldi	r31, 0x0D	; 13
    1bdc:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__prologue_saves__+0x1c>
    1be0:	0d 89       	ldd	r16, Y+21	; 0x15
    1be2:	1e 89       	ldd	r17, Y+22	; 0x16
    1be4:	86 e0       	ldi	r24, 0x06	; 6
    1be6:	8c 83       	std	Y+4, r24	; 0x04
    1be8:	1a 83       	std	Y+2, r17	; 0x02
    1bea:	09 83       	std	Y+1, r16	; 0x01
    1bec:	8f ef       	ldi	r24, 0xFF	; 255
    1bee:	9f e7       	ldi	r25, 0x7F	; 127
    1bf0:	9e 83       	std	Y+6, r25	; 0x06
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
    1bf4:	ae 01       	movw	r20, r28
    1bf6:	47 5e       	subi	r20, 0xE7	; 231
    1bf8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bfa:	6f 89       	ldd	r22, Y+23	; 0x17
    1bfc:	78 8d       	ldd	r23, Y+24	; 0x18
    1bfe:	ce 01       	movw	r24, r28
    1c00:	01 96       	adiw	r24, 0x01	; 1
    1c02:	0e 94 c7 08 	call	0x118e	; 0x118e <vfprintf>
    1c06:	ef 81       	ldd	r30, Y+7	; 0x07
    1c08:	f8 85       	ldd	r31, Y+8	; 0x08
    1c0a:	e0 0f       	add	r30, r16
    1c0c:	f1 1f       	adc	r31, r17
    1c0e:	10 82       	st	Z, r1
    1c10:	2e 96       	adiw	r28, 0x0e	; 14
    1c12:	e4 e0       	ldi	r30, 0x04	; 4
    1c14:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__epilogue_restores__+0x1c>

00001c18 <__ultoa_invert>:
    1c18:	fa 01       	movw	r30, r20
    1c1a:	aa 27       	eor	r26, r26
    1c1c:	28 30       	cpi	r18, 0x08	; 8
    1c1e:	51 f1       	breq	.+84     	; 0x1c74 <__ultoa_invert+0x5c>
    1c20:	20 31       	cpi	r18, 0x10	; 16
    1c22:	81 f1       	breq	.+96     	; 0x1c84 <__ultoa_invert+0x6c>
    1c24:	e8 94       	clt
    1c26:	6f 93       	push	r22
    1c28:	6e 7f       	andi	r22, 0xFE	; 254
    1c2a:	6e 5f       	subi	r22, 0xFE	; 254
    1c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1c30:	9f 4f       	sbci	r25, 0xFF	; 255
    1c32:	af 4f       	sbci	r26, 0xFF	; 255
    1c34:	b1 e0       	ldi	r27, 0x01	; 1
    1c36:	3e d0       	rcall	.+124    	; 0x1cb4 <__ultoa_invert+0x9c>
    1c38:	b4 e0       	ldi	r27, 0x04	; 4
    1c3a:	3c d0       	rcall	.+120    	; 0x1cb4 <__ultoa_invert+0x9c>
    1c3c:	67 0f       	add	r22, r23
    1c3e:	78 1f       	adc	r23, r24
    1c40:	89 1f       	adc	r24, r25
    1c42:	9a 1f       	adc	r25, r26
    1c44:	a1 1d       	adc	r26, r1
    1c46:	68 0f       	add	r22, r24
    1c48:	79 1f       	adc	r23, r25
    1c4a:	8a 1f       	adc	r24, r26
    1c4c:	91 1d       	adc	r25, r1
    1c4e:	a1 1d       	adc	r26, r1
    1c50:	6a 0f       	add	r22, r26
    1c52:	71 1d       	adc	r23, r1
    1c54:	81 1d       	adc	r24, r1
    1c56:	91 1d       	adc	r25, r1
    1c58:	a1 1d       	adc	r26, r1
    1c5a:	20 d0       	rcall	.+64     	; 0x1c9c <__ultoa_invert+0x84>
    1c5c:	09 f4       	brne	.+2      	; 0x1c60 <__ultoa_invert+0x48>
    1c5e:	68 94       	set
    1c60:	3f 91       	pop	r19
    1c62:	2a e0       	ldi	r18, 0x0A	; 10
    1c64:	26 9f       	mul	r18, r22
    1c66:	11 24       	eor	r1, r1
    1c68:	30 19       	sub	r19, r0
    1c6a:	30 5d       	subi	r19, 0xD0	; 208
    1c6c:	31 93       	st	Z+, r19
    1c6e:	de f6       	brtc	.-74     	; 0x1c26 <__ultoa_invert+0xe>
    1c70:	cf 01       	movw	r24, r30
    1c72:	08 95       	ret
    1c74:	46 2f       	mov	r20, r22
    1c76:	47 70       	andi	r20, 0x07	; 7
    1c78:	40 5d       	subi	r20, 0xD0	; 208
    1c7a:	41 93       	st	Z+, r20
    1c7c:	b3 e0       	ldi	r27, 0x03	; 3
    1c7e:	0f d0       	rcall	.+30     	; 0x1c9e <__ultoa_invert+0x86>
    1c80:	c9 f7       	brne	.-14     	; 0x1c74 <__ultoa_invert+0x5c>
    1c82:	f6 cf       	rjmp	.-20     	; 0x1c70 <__ultoa_invert+0x58>
    1c84:	46 2f       	mov	r20, r22
    1c86:	4f 70       	andi	r20, 0x0F	; 15
    1c88:	40 5d       	subi	r20, 0xD0	; 208
    1c8a:	4a 33       	cpi	r20, 0x3A	; 58
    1c8c:	18 f0       	brcs	.+6      	; 0x1c94 <__ultoa_invert+0x7c>
    1c8e:	49 5d       	subi	r20, 0xD9	; 217
    1c90:	31 fd       	sbrc	r19, 1
    1c92:	40 52       	subi	r20, 0x20	; 32
    1c94:	41 93       	st	Z+, r20
    1c96:	02 d0       	rcall	.+4      	; 0x1c9c <__ultoa_invert+0x84>
    1c98:	a9 f7       	brne	.-22     	; 0x1c84 <__ultoa_invert+0x6c>
    1c9a:	ea cf       	rjmp	.-44     	; 0x1c70 <__ultoa_invert+0x58>
    1c9c:	b4 e0       	ldi	r27, 0x04	; 4
    1c9e:	a6 95       	lsr	r26
    1ca0:	97 95       	ror	r25
    1ca2:	87 95       	ror	r24
    1ca4:	77 95       	ror	r23
    1ca6:	67 95       	ror	r22
    1ca8:	ba 95       	dec	r27
    1caa:	c9 f7       	brne	.-14     	; 0x1c9e <__ultoa_invert+0x86>
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	61 05       	cpc	r22, r1
    1cb0:	71 05       	cpc	r23, r1
    1cb2:	08 95       	ret
    1cb4:	9b 01       	movw	r18, r22
    1cb6:	ac 01       	movw	r20, r24
    1cb8:	0a 2e       	mov	r0, r26
    1cba:	06 94       	lsr	r0
    1cbc:	57 95       	ror	r21
    1cbe:	47 95       	ror	r20
    1cc0:	37 95       	ror	r19
    1cc2:	27 95       	ror	r18
    1cc4:	ba 95       	dec	r27
    1cc6:	c9 f7       	brne	.-14     	; 0x1cba <__ultoa_invert+0xa2>
    1cc8:	62 0f       	add	r22, r18
    1cca:	73 1f       	adc	r23, r19
    1ccc:	84 1f       	adc	r24, r20
    1cce:	95 1f       	adc	r25, r21
    1cd0:	a0 1d       	adc	r26, r0
    1cd2:	08 95       	ret

00001cd4 <_exit>:
    1cd4:	f8 94       	cli

00001cd6 <__stop_program>:
    1cd6:	ff cf       	rjmp	.-2      	; 0x1cd6 <__stop_program>
