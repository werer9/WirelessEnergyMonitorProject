
EE209.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00001dc0  00001e54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001cf  00800144  00800144  00001e98  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e98  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ef4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ed5  00000000  00000000  0000210c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000108a  00000000  00000000  00003fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d34  00000000  00000000  0000506b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000538  00000000  00000000  00005da0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000981  00000000  00000000  000062d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dba  00000000  00000000  00006c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00007a13  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__ctors_end>
       4:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__vector_1>
       8:	0c 94 c3 03 	jmp	0x786	; 0x786 <__vector_2>
       c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      10:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      14:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      18:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      24:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      28:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      2c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      34:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      40:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      44:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      48:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      4c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      50:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      54:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      58:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      5c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      60:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      64:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      68:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      6c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      70:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      74:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      78:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      7c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      80:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      84:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      88:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      8c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      90:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      94:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      98:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      9c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      ac:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      b0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      b4:	05 a8       	ldd	r0, Z+53	; 0x35
      b6:	4c cd       	rjmp	.-1384   	; 0xfffffb50 <__eeprom_end+0xff7efb50>
      b8:	b2 d4       	rcall	.+2404   	; 0xa1e <get_uart_string+0x16>
      ba:	4e b9       	out	0x0e, r20	; 14
      bc:	38 36       	cpi	r19, 0x68	; 104
      be:	a9 02       	muls	r26, r25
      c0:	0c 50       	subi	r16, 0x0C	; 12
      c2:	b9 91       	ld	r27, Y+
      c4:	86 88       	ldd	r8, Z+22	; 0x16
      c6:	08 3c       	cpi	r16, 0xC8	; 200
      c8:	a6 aa       	std	Z+54, r10	; 0x36
      ca:	aa 2a       	or	r10, r26
      cc:	be 00       	.word	0x00be	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240

000000d2 <__trampolines_end>:
      d2:	6e 61       	ori	r22, 0x1E	; 30
      d4:	6e 00       	.word	0x006e	; ????

000000d6 <__c.2332>:
      d6:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      e6:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      f6:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     106:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     116:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     126:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     136:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     146:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     156:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     166:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     176:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     186:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     196:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1a6:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1b6:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1c6:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	d8 e0       	ldi	r29, 0x08	; 8
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61

000001e0 <__do_copy_data>:
     1e0:	11 e0       	ldi	r17, 0x01	; 1
     1e2:	a0 e0       	ldi	r26, 0x00	; 0
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	e0 ec       	ldi	r30, 0xC0	; 192
     1e8:	fd e1       	ldi	r31, 0x1D	; 29
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x10>
     1ec:	05 90       	lpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a4 34       	cpi	r26, 0x44	; 68
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0xc>

000001f6 <__do_clear_bss>:
     1f6:	23 e0       	ldi	r18, 0x03	; 3
     1f8:	a4 e4       	ldi	r26, 0x44	; 68
     1fa:	b1 e0       	ldi	r27, 0x01	; 1
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a3 31       	cpi	r26, 0x13	; 19
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 95 06 	call	0xd2a	; 0xd2a <main>
     20a:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <_exit>

0000020e <__bad_interrupt>:
     20e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000212 <read_adc_mv>:


uint16_t read_adc_mv(uint8_t channel)
{
	// clear ADMUX
	ADMUX &= 0xF0;
     212:	ec e7       	ldi	r30, 0x7C	; 124
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	90 81       	ld	r25, Z
     218:	90 7f       	andi	r25, 0xF0	; 240
     21a:	90 83       	st	Z, r25
	// set least significant 4 bits to channel
	ADMUX |= channel;
     21c:	90 81       	ld	r25, Z
     21e:	89 2b       	or	r24, r25
     220:	80 83       	st	Z, r24
	// start conversion
	ADCSRA |= (1<<ADSC);
     222:	ea e7       	ldi	r30, 0x7A	; 122
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	80 81       	ld	r24, Z
     228:	80 64       	ori	r24, 0x40	; 64
     22a:	80 83       	st	Z, r24
	// wait until conversion is finished
	while (ADCSRA & (1<<ADSC));
     22c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     230:	86 fd       	sbrc	r24, 6
     232:	fc cf       	rjmp	.-8      	; 0x22c <read_adc_mv+0x1a>
	
	// read full 10 bits of ADC registers
	uint16_t adc_output = ADCW;
     234:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     238:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	// convert reading into millivolts
	uint32_t mv = (uint32_t)adc_output * ((uint32_t)5000/1023);
     23c:	a0 e0       	ldi	r26, 0x00	; 0
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	88 0f       	add	r24, r24
     242:	99 1f       	adc	r25, r25
     244:	aa 1f       	adc	r26, r26
     246:	bb 1f       	adc	r27, r27
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	aa 1f       	adc	r26, r26
     24e:	bb 1f       	adc	r27, r27
	return (uint16_t)mv;
}
     250:	08 95       	ret

00000252 <adc_init>:

void adc_init() 
{
	// set ADMUX to read from VCC
	ADMUX |= (1<<REFS0);
     252:	ec e7       	ldi	r30, 0x7C	; 124
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	80 64       	ori	r24, 0x40	; 64
     25a:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     25c:	80 81       	ld	r24, Z
     25e:	8f 77       	andi	r24, 0x7F	; 127
     260:	80 83       	st	Z, r24
	// clear channel selection
	ADMUX &= 0xF0;
     262:	80 81       	ld	r24, Z
     264:	80 7f       	andi	r24, 0xF0	; 240
     266:	80 83       	st	Z, r24
	// enable conversions, scale by system clock by 128
	ADCSRA |= (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     268:	ea e7       	ldi	r30, 0x7A	; 122
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	87 68       	ori	r24, 0x87	; 135
     270:	80 83       	st	Z, r24
     272:	08 95       	ret

00000274 <fsmInit>:
#include "fsm.h"

// initialis fsm with function pointers
void fsmInit(struct functionPointers *fsmFunctions) 
{
    functions = fsmFunctions;
     274:	90 93 20 02 	sts	0x0220, r25	; 0x800220 <functions+0x1>
     278:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <functions>
    state = STATE_INIT;
     27c:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <state>
    voltageTriggerIndex = 0;
     280:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <voltageTriggerIndex>
    currentTriggerIndex = 0;
     284:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <currentTriggerIndex>
	
	triggerSize = 0;
     288:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <triggerSize>
	peakVoltage = 0;
     28c:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <peakVoltage+0x1>
     290:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <peakVoltage>
	peakCurrent = 0;
     294:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <peakCurrent+0x1>
     298:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <peakCurrent>
	voltage = 0;
     29c:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <voltage+0x1>
     2a0:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <voltage>
	current = 0;
     2a4:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <current+0x1>
     2a8:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <current>
	phase = 0;
     2ac:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <phase+0x1>
     2b0:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <phase>
	pf = 0;
     2b4:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <pf+0x1>
     2b8:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <pf>
	power = 0;
     2bc:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <power+0x1>
     2c0:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <power>
     2c4:	08 95       	ret

000002c6 <stateInit>:

// init state
void stateInit()
{
    // init uart
    functions->uart_init(BAUD);
     2c6:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     2ca:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     2ce:	01 90       	ld	r0, Z+
     2d0:	f0 81       	ld	r31, Z
     2d2:	e0 2d       	mov	r30, r0
     2d4:	80 e8       	ldi	r24, 0x80	; 128
     2d6:	95 e2       	ldi	r25, 0x25	; 37
     2d8:	09 95       	icall
    // init io
    functions->io_init();
     2da:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     2de:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     2e2:	02 80       	ldd	r0, Z+2	; 0x02
     2e4:	f3 81       	ldd	r31, Z+3	; 0x03
     2e6:	e0 2d       	mov	r30, r0
     2e8:	09 95       	icall
    // init adc
    functions->adc_init();
     2ea:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     2ee:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     2f2:	04 80       	ldd	r0, Z+4	; 0x04
     2f4:	f5 81       	ldd	r31, Z+5	; 0x05
     2f6:	e0 2d       	mov	r30, r0
     2f8:	09 95       	icall
    // init timer
    functions->timer_init();
     2fa:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     2fe:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     302:	06 80       	ldd	r0, Z+6	; 0x06
     304:	f7 81       	ldd	r31, Z+7	; 0x07
     306:	e0 2d       	mov	r30, r0
     308:	09 95       	icall
    // init interrupts
    functions->int_init(voltageTriggerTimes, currentTriggerTimes, TRIGGER_SIZE, functions->get_time);
     30a:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <functions>
     30e:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <functions+0x1>
     312:	18 96       	adiw	r26, 0x08	; 8
     314:	ed 91       	ld	r30, X+
     316:	fc 91       	ld	r31, X
     318:	19 97       	sbiw	r26, 0x09	; 9
     31a:	58 96       	adiw	r26, 0x18	; 24
     31c:	2d 91       	ld	r18, X+
     31e:	3c 91       	ld	r19, X
     320:	59 97       	sbiw	r26, 0x19	; 25
     322:	44 e0       	ldi	r20, 0x04	; 4
     324:	6f e0       	ldi	r22, 0x0F	; 15
     326:	72 e0       	ldi	r23, 0x02	; 2
     328:	8e e2       	ldi	r24, 0x2E	; 46
     32a:	92 e0       	ldi	r25, 0x02	; 2
     32c:	09 95       	icall
    // change state on function completion
    state = STATE_READ_POWER;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <state>
     334:	08 95       	ret

00000336 <stateReadPower>:
}

// read power state
void stateReadPower()
{
     336:	1f 93       	push	r17
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
    // enable interrupts and reset timer
    
    for (int8_t j = 0; j < SIZE; j++) {
     33c:	10 e0       	ldi	r17, 0x00	; 0
     33e:	22 c0       	rjmp	.+68     	; 0x384 <stateReadPower+0x4e>
		voltages[j] = functions->read_adc(VOLTAGE_PIN);
     340:	c1 2f       	mov	r28, r17
     342:	01 2e       	mov	r0, r17
     344:	00 0c       	add	r0, r0
     346:	dd 0b       	sbc	r29, r29
     348:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     34c:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     350:	06 88       	ldd	r0, Z+22	; 0x16
     352:	f7 89       	ldd	r31, Z+23	; 0x17
     354:	e0 2d       	mov	r30, r0
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	09 95       	icall
     35a:	cc 0f       	add	r28, r28
     35c:	dd 1f       	adc	r29, r29
     35e:	fe 01       	movw	r30, r28
     360:	ec 5b       	subi	r30, 0xBC	; 188
     362:	fe 4f       	sbci	r31, 0xFE	; 254
     364:	91 83       	std	Z+1, r25	; 0x01
     366:	80 83       	st	Z, r24
        currents[j] = functions->read_adc(CURRENT_PIN);
     368:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     36c:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     370:	06 88       	ldd	r0, Z+22	; 0x16
     372:	f7 89       	ldd	r31, Z+23	; 0x17
     374:	e0 2d       	mov	r30, r0
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	09 95       	icall
     37a:	c2 5c       	subi	r28, 0xC2	; 194
     37c:	dd 4f       	sbci	r29, 0xFD	; 253
     37e:	99 83       	std	Y+1, r25	; 0x01
     380:	88 83       	st	Y, r24
// read power state
void stateReadPower()
{
    // enable interrupts and reset timer
    
    for (int8_t j = 0; j < SIZE; j++) {
     382:	1f 5f       	subi	r17, 0xFF	; 255
     384:	14 36       	cpi	r17, 0x64	; 100
     386:	e4 f2       	brlt	.-72     	; 0x340 <stateReadPower+0xa>
		voltages[j] = functions->read_adc(VOLTAGE_PIN);
        currents[j] = functions->read_adc(CURRENT_PIN);
    }

	functions->timer_reset();
     388:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     38c:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     390:	02 8c       	ldd	r0, Z+26	; 0x1a
     392:	f3 8d       	ldd	r31, Z+27	; 0x1b
     394:	e0 2d       	mov	r30, r0
     396:	09 95       	icall
	functions->enable_interrupts();
     398:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     39c:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     3a0:	04 88       	ldd	r0, Z+20	; 0x14
     3a2:	f5 89       	ldd	r31, Z+21	; 0x15
     3a4:	e0 2d       	mov	r30, r0
     3a6:	09 95       	icall
	while (functions->get_trigger_index() < TRIGGER_SIZE) {}
     3a8:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     3ac:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     3b0:	02 84       	ldd	r0, Z+10	; 0x0a
     3b2:	f3 85       	ldd	r31, Z+11	; 0x0b
     3b4:	e0 2d       	mov	r30, r0
     3b6:	09 95       	icall
     3b8:	84 30       	cpi	r24, 0x04	; 4
     3ba:	b0 f3       	brcs	.-20     	; 0x3a8 <stateReadPower+0x72>
	
    // disable interrupts - prevent the trigger array from overflowing
    functions->disable_interrupts();
     3bc:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     3c0:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     3c4:	02 88       	ldd	r0, Z+18	; 0x12
     3c6:	f3 89       	ldd	r31, Z+19	; 0x13
     3c8:	e0 2d       	mov	r30, r0
     3ca:	09 95       	icall
    
    // need to add condition for state change
    state = STATE_CALCULATE_POWER;
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <state>
}
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	1f 91       	pop	r17
     3d8:	08 95       	ret

000003da <stateCalculatePower>:

// calculate power state
void stateCalculatePower()
{  
    // calculate peak, RMS
    peakVoltage = functions->find_peak(voltages, SIZE);
     3da:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     3de:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     3e2:	04 8c       	ldd	r0, Z+28	; 0x1c
     3e4:	f5 8d       	ldd	r31, Z+29	; 0x1d
     3e6:	e0 2d       	mov	r30, r0
     3e8:	64 e6       	ldi	r22, 0x64	; 100
     3ea:	84 e4       	ldi	r24, 0x44	; 68
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	09 95       	icall
     3f0:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <peakVoltage+0x1>
     3f4:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <peakVoltage>
    peakCurrent = functions->find_peak(currents, SIZE);
     3f8:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     3fc:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     400:	04 8c       	ldd	r0, Z+28	; 0x1c
     402:	f5 8d       	ldd	r31, Z+29	; 0x1d
     404:	e0 2d       	mov	r30, r0
     406:	64 e6       	ldi	r22, 0x64	; 100
     408:	8e e3       	ldi	r24, 0x3E	; 62
     40a:	92 e0       	ldi	r25, 0x02	; 2
     40c:	09 95       	icall
     40e:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <peakCurrent+0x1>
     412:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <peakCurrent>
    voltage = functions->calculate_RMS(peakVoltage);
     416:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     41a:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     41e:	06 8c       	ldd	r0, Z+30	; 0x1e
     420:	f7 8d       	ldd	r31, Z+31	; 0x1f
     422:	e0 2d       	mov	r30, r0
     424:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <peakVoltage>
     428:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <peakVoltage+0x1>
     42c:	09 95       	icall
     42e:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <voltage+0x1>
     432:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <voltage>
    current = functions->calculate_RMS(peakCurrent);
     436:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     43a:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     43e:	06 8c       	ldd	r0, Z+30	; 0x1e
     440:	f7 8d       	ldd	r31, Z+31	; 0x1f
     442:	e0 2d       	mov	r30, r0
     444:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <peakCurrent>
     448:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <peakCurrent+0x1>
     44c:	09 95       	icall
     44e:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <current+0x1>
     452:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <current>

    // calculate phase of two signals
    phase = functions->get_phase_difference(voltageTriggerTimes, currentTriggerTimes, TRIGGER_SIZE);
     456:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     45a:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     45e:	00 a0       	ldd	r0, Z+32	; 0x20
     460:	f1 a1       	ldd	r31, Z+33	; 0x21
     462:	e0 2d       	mov	r30, r0
     464:	44 e0       	ldi	r20, 0x04	; 4
     466:	6f e0       	ldi	r22, 0x0F	; 15
     468:	72 e0       	ldi	r23, 0x02	; 2
     46a:	8e e2       	ldi	r24, 0x2E	; 46
     46c:	92 e0       	ldi	r25, 0x02	; 2
     46e:	09 95       	icall
     470:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <phase+0x1>
     474:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <phase>
    
    // place holder phase
    pf = functions->calculate_power_factor(phase);
     478:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     47c:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     480:	02 a0       	ldd	r0, Z+34	; 0x22
     482:	f3 a1       	ldd	r31, Z+35	; 0x23
     484:	e0 2d       	mov	r30, r0
     486:	09 95       	icall
     488:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <pf+0x1>
     48c:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <pf>
    power = functions->calculate_average_power(voltage, current, pf);
     490:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     494:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     498:	04 a0       	ldd	r0, Z+36	; 0x24
     49a:	f5 a1       	ldd	r31, Z+37	; 0x25
     49c:	e0 2d       	mov	r30, r0
     49e:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <current>
     4a2:	70 91 2b 02 	lds	r23, 0x022B	; 0x80022b <current+0x1>
     4a6:	ac 01       	movw	r20, r24
     4a8:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <voltage>
     4ac:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <voltage+0x1>
     4b0:	09 95       	icall
     4b2:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <power+0x1>
     4b6:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <power>
    
    // start iterating over the trigger arrays from zero
    // this effectively resets the array
    voltageTriggerIndex = 0;
     4ba:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <voltageTriggerIndex>
    currentTriggerIndex = 0;
     4be:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <currentTriggerIndex>
	
	// reset interrupt trigger array index
	functions->set_trigger_index(voltageTriggerIndex);
     4c2:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     4c6:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     4ca:	04 84       	ldd	r0, Z+12	; 0x0c
     4cc:	f5 85       	ldd	r31, Z+13	; 0x0d
     4ce:	e0 2d       	mov	r30, r0
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	09 95       	icall
   
    // new state needed to be added for correct transition
    state = STATE_TRANSMIT_POWER;
     4d4:	83 e0       	ldi	r24, 0x03	; 3
     4d6:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <state>
     4da:	08 95       	ret

000004dc <stateTransmitPower>:
}

// transmit the power over UART
void stateTransmitPower()
{
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	60 97       	sbiw	r28, 0x10	; 16
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
    char dataString[16];
    functions->get_uart_string(power, dataString, 'P');
     4f0:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     4f4:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     4f8:	06 84       	ldd	r0, Z+14	; 0x0e
     4fa:	f7 85       	ldd	r31, Z+15	; 0x0f
     4fc:	e0 2d       	mov	r30, r0
     4fe:	40 e5       	ldi	r20, 0x50	; 80
     500:	be 01       	movw	r22, r28
     502:	6f 5f       	subi	r22, 0xFF	; 255
     504:	7f 4f       	sbci	r23, 0xFF	; 255
     506:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <power>
     50a:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <power+0x1>
     50e:	09 95       	icall
    functions->uart_write(dataString);
     510:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     514:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     518:	00 88       	ldd	r0, Z+16	; 0x10
     51a:	f1 89       	ldd	r31, Z+17	; 0x11
     51c:	e0 2d       	mov	r30, r0
     51e:	ce 01       	movw	r24, r28
     520:	01 96       	adiw	r24, 0x01	; 1
     522:	09 95       	icall
	functions->get_uart_string(pf, dataString, 'F');
     524:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     528:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     52c:	06 84       	ldd	r0, Z+14	; 0x0e
     52e:	f7 85       	ldd	r31, Z+15	; 0x0f
     530:	e0 2d       	mov	r30, r0
     532:	46 e4       	ldi	r20, 0x46	; 70
     534:	be 01       	movw	r22, r28
     536:	6f 5f       	subi	r22, 0xFF	; 255
     538:	7f 4f       	sbci	r23, 0xFF	; 255
     53a:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <pf>
     53e:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <pf+0x1>
     542:	09 95       	icall
	functions->uart_write(dataString);
     544:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     548:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     54c:	00 88       	ldd	r0, Z+16	; 0x10
     54e:	f1 89       	ldd	r31, Z+17	; 0x11
     550:	e0 2d       	mov	r30, r0
     552:	ce 01       	movw	r24, r28
     554:	01 96       	adiw	r24, 0x01	; 1
     556:	09 95       	icall
	functions->get_uart_string(voltage, dataString, 'V');
     558:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     55c:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     560:	06 84       	ldd	r0, Z+14	; 0x0e
     562:	f7 85       	ldd	r31, Z+15	; 0x0f
     564:	e0 2d       	mov	r30, r0
     566:	46 e5       	ldi	r20, 0x56	; 86
     568:	be 01       	movw	r22, r28
     56a:	6f 5f       	subi	r22, 0xFF	; 255
     56c:	7f 4f       	sbci	r23, 0xFF	; 255
     56e:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <voltage>
     572:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <voltage+0x1>
     576:	09 95       	icall
	functions->uart_write(dataString);
     578:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     57c:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     580:	00 88       	ldd	r0, Z+16	; 0x10
     582:	f1 89       	ldd	r31, Z+17	; 0x11
     584:	e0 2d       	mov	r30, r0
     586:	ce 01       	movw	r24, r28
     588:	01 96       	adiw	r24, 0x01	; 1
     58a:	09 95       	icall
	functions->get_uart_string(current, dataString, 'I');
     58c:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     590:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     594:	06 84       	ldd	r0, Z+14	; 0x0e
     596:	f7 85       	ldd	r31, Z+15	; 0x0f
     598:	e0 2d       	mov	r30, r0
     59a:	49 e4       	ldi	r20, 0x49	; 73
     59c:	be 01       	movw	r22, r28
     59e:	6f 5f       	subi	r22, 0xFF	; 255
     5a0:	7f 4f       	sbci	r23, 0xFF	; 255
     5a2:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <current>
     5a6:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <current+0x1>
     5aa:	09 95       	icall
	functions->uart_write(dataString);
     5ac:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <functions>
     5b0:	f0 91 20 02 	lds	r31, 0x0220	; 0x800220 <functions+0x1>
     5b4:	00 88       	ldd	r0, Z+16	; 0x10
     5b6:	f1 89       	ldd	r31, Z+17	; 0x11
     5b8:	e0 2d       	mov	r30, r0
     5ba:	ce 01       	movw	r24, r28
     5bc:	01 96       	adiw	r24, 0x01	; 1
     5be:	09 95       	icall

    state = STATE_READ_POWER;
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	80 93 25 02 	sts	0x0225, r24	; 0x800225 <state>
     5c6:	60 96       	adiw	r28, 0x10	; 16
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	08 95       	ret

000005d8 <run>:
}
// main fsm function
int run()
{ 
    while (1) {
        switch(state) {
     5d8:	80 91 25 02 	lds	r24, 0x0225	; 0x800225 <state>
     5dc:	81 30       	cpi	r24, 0x01	; 1
     5de:	49 f0       	breq	.+18     	; 0x5f2 <run+0x1a>
     5e0:	28 f0       	brcs	.+10     	; 0x5ec <run+0x14>
     5e2:	82 30       	cpi	r24, 0x02	; 2
     5e4:	49 f0       	breq	.+18     	; 0x5f8 <run+0x20>
     5e6:	83 30       	cpi	r24, 0x03	; 3
     5e8:	51 f0       	breq	.+20     	; 0x5fe <run+0x26>
     5ea:	0c c0       	rjmp	.+24     	; 0x604 <run+0x2c>
            case STATE_INIT:
                // set this to correct ubbr
                stateInit();
     5ec:	0e 94 63 01 	call	0x2c6	; 0x2c6 <stateInit>
                break;
     5f0:	f3 cf       	rjmp	.-26     	; 0x5d8 <run>
            case STATE_READ_POWER:
                // read data from adc and store it
                stateReadPower();
     5f2:	0e 94 9b 01 	call	0x336	; 0x336 <stateReadPower>
                break;
     5f6:	f0 cf       	rjmp	.-32     	; 0x5d8 <run>
            case STATE_CALCULATE_POWER:
                // use data from adc to calculate power
                stateCalculatePower();
     5f8:	0e 94 ed 01 	call	0x3da	; 0x3da <stateCalculatePower>
                break;
     5fc:	ed cf       	rjmp	.-38     	; 0x5d8 <run>
            case STATE_TRANSMIT_POWER:
                // send power to bt module with uart
                stateTransmitPower();
     5fe:	0e 94 6e 02 	call	0x4dc	; 0x4dc <stateTransmitPower>
                break;
     602:	ea cf       	rjmp	.-44     	; 0x5d8 <run>
                break;
        }
    }

    return 0;
}
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	08 95       	ret

0000060a <io_init>:
#include "gpio.h"

void io_init()
{
	//Set all PORTC pins as inputs
	DDRC = 0x00;
     60a:	17 b8       	out	0x07, r1	; 7

	//Set PORTD Pins 1 and 0 as outputs
	DDRD = 0x00;
     60c:	1a b8       	out	0x0a, r1	; 10
     60e:	08 95       	ret

00000610 <enable_interrupts>:
	interrupt_handler(1);
}

void enable_interrupts()
{
	sei();
     610:	78 94       	sei
     612:	08 95       	ret

00000614 <disable_interrupts>:
}
void disable_interrupts()
{
	cli();
     614:	f8 94       	cli
     616:	08 95       	ret

00000618 <set_index>:
}

void set_index(uint8_t index)
{
	voltageIndex = index;
     618:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <voltageIndex>
	currentIndex = index;
     61c:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <currentIndex>
	enableVoltage = 0;
     620:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <enableVoltage>
	enableCurrent = 0;
     624:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <enableCurrent>
     628:	08 95       	ret

0000062a <get_index>:
}

uint8_t get_index()
{
	return voltageIndex > currentIndex ? currentIndex : voltageIndex;
     62a:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <voltageIndex>
     62e:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <currentIndex>
     632:	89 17       	cp	r24, r25
     634:	18 f4       	brcc	.+6      	; 0x63c <get_index+0x12>
     636:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <currentIndex>
     63a:	08 95       	ret
     63c:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <voltageIndex>
}
     640:	08 95       	ret

00000642 <interrupt_init>:

void interrupt_init(uint32_t *voltageTriggersArray, uint32_t *currentTriggersArray, uint8_t arraySize, uint32_t (*get_time_ptr)(void))
{
	
	voltageTriggers = voltageTriggersArray;
     642:	90 93 0f 03 	sts	0x030F, r25	; 0x80030f <voltageTriggers+0x1>
     646:	80 93 0e 03 	sts	0x030E, r24	; 0x80030e <voltageTriggers>
	currentTriggers = currentTriggersArray;
     64a:	70 93 12 03 	sts	0x0312, r23	; 0x800312 <currentTriggers+0x1>
     64e:	60 93 11 03 	sts	0x0311, r22	; 0x800311 <currentTriggers>
	enableVoltage = 0;
     652:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <enableVoltage>
	enableCurrent = 0;
     656:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <enableCurrent>
	size = arraySize;
     65a:	40 93 10 03 	sts	0x0310, r20	; 0x800310 <size>
	get_time_func = get_time_ptr;
     65e:	30 93 0d 03 	sts	0x030D, r19	; 0x80030d <get_time_func+0x1>
     662:	20 93 0c 03 	sts	0x030C, r18	; 0x80030c <get_time_func>
	
	// set interrupt edge
	EICRA |= 0x0A;
     666:	e9 e6       	ldi	r30, 0x69	; 105
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	80 81       	ld	r24, Z
     66c:	8a 60       	ori	r24, 0x0A	; 10
     66e:	80 83       	st	Z, r24
	EIMSK |= 0x03;
     670:	8d b3       	in	r24, 0x1d	; 29
     672:	83 60       	ori	r24, 0x03	; 3
     674:	8d bb       	out	0x1d, r24	; 29
	
	currentIndex = 0;
     676:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <currentIndex>
	voltageIndex = 0;
     67a:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <voltageIndex>
     67e:	08 95       	ret

00000680 <interrupt_handler>:
}

void interrupt_handler(uint8_t interruptPin)
{
     680:	cf 93       	push	r28
     682:	df 93       	push	r29
	switch (interruptPin)
     684:	88 23       	and	r24, r24
     686:	19 f0       	breq	.+6      	; 0x68e <interrupt_handler+0xe>
     688:	81 30       	cpi	r24, 0x01	; 1
     68a:	61 f1       	breq	.+88     	; 0x6e4 <interrupt_handler+0x64>
     68c:	54 c0       	rjmp	.+168    	; 0x736 <interrupt_handler+0xb6>
	{
		case 0:
			if (!enableCurrent) {
     68e:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <enableCurrent>
     692:	81 11       	cpse	r24, r1
     694:	04 c0       	rjmp	.+8      	; 0x69e <interrupt_handler+0x1e>
				enableCurrent = 1;
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <enableCurrent>
				break;
     69c:	4c c0       	rjmp	.+152    	; 0x736 <interrupt_handler+0xb6>
			}
			if (currentIndex == size)
     69e:	90 91 08 03 	lds	r25, 0x0308	; 0x800308 <currentIndex>
     6a2:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <size>
     6a6:	98 17       	cp	r25, r24
     6a8:	09 f4       	brne	.+2      	; 0x6ac <interrupt_handler+0x2c>
     6aa:	45 c0       	rjmp	.+138    	; 0x736 <interrupt_handler+0xb6>
				break;
			currentTriggers[currentIndex] = get_time_func();
     6ac:	c0 91 08 03 	lds	r28, 0x0308	; 0x800308 <currentIndex>
     6b0:	d0 e0       	ldi	r29, 0x00	; 0
     6b2:	cc 0f       	add	r28, r28
     6b4:	dd 1f       	adc	r29, r29
     6b6:	cc 0f       	add	r28, r28
     6b8:	dd 1f       	adc	r29, r29
     6ba:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <currentTriggers>
     6be:	90 91 12 03 	lds	r25, 0x0312	; 0x800312 <currentTriggers+0x1>
     6c2:	c8 0f       	add	r28, r24
     6c4:	d9 1f       	adc	r29, r25
     6c6:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <get_time_func>
     6ca:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <get_time_func+0x1>
     6ce:	09 95       	icall
     6d0:	68 83       	st	Y, r22
     6d2:	79 83       	std	Y+1, r23	; 0x01
     6d4:	8a 83       	std	Y+2, r24	; 0x02
     6d6:	9b 83       	std	Y+3, r25	; 0x03
			currentIndex++;
     6d8:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <currentIndex>
     6dc:	8f 5f       	subi	r24, 0xFF	; 255
     6de:	80 93 08 03 	sts	0x0308, r24	; 0x800308 <currentIndex>
			break;
     6e2:	29 c0       	rjmp	.+82     	; 0x736 <interrupt_handler+0xb6>
		case 1:
			if (!enableVoltage) {
     6e4:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <enableVoltage>
     6e8:	81 11       	cpse	r24, r1
     6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <interrupt_handler+0x74>
				enableVoltage = 1;
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <enableVoltage>
				break;
     6f2:	21 c0       	rjmp	.+66     	; 0x736 <interrupt_handler+0xb6>
			}
			if (voltageIndex == size)
     6f4:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <voltageIndex>
     6f8:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <size>
     6fc:	98 17       	cp	r25, r24
     6fe:	d9 f0       	breq	.+54     	; 0x736 <interrupt_handler+0xb6>
				break;
			voltageTriggers[voltageIndex] = get_time_func();
     700:	c0 91 0a 03 	lds	r28, 0x030A	; 0x80030a <voltageIndex>
     704:	d0 e0       	ldi	r29, 0x00	; 0
     706:	cc 0f       	add	r28, r28
     708:	dd 1f       	adc	r29, r29
     70a:	cc 0f       	add	r28, r28
     70c:	dd 1f       	adc	r29, r29
     70e:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <voltageTriggers>
     712:	90 91 0f 03 	lds	r25, 0x030F	; 0x80030f <voltageTriggers+0x1>
     716:	c8 0f       	add	r28, r24
     718:	d9 1f       	adc	r29, r25
     71a:	e0 91 0c 03 	lds	r30, 0x030C	; 0x80030c <get_time_func>
     71e:	f0 91 0d 03 	lds	r31, 0x030D	; 0x80030d <get_time_func+0x1>
     722:	09 95       	icall
     724:	68 83       	st	Y, r22
     726:	79 83       	std	Y+1, r23	; 0x01
     728:	8a 83       	std	Y+2, r24	; 0x02
     72a:	9b 83       	std	Y+3, r25	; 0x03
			voltageIndex++;
     72c:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <voltageIndex>
     730:	8f 5f       	subi	r24, 0xFF	; 255
     732:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <voltageIndex>
			break;
		default:
			break;
	}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	08 95       	ret

0000073c <__vector_1>:

#include "interrupt.h"

// handle interrupts during cycle
ISR(INT0_vect)
{
     73c:	1f 92       	push	r1
     73e:	0f 92       	push	r0
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	0f 92       	push	r0
     744:	11 24       	eor	r1, r1
     746:	2f 93       	push	r18
     748:	3f 93       	push	r19
     74a:	4f 93       	push	r20
     74c:	5f 93       	push	r21
     74e:	6f 93       	push	r22
     750:	7f 93       	push	r23
     752:	8f 93       	push	r24
     754:	9f 93       	push	r25
     756:	af 93       	push	r26
     758:	bf 93       	push	r27
     75a:	ef 93       	push	r30
     75c:	ff 93       	push	r31
	interrupt_handler(0);
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	0e 94 40 03 	call	0x680	; 0x680 <interrupt_handler>
}
     764:	ff 91       	pop	r31
     766:	ef 91       	pop	r30
     768:	bf 91       	pop	r27
     76a:	af 91       	pop	r26
     76c:	9f 91       	pop	r25
     76e:	8f 91       	pop	r24
     770:	7f 91       	pop	r23
     772:	6f 91       	pop	r22
     774:	5f 91       	pop	r21
     776:	4f 91       	pop	r20
     778:	3f 91       	pop	r19
     77a:	2f 91       	pop	r18
     77c:	0f 90       	pop	r0
     77e:	0f be       	out	0x3f, r0	; 63
     780:	0f 90       	pop	r0
     782:	1f 90       	pop	r1
     784:	18 95       	reti

00000786 <__vector_2>:

ISR(INT1_vect)
{
     786:	1f 92       	push	r1
     788:	0f 92       	push	r0
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	0f 92       	push	r0
     78e:	11 24       	eor	r1, r1
     790:	2f 93       	push	r18
     792:	3f 93       	push	r19
     794:	4f 93       	push	r20
     796:	5f 93       	push	r21
     798:	6f 93       	push	r22
     79a:	7f 93       	push	r23
     79c:	8f 93       	push	r24
     79e:	9f 93       	push	r25
     7a0:	af 93       	push	r26
     7a2:	bf 93       	push	r27
     7a4:	ef 93       	push	r30
     7a6:	ff 93       	push	r31
	interrupt_handler(1);
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	0e 94 40 03 	call	0x680	; 0x680 <interrupt_handler>
}
     7ae:	ff 91       	pop	r31
     7b0:	ef 91       	pop	r30
     7b2:	bf 91       	pop	r27
     7b4:	af 91       	pop	r26
     7b6:	9f 91       	pop	r25
     7b8:	8f 91       	pop	r24
     7ba:	7f 91       	pop	r23
     7bc:	6f 91       	pop	r22
     7be:	5f 91       	pop	r21
     7c0:	4f 91       	pop	r20
     7c2:	3f 91       	pop	r19
     7c4:	2f 91       	pop	r18
     7c6:	0f 90       	pop	r0
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	0f 90       	pop	r0
     7cc:	1f 90       	pop	r1
     7ce:	18 95       	reti

000007d0 <findPeak>:
	return (uint16_t)sample/pow(2,bits) * maxVal;
}

// find peak value of sinusoidal wave
uint16_t findPeak(uint16_t *samples, uint8_t size)
{
     7d0:	dc 01       	movw	r26, r24
	uint16_t peak = 0;
	// iterate over samples and use largest value as peak
	for (uint8_t i = 0; i < size; i++) {
     7d2:	90 e0       	ldi	r25, 0x00	; 0
}

// find peak value of sinusoidal wave
uint16_t findPeak(uint16_t *samples, uint8_t size)
{
	uint16_t peak = 0;
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	50 e0       	ldi	r21, 0x00	; 0
	// iterate over samples and use largest value as peak
	for (uint8_t i = 0; i < size; i++) {
     7d8:	0d c0       	rjmp	.+26     	; 0x7f4 <findPeak+0x24>
		if (samples[i] > peak)
     7da:	e9 2f       	mov	r30, r25
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	ee 0f       	add	r30, r30
     7e0:	ff 1f       	adc	r31, r31
     7e2:	ea 0f       	add	r30, r26
     7e4:	fb 1f       	adc	r31, r27
     7e6:	20 81       	ld	r18, Z
     7e8:	31 81       	ldd	r19, Z+1	; 0x01
     7ea:	42 17       	cp	r20, r18
     7ec:	53 07       	cpc	r21, r19
     7ee:	08 f4       	brcc	.+2      	; 0x7f2 <findPeak+0x22>
			peak = samples[i];
     7f0:	a9 01       	movw	r20, r18
// find peak value of sinusoidal wave
uint16_t findPeak(uint16_t *samples, uint8_t size)
{
	uint16_t peak = 0;
	// iterate over samples and use largest value as peak
	for (uint8_t i = 0; i < size; i++) {
     7f2:	9f 5f       	subi	r25, 0xFF	; 255
     7f4:	96 17       	cp	r25, r22
     7f6:	88 f3       	brcs	.-30     	; 0x7da <findPeak+0xa>
		if (samples[i] > peak)
			peak = samples[i];
	}
	
	return peak;
}
     7f8:	ca 01       	movw	r24, r20
     7fa:	08 95       	ret

000007fc <calculateRMS>:

// calculate the rms value from peak value of sinusoid
uint16_t calculateRMS(uint16_t peak)
{
	return peak/ROOT_2;
     7fc:	bc 01       	movw	r22, r24
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 66 07 	call	0xecc	; 0xecc <__floatunsisf>
     806:	2e ee       	ldi	r18, 0xEE	; 238
     808:	34 e0       	ldi	r19, 0x04	; 4
     80a:	45 eb       	ldi	r20, 0xB5	; 181
     80c:	5f e3       	ldi	r21, 0x3F	; 63
     80e:	0e 94 be 06 	call	0xd7c	; 0xd7c <__divsf3>
     812:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fixunssfsi>
}
     816:	cb 01       	movw	r24, r22
     818:	08 95       	ret

0000081a <getPhaseDifference>:

// get phase difference in degrees
// since these are more accurate
uint16_t getPhaseDifference(uint32_t *voltageTriggerTimes,
		uint32_t *currentTriggerTimes, uint8_t arraySize) 
{
     81a:	8f 92       	push	r8
     81c:	9f 92       	push	r9
     81e:	af 92       	push	r10
     820:	bf 92       	push	r11
     822:	cf 92       	push	r12
     824:	df 92       	push	r13
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
	int16_t phaseDifference = 0;
	int16_t Tz = 0;
	int16_t Tp = 0;

	Tz = abs(currentTriggerTimes[0] - voltageTriggerTimes[0]) < abs(currentTriggerTimes[1] - voltageTriggerTimes[1]) ?
		abs(currentTriggerTimes[0] - voltageTriggerTimes[0]) : abs(currentTriggerTimes[1] - voltageTriggerTimes[1]);
     832:	db 01       	movw	r26, r22
     834:	14 96       	adiw	r26, 0x04	; 4
     836:	cd 90       	ld	r12, X+
     838:	dd 90       	ld	r13, X+
     83a:	ed 90       	ld	r14, X+
     83c:	fc 90       	ld	r15, X
     83e:	17 97       	sbiw	r26, 0x07	; 7
     840:	ec 01       	movw	r28, r24
     842:	0c 81       	ldd	r16, Y+4	; 0x04
     844:	1d 81       	ldd	r17, Y+5	; 0x05
     846:	2e 81       	ldd	r18, Y+6	; 0x06
     848:	3f 81       	ldd	r19, Y+7	; 0x07
     84a:	a6 01       	movw	r20, r12
     84c:	40 1b       	sub	r20, r16
     84e:	51 0b       	sbc	r21, r17
     850:	9a 01       	movw	r18, r20
     852:	22 f4       	brpl	.+8      	; 0x85c <getPhaseDifference+0x42>
     854:	22 27       	eor	r18, r18
     856:	33 27       	eor	r19, r19
     858:	24 1b       	sub	r18, r20
     85a:	35 0b       	sbc	r19, r21
     85c:	f2 2f       	mov	r31, r18
     85e:	e3 2f       	mov	r30, r19
     860:	db 01       	movw	r26, r22
     862:	0d 91       	ld	r16, X+
     864:	1d 91       	ld	r17, X+
     866:	2d 91       	ld	r18, X+
     868:	3c 91       	ld	r19, X
     86a:	ec 01       	movw	r28, r24
     86c:	88 81       	ld	r24, Y
     86e:	99 81       	ldd	r25, Y+1	; 0x01
     870:	aa 81       	ldd	r26, Y+2	; 0x02
     872:	bb 81       	ldd	r27, Y+3	; 0x03
     874:	a8 01       	movw	r20, r16
     876:	48 1b       	sub	r20, r24
     878:	59 0b       	sbc	r21, r25
     87a:	ca 01       	movw	r24, r20
     87c:	99 23       	and	r25, r25
     87e:	24 f4       	brge	.+8      	; 0x888 <getPhaseDifference+0x6e>
     880:	88 27       	eor	r24, r24
     882:	99 27       	eor	r25, r25
     884:	84 1b       	sub	r24, r20
     886:	95 0b       	sbc	r25, r21
{
	int16_t phaseDifference = 0;
	int16_t Tz = 0;
	int16_t Tp = 0;

	Tz = abs(currentTriggerTimes[0] - voltageTriggerTimes[0]) < abs(currentTriggerTimes[1] - voltageTriggerTimes[1]) ?
     888:	6f 2f       	mov	r22, r31
     88a:	7e 2f       	mov	r23, r30
     88c:	86 17       	cp	r24, r22
     88e:	97 07       	cpc	r25, r23
     890:	0c f4       	brge	.+2      	; 0x894 <getPhaseDifference+0x7a>
     892:	bc 01       	movw	r22, r24
		abs(currentTriggerTimes[0] - voltageTriggerTimes[0]) : abs(currentTriggerTimes[1] - voltageTriggerTimes[1]);
	Tp = currentTriggerTimes[1] - currentTriggerTimes[0];
     894:	c0 1a       	sub	r12, r16
     896:	d1 0a       	sbc	r13, r17

	phaseDifference = (uint16_t)((2.0*PI * Tz/Tp) * 1000);
     898:	07 2e       	mov	r0, r23
     89a:	00 0c       	add	r0, r0
     89c:	88 0b       	sbc	r24, r24
     89e:	99 0b       	sbc	r25, r25
     8a0:	0e 94 68 07 	call	0xed0	; 0xed0 <__floatsisf>
     8a4:	20 ed       	ldi	r18, 0xD0	; 208
     8a6:	3f e0       	ldi	r19, 0x0F	; 15
     8a8:	49 ec       	ldi	r20, 0xC9	; 201
     8aa:	50 e4       	ldi	r21, 0x40	; 64
     8ac:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
     8b0:	4b 01       	movw	r8, r22
     8b2:	5c 01       	movw	r10, r24
     8b4:	b6 01       	movw	r22, r12
     8b6:	dd 0c       	add	r13, r13
     8b8:	88 0b       	sbc	r24, r24
     8ba:	99 0b       	sbc	r25, r25
     8bc:	0e 94 68 07 	call	0xed0	; 0xed0 <__floatsisf>
     8c0:	9b 01       	movw	r18, r22
     8c2:	ac 01       	movw	r20, r24
     8c4:	c5 01       	movw	r24, r10
     8c6:	b4 01       	movw	r22, r8
     8c8:	0e 94 be 06 	call	0xd7c	; 0xd7c <__divsf3>
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	4a e7       	ldi	r20, 0x7A	; 122
     8d2:	54 e4       	ldi	r21, 0x44	; 68
     8d4:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
     8d8:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fixunssfsi>

	return (uint16_t)abs(phaseDifference);
     8dc:	9b 01       	movw	r18, r22
     8de:	77 23       	and	r23, r23
     8e0:	24 f4       	brge	.+8      	; 0x8ea <getPhaseDifference+0xd0>
     8e2:	22 27       	eor	r18, r18
     8e4:	33 27       	eor	r19, r19
     8e6:	26 1b       	sub	r18, r22
     8e8:	37 0b       	sbc	r19, r23
}
     8ea:	c9 01       	movw	r24, r18
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	ff 90       	pop	r15
     8f6:	ef 90       	pop	r14
     8f8:	df 90       	pop	r13
     8fa:	cf 90       	pop	r12
     8fc:	bf 90       	pop	r11
     8fe:	af 90       	pop	r10
     900:	9f 90       	pop	r9
     902:	8f 90       	pop	r8
     904:	08 95       	ret

00000906 <calculatePowerFactor>:

// calculate power factor
uint16_t calculatePowerFactor(uint16_t phase) 
{
	double phaseRadians = phase/1000.0;
     906:	bc 01       	movw	r22, r24
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	0e 94 66 07 	call	0xecc	; 0xecc <__floatunsisf>
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	4a e7       	ldi	r20, 0x7A	; 122
     916:	54 e4       	ldi	r21, 0x44	; 68
     918:	0e 94 be 06 	call	0xd7c	; 0xd7c <__divsf3>
	return abs(cos(phaseRadians) * 1000);
     91c:	0e 94 b9 06 	call	0xd72	; 0xd72 <cos>
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	4a e7       	ldi	r20, 0x7A	; 122
     926:	54 e4       	ldi	r21, 0x44	; 68
     928:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
     92c:	0e 94 30 07 	call	0xe60	; 0xe60 <__fixsfsi>
     930:	9b 01       	movw	r18, r22
     932:	77 23       	and	r23, r23
     934:	24 f4       	brge	.+8      	; 0x93e <calculatePowerFactor+0x38>
     936:	22 27       	eor	r18, r18
     938:	33 27       	eor	r19, r19
     93a:	26 1b       	sub	r18, r22
     93c:	37 0b       	sbc	r19, r23
}
     93e:	c9 01       	movw	r24, r18
     940:	08 95       	ret

00000942 <calculateAveragePower>:

// calculate average power using standard equation
uint16_t calculateAveragePower(uint16_t Vrms, uint16_t Irms, uint16_t pf)
{
     942:	cf 92       	push	r12
     944:	df 92       	push	r13
     946:	ef 92       	push	r14
     948:	ff 92       	push	r15
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	8b 01       	movw	r16, r22
     954:	ea 01       	movw	r28, r20
	double p = ((Vrms/1000.0) * (Irms/1000.0) * (pf/1000.0));
     956:	bc 01       	movw	r22, r24
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	0e 94 66 07 	call	0xecc	; 0xecc <__floatunsisf>
     960:	20 e0       	ldi	r18, 0x00	; 0
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	4a e7       	ldi	r20, 0x7A	; 122
     966:	54 e4       	ldi	r21, 0x44	; 68
     968:	0e 94 be 06 	call	0xd7c	; 0xd7c <__divsf3>
     96c:	6b 01       	movw	r12, r22
     96e:	7c 01       	movw	r14, r24
     970:	b8 01       	movw	r22, r16
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	0e 94 66 07 	call	0xecc	; 0xecc <__floatunsisf>
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	4a e7       	ldi	r20, 0x7A	; 122
     980:	54 e4       	ldi	r21, 0x44	; 68
     982:	0e 94 be 06 	call	0xd7c	; 0xd7c <__divsf3>
     986:	9b 01       	movw	r18, r22
     988:	ac 01       	movw	r20, r24
     98a:	c7 01       	movw	r24, r14
     98c:	b6 01       	movw	r22, r12
     98e:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
     992:	6b 01       	movw	r12, r22
     994:	7c 01       	movw	r14, r24
     996:	be 01       	movw	r22, r28
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	0e 94 66 07 	call	0xecc	; 0xecc <__floatunsisf>
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	4a e7       	ldi	r20, 0x7A	; 122
     9a6:	54 e4       	ldi	r21, 0x44	; 68
     9a8:	0e 94 be 06 	call	0xd7c	; 0xd7c <__divsf3>
     9ac:	9b 01       	movw	r18, r22
     9ae:	ac 01       	movw	r20, r24
     9b0:	c7 01       	movw	r24, r14
     9b2:	b6 01       	movw	r22, r12
     9b4:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
	return (uint16_t)(p*1000);
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	4a e7       	ldi	r20, 0x7A	; 122
     9be:	54 e4       	ldi	r21, 0x44	; 68
     9c0:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
     9c4:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fixunssfsi>
}
     9c8:	cb 01       	movw	r24, r22
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	1f 91       	pop	r17
     9d0:	0f 91       	pop	r16
     9d2:	ff 90       	pop	r15
     9d4:	ef 90       	pop	r14
     9d6:	df 90       	pop	r13
     9d8:	cf 90       	pop	r12
     9da:	08 95       	ret

000009dc <timer_init>:
	// set scale into time, convert clock speed from Hz to MHz to scale time to us
	double step = 1/((double)(F_CPU/1000000)/256);
	// multiply timer register by value of time step
	double timeSeconds = step * getTimerCount();
	return (uint32_t)(timeSeconds);
}
     9dc:	e1 e8       	ldi	r30, 0x81	; 129
     9de:	f0 e0       	ldi	r31, 0x00	; 0
     9e0:	80 81       	ld	r24, Z
     9e2:	84 60       	ori	r24, 0x04	; 4
     9e4:	80 83       	st	Z, r24
     9e6:	08 95       	ret

000009e8 <resetTimer>:
     9e8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     9ec:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     9f0:	08 95       	ret

000009f2 <getTimerCount>:
     9f2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     9f6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     9fa:	08 95       	ret

000009fc <get_time>:

uint32_t get_time()
{
	// returns the current timer count to the function caller
	return getTimerCount();
     9fc:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <getTimerCount>
     a00:	bc 01       	movw	r22, r24
     a02:	80 e0       	ldi	r24, 0x00	; 0
     a04:	90 e0       	ldi	r25, 0x00	; 0
	//return calculateTime(TIMER_PRESCALER);
     a06:	08 95       	ret

00000a08 <get_uart_string>:
 */ 
#include "uart.h"

// get uart string
void get_uart_string(uint16_t val, char *string, char ident)
{
     a08:	ff 92       	push	r15
     a0a:	0f 93       	push	r16
     a0c:	1f 93       	push	r17
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	8c 01       	movw	r16, r24
     a14:	d6 2f       	mov	r29, r22
     a16:	f7 2e       	mov	r15, r23
     a18:	c4 2f       	mov	r28, r20
	double value = 0;
	switch (ident) {
     a1a:	49 34       	cpi	r20, 0x49	; 73
     a1c:	09 f4       	brne	.+2      	; 0xa20 <get_uart_string+0x18>
     a1e:	65 c0       	rjmp	.+202    	; 0xaea <get_uart_string+0xe2>
     a20:	20 f4       	brcc	.+8      	; 0xa2a <get_uart_string+0x22>
     a22:	46 34       	cpi	r20, 0x46	; 70
     a24:	09 f4       	brne	.+2      	; 0xa28 <get_uart_string+0x20>
     a26:	76 c0       	rjmp	.+236    	; 0xb14 <get_uart_string+0x10c>
     a28:	28 c1       	rjmp	.+592    	; 0xc7a <get_uart_string+0x272>
     a2a:	40 35       	cpi	r20, 0x50	; 80
     a2c:	09 f4       	brne	.+2      	; 0xa30 <get_uart_string+0x28>
     a2e:	cc c0       	rjmp	.+408    	; 0xbc8 <get_uart_string+0x1c0>
     a30:	46 35       	cpi	r20, 0x56	; 86
     a32:	09 f0       	breq	.+2      	; 0xa36 <get_uart_string+0x2e>
     a34:	22 c1       	rjmp	.+580    	; 0xc7a <get_uart_string+0x272>
		case 'V':
			value = (double)((double)val/1000);
     a36:	bc 01       	movw	r22, r24
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 66 07 	call	0xecc	; 0xecc <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	4a e7       	ldi	r20, 0x7A	; 122
     a46:	54 e4       	ldi	r21, 0x44	; 68
     a48:	0e 94 be 06 	call	0xd7c	; 0xd7c <__divsf3>
     a4c:	46 2f       	mov	r20, r22
     a4e:	57 2f       	mov	r21, r23
     a50:	e8 2f       	mov	r30, r24
     a52:	f9 2f       	mov	r31, r25
			if (val % 1000 == 0)
     a54:	98 01       	movw	r18, r16
     a56:	36 95       	lsr	r19
     a58:	27 95       	ror	r18
     a5a:	36 95       	lsr	r19
     a5c:	27 95       	ror	r18
     a5e:	36 95       	lsr	r19
     a60:	27 95       	ror	r18
     a62:	a5 ec       	ldi	r26, 0xC5	; 197
     a64:	b0 e2       	ldi	r27, 0x20	; 32
     a66:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__umulhisi3>
     a6a:	92 95       	swap	r25
     a6c:	82 95       	swap	r24
     a6e:	8f 70       	andi	r24, 0x0F	; 15
     a70:	89 27       	eor	r24, r25
     a72:	9f 70       	andi	r25, 0x0F	; 15
     a74:	89 27       	eor	r24, r25
     a76:	68 ee       	ldi	r22, 0xE8	; 232
     a78:	73 e0       	ldi	r23, 0x03	; 3
     a7a:	86 9f       	mul	r24, r22
     a7c:	90 01       	movw	r18, r0
     a7e:	87 9f       	mul	r24, r23
     a80:	30 0d       	add	r19, r0
     a82:	96 9f       	mul	r25, r22
     a84:	30 0d       	add	r19, r0
     a86:	11 24       	eor	r1, r1
     a88:	02 17       	cp	r16, r18
     a8a:	13 07       	cpc	r17, r19
     a8c:	b9 f4       	brne	.+46     	; 0xabc <get_uart_string+0xb4>
				sprintf(string, "%c=%04g\n", ident, value);
     a8e:	ff 93       	push	r31
     a90:	ef 93       	push	r30
     a92:	5f 93       	push	r21
     a94:	4f 93       	push	r20
     a96:	1f 92       	push	r1
     a98:	cf 93       	push	r28
     a9a:	86 e2       	ldi	r24, 0x26	; 38
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	9f 93       	push	r25
     aa0:	8f 93       	push	r24
     aa2:	ff 92       	push	r15
     aa4:	df 93       	push	r29
     aa6:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <sprintf>
     aaa:	8d b7       	in	r24, 0x3d	; 61
     aac:	9e b7       	in	r25, 0x3e	; 62
     aae:	0a 96       	adiw	r24, 0x0a	; 10
     ab0:	0f b6       	in	r0, 0x3f	; 63
     ab2:	f8 94       	cli
     ab4:	9e bf       	out	0x3e, r25	; 62
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	8d bf       	out	0x3d, r24	; 61
     aba:	df c0       	rjmp	.+446    	; 0xc7a <get_uart_string+0x272>
			else
				sprintf(string, "%c=%05g\n", ident, value);
     abc:	ff 93       	push	r31
     abe:	ef 93       	push	r30
     ac0:	5f 93       	push	r21
     ac2:	4f 93       	push	r20
     ac4:	1f 92       	push	r1
     ac6:	cf 93       	push	r28
     ac8:	8f e2       	ldi	r24, 0x2F	; 47
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	9f 93       	push	r25
     ace:	8f 93       	push	r24
     ad0:	ff 92       	push	r15
     ad2:	df 93       	push	r29
     ad4:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <sprintf>
     ad8:	8d b7       	in	r24, 0x3d	; 61
     ada:	9e b7       	in	r25, 0x3e	; 62
     adc:	0a 96       	adiw	r24, 0x0a	; 10
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	f8 94       	cli
     ae2:	9e bf       	out	0x3e, r25	; 62
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	8d bf       	out	0x3d, r24	; 61
     ae8:	c8 c0       	rjmp	.+400    	; 0xc7a <get_uart_string+0x272>
			break;
		case 'I':
			sprintf(string, "%c=%04u\n", ident, val);
     aea:	1f 93       	push	r17
     aec:	8f 93       	push	r24
     aee:	1f 92       	push	r1
     af0:	4f 93       	push	r20
     af2:	88 e3       	ldi	r24, 0x38	; 56
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	9f 93       	push	r25
     af8:	8f 93       	push	r24
     afa:	7f 93       	push	r23
     afc:	6f 93       	push	r22
     afe:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <sprintf>
			break;
     b02:	8d b7       	in	r24, 0x3d	; 61
     b04:	9e b7       	in	r25, 0x3e	; 62
     b06:	08 96       	adiw	r24, 0x08	; 8
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	9e bf       	out	0x3e, r25	; 62
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	8d bf       	out	0x3d, r24	; 61
     b12:	b3 c0       	rjmp	.+358    	; 0xc7a <get_uart_string+0x272>
		case 'F':
			value = (double)((double)val/1000);
     b14:	bc 01       	movw	r22, r24
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	0e 94 66 07 	call	0xecc	; 0xecc <__floatunsisf>
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	4a e7       	ldi	r20, 0x7A	; 122
     b24:	54 e4       	ldi	r21, 0x44	; 68
     b26:	0e 94 be 06 	call	0xd7c	; 0xd7c <__divsf3>
     b2a:	46 2f       	mov	r20, r22
     b2c:	57 2f       	mov	r21, r23
     b2e:	e8 2f       	mov	r30, r24
     b30:	f9 2f       	mov	r31, r25
			if (val % 1000 == 0)
     b32:	98 01       	movw	r18, r16
     b34:	36 95       	lsr	r19
     b36:	27 95       	ror	r18
     b38:	36 95       	lsr	r19
     b3a:	27 95       	ror	r18
     b3c:	36 95       	lsr	r19
     b3e:	27 95       	ror	r18
     b40:	a5 ec       	ldi	r26, 0xC5	; 197
     b42:	b0 e2       	ldi	r27, 0x20	; 32
     b44:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__umulhisi3>
     b48:	92 95       	swap	r25
     b4a:	82 95       	swap	r24
     b4c:	8f 70       	andi	r24, 0x0F	; 15
     b4e:	89 27       	eor	r24, r25
     b50:	9f 70       	andi	r25, 0x0F	; 15
     b52:	89 27       	eor	r24, r25
     b54:	68 ee       	ldi	r22, 0xE8	; 232
     b56:	73 e0       	ldi	r23, 0x03	; 3
     b58:	86 9f       	mul	r24, r22
     b5a:	90 01       	movw	r18, r0
     b5c:	87 9f       	mul	r24, r23
     b5e:	30 0d       	add	r19, r0
     b60:	96 9f       	mul	r25, r22
     b62:	30 0d       	add	r19, r0
     b64:	11 24       	eor	r1, r1
     b66:	02 17       	cp	r16, r18
     b68:	13 07       	cpc	r17, r19
     b6a:	b9 f4       	brne	.+46     	; 0xb9a <get_uart_string+0x192>
				sprintf(string, "%c=%04g\n", ident, value);
     b6c:	ff 93       	push	r31
     b6e:	ef 93       	push	r30
     b70:	5f 93       	push	r21
     b72:	4f 93       	push	r20
     b74:	1f 92       	push	r1
     b76:	cf 93       	push	r28
     b78:	86 e2       	ldi	r24, 0x26	; 38
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	9f 93       	push	r25
     b7e:	8f 93       	push	r24
     b80:	ff 92       	push	r15
     b82:	df 93       	push	r29
     b84:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <sprintf>
     b88:	8d b7       	in	r24, 0x3d	; 61
     b8a:	9e b7       	in	r25, 0x3e	; 62
     b8c:	0a 96       	adiw	r24, 0x0a	; 10
     b8e:	0f b6       	in	r0, 0x3f	; 63
     b90:	f8 94       	cli
     b92:	9e bf       	out	0x3e, r25	; 62
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	8d bf       	out	0x3d, r24	; 61
     b98:	70 c0       	rjmp	.+224    	; 0xc7a <get_uart_string+0x272>
			else
				sprintf(string, "%c=%05g\n", ident, value);
     b9a:	ff 93       	push	r31
     b9c:	ef 93       	push	r30
     b9e:	5f 93       	push	r21
     ba0:	4f 93       	push	r20
     ba2:	1f 92       	push	r1
     ba4:	cf 93       	push	r28
     ba6:	8f e2       	ldi	r24, 0x2F	; 47
     ba8:	91 e0       	ldi	r25, 0x01	; 1
     baa:	9f 93       	push	r25
     bac:	8f 93       	push	r24
     bae:	ff 92       	push	r15
     bb0:	df 93       	push	r29
     bb2:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <sprintf>
     bb6:	8d b7       	in	r24, 0x3d	; 61
     bb8:	9e b7       	in	r25, 0x3e	; 62
     bba:	0a 96       	adiw	r24, 0x0a	; 10
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	9e bf       	out	0x3e, r25	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	8d bf       	out	0x3d, r24	; 61
     bc6:	59 c0       	rjmp	.+178    	; 0xc7a <get_uart_string+0x272>
			break;
		case 'P':
			value = (double)((double)val/1000);
     bc8:	bc 01       	movw	r22, r24
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 66 07 	call	0xecc	; 0xecc <__floatunsisf>
     bd2:	20 e0       	ldi	r18, 0x00	; 0
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	4a e7       	ldi	r20, 0x7A	; 122
     bd8:	54 e4       	ldi	r21, 0x44	; 68
     bda:	0e 94 be 06 	call	0xd7c	; 0xd7c <__divsf3>
     bde:	46 2f       	mov	r20, r22
     be0:	57 2f       	mov	r21, r23
     be2:	e8 2f       	mov	r30, r24
     be4:	f9 2f       	mov	r31, r25
			if (val % 1000 == 0)
     be6:	98 01       	movw	r18, r16
     be8:	36 95       	lsr	r19
     bea:	27 95       	ror	r18
     bec:	36 95       	lsr	r19
     bee:	27 95       	ror	r18
     bf0:	36 95       	lsr	r19
     bf2:	27 95       	ror	r18
     bf4:	a5 ec       	ldi	r26, 0xC5	; 197
     bf6:	b0 e2       	ldi	r27, 0x20	; 32
     bf8:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__umulhisi3>
     bfc:	92 95       	swap	r25
     bfe:	82 95       	swap	r24
     c00:	8f 70       	andi	r24, 0x0F	; 15
     c02:	89 27       	eor	r24, r25
     c04:	9f 70       	andi	r25, 0x0F	; 15
     c06:	89 27       	eor	r24, r25
     c08:	68 ee       	ldi	r22, 0xE8	; 232
     c0a:	73 e0       	ldi	r23, 0x03	; 3
     c0c:	86 9f       	mul	r24, r22
     c0e:	90 01       	movw	r18, r0
     c10:	87 9f       	mul	r24, r23
     c12:	30 0d       	add	r19, r0
     c14:	96 9f       	mul	r25, r22
     c16:	30 0d       	add	r19, r0
     c18:	11 24       	eor	r1, r1
     c1a:	02 17       	cp	r16, r18
     c1c:	13 07       	cpc	r17, r19
     c1e:	b9 f4       	brne	.+46     	; 0xc4e <get_uart_string+0x246>
				sprintf(string, "%c=%04g\n", ident, value);
     c20:	ff 93       	push	r31
     c22:	ef 93       	push	r30
     c24:	5f 93       	push	r21
     c26:	4f 93       	push	r20
     c28:	1f 92       	push	r1
     c2a:	cf 93       	push	r28
     c2c:	86 e2       	ldi	r24, 0x26	; 38
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	9f 93       	push	r25
     c32:	8f 93       	push	r24
     c34:	ff 92       	push	r15
     c36:	df 93       	push	r29
     c38:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <sprintf>
     c3c:	8d b7       	in	r24, 0x3d	; 61
     c3e:	9e b7       	in	r25, 0x3e	; 62
     c40:	0a 96       	adiw	r24, 0x0a	; 10
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	9e bf       	out	0x3e, r25	; 62
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	8d bf       	out	0x3d, r24	; 61
     c4c:	16 c0       	rjmp	.+44     	; 0xc7a <get_uart_string+0x272>
			else
				sprintf(string, "%c=%05g\n", ident, value);
     c4e:	ff 93       	push	r31
     c50:	ef 93       	push	r30
     c52:	5f 93       	push	r21
     c54:	4f 93       	push	r20
     c56:	1f 92       	push	r1
     c58:	cf 93       	push	r28
     c5a:	8f e2       	ldi	r24, 0x2F	; 47
     c5c:	91 e0       	ldi	r25, 0x01	; 1
     c5e:	9f 93       	push	r25
     c60:	8f 93       	push	r24
     c62:	ff 92       	push	r15
     c64:	df 93       	push	r29
     c66:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <sprintf>
     c6a:	8d b7       	in	r24, 0x3d	; 61
     c6c:	9e b7       	in	r25, 0x3e	; 62
     c6e:	0a 96       	adiw	r24, 0x0a	; 10
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	9e bf       	out	0x3e, r25	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	8d bf       	out	0x3d, r24	; 61
			break;
	}
}
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	ff 90       	pop	r15
     c84:	08 95       	ret

00000c86 <calculateUBRR>:

// calculate corrext ubrr
uint16_t calculateUBRR(uint16_t baud)
{
	return (uint16_t)(F_CPU/(16*(unsigned long)baud) - 1);
     c86:	a0 e0       	ldi	r26, 0x00	; 0
     c88:	b0 e0       	ldi	r27, 0x00	; 0
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	aa 1f       	adc	r26, r26
     c90:	bb 1f       	adc	r27, r27
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	9c 01       	movw	r18, r24
     c9c:	ad 01       	movw	r20, r26
     c9e:	22 0f       	add	r18, r18
     ca0:	33 1f       	adc	r19, r19
     ca2:	44 1f       	adc	r20, r20
     ca4:	55 1f       	adc	r21, r21
     ca6:	22 0f       	add	r18, r18
     ca8:	33 1f       	adc	r19, r19
     caa:	44 1f       	adc	r20, r20
     cac:	55 1f       	adc	r21, r21
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	74 e2       	ldi	r23, 0x24	; 36
     cb2:	84 ef       	ldi	r24, 0xF4	; 244
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 cc 0c 	call	0x1998	; 0x1998 <__udivmodsi4>
}
     cba:	c9 01       	movw	r24, r18
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	08 95       	ret

00000cc0 <uart_init>:

// uart init function
void uart_init(uint16_t baud)
{	
	uint16_t ubrr = calculateUBRR(baud);
     cc0:	0e 94 43 06 	call	0xc86	; 0xc86 <calculateUBRR>
     cc4:	9c 01       	movw	r18, r24
	// Enable TX and RX
	UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
     cc6:	e1 ec       	ldi	r30, 0xC1	; 193
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	90 81       	ld	r25, Z
     ccc:	98 61       	ori	r25, 0x18	; 24
     cce:	90 83       	st	Z, r25
	// set character size to 8-bit
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
     cd0:	e2 ec       	ldi	r30, 0xC2	; 194
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	90 81       	ld	r25, Z
     cd6:	96 60       	ori	r25, 0x06	; 6
     cd8:	90 83       	st	Z, r25
	UCSR0C &= ~(1<<UPM00);
     cda:	90 81       	ld	r25, Z
     cdc:	9f 7e       	andi	r25, 0xEF	; 239
     cde:	90 83       	st	Z, r25
	UCSR0C &= ~(1<<UPM01);
     ce0:	90 81       	ld	r25, Z
     ce2:	9f 7d       	andi	r25, 0xDF	; 223
     ce4:	90 83       	st	Z, r25
	// Set the baud rate
	UBRR0 = ubrr;
     ce6:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     cea:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     cee:	08 95       	ret

00000cf0 <uart_transmit>:

// uart transmit function
void uart_transmit(uint8_t data)
{
	// wait until transmitter is ready
	while ((1<<UDRE0 & UCSR0A) == 0x00) {;} // do nothing
     cf0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     cf4:	95 ff       	sbrs	r25, 5
     cf6:	fc cf       	rjmp	.-8      	; 0xcf0 <uart_transmit>
	// transmit data
	UDR0 = data;
     cf8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     cfc:	08 95       	ret

00000cfe <uart_write>:
}

// uart write function
// write multiple characters at once
void uart_write(char *data) 
{
     cfe:	0f 93       	push	r16
     d00:	1f 93       	push	r17
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	8c 01       	movw	r16, r24
	int i = 0;
     d08:	c0 e0       	ldi	r28, 0x00	; 0
     d0a:	d0 e0       	ldi	r29, 0x00	; 0
	while (data[i] != '\0') {
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <uart_write+0x16>
		uart_transmit(data[i]);
     d0e:	0e 94 78 06 	call	0xcf0	; 0xcf0 <uart_transmit>
		i++;
     d12:	21 96       	adiw	r28, 0x01	; 1
// uart write function
// write multiple characters at once
void uart_write(char *data) 
{
	int i = 0;
	while (data[i] != '\0') {
     d14:	f8 01       	movw	r30, r16
     d16:	ec 0f       	add	r30, r28
     d18:	fd 1f       	adc	r31, r29
     d1a:	80 81       	ld	r24, Z
     d1c:	81 11       	cpse	r24, r1
     d1e:	f7 cf       	rjmp	.-18     	; 0xd0e <uart_write+0x10>
		uart_transmit(data[i]);
		i++;
	}
}
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	1f 91       	pop	r17
     d26:	0f 91       	pop	r16
     d28:	08 95       	ret

00000d2a <main>:

// finite state machines
#include "lib/fsm.h"

int main(void) 
{
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	a6 97       	sbiw	r28, 0x26	; 38
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
	// create function pointer struct
	struct functionPointers funcs = {
     d3e:	86 e2       	ldi	r24, 0x26	; 38
     d40:	e0 e0       	ldi	r30, 0x00	; 0
     d42:	f1 e0       	ldi	r31, 0x01	; 1
     d44:	de 01       	movw	r26, r28
     d46:	11 96       	adiw	r26, 0x01	; 1
     d48:	01 90       	ld	r0, Z+
     d4a:	0d 92       	st	X+, r0
     d4c:	8a 95       	dec	r24
     d4e:	e1 f7       	brne	.-8      	; 0xd48 <main+0x1e>
		.calculate_average_power = calculateAveragePower,
	};
	
	
	// init fsm by passing structs to it
	fsmInit(&funcs);
     d50:	ce 01       	movw	r24, r28
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	0e 94 3a 01 	call	0x274	; 0x274 <fsmInit>
	
	run();
     d58:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <run>
}
     d5c:	80 e0       	ldi	r24, 0x00	; 0
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	a6 96       	adiw	r28, 0x26	; 38
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	08 95       	ret

00000d72 <cos>:
     d72:	0e 94 bc 07 	call	0xf78	; 0xf78 <__fp_rempio2>
     d76:	e3 95       	inc	r30
     d78:	0c 94 f6 07 	jmp	0xfec	; 0xfec <__fp_sinus>

00000d7c <__divsf3>:
     d7c:	0e 94 d2 06 	call	0xda4	; 0xda4 <__divsf3x>
     d80:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__fp_round>
     d84:	0e 94 b3 07 	call	0xf66	; 0xf66 <__fp_pscB>
     d88:	58 f0       	brcs	.+22     	; 0xda0 <__divsf3+0x24>
     d8a:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fp_pscA>
     d8e:	40 f0       	brcs	.+16     	; 0xda0 <__divsf3+0x24>
     d90:	29 f4       	brne	.+10     	; 0xd9c <__divsf3+0x20>
     d92:	5f 3f       	cpi	r21, 0xFF	; 255
     d94:	29 f0       	breq	.+10     	; 0xda0 <__divsf3+0x24>
     d96:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__fp_inf>
     d9a:	51 11       	cpse	r21, r1
     d9c:	0c 94 2d 08 	jmp	0x105a	; 0x105a <__fp_szero>
     da0:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__fp_nan>

00000da4 <__divsf3x>:
     da4:	0e 94 0a 08 	call	0x1014	; 0x1014 <__fp_split3>
     da8:	68 f3       	brcs	.-38     	; 0xd84 <__divsf3+0x8>

00000daa <__divsf3_pse>:
     daa:	99 23       	and	r25, r25
     dac:	b1 f3       	breq	.-20     	; 0xd9a <__divsf3+0x1e>
     dae:	55 23       	and	r21, r21
     db0:	91 f3       	breq	.-28     	; 0xd96 <__divsf3+0x1a>
     db2:	95 1b       	sub	r25, r21
     db4:	55 0b       	sbc	r21, r21
     db6:	bb 27       	eor	r27, r27
     db8:	aa 27       	eor	r26, r26
     dba:	62 17       	cp	r22, r18
     dbc:	73 07       	cpc	r23, r19
     dbe:	84 07       	cpc	r24, r20
     dc0:	38 f0       	brcs	.+14     	; 0xdd0 <__divsf3_pse+0x26>
     dc2:	9f 5f       	subi	r25, 0xFF	; 255
     dc4:	5f 4f       	sbci	r21, 0xFF	; 255
     dc6:	22 0f       	add	r18, r18
     dc8:	33 1f       	adc	r19, r19
     dca:	44 1f       	adc	r20, r20
     dcc:	aa 1f       	adc	r26, r26
     dce:	a9 f3       	breq	.-22     	; 0xdba <__divsf3_pse+0x10>
     dd0:	35 d0       	rcall	.+106    	; 0xe3c <__divsf3_pse+0x92>
     dd2:	0e 2e       	mov	r0, r30
     dd4:	3a f0       	brmi	.+14     	; 0xde4 <__divsf3_pse+0x3a>
     dd6:	e0 e8       	ldi	r30, 0x80	; 128
     dd8:	32 d0       	rcall	.+100    	; 0xe3e <__divsf3_pse+0x94>
     dda:	91 50       	subi	r25, 0x01	; 1
     ddc:	50 40       	sbci	r21, 0x00	; 0
     dde:	e6 95       	lsr	r30
     de0:	00 1c       	adc	r0, r0
     de2:	ca f7       	brpl	.-14     	; 0xdd6 <__divsf3_pse+0x2c>
     de4:	2b d0       	rcall	.+86     	; 0xe3c <__divsf3_pse+0x92>
     de6:	fe 2f       	mov	r31, r30
     de8:	29 d0       	rcall	.+82     	; 0xe3c <__divsf3_pse+0x92>
     dea:	66 0f       	add	r22, r22
     dec:	77 1f       	adc	r23, r23
     dee:	88 1f       	adc	r24, r24
     df0:	bb 1f       	adc	r27, r27
     df2:	26 17       	cp	r18, r22
     df4:	37 07       	cpc	r19, r23
     df6:	48 07       	cpc	r20, r24
     df8:	ab 07       	cpc	r26, r27
     dfa:	b0 e8       	ldi	r27, 0x80	; 128
     dfc:	09 f0       	breq	.+2      	; 0xe00 <__divsf3_pse+0x56>
     dfe:	bb 0b       	sbc	r27, r27
     e00:	80 2d       	mov	r24, r0
     e02:	bf 01       	movw	r22, r30
     e04:	ff 27       	eor	r31, r31
     e06:	93 58       	subi	r25, 0x83	; 131
     e08:	5f 4f       	sbci	r21, 0xFF	; 255
     e0a:	3a f0       	brmi	.+14     	; 0xe1a <__divsf3_pse+0x70>
     e0c:	9e 3f       	cpi	r25, 0xFE	; 254
     e0e:	51 05       	cpc	r21, r1
     e10:	78 f0       	brcs	.+30     	; 0xe30 <__divsf3_pse+0x86>
     e12:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__fp_inf>
     e16:	0c 94 2d 08 	jmp	0x105a	; 0x105a <__fp_szero>
     e1a:	5f 3f       	cpi	r21, 0xFF	; 255
     e1c:	e4 f3       	brlt	.-8      	; 0xe16 <__divsf3_pse+0x6c>
     e1e:	98 3e       	cpi	r25, 0xE8	; 232
     e20:	d4 f3       	brlt	.-12     	; 0xe16 <__divsf3_pse+0x6c>
     e22:	86 95       	lsr	r24
     e24:	77 95       	ror	r23
     e26:	67 95       	ror	r22
     e28:	b7 95       	ror	r27
     e2a:	f7 95       	ror	r31
     e2c:	9f 5f       	subi	r25, 0xFF	; 255
     e2e:	c9 f7       	brne	.-14     	; 0xe22 <__divsf3_pse+0x78>
     e30:	88 0f       	add	r24, r24
     e32:	91 1d       	adc	r25, r1
     e34:	96 95       	lsr	r25
     e36:	87 95       	ror	r24
     e38:	97 f9       	bld	r25, 7
     e3a:	08 95       	ret
     e3c:	e1 e0       	ldi	r30, 0x01	; 1
     e3e:	66 0f       	add	r22, r22
     e40:	77 1f       	adc	r23, r23
     e42:	88 1f       	adc	r24, r24
     e44:	bb 1f       	adc	r27, r27
     e46:	62 17       	cp	r22, r18
     e48:	73 07       	cpc	r23, r19
     e4a:	84 07       	cpc	r24, r20
     e4c:	ba 07       	cpc	r27, r26
     e4e:	20 f0       	brcs	.+8      	; 0xe58 <__divsf3_pse+0xae>
     e50:	62 1b       	sub	r22, r18
     e52:	73 0b       	sbc	r23, r19
     e54:	84 0b       	sbc	r24, r20
     e56:	ba 0b       	sbc	r27, r26
     e58:	ee 1f       	adc	r30, r30
     e5a:	88 f7       	brcc	.-30     	; 0xe3e <__divsf3_pse+0x94>
     e5c:	e0 95       	com	r30
     e5e:	08 95       	ret

00000e60 <__fixsfsi>:
     e60:	0e 94 37 07 	call	0xe6e	; 0xe6e <__fixunssfsi>
     e64:	68 94       	set
     e66:	b1 11       	cpse	r27, r1
     e68:	0c 94 2d 08 	jmp	0x105a	; 0x105a <__fp_szero>
     e6c:	08 95       	ret

00000e6e <__fixunssfsi>:
     e6e:	0e 94 12 08 	call	0x1024	; 0x1024 <__fp_splitA>
     e72:	88 f0       	brcs	.+34     	; 0xe96 <__fixunssfsi+0x28>
     e74:	9f 57       	subi	r25, 0x7F	; 127
     e76:	98 f0       	brcs	.+38     	; 0xe9e <__fixunssfsi+0x30>
     e78:	b9 2f       	mov	r27, r25
     e7a:	99 27       	eor	r25, r25
     e7c:	b7 51       	subi	r27, 0x17	; 23
     e7e:	b0 f0       	brcs	.+44     	; 0xeac <__fixunssfsi+0x3e>
     e80:	e1 f0       	breq	.+56     	; 0xeba <__fixunssfsi+0x4c>
     e82:	66 0f       	add	r22, r22
     e84:	77 1f       	adc	r23, r23
     e86:	88 1f       	adc	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	1a f0       	brmi	.+6      	; 0xe92 <__fixunssfsi+0x24>
     e8c:	ba 95       	dec	r27
     e8e:	c9 f7       	brne	.-14     	; 0xe82 <__fixunssfsi+0x14>
     e90:	14 c0       	rjmp	.+40     	; 0xeba <__fixunssfsi+0x4c>
     e92:	b1 30       	cpi	r27, 0x01	; 1
     e94:	91 f0       	breq	.+36     	; 0xeba <__fixunssfsi+0x4c>
     e96:	0e 94 2c 08 	call	0x1058	; 0x1058 <__fp_zero>
     e9a:	b1 e0       	ldi	r27, 0x01	; 1
     e9c:	08 95       	ret
     e9e:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__fp_zero>
     ea2:	67 2f       	mov	r22, r23
     ea4:	78 2f       	mov	r23, r24
     ea6:	88 27       	eor	r24, r24
     ea8:	b8 5f       	subi	r27, 0xF8	; 248
     eaa:	39 f0       	breq	.+14     	; 0xeba <__fixunssfsi+0x4c>
     eac:	b9 3f       	cpi	r27, 0xF9	; 249
     eae:	cc f3       	brlt	.-14     	; 0xea2 <__fixunssfsi+0x34>
     eb0:	86 95       	lsr	r24
     eb2:	77 95       	ror	r23
     eb4:	67 95       	ror	r22
     eb6:	b3 95       	inc	r27
     eb8:	d9 f7       	brne	.-10     	; 0xeb0 <__fixunssfsi+0x42>
     eba:	3e f4       	brtc	.+14     	; 0xeca <__fixunssfsi+0x5c>
     ebc:	90 95       	com	r25
     ebe:	80 95       	com	r24
     ec0:	70 95       	com	r23
     ec2:	61 95       	neg	r22
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	8f 4f       	sbci	r24, 0xFF	; 255
     ec8:	9f 4f       	sbci	r25, 0xFF	; 255
     eca:	08 95       	ret

00000ecc <__floatunsisf>:
     ecc:	e8 94       	clt
     ece:	09 c0       	rjmp	.+18     	; 0xee2 <__floatsisf+0x12>

00000ed0 <__floatsisf>:
     ed0:	97 fb       	bst	r25, 7
     ed2:	3e f4       	brtc	.+14     	; 0xee2 <__floatsisf+0x12>
     ed4:	90 95       	com	r25
     ed6:	80 95       	com	r24
     ed8:	70 95       	com	r23
     eda:	61 95       	neg	r22
     edc:	7f 4f       	sbci	r23, 0xFF	; 255
     ede:	8f 4f       	sbci	r24, 0xFF	; 255
     ee0:	9f 4f       	sbci	r25, 0xFF	; 255
     ee2:	99 23       	and	r25, r25
     ee4:	a9 f0       	breq	.+42     	; 0xf10 <__floatsisf+0x40>
     ee6:	f9 2f       	mov	r31, r25
     ee8:	96 e9       	ldi	r25, 0x96	; 150
     eea:	bb 27       	eor	r27, r27
     eec:	93 95       	inc	r25
     eee:	f6 95       	lsr	r31
     ef0:	87 95       	ror	r24
     ef2:	77 95       	ror	r23
     ef4:	67 95       	ror	r22
     ef6:	b7 95       	ror	r27
     ef8:	f1 11       	cpse	r31, r1
     efa:	f8 cf       	rjmp	.-16     	; 0xeec <__floatsisf+0x1c>
     efc:	fa f4       	brpl	.+62     	; 0xf3c <__floatsisf+0x6c>
     efe:	bb 0f       	add	r27, r27
     f00:	11 f4       	brne	.+4      	; 0xf06 <__floatsisf+0x36>
     f02:	60 ff       	sbrs	r22, 0
     f04:	1b c0       	rjmp	.+54     	; 0xf3c <__floatsisf+0x6c>
     f06:	6f 5f       	subi	r22, 0xFF	; 255
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	8f 4f       	sbci	r24, 0xFF	; 255
     f0c:	9f 4f       	sbci	r25, 0xFF	; 255
     f0e:	16 c0       	rjmp	.+44     	; 0xf3c <__floatsisf+0x6c>
     f10:	88 23       	and	r24, r24
     f12:	11 f0       	breq	.+4      	; 0xf18 <__floatsisf+0x48>
     f14:	96 e9       	ldi	r25, 0x96	; 150
     f16:	11 c0       	rjmp	.+34     	; 0xf3a <__floatsisf+0x6a>
     f18:	77 23       	and	r23, r23
     f1a:	21 f0       	breq	.+8      	; 0xf24 <__floatsisf+0x54>
     f1c:	9e e8       	ldi	r25, 0x8E	; 142
     f1e:	87 2f       	mov	r24, r23
     f20:	76 2f       	mov	r23, r22
     f22:	05 c0       	rjmp	.+10     	; 0xf2e <__floatsisf+0x5e>
     f24:	66 23       	and	r22, r22
     f26:	71 f0       	breq	.+28     	; 0xf44 <__floatsisf+0x74>
     f28:	96 e8       	ldi	r25, 0x86	; 134
     f2a:	86 2f       	mov	r24, r22
     f2c:	70 e0       	ldi	r23, 0x00	; 0
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	2a f0       	brmi	.+10     	; 0xf3c <__floatsisf+0x6c>
     f32:	9a 95       	dec	r25
     f34:	66 0f       	add	r22, r22
     f36:	77 1f       	adc	r23, r23
     f38:	88 1f       	adc	r24, r24
     f3a:	da f7       	brpl	.-10     	; 0xf32 <__floatsisf+0x62>
     f3c:	88 0f       	add	r24, r24
     f3e:	96 95       	lsr	r25
     f40:	87 95       	ror	r24
     f42:	97 f9       	bld	r25, 7
     f44:	08 95       	ret

00000f46 <__fp_inf>:
     f46:	97 f9       	bld	r25, 7
     f48:	9f 67       	ori	r25, 0x7F	; 127
     f4a:	80 e8       	ldi	r24, 0x80	; 128
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	60 e0       	ldi	r22, 0x00	; 0
     f50:	08 95       	ret

00000f52 <__fp_nan>:
     f52:	9f ef       	ldi	r25, 0xFF	; 255
     f54:	80 ec       	ldi	r24, 0xC0	; 192
     f56:	08 95       	ret

00000f58 <__fp_pscA>:
     f58:	00 24       	eor	r0, r0
     f5a:	0a 94       	dec	r0
     f5c:	16 16       	cp	r1, r22
     f5e:	17 06       	cpc	r1, r23
     f60:	18 06       	cpc	r1, r24
     f62:	09 06       	cpc	r0, r25
     f64:	08 95       	ret

00000f66 <__fp_pscB>:
     f66:	00 24       	eor	r0, r0
     f68:	0a 94       	dec	r0
     f6a:	12 16       	cp	r1, r18
     f6c:	13 06       	cpc	r1, r19
     f6e:	14 06       	cpc	r1, r20
     f70:	05 06       	cpc	r0, r21
     f72:	08 95       	ret
     f74:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__fp_nan>

00000f78 <__fp_rempio2>:
     f78:	0e 94 12 08 	call	0x1024	; 0x1024 <__fp_splitA>
     f7c:	d8 f3       	brcs	.-10     	; 0xf74 <__fp_pscB+0xe>
     f7e:	e8 94       	clt
     f80:	e0 e0       	ldi	r30, 0x00	; 0
     f82:	bb 27       	eor	r27, r27
     f84:	9f 57       	subi	r25, 0x7F	; 127
     f86:	f0 f0       	brcs	.+60     	; 0xfc4 <__fp_rempio2+0x4c>
     f88:	2a ed       	ldi	r18, 0xDA	; 218
     f8a:	3f e0       	ldi	r19, 0x0F	; 15
     f8c:	49 ec       	ldi	r20, 0xC9	; 201
     f8e:	06 c0       	rjmp	.+12     	; 0xf9c <__fp_rempio2+0x24>
     f90:	ee 0f       	add	r30, r30
     f92:	bb 0f       	add	r27, r27
     f94:	66 1f       	adc	r22, r22
     f96:	77 1f       	adc	r23, r23
     f98:	88 1f       	adc	r24, r24
     f9a:	28 f0       	brcs	.+10     	; 0xfa6 <__fp_rempio2+0x2e>
     f9c:	b2 3a       	cpi	r27, 0xA2	; 162
     f9e:	62 07       	cpc	r22, r18
     fa0:	73 07       	cpc	r23, r19
     fa2:	84 07       	cpc	r24, r20
     fa4:	28 f0       	brcs	.+10     	; 0xfb0 <__fp_rempio2+0x38>
     fa6:	b2 5a       	subi	r27, 0xA2	; 162
     fa8:	62 0b       	sbc	r22, r18
     faa:	73 0b       	sbc	r23, r19
     fac:	84 0b       	sbc	r24, r20
     fae:	e3 95       	inc	r30
     fb0:	9a 95       	dec	r25
     fb2:	72 f7       	brpl	.-36     	; 0xf90 <__fp_rempio2+0x18>
     fb4:	80 38       	cpi	r24, 0x80	; 128
     fb6:	30 f4       	brcc	.+12     	; 0xfc4 <__fp_rempio2+0x4c>
     fb8:	9a 95       	dec	r25
     fba:	bb 0f       	add	r27, r27
     fbc:	66 1f       	adc	r22, r22
     fbe:	77 1f       	adc	r23, r23
     fc0:	88 1f       	adc	r24, r24
     fc2:	d2 f7       	brpl	.-12     	; 0xfb8 <__fp_rempio2+0x40>
     fc4:	90 48       	sbci	r25, 0x80	; 128
     fc6:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__fp_mpack_finite>

00000fca <__fp_round>:
     fca:	09 2e       	mov	r0, r25
     fcc:	03 94       	inc	r0
     fce:	00 0c       	add	r0, r0
     fd0:	11 f4       	brne	.+4      	; 0xfd6 <__fp_round+0xc>
     fd2:	88 23       	and	r24, r24
     fd4:	52 f0       	brmi	.+20     	; 0xfea <__fp_round+0x20>
     fd6:	bb 0f       	add	r27, r27
     fd8:	40 f4       	brcc	.+16     	; 0xfea <__fp_round+0x20>
     fda:	bf 2b       	or	r27, r31
     fdc:	11 f4       	brne	.+4      	; 0xfe2 <__fp_round+0x18>
     fde:	60 ff       	sbrs	r22, 0
     fe0:	04 c0       	rjmp	.+8      	; 0xfea <__fp_round+0x20>
     fe2:	6f 5f       	subi	r22, 0xFF	; 255
     fe4:	7f 4f       	sbci	r23, 0xFF	; 255
     fe6:	8f 4f       	sbci	r24, 0xFF	; 255
     fe8:	9f 4f       	sbci	r25, 0xFF	; 255
     fea:	08 95       	ret

00000fec <__fp_sinus>:
     fec:	ef 93       	push	r30
     fee:	e0 ff       	sbrs	r30, 0
     ff0:	07 c0       	rjmp	.+14     	; 0x1000 <__fp_sinus+0x14>
     ff2:	a2 ea       	ldi	r26, 0xA2	; 162
     ff4:	2a ed       	ldi	r18, 0xDA	; 218
     ff6:	3f e0       	ldi	r19, 0x0F	; 15
     ff8:	49 ec       	ldi	r20, 0xC9	; 201
     ffa:	5f eb       	ldi	r21, 0xBF	; 191
     ffc:	0e 94 b1 08 	call	0x1162	; 0x1162 <__addsf3x>
    1000:	0e 94 e5 07 	call	0xfca	; 0xfca <__fp_round>
    1004:	0f 90       	pop	r0
    1006:	03 94       	inc	r0
    1008:	01 fc       	sbrc	r0, 1
    100a:	90 58       	subi	r25, 0x80	; 128
    100c:	e4 eb       	ldi	r30, 0xB4	; 180
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	0c 94 3b 09 	jmp	0x1276	; 0x1276 <__fp_powsodd>

00001014 <__fp_split3>:
    1014:	57 fd       	sbrc	r21, 7
    1016:	90 58       	subi	r25, 0x80	; 128
    1018:	44 0f       	add	r20, r20
    101a:	55 1f       	adc	r21, r21
    101c:	59 f0       	breq	.+22     	; 0x1034 <__fp_splitA+0x10>
    101e:	5f 3f       	cpi	r21, 0xFF	; 255
    1020:	71 f0       	breq	.+28     	; 0x103e <__fp_splitA+0x1a>
    1022:	47 95       	ror	r20

00001024 <__fp_splitA>:
    1024:	88 0f       	add	r24, r24
    1026:	97 fb       	bst	r25, 7
    1028:	99 1f       	adc	r25, r25
    102a:	61 f0       	breq	.+24     	; 0x1044 <__fp_splitA+0x20>
    102c:	9f 3f       	cpi	r25, 0xFF	; 255
    102e:	79 f0       	breq	.+30     	; 0x104e <__fp_splitA+0x2a>
    1030:	87 95       	ror	r24
    1032:	08 95       	ret
    1034:	12 16       	cp	r1, r18
    1036:	13 06       	cpc	r1, r19
    1038:	14 06       	cpc	r1, r20
    103a:	55 1f       	adc	r21, r21
    103c:	f2 cf       	rjmp	.-28     	; 0x1022 <__fp_split3+0xe>
    103e:	46 95       	lsr	r20
    1040:	f1 df       	rcall	.-30     	; 0x1024 <__fp_splitA>
    1042:	08 c0       	rjmp	.+16     	; 0x1054 <__fp_splitA+0x30>
    1044:	16 16       	cp	r1, r22
    1046:	17 06       	cpc	r1, r23
    1048:	18 06       	cpc	r1, r24
    104a:	99 1f       	adc	r25, r25
    104c:	f1 cf       	rjmp	.-30     	; 0x1030 <__fp_splitA+0xc>
    104e:	86 95       	lsr	r24
    1050:	71 05       	cpc	r23, r1
    1052:	61 05       	cpc	r22, r1
    1054:	08 94       	sec
    1056:	08 95       	ret

00001058 <__fp_zero>:
    1058:	e8 94       	clt

0000105a <__fp_szero>:
    105a:	bb 27       	eor	r27, r27
    105c:	66 27       	eor	r22, r22
    105e:	77 27       	eor	r23, r23
    1060:	cb 01       	movw	r24, r22
    1062:	97 f9       	bld	r25, 7
    1064:	08 95       	ret

00001066 <__mulsf3>:
    1066:	0e 94 46 08 	call	0x108c	; 0x108c <__mulsf3x>
    106a:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__fp_round>
    106e:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fp_pscA>
    1072:	38 f0       	brcs	.+14     	; 0x1082 <__mulsf3+0x1c>
    1074:	0e 94 b3 07 	call	0xf66	; 0xf66 <__fp_pscB>
    1078:	20 f0       	brcs	.+8      	; 0x1082 <__mulsf3+0x1c>
    107a:	95 23       	and	r25, r21
    107c:	11 f0       	breq	.+4      	; 0x1082 <__mulsf3+0x1c>
    107e:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__fp_inf>
    1082:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__fp_nan>
    1086:	11 24       	eor	r1, r1
    1088:	0c 94 2d 08 	jmp	0x105a	; 0x105a <__fp_szero>

0000108c <__mulsf3x>:
    108c:	0e 94 0a 08 	call	0x1014	; 0x1014 <__fp_split3>
    1090:	70 f3       	brcs	.-36     	; 0x106e <__mulsf3+0x8>

00001092 <__mulsf3_pse>:
    1092:	95 9f       	mul	r25, r21
    1094:	c1 f3       	breq	.-16     	; 0x1086 <__mulsf3+0x20>
    1096:	95 0f       	add	r25, r21
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	55 1f       	adc	r21, r21
    109c:	62 9f       	mul	r22, r18
    109e:	f0 01       	movw	r30, r0
    10a0:	72 9f       	mul	r23, r18
    10a2:	bb 27       	eor	r27, r27
    10a4:	f0 0d       	add	r31, r0
    10a6:	b1 1d       	adc	r27, r1
    10a8:	63 9f       	mul	r22, r19
    10aa:	aa 27       	eor	r26, r26
    10ac:	f0 0d       	add	r31, r0
    10ae:	b1 1d       	adc	r27, r1
    10b0:	aa 1f       	adc	r26, r26
    10b2:	64 9f       	mul	r22, r20
    10b4:	66 27       	eor	r22, r22
    10b6:	b0 0d       	add	r27, r0
    10b8:	a1 1d       	adc	r26, r1
    10ba:	66 1f       	adc	r22, r22
    10bc:	82 9f       	mul	r24, r18
    10be:	22 27       	eor	r18, r18
    10c0:	b0 0d       	add	r27, r0
    10c2:	a1 1d       	adc	r26, r1
    10c4:	62 1f       	adc	r22, r18
    10c6:	73 9f       	mul	r23, r19
    10c8:	b0 0d       	add	r27, r0
    10ca:	a1 1d       	adc	r26, r1
    10cc:	62 1f       	adc	r22, r18
    10ce:	83 9f       	mul	r24, r19
    10d0:	a0 0d       	add	r26, r0
    10d2:	61 1d       	adc	r22, r1
    10d4:	22 1f       	adc	r18, r18
    10d6:	74 9f       	mul	r23, r20
    10d8:	33 27       	eor	r19, r19
    10da:	a0 0d       	add	r26, r0
    10dc:	61 1d       	adc	r22, r1
    10de:	23 1f       	adc	r18, r19
    10e0:	84 9f       	mul	r24, r20
    10e2:	60 0d       	add	r22, r0
    10e4:	21 1d       	adc	r18, r1
    10e6:	82 2f       	mov	r24, r18
    10e8:	76 2f       	mov	r23, r22
    10ea:	6a 2f       	mov	r22, r26
    10ec:	11 24       	eor	r1, r1
    10ee:	9f 57       	subi	r25, 0x7F	; 127
    10f0:	50 40       	sbci	r21, 0x00	; 0
    10f2:	9a f0       	brmi	.+38     	; 0x111a <__mulsf3_pse+0x88>
    10f4:	f1 f0       	breq	.+60     	; 0x1132 <__mulsf3_pse+0xa0>
    10f6:	88 23       	and	r24, r24
    10f8:	4a f0       	brmi	.+18     	; 0x110c <__mulsf3_pse+0x7a>
    10fa:	ee 0f       	add	r30, r30
    10fc:	ff 1f       	adc	r31, r31
    10fe:	bb 1f       	adc	r27, r27
    1100:	66 1f       	adc	r22, r22
    1102:	77 1f       	adc	r23, r23
    1104:	88 1f       	adc	r24, r24
    1106:	91 50       	subi	r25, 0x01	; 1
    1108:	50 40       	sbci	r21, 0x00	; 0
    110a:	a9 f7       	brne	.-22     	; 0x10f6 <__mulsf3_pse+0x64>
    110c:	9e 3f       	cpi	r25, 0xFE	; 254
    110e:	51 05       	cpc	r21, r1
    1110:	80 f0       	brcs	.+32     	; 0x1132 <__mulsf3_pse+0xa0>
    1112:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__fp_inf>
    1116:	0c 94 2d 08 	jmp	0x105a	; 0x105a <__fp_szero>
    111a:	5f 3f       	cpi	r21, 0xFF	; 255
    111c:	e4 f3       	brlt	.-8      	; 0x1116 <__mulsf3_pse+0x84>
    111e:	98 3e       	cpi	r25, 0xE8	; 232
    1120:	d4 f3       	brlt	.-12     	; 0x1116 <__mulsf3_pse+0x84>
    1122:	86 95       	lsr	r24
    1124:	77 95       	ror	r23
    1126:	67 95       	ror	r22
    1128:	b7 95       	ror	r27
    112a:	f7 95       	ror	r31
    112c:	e7 95       	ror	r30
    112e:	9f 5f       	subi	r25, 0xFF	; 255
    1130:	c1 f7       	brne	.-16     	; 0x1122 <__mulsf3_pse+0x90>
    1132:	fe 2b       	or	r31, r30
    1134:	88 0f       	add	r24, r24
    1136:	91 1d       	adc	r25, r1
    1138:	96 95       	lsr	r25
    113a:	87 95       	ror	r24
    113c:	97 f9       	bld	r25, 7
    113e:	08 95       	ret
    1140:	0e 94 ac 07 	call	0xf58	; 0xf58 <__fp_pscA>
    1144:	38 f0       	brcs	.+14     	; 0x1154 <__mulsf3_pse+0xc2>
    1146:	0e 94 b3 07 	call	0xf66	; 0xf66 <__fp_pscB>
    114a:	20 f0       	brcs	.+8      	; 0x1154 <__mulsf3_pse+0xc2>
    114c:	39 f4       	brne	.+14     	; 0x115c <__mulsf3_pse+0xca>
    114e:	9f 3f       	cpi	r25, 0xFF	; 255
    1150:	19 f4       	brne	.+6      	; 0x1158 <__mulsf3_pse+0xc6>
    1152:	26 f4       	brtc	.+8      	; 0x115c <__mulsf3_pse+0xca>
    1154:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__fp_nan>
    1158:	0e f4       	brtc	.+2      	; 0x115c <__mulsf3_pse+0xca>
    115a:	e0 95       	com	r30
    115c:	e7 fb       	bst	r30, 7
    115e:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__fp_inf>

00001162 <__addsf3x>:
    1162:	e9 2f       	mov	r30, r25
    1164:	0e 94 0a 08 	call	0x1014	; 0x1014 <__fp_split3>
    1168:	58 f3       	brcs	.-42     	; 0x1140 <__mulsf3_pse+0xae>
    116a:	ba 17       	cp	r27, r26
    116c:	62 07       	cpc	r22, r18
    116e:	73 07       	cpc	r23, r19
    1170:	84 07       	cpc	r24, r20
    1172:	95 07       	cpc	r25, r21
    1174:	20 f0       	brcs	.+8      	; 0x117e <__addsf3x+0x1c>
    1176:	79 f4       	brne	.+30     	; 0x1196 <__addsf3x+0x34>
    1178:	a6 f5       	brtc	.+104    	; 0x11e2 <__addsf3x+0x80>
    117a:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__fp_zero>
    117e:	0e f4       	brtc	.+2      	; 0x1182 <__addsf3x+0x20>
    1180:	e0 95       	com	r30
    1182:	0b 2e       	mov	r0, r27
    1184:	ba 2f       	mov	r27, r26
    1186:	a0 2d       	mov	r26, r0
    1188:	0b 01       	movw	r0, r22
    118a:	b9 01       	movw	r22, r18
    118c:	90 01       	movw	r18, r0
    118e:	0c 01       	movw	r0, r24
    1190:	ca 01       	movw	r24, r20
    1192:	a0 01       	movw	r20, r0
    1194:	11 24       	eor	r1, r1
    1196:	ff 27       	eor	r31, r31
    1198:	59 1b       	sub	r21, r25
    119a:	99 f0       	breq	.+38     	; 0x11c2 <__addsf3x+0x60>
    119c:	59 3f       	cpi	r21, 0xF9	; 249
    119e:	50 f4       	brcc	.+20     	; 0x11b4 <__addsf3x+0x52>
    11a0:	50 3e       	cpi	r21, 0xE0	; 224
    11a2:	68 f1       	brcs	.+90     	; 0x11fe <__addsf3x+0x9c>
    11a4:	1a 16       	cp	r1, r26
    11a6:	f0 40       	sbci	r31, 0x00	; 0
    11a8:	a2 2f       	mov	r26, r18
    11aa:	23 2f       	mov	r18, r19
    11ac:	34 2f       	mov	r19, r20
    11ae:	44 27       	eor	r20, r20
    11b0:	58 5f       	subi	r21, 0xF8	; 248
    11b2:	f3 cf       	rjmp	.-26     	; 0x119a <__addsf3x+0x38>
    11b4:	46 95       	lsr	r20
    11b6:	37 95       	ror	r19
    11b8:	27 95       	ror	r18
    11ba:	a7 95       	ror	r26
    11bc:	f0 40       	sbci	r31, 0x00	; 0
    11be:	53 95       	inc	r21
    11c0:	c9 f7       	brne	.-14     	; 0x11b4 <__addsf3x+0x52>
    11c2:	7e f4       	brtc	.+30     	; 0x11e2 <__addsf3x+0x80>
    11c4:	1f 16       	cp	r1, r31
    11c6:	ba 0b       	sbc	r27, r26
    11c8:	62 0b       	sbc	r22, r18
    11ca:	73 0b       	sbc	r23, r19
    11cc:	84 0b       	sbc	r24, r20
    11ce:	ba f0       	brmi	.+46     	; 0x11fe <__addsf3x+0x9c>
    11d0:	91 50       	subi	r25, 0x01	; 1
    11d2:	a1 f0       	breq	.+40     	; 0x11fc <__addsf3x+0x9a>
    11d4:	ff 0f       	add	r31, r31
    11d6:	bb 1f       	adc	r27, r27
    11d8:	66 1f       	adc	r22, r22
    11da:	77 1f       	adc	r23, r23
    11dc:	88 1f       	adc	r24, r24
    11de:	c2 f7       	brpl	.-16     	; 0x11d0 <__addsf3x+0x6e>
    11e0:	0e c0       	rjmp	.+28     	; 0x11fe <__addsf3x+0x9c>
    11e2:	ba 0f       	add	r27, r26
    11e4:	62 1f       	adc	r22, r18
    11e6:	73 1f       	adc	r23, r19
    11e8:	84 1f       	adc	r24, r20
    11ea:	48 f4       	brcc	.+18     	; 0x11fe <__addsf3x+0x9c>
    11ec:	87 95       	ror	r24
    11ee:	77 95       	ror	r23
    11f0:	67 95       	ror	r22
    11f2:	b7 95       	ror	r27
    11f4:	f7 95       	ror	r31
    11f6:	9e 3f       	cpi	r25, 0xFE	; 254
    11f8:	08 f0       	brcs	.+2      	; 0x11fc <__addsf3x+0x9a>
    11fa:	b0 cf       	rjmp	.-160    	; 0x115c <__mulsf3_pse+0xca>
    11fc:	93 95       	inc	r25
    11fe:	88 0f       	add	r24, r24
    1200:	08 f0       	brcs	.+2      	; 0x1204 <__addsf3x+0xa2>
    1202:	99 27       	eor	r25, r25
    1204:	ee 0f       	add	r30, r30
    1206:	97 95       	ror	r25
    1208:	87 95       	ror	r24
    120a:	08 95       	ret

0000120c <__fp_mpack>:
    120c:	9f 3f       	cpi	r25, 0xFF	; 255
    120e:	31 f0       	breq	.+12     	; 0x121c <__fp_mpack_finite+0xc>

00001210 <__fp_mpack_finite>:
    1210:	91 50       	subi	r25, 0x01	; 1
    1212:	20 f4       	brcc	.+8      	; 0x121c <__fp_mpack_finite+0xc>
    1214:	87 95       	ror	r24
    1216:	77 95       	ror	r23
    1218:	67 95       	ror	r22
    121a:	b7 95       	ror	r27
    121c:	88 0f       	add	r24, r24
    121e:	91 1d       	adc	r25, r1
    1220:	96 95       	lsr	r25
    1222:	87 95       	ror	r24
    1224:	97 f9       	bld	r25, 7
    1226:	08 95       	ret

00001228 <__fp_powser>:
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	1f 93       	push	r17
    122e:	0f 93       	push	r16
    1230:	ff 92       	push	r15
    1232:	ef 92       	push	r14
    1234:	df 92       	push	r13
    1236:	7b 01       	movw	r14, r22
    1238:	8c 01       	movw	r16, r24
    123a:	68 94       	set
    123c:	06 c0       	rjmp	.+12     	; 0x124a <__fp_powser+0x22>
    123e:	da 2e       	mov	r13, r26
    1240:	ef 01       	movw	r28, r30
    1242:	0e 94 46 08 	call	0x108c	; 0x108c <__mulsf3x>
    1246:	fe 01       	movw	r30, r28
    1248:	e8 94       	clt
    124a:	a5 91       	lpm	r26, Z+
    124c:	25 91       	lpm	r18, Z+
    124e:	35 91       	lpm	r19, Z+
    1250:	45 91       	lpm	r20, Z+
    1252:	55 91       	lpm	r21, Z+
    1254:	a6 f3       	brts	.-24     	; 0x123e <__fp_powser+0x16>
    1256:	ef 01       	movw	r28, r30
    1258:	0e 94 b1 08 	call	0x1162	; 0x1162 <__addsf3x>
    125c:	fe 01       	movw	r30, r28
    125e:	97 01       	movw	r18, r14
    1260:	a8 01       	movw	r20, r16
    1262:	da 94       	dec	r13
    1264:	69 f7       	brne	.-38     	; 0x1240 <__fp_powser+0x18>
    1266:	df 90       	pop	r13
    1268:	ef 90       	pop	r14
    126a:	ff 90       	pop	r15
    126c:	0f 91       	pop	r16
    126e:	1f 91       	pop	r17
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <__fp_powsodd>:
    1276:	9f 93       	push	r25
    1278:	8f 93       	push	r24
    127a:	7f 93       	push	r23
    127c:	6f 93       	push	r22
    127e:	ff 93       	push	r31
    1280:	ef 93       	push	r30
    1282:	9b 01       	movw	r18, r22
    1284:	ac 01       	movw	r20, r24
    1286:	0e 94 33 08 	call	0x1066	; 0x1066 <__mulsf3>
    128a:	ef 91       	pop	r30
    128c:	ff 91       	pop	r31
    128e:	0e 94 14 09 	call	0x1228	; 0x1228 <__fp_powser>
    1292:	2f 91       	pop	r18
    1294:	3f 91       	pop	r19
    1296:	4f 91       	pop	r20
    1298:	5f 91       	pop	r21
    129a:	0c 94 33 08 	jmp	0x1066	; 0x1066 <__mulsf3>

0000129e <vfprintf>:
    129e:	a0 e1       	ldi	r26, 0x10	; 16
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	e5 e5       	ldi	r30, 0x55	; 85
    12a4:	f9 e0       	ldi	r31, 0x09	; 9
    12a6:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <__prologue_saves__>
    12aa:	7c 01       	movw	r14, r24
    12ac:	1b 01       	movw	r2, r22
    12ae:	6a 01       	movw	r12, r20
    12b0:	fc 01       	movw	r30, r24
    12b2:	17 82       	std	Z+7, r1	; 0x07
    12b4:	16 82       	std	Z+6, r1	; 0x06
    12b6:	83 81       	ldd	r24, Z+3	; 0x03
    12b8:	81 ff       	sbrs	r24, 1
    12ba:	44 c3       	rjmp	.+1672   	; 0x1944 <vfprintf+0x6a6>
    12bc:	9e 01       	movw	r18, r28
    12be:	2f 5f       	subi	r18, 0xFF	; 255
    12c0:	3f 4f       	sbci	r19, 0xFF	; 255
    12c2:	39 01       	movw	r6, r18
    12c4:	f7 01       	movw	r30, r14
    12c6:	93 81       	ldd	r25, Z+3	; 0x03
    12c8:	f1 01       	movw	r30, r2
    12ca:	93 fd       	sbrc	r25, 3
    12cc:	85 91       	lpm	r24, Z+
    12ce:	93 ff       	sbrs	r25, 3
    12d0:	81 91       	ld	r24, Z+
    12d2:	1f 01       	movw	r2, r30
    12d4:	88 23       	and	r24, r24
    12d6:	09 f4       	brne	.+2      	; 0x12da <vfprintf+0x3c>
    12d8:	31 c3       	rjmp	.+1634   	; 0x193c <vfprintf+0x69e>
    12da:	85 32       	cpi	r24, 0x25	; 37
    12dc:	39 f4       	brne	.+14     	; 0x12ec <vfprintf+0x4e>
    12de:	93 fd       	sbrc	r25, 3
    12e0:	85 91       	lpm	r24, Z+
    12e2:	93 ff       	sbrs	r25, 3
    12e4:	81 91       	ld	r24, Z+
    12e6:	1f 01       	movw	r2, r30
    12e8:	85 32       	cpi	r24, 0x25	; 37
    12ea:	39 f4       	brne	.+14     	; 0x12fa <vfprintf+0x5c>
    12ec:	b7 01       	movw	r22, r14
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    12f4:	56 01       	movw	r10, r12
    12f6:	65 01       	movw	r12, r10
    12f8:	e5 cf       	rjmp	.-54     	; 0x12c4 <vfprintf+0x26>
    12fa:	10 e0       	ldi	r17, 0x00	; 0
    12fc:	51 2c       	mov	r5, r1
    12fe:	91 2c       	mov	r9, r1
    1300:	ff e1       	ldi	r31, 0x1F	; 31
    1302:	f9 15       	cp	r31, r9
    1304:	d8 f0       	brcs	.+54     	; 0x133c <vfprintf+0x9e>
    1306:	8b 32       	cpi	r24, 0x2B	; 43
    1308:	79 f0       	breq	.+30     	; 0x1328 <vfprintf+0x8a>
    130a:	38 f4       	brcc	.+14     	; 0x131a <vfprintf+0x7c>
    130c:	80 32       	cpi	r24, 0x20	; 32
    130e:	79 f0       	breq	.+30     	; 0x132e <vfprintf+0x90>
    1310:	83 32       	cpi	r24, 0x23	; 35
    1312:	a1 f4       	brne	.+40     	; 0x133c <vfprintf+0x9e>
    1314:	f9 2d       	mov	r31, r9
    1316:	f0 61       	ori	r31, 0x10	; 16
    1318:	2e c0       	rjmp	.+92     	; 0x1376 <vfprintf+0xd8>
    131a:	8d 32       	cpi	r24, 0x2D	; 45
    131c:	61 f0       	breq	.+24     	; 0x1336 <vfprintf+0x98>
    131e:	80 33       	cpi	r24, 0x30	; 48
    1320:	69 f4       	brne	.+26     	; 0x133c <vfprintf+0x9e>
    1322:	29 2d       	mov	r18, r9
    1324:	21 60       	ori	r18, 0x01	; 1
    1326:	2d c0       	rjmp	.+90     	; 0x1382 <vfprintf+0xe4>
    1328:	39 2d       	mov	r19, r9
    132a:	32 60       	ori	r19, 0x02	; 2
    132c:	93 2e       	mov	r9, r19
    132e:	89 2d       	mov	r24, r9
    1330:	84 60       	ori	r24, 0x04	; 4
    1332:	98 2e       	mov	r9, r24
    1334:	2a c0       	rjmp	.+84     	; 0x138a <vfprintf+0xec>
    1336:	e9 2d       	mov	r30, r9
    1338:	e8 60       	ori	r30, 0x08	; 8
    133a:	15 c0       	rjmp	.+42     	; 0x1366 <vfprintf+0xc8>
    133c:	97 fc       	sbrc	r9, 7
    133e:	2d c0       	rjmp	.+90     	; 0x139a <vfprintf+0xfc>
    1340:	20 ed       	ldi	r18, 0xD0	; 208
    1342:	28 0f       	add	r18, r24
    1344:	2a 30       	cpi	r18, 0x0A	; 10
    1346:	88 f4       	brcc	.+34     	; 0x136a <vfprintf+0xcc>
    1348:	96 fe       	sbrs	r9, 6
    134a:	06 c0       	rjmp	.+12     	; 0x1358 <vfprintf+0xba>
    134c:	3a e0       	ldi	r19, 0x0A	; 10
    134e:	13 9f       	mul	r17, r19
    1350:	20 0d       	add	r18, r0
    1352:	11 24       	eor	r1, r1
    1354:	12 2f       	mov	r17, r18
    1356:	19 c0       	rjmp	.+50     	; 0x138a <vfprintf+0xec>
    1358:	8a e0       	ldi	r24, 0x0A	; 10
    135a:	58 9e       	mul	r5, r24
    135c:	20 0d       	add	r18, r0
    135e:	11 24       	eor	r1, r1
    1360:	52 2e       	mov	r5, r18
    1362:	e9 2d       	mov	r30, r9
    1364:	e0 62       	ori	r30, 0x20	; 32
    1366:	9e 2e       	mov	r9, r30
    1368:	10 c0       	rjmp	.+32     	; 0x138a <vfprintf+0xec>
    136a:	8e 32       	cpi	r24, 0x2E	; 46
    136c:	31 f4       	brne	.+12     	; 0x137a <vfprintf+0xdc>
    136e:	96 fc       	sbrc	r9, 6
    1370:	e5 c2       	rjmp	.+1482   	; 0x193c <vfprintf+0x69e>
    1372:	f9 2d       	mov	r31, r9
    1374:	f0 64       	ori	r31, 0x40	; 64
    1376:	9f 2e       	mov	r9, r31
    1378:	08 c0       	rjmp	.+16     	; 0x138a <vfprintf+0xec>
    137a:	8c 36       	cpi	r24, 0x6C	; 108
    137c:	21 f4       	brne	.+8      	; 0x1386 <vfprintf+0xe8>
    137e:	29 2d       	mov	r18, r9
    1380:	20 68       	ori	r18, 0x80	; 128
    1382:	92 2e       	mov	r9, r18
    1384:	02 c0       	rjmp	.+4      	; 0x138a <vfprintf+0xec>
    1386:	88 36       	cpi	r24, 0x68	; 104
    1388:	41 f4       	brne	.+16     	; 0x139a <vfprintf+0xfc>
    138a:	f1 01       	movw	r30, r2
    138c:	93 fd       	sbrc	r25, 3
    138e:	85 91       	lpm	r24, Z+
    1390:	93 ff       	sbrs	r25, 3
    1392:	81 91       	ld	r24, Z+
    1394:	1f 01       	movw	r2, r30
    1396:	81 11       	cpse	r24, r1
    1398:	b3 cf       	rjmp	.-154    	; 0x1300 <vfprintf+0x62>
    139a:	9b eb       	ldi	r25, 0xBB	; 187
    139c:	98 0f       	add	r25, r24
    139e:	93 30       	cpi	r25, 0x03	; 3
    13a0:	20 f4       	brcc	.+8      	; 0x13aa <vfprintf+0x10c>
    13a2:	99 2d       	mov	r25, r9
    13a4:	90 61       	ori	r25, 0x10	; 16
    13a6:	80 5e       	subi	r24, 0xE0	; 224
    13a8:	07 c0       	rjmp	.+14     	; 0x13b8 <vfprintf+0x11a>
    13aa:	9b e9       	ldi	r25, 0x9B	; 155
    13ac:	98 0f       	add	r25, r24
    13ae:	93 30       	cpi	r25, 0x03	; 3
    13b0:	08 f0       	brcs	.+2      	; 0x13b4 <vfprintf+0x116>
    13b2:	66 c1       	rjmp	.+716    	; 0x1680 <vfprintf+0x3e2>
    13b4:	99 2d       	mov	r25, r9
    13b6:	9f 7e       	andi	r25, 0xEF	; 239
    13b8:	96 ff       	sbrs	r25, 6
    13ba:	16 e0       	ldi	r17, 0x06	; 6
    13bc:	9f 73       	andi	r25, 0x3F	; 63
    13be:	99 2e       	mov	r9, r25
    13c0:	85 36       	cpi	r24, 0x65	; 101
    13c2:	19 f4       	brne	.+6      	; 0x13ca <vfprintf+0x12c>
    13c4:	90 64       	ori	r25, 0x40	; 64
    13c6:	99 2e       	mov	r9, r25
    13c8:	08 c0       	rjmp	.+16     	; 0x13da <vfprintf+0x13c>
    13ca:	86 36       	cpi	r24, 0x66	; 102
    13cc:	21 f4       	brne	.+8      	; 0x13d6 <vfprintf+0x138>
    13ce:	39 2f       	mov	r19, r25
    13d0:	30 68       	ori	r19, 0x80	; 128
    13d2:	93 2e       	mov	r9, r19
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <vfprintf+0x13c>
    13d6:	11 11       	cpse	r17, r1
    13d8:	11 50       	subi	r17, 0x01	; 1
    13da:	97 fe       	sbrs	r9, 7
    13dc:	07 c0       	rjmp	.+14     	; 0x13ec <vfprintf+0x14e>
    13de:	1c 33       	cpi	r17, 0x3C	; 60
    13e0:	50 f4       	brcc	.+20     	; 0x13f6 <vfprintf+0x158>
    13e2:	44 24       	eor	r4, r4
    13e4:	43 94       	inc	r4
    13e6:	41 0e       	add	r4, r17
    13e8:	27 e0       	ldi	r18, 0x07	; 7
    13ea:	0b c0       	rjmp	.+22     	; 0x1402 <vfprintf+0x164>
    13ec:	18 30       	cpi	r17, 0x08	; 8
    13ee:	38 f0       	brcs	.+14     	; 0x13fe <vfprintf+0x160>
    13f0:	27 e0       	ldi	r18, 0x07	; 7
    13f2:	17 e0       	ldi	r17, 0x07	; 7
    13f4:	05 c0       	rjmp	.+10     	; 0x1400 <vfprintf+0x162>
    13f6:	27 e0       	ldi	r18, 0x07	; 7
    13f8:	9c e3       	ldi	r25, 0x3C	; 60
    13fa:	49 2e       	mov	r4, r25
    13fc:	02 c0       	rjmp	.+4      	; 0x1402 <vfprintf+0x164>
    13fe:	21 2f       	mov	r18, r17
    1400:	41 2c       	mov	r4, r1
    1402:	56 01       	movw	r10, r12
    1404:	84 e0       	ldi	r24, 0x04	; 4
    1406:	a8 0e       	add	r10, r24
    1408:	b1 1c       	adc	r11, r1
    140a:	f6 01       	movw	r30, r12
    140c:	60 81       	ld	r22, Z
    140e:	71 81       	ldd	r23, Z+1	; 0x01
    1410:	82 81       	ldd	r24, Z+2	; 0x02
    1412:	93 81       	ldd	r25, Z+3	; 0x03
    1414:	04 2d       	mov	r16, r4
    1416:	a3 01       	movw	r20, r6
    1418:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__ftoa_engine>
    141c:	6c 01       	movw	r12, r24
    141e:	f9 81       	ldd	r31, Y+1	; 0x01
    1420:	fc 87       	std	Y+12, r31	; 0x0c
    1422:	f0 ff       	sbrs	r31, 0
    1424:	02 c0       	rjmp	.+4      	; 0x142a <vfprintf+0x18c>
    1426:	f3 ff       	sbrs	r31, 3
    1428:	06 c0       	rjmp	.+12     	; 0x1436 <vfprintf+0x198>
    142a:	91 fc       	sbrc	r9, 1
    142c:	06 c0       	rjmp	.+12     	; 0x143a <vfprintf+0x19c>
    142e:	92 fe       	sbrs	r9, 2
    1430:	06 c0       	rjmp	.+12     	; 0x143e <vfprintf+0x1a0>
    1432:	00 e2       	ldi	r16, 0x20	; 32
    1434:	05 c0       	rjmp	.+10     	; 0x1440 <vfprintf+0x1a2>
    1436:	0d e2       	ldi	r16, 0x2D	; 45
    1438:	03 c0       	rjmp	.+6      	; 0x1440 <vfprintf+0x1a2>
    143a:	0b e2       	ldi	r16, 0x2B	; 43
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <vfprintf+0x1a2>
    143e:	00 e0       	ldi	r16, 0x00	; 0
    1440:	8c 85       	ldd	r24, Y+12	; 0x0c
    1442:	8c 70       	andi	r24, 0x0C	; 12
    1444:	19 f0       	breq	.+6      	; 0x144c <vfprintf+0x1ae>
    1446:	01 11       	cpse	r16, r1
    1448:	5a c2       	rjmp	.+1204   	; 0x18fe <vfprintf+0x660>
    144a:	9b c2       	rjmp	.+1334   	; 0x1982 <vfprintf+0x6e4>
    144c:	97 fe       	sbrs	r9, 7
    144e:	10 c0       	rjmp	.+32     	; 0x1470 <vfprintf+0x1d2>
    1450:	4c 0c       	add	r4, r12
    1452:	fc 85       	ldd	r31, Y+12	; 0x0c
    1454:	f4 ff       	sbrs	r31, 4
    1456:	04 c0       	rjmp	.+8      	; 0x1460 <vfprintf+0x1c2>
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	81 33       	cpi	r24, 0x31	; 49
    145c:	09 f4       	brne	.+2      	; 0x1460 <vfprintf+0x1c2>
    145e:	4a 94       	dec	r4
    1460:	14 14       	cp	r1, r4
    1462:	74 f5       	brge	.+92     	; 0x14c0 <vfprintf+0x222>
    1464:	28 e0       	ldi	r18, 0x08	; 8
    1466:	24 15       	cp	r18, r4
    1468:	78 f5       	brcc	.+94     	; 0x14c8 <vfprintf+0x22a>
    146a:	88 e0       	ldi	r24, 0x08	; 8
    146c:	48 2e       	mov	r4, r24
    146e:	2c c0       	rjmp	.+88     	; 0x14c8 <vfprintf+0x22a>
    1470:	96 fc       	sbrc	r9, 6
    1472:	2a c0       	rjmp	.+84     	; 0x14c8 <vfprintf+0x22a>
    1474:	81 2f       	mov	r24, r17
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	8c 15       	cp	r24, r12
    147a:	9d 05       	cpc	r25, r13
    147c:	9c f0       	brlt	.+38     	; 0x14a4 <vfprintf+0x206>
    147e:	3c ef       	ldi	r19, 0xFC	; 252
    1480:	c3 16       	cp	r12, r19
    1482:	3f ef       	ldi	r19, 0xFF	; 255
    1484:	d3 06       	cpc	r13, r19
    1486:	74 f0       	brlt	.+28     	; 0x14a4 <vfprintf+0x206>
    1488:	89 2d       	mov	r24, r9
    148a:	80 68       	ori	r24, 0x80	; 128
    148c:	98 2e       	mov	r9, r24
    148e:	0a c0       	rjmp	.+20     	; 0x14a4 <vfprintf+0x206>
    1490:	e2 e0       	ldi	r30, 0x02	; 2
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	ec 0f       	add	r30, r28
    1496:	fd 1f       	adc	r31, r29
    1498:	e1 0f       	add	r30, r17
    149a:	f1 1d       	adc	r31, r1
    149c:	80 81       	ld	r24, Z
    149e:	80 33       	cpi	r24, 0x30	; 48
    14a0:	19 f4       	brne	.+6      	; 0x14a8 <vfprintf+0x20a>
    14a2:	11 50       	subi	r17, 0x01	; 1
    14a4:	11 11       	cpse	r17, r1
    14a6:	f4 cf       	rjmp	.-24     	; 0x1490 <vfprintf+0x1f2>
    14a8:	97 fe       	sbrs	r9, 7
    14aa:	0e c0       	rjmp	.+28     	; 0x14c8 <vfprintf+0x22a>
    14ac:	44 24       	eor	r4, r4
    14ae:	43 94       	inc	r4
    14b0:	41 0e       	add	r4, r17
    14b2:	81 2f       	mov	r24, r17
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	c8 16       	cp	r12, r24
    14b8:	d9 06       	cpc	r13, r25
    14ba:	2c f4       	brge	.+10     	; 0x14c6 <vfprintf+0x228>
    14bc:	1c 19       	sub	r17, r12
    14be:	04 c0       	rjmp	.+8      	; 0x14c8 <vfprintf+0x22a>
    14c0:	44 24       	eor	r4, r4
    14c2:	43 94       	inc	r4
    14c4:	01 c0       	rjmp	.+2      	; 0x14c8 <vfprintf+0x22a>
    14c6:	10 e0       	ldi	r17, 0x00	; 0
    14c8:	97 fe       	sbrs	r9, 7
    14ca:	06 c0       	rjmp	.+12     	; 0x14d8 <vfprintf+0x23a>
    14cc:	1c 14       	cp	r1, r12
    14ce:	1d 04       	cpc	r1, r13
    14d0:	34 f4       	brge	.+12     	; 0x14de <vfprintf+0x240>
    14d2:	c6 01       	movw	r24, r12
    14d4:	01 96       	adiw	r24, 0x01	; 1
    14d6:	05 c0       	rjmp	.+10     	; 0x14e2 <vfprintf+0x244>
    14d8:	85 e0       	ldi	r24, 0x05	; 5
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <vfprintf+0x244>
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	01 11       	cpse	r16, r1
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	11 23       	and	r17, r17
    14e8:	31 f0       	breq	.+12     	; 0x14f6 <vfprintf+0x258>
    14ea:	21 2f       	mov	r18, r17
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	2f 5f       	subi	r18, 0xFF	; 255
    14f0:	3f 4f       	sbci	r19, 0xFF	; 255
    14f2:	82 0f       	add	r24, r18
    14f4:	93 1f       	adc	r25, r19
    14f6:	25 2d       	mov	r18, r5
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	82 17       	cp	r24, r18
    14fc:	93 07       	cpc	r25, r19
    14fe:	14 f4       	brge	.+4      	; 0x1504 <vfprintf+0x266>
    1500:	58 1a       	sub	r5, r24
    1502:	01 c0       	rjmp	.+2      	; 0x1506 <vfprintf+0x268>
    1504:	51 2c       	mov	r5, r1
    1506:	89 2d       	mov	r24, r9
    1508:	89 70       	andi	r24, 0x09	; 9
    150a:	49 f4       	brne	.+18     	; 0x151e <vfprintf+0x280>
    150c:	55 20       	and	r5, r5
    150e:	39 f0       	breq	.+14     	; 0x151e <vfprintf+0x280>
    1510:	b7 01       	movw	r22, r14
    1512:	80 e2       	ldi	r24, 0x20	; 32
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    151a:	5a 94       	dec	r5
    151c:	f7 cf       	rjmp	.-18     	; 0x150c <vfprintf+0x26e>
    151e:	00 23       	and	r16, r16
    1520:	29 f0       	breq	.+10     	; 0x152c <vfprintf+0x28e>
    1522:	b7 01       	movw	r22, r14
    1524:	80 2f       	mov	r24, r16
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    152c:	93 fc       	sbrc	r9, 3
    152e:	09 c0       	rjmp	.+18     	; 0x1542 <vfprintf+0x2a4>
    1530:	55 20       	and	r5, r5
    1532:	39 f0       	breq	.+14     	; 0x1542 <vfprintf+0x2a4>
    1534:	b7 01       	movw	r22, r14
    1536:	80 e3       	ldi	r24, 0x30	; 48
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    153e:	5a 94       	dec	r5
    1540:	f7 cf       	rjmp	.-18     	; 0x1530 <vfprintf+0x292>
    1542:	97 fe       	sbrs	r9, 7
    1544:	4c c0       	rjmp	.+152    	; 0x15de <vfprintf+0x340>
    1546:	46 01       	movw	r8, r12
    1548:	d7 fe       	sbrs	r13, 7
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <vfprintf+0x2b2>
    154c:	81 2c       	mov	r8, r1
    154e:	91 2c       	mov	r9, r1
    1550:	c6 01       	movw	r24, r12
    1552:	88 19       	sub	r24, r8
    1554:	99 09       	sbc	r25, r9
    1556:	f3 01       	movw	r30, r6
    1558:	e8 0f       	add	r30, r24
    155a:	f9 1f       	adc	r31, r25
    155c:	fe 87       	std	Y+14, r31	; 0x0e
    155e:	ed 87       	std	Y+13, r30	; 0x0d
    1560:	96 01       	movw	r18, r12
    1562:	24 19       	sub	r18, r4
    1564:	31 09       	sbc	r19, r1
    1566:	38 8b       	std	Y+16, r19	; 0x10
    1568:	2f 87       	std	Y+15, r18	; 0x0f
    156a:	01 2f       	mov	r16, r17
    156c:	10 e0       	ldi	r17, 0x00	; 0
    156e:	11 95       	neg	r17
    1570:	01 95       	neg	r16
    1572:	11 09       	sbc	r17, r1
    1574:	3f ef       	ldi	r19, 0xFF	; 255
    1576:	83 16       	cp	r8, r19
    1578:	93 06       	cpc	r9, r19
    157a:	29 f4       	brne	.+10     	; 0x1586 <vfprintf+0x2e8>
    157c:	b7 01       	movw	r22, r14
    157e:	8e e2       	ldi	r24, 0x2E	; 46
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    1586:	c8 14       	cp	r12, r8
    1588:	d9 04       	cpc	r13, r9
    158a:	4c f0       	brlt	.+18     	; 0x159e <vfprintf+0x300>
    158c:	8f 85       	ldd	r24, Y+15	; 0x0f
    158e:	98 89       	ldd	r25, Y+16	; 0x10
    1590:	88 15       	cp	r24, r8
    1592:	99 05       	cpc	r25, r9
    1594:	24 f4       	brge	.+8      	; 0x159e <vfprintf+0x300>
    1596:	ed 85       	ldd	r30, Y+13	; 0x0d
    1598:	fe 85       	ldd	r31, Y+14	; 0x0e
    159a:	81 81       	ldd	r24, Z+1	; 0x01
    159c:	01 c0       	rjmp	.+2      	; 0x15a0 <vfprintf+0x302>
    159e:	80 e3       	ldi	r24, 0x30	; 48
    15a0:	f1 e0       	ldi	r31, 0x01	; 1
    15a2:	8f 1a       	sub	r8, r31
    15a4:	91 08       	sbc	r9, r1
    15a6:	2d 85       	ldd	r18, Y+13	; 0x0d
    15a8:	3e 85       	ldd	r19, Y+14	; 0x0e
    15aa:	2f 5f       	subi	r18, 0xFF	; 255
    15ac:	3f 4f       	sbci	r19, 0xFF	; 255
    15ae:	3e 87       	std	Y+14, r19	; 0x0e
    15b0:	2d 87       	std	Y+13, r18	; 0x0d
    15b2:	80 16       	cp	r8, r16
    15b4:	91 06       	cpc	r9, r17
    15b6:	2c f0       	brlt	.+10     	; 0x15c2 <vfprintf+0x324>
    15b8:	b7 01       	movw	r22, r14
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    15c0:	d9 cf       	rjmp	.-78     	; 0x1574 <vfprintf+0x2d6>
    15c2:	c8 14       	cp	r12, r8
    15c4:	d9 04       	cpc	r13, r9
    15c6:	41 f4       	brne	.+16     	; 0x15d8 <vfprintf+0x33a>
    15c8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ca:	96 33       	cpi	r25, 0x36	; 54
    15cc:	20 f4       	brcc	.+8      	; 0x15d6 <vfprintf+0x338>
    15ce:	95 33       	cpi	r25, 0x35	; 53
    15d0:	19 f4       	brne	.+6      	; 0x15d8 <vfprintf+0x33a>
    15d2:	3c 85       	ldd	r19, Y+12	; 0x0c
    15d4:	34 ff       	sbrs	r19, 4
    15d6:	81 e3       	ldi	r24, 0x31	; 49
    15d8:	b7 01       	movw	r22, r14
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	4e c0       	rjmp	.+156    	; 0x167a <vfprintf+0x3dc>
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	81 33       	cpi	r24, 0x31	; 49
    15e2:	19 f0       	breq	.+6      	; 0x15ea <vfprintf+0x34c>
    15e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    15e6:	9f 7e       	andi	r25, 0xEF	; 239
    15e8:	9c 87       	std	Y+12, r25	; 0x0c
    15ea:	b7 01       	movw	r22, r14
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    15f2:	11 11       	cpse	r17, r1
    15f4:	05 c0       	rjmp	.+10     	; 0x1600 <vfprintf+0x362>
    15f6:	94 fc       	sbrc	r9, 4
    15f8:	18 c0       	rjmp	.+48     	; 0x162a <vfprintf+0x38c>
    15fa:	85 e6       	ldi	r24, 0x65	; 101
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	17 c0       	rjmp	.+46     	; 0x162e <vfprintf+0x390>
    1600:	b7 01       	movw	r22, r14
    1602:	8e e2       	ldi	r24, 0x2E	; 46
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    160a:	1e 5f       	subi	r17, 0xFE	; 254
    160c:	82 e0       	ldi	r24, 0x02	; 2
    160e:	01 e0       	ldi	r16, 0x01	; 1
    1610:	08 0f       	add	r16, r24
    1612:	f3 01       	movw	r30, r6
    1614:	e8 0f       	add	r30, r24
    1616:	f1 1d       	adc	r31, r1
    1618:	80 81       	ld	r24, Z
    161a:	b7 01       	movw	r22, r14
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    1622:	80 2f       	mov	r24, r16
    1624:	01 13       	cpse	r16, r17
    1626:	f3 cf       	rjmp	.-26     	; 0x160e <vfprintf+0x370>
    1628:	e6 cf       	rjmp	.-52     	; 0x15f6 <vfprintf+0x358>
    162a:	85 e4       	ldi	r24, 0x45	; 69
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	b7 01       	movw	r22, r14
    1630:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    1634:	d7 fc       	sbrc	r13, 7
    1636:	06 c0       	rjmp	.+12     	; 0x1644 <vfprintf+0x3a6>
    1638:	c1 14       	cp	r12, r1
    163a:	d1 04       	cpc	r13, r1
    163c:	41 f4       	brne	.+16     	; 0x164e <vfprintf+0x3b0>
    163e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1640:	e4 ff       	sbrs	r30, 4
    1642:	05 c0       	rjmp	.+10     	; 0x164e <vfprintf+0x3b0>
    1644:	d1 94       	neg	r13
    1646:	c1 94       	neg	r12
    1648:	d1 08       	sbc	r13, r1
    164a:	8d e2       	ldi	r24, 0x2D	; 45
    164c:	01 c0       	rjmp	.+2      	; 0x1650 <vfprintf+0x3b2>
    164e:	8b e2       	ldi	r24, 0x2B	; 43
    1650:	b7 01       	movw	r22, r14
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    1658:	80 e3       	ldi	r24, 0x30	; 48
    165a:	2a e0       	ldi	r18, 0x0A	; 10
    165c:	c2 16       	cp	r12, r18
    165e:	d1 04       	cpc	r13, r1
    1660:	2c f0       	brlt	.+10     	; 0x166c <vfprintf+0x3ce>
    1662:	8f 5f       	subi	r24, 0xFF	; 255
    1664:	fa e0       	ldi	r31, 0x0A	; 10
    1666:	cf 1a       	sub	r12, r31
    1668:	d1 08       	sbc	r13, r1
    166a:	f7 cf       	rjmp	.-18     	; 0x165a <vfprintf+0x3bc>
    166c:	b7 01       	movw	r22, r14
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    1674:	b7 01       	movw	r22, r14
    1676:	c6 01       	movw	r24, r12
    1678:	c0 96       	adiw	r24, 0x30	; 48
    167a:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    167e:	54 c1       	rjmp	.+680    	; 0x1928 <vfprintf+0x68a>
    1680:	83 36       	cpi	r24, 0x63	; 99
    1682:	31 f0       	breq	.+12     	; 0x1690 <vfprintf+0x3f2>
    1684:	83 37       	cpi	r24, 0x73	; 115
    1686:	79 f0       	breq	.+30     	; 0x16a6 <vfprintf+0x408>
    1688:	83 35       	cpi	r24, 0x53	; 83
    168a:	09 f0       	breq	.+2      	; 0x168e <vfprintf+0x3f0>
    168c:	56 c0       	rjmp	.+172    	; 0x173a <vfprintf+0x49c>
    168e:	20 c0       	rjmp	.+64     	; 0x16d0 <vfprintf+0x432>
    1690:	56 01       	movw	r10, r12
    1692:	32 e0       	ldi	r19, 0x02	; 2
    1694:	a3 0e       	add	r10, r19
    1696:	b1 1c       	adc	r11, r1
    1698:	f6 01       	movw	r30, r12
    169a:	80 81       	ld	r24, Z
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	01 e0       	ldi	r16, 0x01	; 1
    16a0:	10 e0       	ldi	r17, 0x00	; 0
    16a2:	63 01       	movw	r12, r6
    16a4:	12 c0       	rjmp	.+36     	; 0x16ca <vfprintf+0x42c>
    16a6:	56 01       	movw	r10, r12
    16a8:	f2 e0       	ldi	r31, 0x02	; 2
    16aa:	af 0e       	add	r10, r31
    16ac:	b1 1c       	adc	r11, r1
    16ae:	f6 01       	movw	r30, r12
    16b0:	c0 80       	ld	r12, Z
    16b2:	d1 80       	ldd	r13, Z+1	; 0x01
    16b4:	96 fe       	sbrs	r9, 6
    16b6:	03 c0       	rjmp	.+6      	; 0x16be <vfprintf+0x420>
    16b8:	61 2f       	mov	r22, r17
    16ba:	70 e0       	ldi	r23, 0x00	; 0
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <vfprintf+0x424>
    16be:	6f ef       	ldi	r22, 0xFF	; 255
    16c0:	7f ef       	ldi	r23, 0xFF	; 255
    16c2:	c6 01       	movw	r24, r12
    16c4:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <strnlen>
    16c8:	8c 01       	movw	r16, r24
    16ca:	f9 2d       	mov	r31, r9
    16cc:	ff 77       	andi	r31, 0x7F	; 127
    16ce:	14 c0       	rjmp	.+40     	; 0x16f8 <vfprintf+0x45a>
    16d0:	56 01       	movw	r10, r12
    16d2:	22 e0       	ldi	r18, 0x02	; 2
    16d4:	a2 0e       	add	r10, r18
    16d6:	b1 1c       	adc	r11, r1
    16d8:	f6 01       	movw	r30, r12
    16da:	c0 80       	ld	r12, Z
    16dc:	d1 80       	ldd	r13, Z+1	; 0x01
    16de:	96 fe       	sbrs	r9, 6
    16e0:	03 c0       	rjmp	.+6      	; 0x16e8 <vfprintf+0x44a>
    16e2:	61 2f       	mov	r22, r17
    16e4:	70 e0       	ldi	r23, 0x00	; 0
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <vfprintf+0x44e>
    16e8:	6f ef       	ldi	r22, 0xFF	; 255
    16ea:	7f ef       	ldi	r23, 0xFF	; 255
    16ec:	c6 01       	movw	r24, r12
    16ee:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <strnlen_P>
    16f2:	8c 01       	movw	r16, r24
    16f4:	f9 2d       	mov	r31, r9
    16f6:	f0 68       	ori	r31, 0x80	; 128
    16f8:	9f 2e       	mov	r9, r31
    16fa:	f3 fd       	sbrc	r31, 3
    16fc:	1a c0       	rjmp	.+52     	; 0x1732 <vfprintf+0x494>
    16fe:	85 2d       	mov	r24, r5
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	08 17       	cp	r16, r24
    1704:	19 07       	cpc	r17, r25
    1706:	a8 f4       	brcc	.+42     	; 0x1732 <vfprintf+0x494>
    1708:	b7 01       	movw	r22, r14
    170a:	80 e2       	ldi	r24, 0x20	; 32
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    1712:	5a 94       	dec	r5
    1714:	f4 cf       	rjmp	.-24     	; 0x16fe <vfprintf+0x460>
    1716:	f6 01       	movw	r30, r12
    1718:	97 fc       	sbrc	r9, 7
    171a:	85 91       	lpm	r24, Z+
    171c:	97 fe       	sbrs	r9, 7
    171e:	81 91       	ld	r24, Z+
    1720:	6f 01       	movw	r12, r30
    1722:	b7 01       	movw	r22, r14
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    172a:	51 10       	cpse	r5, r1
    172c:	5a 94       	dec	r5
    172e:	01 50       	subi	r16, 0x01	; 1
    1730:	11 09       	sbc	r17, r1
    1732:	01 15       	cp	r16, r1
    1734:	11 05       	cpc	r17, r1
    1736:	79 f7       	brne	.-34     	; 0x1716 <vfprintf+0x478>
    1738:	f7 c0       	rjmp	.+494    	; 0x1928 <vfprintf+0x68a>
    173a:	84 36       	cpi	r24, 0x64	; 100
    173c:	11 f0       	breq	.+4      	; 0x1742 <vfprintf+0x4a4>
    173e:	89 36       	cpi	r24, 0x69	; 105
    1740:	61 f5       	brne	.+88     	; 0x179a <vfprintf+0x4fc>
    1742:	56 01       	movw	r10, r12
    1744:	97 fe       	sbrs	r9, 7
    1746:	09 c0       	rjmp	.+18     	; 0x175a <vfprintf+0x4bc>
    1748:	24 e0       	ldi	r18, 0x04	; 4
    174a:	a2 0e       	add	r10, r18
    174c:	b1 1c       	adc	r11, r1
    174e:	f6 01       	movw	r30, r12
    1750:	60 81       	ld	r22, Z
    1752:	71 81       	ldd	r23, Z+1	; 0x01
    1754:	82 81       	ldd	r24, Z+2	; 0x02
    1756:	93 81       	ldd	r25, Z+3	; 0x03
    1758:	0a c0       	rjmp	.+20     	; 0x176e <vfprintf+0x4d0>
    175a:	f2 e0       	ldi	r31, 0x02	; 2
    175c:	af 0e       	add	r10, r31
    175e:	b1 1c       	adc	r11, r1
    1760:	f6 01       	movw	r30, r12
    1762:	60 81       	ld	r22, Z
    1764:	71 81       	ldd	r23, Z+1	; 0x01
    1766:	07 2e       	mov	r0, r23
    1768:	00 0c       	add	r0, r0
    176a:	88 0b       	sbc	r24, r24
    176c:	99 0b       	sbc	r25, r25
    176e:	f9 2d       	mov	r31, r9
    1770:	ff 76       	andi	r31, 0x6F	; 111
    1772:	9f 2e       	mov	r9, r31
    1774:	97 ff       	sbrs	r25, 7
    1776:	09 c0       	rjmp	.+18     	; 0x178a <vfprintf+0x4ec>
    1778:	90 95       	com	r25
    177a:	80 95       	com	r24
    177c:	70 95       	com	r23
    177e:	61 95       	neg	r22
    1780:	7f 4f       	sbci	r23, 0xFF	; 255
    1782:	8f 4f       	sbci	r24, 0xFF	; 255
    1784:	9f 4f       	sbci	r25, 0xFF	; 255
    1786:	f0 68       	ori	r31, 0x80	; 128
    1788:	9f 2e       	mov	r9, r31
    178a:	2a e0       	ldi	r18, 0x0A	; 10
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	a3 01       	movw	r20, r6
    1790:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__ultoa_invert>
    1794:	c8 2e       	mov	r12, r24
    1796:	c6 18       	sub	r12, r6
    1798:	3f c0       	rjmp	.+126    	; 0x1818 <vfprintf+0x57a>
    179a:	09 2d       	mov	r16, r9
    179c:	85 37       	cpi	r24, 0x75	; 117
    179e:	21 f4       	brne	.+8      	; 0x17a8 <vfprintf+0x50a>
    17a0:	0f 7e       	andi	r16, 0xEF	; 239
    17a2:	2a e0       	ldi	r18, 0x0A	; 10
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	1d c0       	rjmp	.+58     	; 0x17e2 <vfprintf+0x544>
    17a8:	09 7f       	andi	r16, 0xF9	; 249
    17aa:	8f 36       	cpi	r24, 0x6F	; 111
    17ac:	91 f0       	breq	.+36     	; 0x17d2 <vfprintf+0x534>
    17ae:	18 f4       	brcc	.+6      	; 0x17b6 <vfprintf+0x518>
    17b0:	88 35       	cpi	r24, 0x58	; 88
    17b2:	59 f0       	breq	.+22     	; 0x17ca <vfprintf+0x52c>
    17b4:	c3 c0       	rjmp	.+390    	; 0x193c <vfprintf+0x69e>
    17b6:	80 37       	cpi	r24, 0x70	; 112
    17b8:	19 f0       	breq	.+6      	; 0x17c0 <vfprintf+0x522>
    17ba:	88 37       	cpi	r24, 0x78	; 120
    17bc:	11 f0       	breq	.+4      	; 0x17c2 <vfprintf+0x524>
    17be:	be c0       	rjmp	.+380    	; 0x193c <vfprintf+0x69e>
    17c0:	00 61       	ori	r16, 0x10	; 16
    17c2:	04 ff       	sbrs	r16, 4
    17c4:	09 c0       	rjmp	.+18     	; 0x17d8 <vfprintf+0x53a>
    17c6:	04 60       	ori	r16, 0x04	; 4
    17c8:	07 c0       	rjmp	.+14     	; 0x17d8 <vfprintf+0x53a>
    17ca:	94 fe       	sbrs	r9, 4
    17cc:	08 c0       	rjmp	.+16     	; 0x17de <vfprintf+0x540>
    17ce:	06 60       	ori	r16, 0x06	; 6
    17d0:	06 c0       	rjmp	.+12     	; 0x17de <vfprintf+0x540>
    17d2:	28 e0       	ldi	r18, 0x08	; 8
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	05 c0       	rjmp	.+10     	; 0x17e2 <vfprintf+0x544>
    17d8:	20 e1       	ldi	r18, 0x10	; 16
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <vfprintf+0x544>
    17de:	20 e1       	ldi	r18, 0x10	; 16
    17e0:	32 e0       	ldi	r19, 0x02	; 2
    17e2:	56 01       	movw	r10, r12
    17e4:	07 ff       	sbrs	r16, 7
    17e6:	09 c0       	rjmp	.+18     	; 0x17fa <vfprintf+0x55c>
    17e8:	84 e0       	ldi	r24, 0x04	; 4
    17ea:	a8 0e       	add	r10, r24
    17ec:	b1 1c       	adc	r11, r1
    17ee:	f6 01       	movw	r30, r12
    17f0:	60 81       	ld	r22, Z
    17f2:	71 81       	ldd	r23, Z+1	; 0x01
    17f4:	82 81       	ldd	r24, Z+2	; 0x02
    17f6:	93 81       	ldd	r25, Z+3	; 0x03
    17f8:	08 c0       	rjmp	.+16     	; 0x180a <vfprintf+0x56c>
    17fa:	f2 e0       	ldi	r31, 0x02	; 2
    17fc:	af 0e       	add	r10, r31
    17fe:	b1 1c       	adc	r11, r1
    1800:	f6 01       	movw	r30, r12
    1802:	60 81       	ld	r22, Z
    1804:	71 81       	ldd	r23, Z+1	; 0x01
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a3 01       	movw	r20, r6
    180c:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__ultoa_invert>
    1810:	c8 2e       	mov	r12, r24
    1812:	c6 18       	sub	r12, r6
    1814:	0f 77       	andi	r16, 0x7F	; 127
    1816:	90 2e       	mov	r9, r16
    1818:	96 fe       	sbrs	r9, 6
    181a:	0b c0       	rjmp	.+22     	; 0x1832 <vfprintf+0x594>
    181c:	09 2d       	mov	r16, r9
    181e:	0e 7f       	andi	r16, 0xFE	; 254
    1820:	c1 16       	cp	r12, r17
    1822:	50 f4       	brcc	.+20     	; 0x1838 <vfprintf+0x59a>
    1824:	94 fe       	sbrs	r9, 4
    1826:	0a c0       	rjmp	.+20     	; 0x183c <vfprintf+0x59e>
    1828:	92 fc       	sbrc	r9, 2
    182a:	08 c0       	rjmp	.+16     	; 0x183c <vfprintf+0x59e>
    182c:	09 2d       	mov	r16, r9
    182e:	0e 7e       	andi	r16, 0xEE	; 238
    1830:	05 c0       	rjmp	.+10     	; 0x183c <vfprintf+0x59e>
    1832:	dc 2c       	mov	r13, r12
    1834:	09 2d       	mov	r16, r9
    1836:	03 c0       	rjmp	.+6      	; 0x183e <vfprintf+0x5a0>
    1838:	dc 2c       	mov	r13, r12
    183a:	01 c0       	rjmp	.+2      	; 0x183e <vfprintf+0x5a0>
    183c:	d1 2e       	mov	r13, r17
    183e:	04 ff       	sbrs	r16, 4
    1840:	0d c0       	rjmp	.+26     	; 0x185c <vfprintf+0x5be>
    1842:	fe 01       	movw	r30, r28
    1844:	ec 0d       	add	r30, r12
    1846:	f1 1d       	adc	r31, r1
    1848:	80 81       	ld	r24, Z
    184a:	80 33       	cpi	r24, 0x30	; 48
    184c:	11 f4       	brne	.+4      	; 0x1852 <vfprintf+0x5b4>
    184e:	09 7e       	andi	r16, 0xE9	; 233
    1850:	09 c0       	rjmp	.+18     	; 0x1864 <vfprintf+0x5c6>
    1852:	02 ff       	sbrs	r16, 2
    1854:	06 c0       	rjmp	.+12     	; 0x1862 <vfprintf+0x5c4>
    1856:	d3 94       	inc	r13
    1858:	d3 94       	inc	r13
    185a:	04 c0       	rjmp	.+8      	; 0x1864 <vfprintf+0x5c6>
    185c:	80 2f       	mov	r24, r16
    185e:	86 78       	andi	r24, 0x86	; 134
    1860:	09 f0       	breq	.+2      	; 0x1864 <vfprintf+0x5c6>
    1862:	d3 94       	inc	r13
    1864:	03 fd       	sbrc	r16, 3
    1866:	11 c0       	rjmp	.+34     	; 0x188a <vfprintf+0x5ec>
    1868:	00 ff       	sbrs	r16, 0
    186a:	06 c0       	rjmp	.+12     	; 0x1878 <vfprintf+0x5da>
    186c:	1c 2d       	mov	r17, r12
    186e:	d5 14       	cp	r13, r5
    1870:	80 f4       	brcc	.+32     	; 0x1892 <vfprintf+0x5f4>
    1872:	15 0d       	add	r17, r5
    1874:	1d 19       	sub	r17, r13
    1876:	0d c0       	rjmp	.+26     	; 0x1892 <vfprintf+0x5f4>
    1878:	d5 14       	cp	r13, r5
    187a:	58 f4       	brcc	.+22     	; 0x1892 <vfprintf+0x5f4>
    187c:	b7 01       	movw	r22, r14
    187e:	80 e2       	ldi	r24, 0x20	; 32
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    1886:	d3 94       	inc	r13
    1888:	f7 cf       	rjmp	.-18     	; 0x1878 <vfprintf+0x5da>
    188a:	d5 14       	cp	r13, r5
    188c:	10 f4       	brcc	.+4      	; 0x1892 <vfprintf+0x5f4>
    188e:	5d 18       	sub	r5, r13
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <vfprintf+0x5f6>
    1892:	51 2c       	mov	r5, r1
    1894:	04 ff       	sbrs	r16, 4
    1896:	10 c0       	rjmp	.+32     	; 0x18b8 <vfprintf+0x61a>
    1898:	b7 01       	movw	r22, r14
    189a:	80 e3       	ldi	r24, 0x30	; 48
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    18a2:	02 ff       	sbrs	r16, 2
    18a4:	17 c0       	rjmp	.+46     	; 0x18d4 <vfprintf+0x636>
    18a6:	01 fd       	sbrc	r16, 1
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <vfprintf+0x612>
    18aa:	88 e7       	ldi	r24, 0x78	; 120
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <vfprintf+0x616>
    18b0:	88 e5       	ldi	r24, 0x58	; 88
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	b7 01       	movw	r22, r14
    18b6:	0c c0       	rjmp	.+24     	; 0x18d0 <vfprintf+0x632>
    18b8:	80 2f       	mov	r24, r16
    18ba:	86 78       	andi	r24, 0x86	; 134
    18bc:	59 f0       	breq	.+22     	; 0x18d4 <vfprintf+0x636>
    18be:	01 ff       	sbrs	r16, 1
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <vfprintf+0x628>
    18c2:	8b e2       	ldi	r24, 0x2B	; 43
    18c4:	01 c0       	rjmp	.+2      	; 0x18c8 <vfprintf+0x62a>
    18c6:	80 e2       	ldi	r24, 0x20	; 32
    18c8:	07 fd       	sbrc	r16, 7
    18ca:	8d e2       	ldi	r24, 0x2D	; 45
    18cc:	b7 01       	movw	r22, r14
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    18d4:	c1 16       	cp	r12, r17
    18d6:	38 f4       	brcc	.+14     	; 0x18e6 <vfprintf+0x648>
    18d8:	b7 01       	movw	r22, r14
    18da:	80 e3       	ldi	r24, 0x30	; 48
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    18e2:	11 50       	subi	r17, 0x01	; 1
    18e4:	f7 cf       	rjmp	.-18     	; 0x18d4 <vfprintf+0x636>
    18e6:	ca 94       	dec	r12
    18e8:	f3 01       	movw	r30, r6
    18ea:	ec 0d       	add	r30, r12
    18ec:	f1 1d       	adc	r31, r1
    18ee:	80 81       	ld	r24, Z
    18f0:	b7 01       	movw	r22, r14
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    18f8:	c1 10       	cpse	r12, r1
    18fa:	f5 cf       	rjmp	.-22     	; 0x18e6 <vfprintf+0x648>
    18fc:	15 c0       	rjmp	.+42     	; 0x1928 <vfprintf+0x68a>
    18fe:	f4 e0       	ldi	r31, 0x04	; 4
    1900:	f5 15       	cp	r31, r5
    1902:	60 f5       	brcc	.+88     	; 0x195c <vfprintf+0x6be>
    1904:	84 e0       	ldi	r24, 0x04	; 4
    1906:	58 1a       	sub	r5, r24
    1908:	93 fe       	sbrs	r9, 3
    190a:	1f c0       	rjmp	.+62     	; 0x194a <vfprintf+0x6ac>
    190c:	01 11       	cpse	r16, r1
    190e:	27 c0       	rjmp	.+78     	; 0x195e <vfprintf+0x6c0>
    1910:	2c 85       	ldd	r18, Y+12	; 0x0c
    1912:	23 ff       	sbrs	r18, 3
    1914:	2a c0       	rjmp	.+84     	; 0x196a <vfprintf+0x6cc>
    1916:	02 ed       	ldi	r16, 0xD2	; 210
    1918:	10 e0       	ldi	r17, 0x00	; 0
    191a:	39 2d       	mov	r19, r9
    191c:	30 71       	andi	r19, 0x10	; 16
    191e:	93 2e       	mov	r9, r19
    1920:	f8 01       	movw	r30, r16
    1922:	84 91       	lpm	r24, Z
    1924:	81 11       	cpse	r24, r1
    1926:	24 c0       	rjmp	.+72     	; 0x1970 <vfprintf+0x6d2>
    1928:	55 20       	and	r5, r5
    192a:	09 f4       	brne	.+2      	; 0x192e <vfprintf+0x690>
    192c:	e4 cc       	rjmp	.-1592   	; 0x12f6 <vfprintf+0x58>
    192e:	b7 01       	movw	r22, r14
    1930:	80 e2       	ldi	r24, 0x20	; 32
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    1938:	5a 94       	dec	r5
    193a:	f6 cf       	rjmp	.-20     	; 0x1928 <vfprintf+0x68a>
    193c:	f7 01       	movw	r30, r14
    193e:	86 81       	ldd	r24, Z+6	; 0x06
    1940:	97 81       	ldd	r25, Z+7	; 0x07
    1942:	26 c0       	rjmp	.+76     	; 0x1990 <vfprintf+0x6f2>
    1944:	8f ef       	ldi	r24, 0xFF	; 255
    1946:	9f ef       	ldi	r25, 0xFF	; 255
    1948:	23 c0       	rjmp	.+70     	; 0x1990 <vfprintf+0x6f2>
    194a:	b7 01       	movw	r22, r14
    194c:	80 e2       	ldi	r24, 0x20	; 32
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    1954:	5a 94       	dec	r5
    1956:	51 10       	cpse	r5, r1
    1958:	f8 cf       	rjmp	.-16     	; 0x194a <vfprintf+0x6ac>
    195a:	d8 cf       	rjmp	.-80     	; 0x190c <vfprintf+0x66e>
    195c:	51 2c       	mov	r5, r1
    195e:	b7 01       	movw	r22, r14
    1960:	80 2f       	mov	r24, r16
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    1968:	d3 cf       	rjmp	.-90     	; 0x1910 <vfprintf+0x672>
    196a:	06 ed       	ldi	r16, 0xD6	; 214
    196c:	10 e0       	ldi	r17, 0x00	; 0
    196e:	d5 cf       	rjmp	.-86     	; 0x191a <vfprintf+0x67c>
    1970:	91 10       	cpse	r9, r1
    1972:	80 52       	subi	r24, 0x20	; 32
    1974:	b7 01       	movw	r22, r14
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <fputc>
    197c:	0f 5f       	subi	r16, 0xFF	; 255
    197e:	1f 4f       	sbci	r17, 0xFF	; 255
    1980:	cf cf       	rjmp	.-98     	; 0x1920 <vfprintf+0x682>
    1982:	23 e0       	ldi	r18, 0x03	; 3
    1984:	25 15       	cp	r18, r5
    1986:	10 f4       	brcc	.+4      	; 0x198c <vfprintf+0x6ee>
    1988:	83 e0       	ldi	r24, 0x03	; 3
    198a:	bd cf       	rjmp	.-134    	; 0x1906 <vfprintf+0x668>
    198c:	51 2c       	mov	r5, r1
    198e:	c0 cf       	rjmp	.-128    	; 0x1910 <vfprintf+0x672>
    1990:	60 96       	adiw	r28, 0x10	; 16
    1992:	e2 e1       	ldi	r30, 0x12	; 18
    1994:	0c 94 19 0d 	jmp	0x1a32	; 0x1a32 <__epilogue_restores__>

00001998 <__udivmodsi4>:
    1998:	a1 e2       	ldi	r26, 0x21	; 33
    199a:	1a 2e       	mov	r1, r26
    199c:	aa 1b       	sub	r26, r26
    199e:	bb 1b       	sub	r27, r27
    19a0:	fd 01       	movw	r30, r26
    19a2:	0d c0       	rjmp	.+26     	; 0x19be <__udivmodsi4_ep>

000019a4 <__udivmodsi4_loop>:
    19a4:	aa 1f       	adc	r26, r26
    19a6:	bb 1f       	adc	r27, r27
    19a8:	ee 1f       	adc	r30, r30
    19aa:	ff 1f       	adc	r31, r31
    19ac:	a2 17       	cp	r26, r18
    19ae:	b3 07       	cpc	r27, r19
    19b0:	e4 07       	cpc	r30, r20
    19b2:	f5 07       	cpc	r31, r21
    19b4:	20 f0       	brcs	.+8      	; 0x19be <__udivmodsi4_ep>
    19b6:	a2 1b       	sub	r26, r18
    19b8:	b3 0b       	sbc	r27, r19
    19ba:	e4 0b       	sbc	r30, r20
    19bc:	f5 0b       	sbc	r31, r21

000019be <__udivmodsi4_ep>:
    19be:	66 1f       	adc	r22, r22
    19c0:	77 1f       	adc	r23, r23
    19c2:	88 1f       	adc	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	1a 94       	dec	r1
    19c8:	69 f7       	brne	.-38     	; 0x19a4 <__udivmodsi4_loop>
    19ca:	60 95       	com	r22
    19cc:	70 95       	com	r23
    19ce:	80 95       	com	r24
    19d0:	90 95       	com	r25
    19d2:	9b 01       	movw	r18, r22
    19d4:	ac 01       	movw	r20, r24
    19d6:	bd 01       	movw	r22, r26
    19d8:	cf 01       	movw	r24, r30
    19da:	08 95       	ret

000019dc <__umulhisi3>:
    19dc:	a2 9f       	mul	r26, r18
    19de:	b0 01       	movw	r22, r0
    19e0:	b3 9f       	mul	r27, r19
    19e2:	c0 01       	movw	r24, r0
    19e4:	a3 9f       	mul	r26, r19
    19e6:	70 0d       	add	r23, r0
    19e8:	81 1d       	adc	r24, r1
    19ea:	11 24       	eor	r1, r1
    19ec:	91 1d       	adc	r25, r1
    19ee:	b2 9f       	mul	r27, r18
    19f0:	70 0d       	add	r23, r0
    19f2:	81 1d       	adc	r24, r1
    19f4:	11 24       	eor	r1, r1
    19f6:	91 1d       	adc	r25, r1
    19f8:	08 95       	ret

000019fa <__prologue_saves__>:
    19fa:	2f 92       	push	r2
    19fc:	3f 92       	push	r3
    19fe:	4f 92       	push	r4
    1a00:	5f 92       	push	r5
    1a02:	6f 92       	push	r6
    1a04:	7f 92       	push	r7
    1a06:	8f 92       	push	r8
    1a08:	9f 92       	push	r9
    1a0a:	af 92       	push	r10
    1a0c:	bf 92       	push	r11
    1a0e:	cf 92       	push	r12
    1a10:	df 92       	push	r13
    1a12:	ef 92       	push	r14
    1a14:	ff 92       	push	r15
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	cd b7       	in	r28, 0x3d	; 61
    1a20:	de b7       	in	r29, 0x3e	; 62
    1a22:	ca 1b       	sub	r28, r26
    1a24:	db 0b       	sbc	r29, r27
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61
    1a30:	09 94       	ijmp

00001a32 <__epilogue_restores__>:
    1a32:	2a 88       	ldd	r2, Y+18	; 0x12
    1a34:	39 88       	ldd	r3, Y+17	; 0x11
    1a36:	48 88       	ldd	r4, Y+16	; 0x10
    1a38:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a3a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a3c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a3e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a40:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a42:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a44:	b9 84       	ldd	r11, Y+9	; 0x09
    1a46:	c8 84       	ldd	r12, Y+8	; 0x08
    1a48:	df 80       	ldd	r13, Y+7	; 0x07
    1a4a:	ee 80       	ldd	r14, Y+6	; 0x06
    1a4c:	fd 80       	ldd	r15, Y+5	; 0x05
    1a4e:	0c 81       	ldd	r16, Y+4	; 0x04
    1a50:	1b 81       	ldd	r17, Y+3	; 0x03
    1a52:	aa 81       	ldd	r26, Y+2	; 0x02
    1a54:	b9 81       	ldd	r27, Y+1	; 0x01
    1a56:	ce 0f       	add	r28, r30
    1a58:	d1 1d       	adc	r29, r1
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	f8 94       	cli
    1a5e:	de bf       	out	0x3e, r29	; 62
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	cd bf       	out	0x3d, r28	; 61
    1a64:	ed 01       	movw	r28, r26
    1a66:	08 95       	ret

00001a68 <__ftoa_engine>:
    1a68:	28 30       	cpi	r18, 0x08	; 8
    1a6a:	08 f0       	brcs	.+2      	; 0x1a6e <__ftoa_engine+0x6>
    1a6c:	27 e0       	ldi	r18, 0x07	; 7
    1a6e:	33 27       	eor	r19, r19
    1a70:	da 01       	movw	r26, r20
    1a72:	99 0f       	add	r25, r25
    1a74:	31 1d       	adc	r19, r1
    1a76:	87 fd       	sbrc	r24, 7
    1a78:	91 60       	ori	r25, 0x01	; 1
    1a7a:	00 96       	adiw	r24, 0x00	; 0
    1a7c:	61 05       	cpc	r22, r1
    1a7e:	71 05       	cpc	r23, r1
    1a80:	39 f4       	brne	.+14     	; 0x1a90 <__ftoa_engine+0x28>
    1a82:	32 60       	ori	r19, 0x02	; 2
    1a84:	2e 5f       	subi	r18, 0xFE	; 254
    1a86:	3d 93       	st	X+, r19
    1a88:	30 e3       	ldi	r19, 0x30	; 48
    1a8a:	2a 95       	dec	r18
    1a8c:	e1 f7       	brne	.-8      	; 0x1a86 <__ftoa_engine+0x1e>
    1a8e:	08 95       	ret
    1a90:	9f 3f       	cpi	r25, 0xFF	; 255
    1a92:	30 f0       	brcs	.+12     	; 0x1aa0 <__ftoa_engine+0x38>
    1a94:	80 38       	cpi	r24, 0x80	; 128
    1a96:	71 05       	cpc	r23, r1
    1a98:	61 05       	cpc	r22, r1
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <__ftoa_engine+0x36>
    1a9c:	3c 5f       	subi	r19, 0xFC	; 252
    1a9e:	3c 5f       	subi	r19, 0xFC	; 252
    1aa0:	3d 93       	st	X+, r19
    1aa2:	91 30       	cpi	r25, 0x01	; 1
    1aa4:	08 f0       	brcs	.+2      	; 0x1aa8 <__ftoa_engine+0x40>
    1aa6:	80 68       	ori	r24, 0x80	; 128
    1aa8:	91 1d       	adc	r25, r1
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	1f 93       	push	r17
    1ab0:	0f 93       	push	r16
    1ab2:	ff 92       	push	r15
    1ab4:	ef 92       	push	r14
    1ab6:	19 2f       	mov	r17, r25
    1ab8:	98 7f       	andi	r25, 0xF8	; 248
    1aba:	96 95       	lsr	r25
    1abc:	e9 2f       	mov	r30, r25
    1abe:	96 95       	lsr	r25
    1ac0:	96 95       	lsr	r25
    1ac2:	e9 0f       	add	r30, r25
    1ac4:	ff 27       	eor	r31, r31
    1ac6:	ec 5c       	subi	r30, 0xCC	; 204
    1ac8:	fe 4f       	sbci	r31, 0xFE	; 254
    1aca:	99 27       	eor	r25, r25
    1acc:	33 27       	eor	r19, r19
    1ace:	ee 24       	eor	r14, r14
    1ad0:	ff 24       	eor	r15, r15
    1ad2:	a7 01       	movw	r20, r14
    1ad4:	e7 01       	movw	r28, r14
    1ad6:	05 90       	lpm	r0, Z+
    1ad8:	08 94       	sec
    1ada:	07 94       	ror	r0
    1adc:	28 f4       	brcc	.+10     	; 0x1ae8 <__ftoa_engine+0x80>
    1ade:	36 0f       	add	r19, r22
    1ae0:	e7 1e       	adc	r14, r23
    1ae2:	f8 1e       	adc	r15, r24
    1ae4:	49 1f       	adc	r20, r25
    1ae6:	51 1d       	adc	r21, r1
    1ae8:	66 0f       	add	r22, r22
    1aea:	77 1f       	adc	r23, r23
    1aec:	88 1f       	adc	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	06 94       	lsr	r0
    1af2:	a1 f7       	brne	.-24     	; 0x1adc <__ftoa_engine+0x74>
    1af4:	05 90       	lpm	r0, Z+
    1af6:	07 94       	ror	r0
    1af8:	28 f4       	brcc	.+10     	; 0x1b04 <__ftoa_engine+0x9c>
    1afa:	e7 0e       	add	r14, r23
    1afc:	f8 1e       	adc	r15, r24
    1afe:	49 1f       	adc	r20, r25
    1b00:	56 1f       	adc	r21, r22
    1b02:	c1 1d       	adc	r28, r1
    1b04:	77 0f       	add	r23, r23
    1b06:	88 1f       	adc	r24, r24
    1b08:	99 1f       	adc	r25, r25
    1b0a:	66 1f       	adc	r22, r22
    1b0c:	06 94       	lsr	r0
    1b0e:	a1 f7       	brne	.-24     	; 0x1af8 <__ftoa_engine+0x90>
    1b10:	05 90       	lpm	r0, Z+
    1b12:	07 94       	ror	r0
    1b14:	28 f4       	brcc	.+10     	; 0x1b20 <__ftoa_engine+0xb8>
    1b16:	f8 0e       	add	r15, r24
    1b18:	49 1f       	adc	r20, r25
    1b1a:	56 1f       	adc	r21, r22
    1b1c:	c7 1f       	adc	r28, r23
    1b1e:	d1 1d       	adc	r29, r1
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	66 1f       	adc	r22, r22
    1b26:	77 1f       	adc	r23, r23
    1b28:	06 94       	lsr	r0
    1b2a:	a1 f7       	brne	.-24     	; 0x1b14 <__ftoa_engine+0xac>
    1b2c:	05 90       	lpm	r0, Z+
    1b2e:	07 94       	ror	r0
    1b30:	20 f4       	brcc	.+8      	; 0x1b3a <__ftoa_engine+0xd2>
    1b32:	49 0f       	add	r20, r25
    1b34:	56 1f       	adc	r21, r22
    1b36:	c7 1f       	adc	r28, r23
    1b38:	d8 1f       	adc	r29, r24
    1b3a:	99 0f       	add	r25, r25
    1b3c:	66 1f       	adc	r22, r22
    1b3e:	77 1f       	adc	r23, r23
    1b40:	88 1f       	adc	r24, r24
    1b42:	06 94       	lsr	r0
    1b44:	a9 f7       	brne	.-22     	; 0x1b30 <__ftoa_engine+0xc8>
    1b46:	84 91       	lpm	r24, Z
    1b48:	10 95       	com	r17
    1b4a:	17 70       	andi	r17, 0x07	; 7
    1b4c:	41 f0       	breq	.+16     	; 0x1b5e <__ftoa_engine+0xf6>
    1b4e:	d6 95       	lsr	r29
    1b50:	c7 95       	ror	r28
    1b52:	57 95       	ror	r21
    1b54:	47 95       	ror	r20
    1b56:	f7 94       	ror	r15
    1b58:	e7 94       	ror	r14
    1b5a:	1a 95       	dec	r17
    1b5c:	c1 f7       	brne	.-16     	; 0x1b4e <__ftoa_engine+0xe6>
    1b5e:	ea ed       	ldi	r30, 0xDA	; 218
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	68 94       	set
    1b64:	15 90       	lpm	r1, Z+
    1b66:	15 91       	lpm	r17, Z+
    1b68:	35 91       	lpm	r19, Z+
    1b6a:	65 91       	lpm	r22, Z+
    1b6c:	95 91       	lpm	r25, Z+
    1b6e:	05 90       	lpm	r0, Z+
    1b70:	7f e2       	ldi	r23, 0x2F	; 47
    1b72:	73 95       	inc	r23
    1b74:	e1 18       	sub	r14, r1
    1b76:	f1 0a       	sbc	r15, r17
    1b78:	43 0b       	sbc	r20, r19
    1b7a:	56 0b       	sbc	r21, r22
    1b7c:	c9 0b       	sbc	r28, r25
    1b7e:	d0 09       	sbc	r29, r0
    1b80:	c0 f7       	brcc	.-16     	; 0x1b72 <__ftoa_engine+0x10a>
    1b82:	e1 0c       	add	r14, r1
    1b84:	f1 1e       	adc	r15, r17
    1b86:	43 1f       	adc	r20, r19
    1b88:	56 1f       	adc	r21, r22
    1b8a:	c9 1f       	adc	r28, r25
    1b8c:	d0 1d       	adc	r29, r0
    1b8e:	7e f4       	brtc	.+30     	; 0x1bae <__ftoa_engine+0x146>
    1b90:	70 33       	cpi	r23, 0x30	; 48
    1b92:	11 f4       	brne	.+4      	; 0x1b98 <__ftoa_engine+0x130>
    1b94:	8a 95       	dec	r24
    1b96:	e6 cf       	rjmp	.-52     	; 0x1b64 <__ftoa_engine+0xfc>
    1b98:	e8 94       	clt
    1b9a:	01 50       	subi	r16, 0x01	; 1
    1b9c:	30 f0       	brcs	.+12     	; 0x1baa <__ftoa_engine+0x142>
    1b9e:	08 0f       	add	r16, r24
    1ba0:	0a f4       	brpl	.+2      	; 0x1ba4 <__ftoa_engine+0x13c>
    1ba2:	00 27       	eor	r16, r16
    1ba4:	02 17       	cp	r16, r18
    1ba6:	08 f4       	brcc	.+2      	; 0x1baa <__ftoa_engine+0x142>
    1ba8:	20 2f       	mov	r18, r16
    1baa:	23 95       	inc	r18
    1bac:	02 2f       	mov	r16, r18
    1bae:	7a 33       	cpi	r23, 0x3A	; 58
    1bb0:	28 f0       	brcs	.+10     	; 0x1bbc <__ftoa_engine+0x154>
    1bb2:	79 e3       	ldi	r23, 0x39	; 57
    1bb4:	7d 93       	st	X+, r23
    1bb6:	2a 95       	dec	r18
    1bb8:	e9 f7       	brne	.-6      	; 0x1bb4 <__ftoa_engine+0x14c>
    1bba:	10 c0       	rjmp	.+32     	; 0x1bdc <__ftoa_engine+0x174>
    1bbc:	7d 93       	st	X+, r23
    1bbe:	2a 95       	dec	r18
    1bc0:	89 f6       	brne	.-94     	; 0x1b64 <__ftoa_engine+0xfc>
    1bc2:	06 94       	lsr	r0
    1bc4:	97 95       	ror	r25
    1bc6:	67 95       	ror	r22
    1bc8:	37 95       	ror	r19
    1bca:	17 95       	ror	r17
    1bcc:	17 94       	ror	r1
    1bce:	e1 18       	sub	r14, r1
    1bd0:	f1 0a       	sbc	r15, r17
    1bd2:	43 0b       	sbc	r20, r19
    1bd4:	56 0b       	sbc	r21, r22
    1bd6:	c9 0b       	sbc	r28, r25
    1bd8:	d0 09       	sbc	r29, r0
    1bda:	98 f0       	brcs	.+38     	; 0x1c02 <__ftoa_engine+0x19a>
    1bdc:	23 95       	inc	r18
    1bde:	7e 91       	ld	r23, -X
    1be0:	73 95       	inc	r23
    1be2:	7a 33       	cpi	r23, 0x3A	; 58
    1be4:	08 f0       	brcs	.+2      	; 0x1be8 <__ftoa_engine+0x180>
    1be6:	70 e3       	ldi	r23, 0x30	; 48
    1be8:	7c 93       	st	X, r23
    1bea:	20 13       	cpse	r18, r16
    1bec:	b8 f7       	brcc	.-18     	; 0x1bdc <__ftoa_engine+0x174>
    1bee:	7e 91       	ld	r23, -X
    1bf0:	70 61       	ori	r23, 0x10	; 16
    1bf2:	7d 93       	st	X+, r23
    1bf4:	30 f0       	brcs	.+12     	; 0x1c02 <__ftoa_engine+0x19a>
    1bf6:	83 95       	inc	r24
    1bf8:	71 e3       	ldi	r23, 0x31	; 49
    1bfa:	7d 93       	st	X+, r23
    1bfc:	70 e3       	ldi	r23, 0x30	; 48
    1bfe:	2a 95       	dec	r18
    1c00:	e1 f7       	brne	.-8      	; 0x1bfa <__ftoa_engine+0x192>
    1c02:	11 24       	eor	r1, r1
    1c04:	ef 90       	pop	r14
    1c06:	ff 90       	pop	r15
    1c08:	0f 91       	pop	r16
    1c0a:	1f 91       	pop	r17
    1c0c:	cf 91       	pop	r28
    1c0e:	df 91       	pop	r29
    1c10:	99 27       	eor	r25, r25
    1c12:	87 fd       	sbrc	r24, 7
    1c14:	90 95       	com	r25
    1c16:	08 95       	ret

00001c18 <strnlen_P>:
    1c18:	fc 01       	movw	r30, r24
    1c1a:	05 90       	lpm	r0, Z+
    1c1c:	61 50       	subi	r22, 0x01	; 1
    1c1e:	70 40       	sbci	r23, 0x00	; 0
    1c20:	01 10       	cpse	r0, r1
    1c22:	d8 f7       	brcc	.-10     	; 0x1c1a <strnlen_P+0x2>
    1c24:	80 95       	com	r24
    1c26:	90 95       	com	r25
    1c28:	8e 0f       	add	r24, r30
    1c2a:	9f 1f       	adc	r25, r31
    1c2c:	08 95       	ret

00001c2e <strnlen>:
    1c2e:	fc 01       	movw	r30, r24
    1c30:	61 50       	subi	r22, 0x01	; 1
    1c32:	70 40       	sbci	r23, 0x00	; 0
    1c34:	01 90       	ld	r0, Z+
    1c36:	01 10       	cpse	r0, r1
    1c38:	d8 f7       	brcc	.-10     	; 0x1c30 <strnlen+0x2>
    1c3a:	80 95       	com	r24
    1c3c:	90 95       	com	r25
    1c3e:	8e 0f       	add	r24, r30
    1c40:	9f 1f       	adc	r25, r31
    1c42:	08 95       	ret

00001c44 <fputc>:
    1c44:	0f 93       	push	r16
    1c46:	1f 93       	push	r17
    1c48:	cf 93       	push	r28
    1c4a:	df 93       	push	r29
    1c4c:	fb 01       	movw	r30, r22
    1c4e:	23 81       	ldd	r18, Z+3	; 0x03
    1c50:	21 fd       	sbrc	r18, 1
    1c52:	03 c0       	rjmp	.+6      	; 0x1c5a <fputc+0x16>
    1c54:	8f ef       	ldi	r24, 0xFF	; 255
    1c56:	9f ef       	ldi	r25, 0xFF	; 255
    1c58:	2c c0       	rjmp	.+88     	; 0x1cb2 <fputc+0x6e>
    1c5a:	22 ff       	sbrs	r18, 2
    1c5c:	16 c0       	rjmp	.+44     	; 0x1c8a <fputc+0x46>
    1c5e:	46 81       	ldd	r20, Z+6	; 0x06
    1c60:	57 81       	ldd	r21, Z+7	; 0x07
    1c62:	24 81       	ldd	r18, Z+4	; 0x04
    1c64:	35 81       	ldd	r19, Z+5	; 0x05
    1c66:	42 17       	cp	r20, r18
    1c68:	53 07       	cpc	r21, r19
    1c6a:	44 f4       	brge	.+16     	; 0x1c7c <fputc+0x38>
    1c6c:	a0 81       	ld	r26, Z
    1c6e:	b1 81       	ldd	r27, Z+1	; 0x01
    1c70:	9d 01       	movw	r18, r26
    1c72:	2f 5f       	subi	r18, 0xFF	; 255
    1c74:	3f 4f       	sbci	r19, 0xFF	; 255
    1c76:	31 83       	std	Z+1, r19	; 0x01
    1c78:	20 83       	st	Z, r18
    1c7a:	8c 93       	st	X, r24
    1c7c:	26 81       	ldd	r18, Z+6	; 0x06
    1c7e:	37 81       	ldd	r19, Z+7	; 0x07
    1c80:	2f 5f       	subi	r18, 0xFF	; 255
    1c82:	3f 4f       	sbci	r19, 0xFF	; 255
    1c84:	37 83       	std	Z+7, r19	; 0x07
    1c86:	26 83       	std	Z+6, r18	; 0x06
    1c88:	14 c0       	rjmp	.+40     	; 0x1cb2 <fputc+0x6e>
    1c8a:	8b 01       	movw	r16, r22
    1c8c:	ec 01       	movw	r28, r24
    1c8e:	fb 01       	movw	r30, r22
    1c90:	00 84       	ldd	r0, Z+8	; 0x08
    1c92:	f1 85       	ldd	r31, Z+9	; 0x09
    1c94:	e0 2d       	mov	r30, r0
    1c96:	09 95       	icall
    1c98:	89 2b       	or	r24, r25
    1c9a:	e1 f6       	brne	.-72     	; 0x1c54 <fputc+0x10>
    1c9c:	d8 01       	movw	r26, r16
    1c9e:	16 96       	adiw	r26, 0x06	; 6
    1ca0:	8d 91       	ld	r24, X+
    1ca2:	9c 91       	ld	r25, X
    1ca4:	17 97       	sbiw	r26, 0x07	; 7
    1ca6:	01 96       	adiw	r24, 0x01	; 1
    1ca8:	17 96       	adiw	r26, 0x07	; 7
    1caa:	9c 93       	st	X, r25
    1cac:	8e 93       	st	-X, r24
    1cae:	16 97       	sbiw	r26, 0x06	; 6
    1cb0:	ce 01       	movw	r24, r28
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	1f 91       	pop	r17
    1cb8:	0f 91       	pop	r16
    1cba:	08 95       	ret

00001cbc <sprintf>:
    1cbc:	ae e0       	ldi	r26, 0x0E	; 14
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e4 e6       	ldi	r30, 0x64	; 100
    1cc2:	fe e0       	ldi	r31, 0x0E	; 14
    1cc4:	0c 94 0b 0d 	jmp	0x1a16	; 0x1a16 <__prologue_saves__+0x1c>
    1cc8:	0d 89       	ldd	r16, Y+21	; 0x15
    1cca:	1e 89       	ldd	r17, Y+22	; 0x16
    1ccc:	86 e0       	ldi	r24, 0x06	; 6
    1cce:	8c 83       	std	Y+4, r24	; 0x04
    1cd0:	1a 83       	std	Y+2, r17	; 0x02
    1cd2:	09 83       	std	Y+1, r16	; 0x01
    1cd4:	8f ef       	ldi	r24, 0xFF	; 255
    1cd6:	9f e7       	ldi	r25, 0x7F	; 127
    1cd8:	9e 83       	std	Y+6, r25	; 0x06
    1cda:	8d 83       	std	Y+5, r24	; 0x05
    1cdc:	ae 01       	movw	r20, r28
    1cde:	47 5e       	subi	r20, 0xE7	; 231
    1ce0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce2:	6f 89       	ldd	r22, Y+23	; 0x17
    1ce4:	78 8d       	ldd	r23, Y+24	; 0x18
    1ce6:	ce 01       	movw	r24, r28
    1ce8:	01 96       	adiw	r24, 0x01	; 1
    1cea:	0e 94 4f 09 	call	0x129e	; 0x129e <vfprintf>
    1cee:	ef 81       	ldd	r30, Y+7	; 0x07
    1cf0:	f8 85       	ldd	r31, Y+8	; 0x08
    1cf2:	e0 0f       	add	r30, r16
    1cf4:	f1 1f       	adc	r31, r17
    1cf6:	10 82       	st	Z, r1
    1cf8:	2e 96       	adiw	r28, 0x0e	; 14
    1cfa:	e4 e0       	ldi	r30, 0x04	; 4
    1cfc:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__epilogue_restores__+0x1c>

00001d00 <__ultoa_invert>:
    1d00:	fa 01       	movw	r30, r20
    1d02:	aa 27       	eor	r26, r26
    1d04:	28 30       	cpi	r18, 0x08	; 8
    1d06:	51 f1       	breq	.+84     	; 0x1d5c <__ultoa_invert+0x5c>
    1d08:	20 31       	cpi	r18, 0x10	; 16
    1d0a:	81 f1       	breq	.+96     	; 0x1d6c <__ultoa_invert+0x6c>
    1d0c:	e8 94       	clt
    1d0e:	6f 93       	push	r22
    1d10:	6e 7f       	andi	r22, 0xFE	; 254
    1d12:	6e 5f       	subi	r22, 0xFE	; 254
    1d14:	7f 4f       	sbci	r23, 0xFF	; 255
    1d16:	8f 4f       	sbci	r24, 0xFF	; 255
    1d18:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1a:	af 4f       	sbci	r26, 0xFF	; 255
    1d1c:	b1 e0       	ldi	r27, 0x01	; 1
    1d1e:	3e d0       	rcall	.+124    	; 0x1d9c <__ultoa_invert+0x9c>
    1d20:	b4 e0       	ldi	r27, 0x04	; 4
    1d22:	3c d0       	rcall	.+120    	; 0x1d9c <__ultoa_invert+0x9c>
    1d24:	67 0f       	add	r22, r23
    1d26:	78 1f       	adc	r23, r24
    1d28:	89 1f       	adc	r24, r25
    1d2a:	9a 1f       	adc	r25, r26
    1d2c:	a1 1d       	adc	r26, r1
    1d2e:	68 0f       	add	r22, r24
    1d30:	79 1f       	adc	r23, r25
    1d32:	8a 1f       	adc	r24, r26
    1d34:	91 1d       	adc	r25, r1
    1d36:	a1 1d       	adc	r26, r1
    1d38:	6a 0f       	add	r22, r26
    1d3a:	71 1d       	adc	r23, r1
    1d3c:	81 1d       	adc	r24, r1
    1d3e:	91 1d       	adc	r25, r1
    1d40:	a1 1d       	adc	r26, r1
    1d42:	20 d0       	rcall	.+64     	; 0x1d84 <__ultoa_invert+0x84>
    1d44:	09 f4       	brne	.+2      	; 0x1d48 <__ultoa_invert+0x48>
    1d46:	68 94       	set
    1d48:	3f 91       	pop	r19
    1d4a:	2a e0       	ldi	r18, 0x0A	; 10
    1d4c:	26 9f       	mul	r18, r22
    1d4e:	11 24       	eor	r1, r1
    1d50:	30 19       	sub	r19, r0
    1d52:	30 5d       	subi	r19, 0xD0	; 208
    1d54:	31 93       	st	Z+, r19
    1d56:	de f6       	brtc	.-74     	; 0x1d0e <__ultoa_invert+0xe>
    1d58:	cf 01       	movw	r24, r30
    1d5a:	08 95       	ret
    1d5c:	46 2f       	mov	r20, r22
    1d5e:	47 70       	andi	r20, 0x07	; 7
    1d60:	40 5d       	subi	r20, 0xD0	; 208
    1d62:	41 93       	st	Z+, r20
    1d64:	b3 e0       	ldi	r27, 0x03	; 3
    1d66:	0f d0       	rcall	.+30     	; 0x1d86 <__ultoa_invert+0x86>
    1d68:	c9 f7       	brne	.-14     	; 0x1d5c <__ultoa_invert+0x5c>
    1d6a:	f6 cf       	rjmp	.-20     	; 0x1d58 <__ultoa_invert+0x58>
    1d6c:	46 2f       	mov	r20, r22
    1d6e:	4f 70       	andi	r20, 0x0F	; 15
    1d70:	40 5d       	subi	r20, 0xD0	; 208
    1d72:	4a 33       	cpi	r20, 0x3A	; 58
    1d74:	18 f0       	brcs	.+6      	; 0x1d7c <__ultoa_invert+0x7c>
    1d76:	49 5d       	subi	r20, 0xD9	; 217
    1d78:	31 fd       	sbrc	r19, 1
    1d7a:	40 52       	subi	r20, 0x20	; 32
    1d7c:	41 93       	st	Z+, r20
    1d7e:	02 d0       	rcall	.+4      	; 0x1d84 <__ultoa_invert+0x84>
    1d80:	a9 f7       	brne	.-22     	; 0x1d6c <__ultoa_invert+0x6c>
    1d82:	ea cf       	rjmp	.-44     	; 0x1d58 <__ultoa_invert+0x58>
    1d84:	b4 e0       	ldi	r27, 0x04	; 4
    1d86:	a6 95       	lsr	r26
    1d88:	97 95       	ror	r25
    1d8a:	87 95       	ror	r24
    1d8c:	77 95       	ror	r23
    1d8e:	67 95       	ror	r22
    1d90:	ba 95       	dec	r27
    1d92:	c9 f7       	brne	.-14     	; 0x1d86 <__ultoa_invert+0x86>
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	61 05       	cpc	r22, r1
    1d98:	71 05       	cpc	r23, r1
    1d9a:	08 95       	ret
    1d9c:	9b 01       	movw	r18, r22
    1d9e:	ac 01       	movw	r20, r24
    1da0:	0a 2e       	mov	r0, r26
    1da2:	06 94       	lsr	r0
    1da4:	57 95       	ror	r21
    1da6:	47 95       	ror	r20
    1da8:	37 95       	ror	r19
    1daa:	27 95       	ror	r18
    1dac:	ba 95       	dec	r27
    1dae:	c9 f7       	brne	.-14     	; 0x1da2 <__ultoa_invert+0xa2>
    1db0:	62 0f       	add	r22, r18
    1db2:	73 1f       	adc	r23, r19
    1db4:	84 1f       	adc	r24, r20
    1db6:	95 1f       	adc	r25, r21
    1db8:	a0 1d       	adc	r26, r0
    1dba:	08 95       	ret

00001dbc <_exit>:
    1dbc:	f8 94       	cli

00001dbe <__stop_program>:
    1dbe:	ff cf       	rjmp	.-2      	; 0x1dbe <__stop_program>
