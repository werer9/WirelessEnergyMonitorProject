
EE209.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  0000161a  000016ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000161a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000277  00800134  00800134  000016e2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001740  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e5a  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010c7  00000000  00000000  000037b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ccd  00000000  00000000  00004879  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  00005548  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000095e  00000000  00000000  0000598c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b65  00000000  00000000  000062ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00006e4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__vector_1>
       8:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__vector_2>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 42 04 	jmp	0x884	; 0x884 <__vector_13>
      38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	05 a8       	ldd	r0, Z+53	; 0x35
      b6:	4c cd       	rjmp	.-1384   	; 0xfffffb50 <__eeprom_end+0xff7efb50>
      b8:	b2 d4       	rcall	.+2404   	; 0xa1e <uart_write+0x6>
      ba:	4e b9       	out	0x0e, r20	; 14
      bc:	38 36       	cpi	r19, 0x68	; 104
      be:	a9 02       	muls	r26, r25
      c0:	0c 50       	subi	r16, 0x0C	; 12
      c2:	b9 91       	ld	r27, Y+
      c4:	86 88       	ldd	r8, Z+22	; 0x16
      c6:	08 3c       	cpi	r16, 0xC8	; 200
      c8:	a6 aa       	std	Z+54, r10	; 0x36
      ca:	aa 2a       	or	r10, r26
      cc:	be 00       	.word	0x00be	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	11 e0       	ldi	r17, 0x01	; 1
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	ea e1       	ldi	r30, 0x1A	; 26
      e6:	f6 e1       	ldi	r31, 0x16	; 22
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a4 33       	cpi	r26, 0x34	; 52
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	23 e0       	ldi	r18, 0x03	; 3
      f6:	a4 e3       	ldi	r26, 0x34	; 52
      f8:	b1 e0       	ldi	r27, 0x01	; 1
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	ab 3a       	cpi	r26, 0xAB	; 171
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 22 05 	call	0xa44	; 0xa44 <main>
     108:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <read_adc_mv>:


uint16_t read_adc_mv(uint8_t channel)
{
	// clear ADMUX
	ADMUX &= 0xF0;
     110:	ec e7       	ldi	r30, 0x7C	; 124
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	90 81       	ld	r25, Z
     116:	90 7f       	andi	r25, 0xF0	; 240
     118:	90 83       	st	Z, r25
	// set least significant 4 bits to channel
	ADMUX |= channel;
     11a:	90 81       	ld	r25, Z
     11c:	89 2b       	or	r24, r25
     11e:	80 83       	st	Z, r24
	// start conversion
	ADCSRA |= (1<<ADSC);
     120:	ea e7       	ldi	r30, 0x7A	; 122
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	80 81       	ld	r24, Z
     126:	80 64       	ori	r24, 0x40	; 64
     128:	80 83       	st	Z, r24
	// wait until conversion is finished
	while (ADCSRA & (1<<ADSC));
     12a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     12e:	86 fd       	sbrc	r24, 6
     130:	fc cf       	rjmp	.-8      	; 0x12a <read_adc_mv+0x1a>
	
	// read full 10 bits of ADC registers
	uint16_t adc_output = ADCW;
     132:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     136:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	// convert reading into millivolts
	uint32_t mv = (uint32_t)adc_output * ((uint32_t)5000/1023);
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b0 e0       	ldi	r27, 0x00	; 0
     13e:	88 0f       	add	r24, r24
     140:	99 1f       	adc	r25, r25
     142:	aa 1f       	adc	r26, r26
     144:	bb 1f       	adc	r27, r27
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	aa 1f       	adc	r26, r26
     14c:	bb 1f       	adc	r27, r27
	return (uint16_t)mv;
}
     14e:	08 95       	ret

00000150 <adc_init>:

void adc_init() 
{
	// set ADMUX to read from VCC
	ADMUX |= (1<<REFS0);
     150:	ec e7       	ldi	r30, 0x7C	; 124
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	80 64       	ori	r24, 0x40	; 64
     158:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     15a:	80 81       	ld	r24, Z
     15c:	8f 77       	andi	r24, 0x7F	; 127
     15e:	80 83       	st	Z, r24
	// clear channel selection
	ADMUX &= 0xF0;
     160:	80 81       	ld	r24, Z
     162:	80 7f       	andi	r24, 0xF0	; 240
     164:	80 83       	st	Z, r24
	// enable conversions, scale by system clock by 128
	ADCSRA |= (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     166:	ea e7       	ldi	r30, 0x7A	; 122
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	80 81       	ld	r24, Z
     16c:	87 68       	ori	r24, 0x87	; 135
     16e:	80 83       	st	Z, r24
     170:	08 95       	ret

00000172 <fsmInit>:
#include "fsm.h"

// initialis fsm with function pointers
void fsmInit(struct functionPointers *fsmFunctions) 
{
    functions = fsmFunctions;
     172:	90 93 00 02 	sts	0x0200, r25	; 0x800200 <functions+0x1>
     176:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <functions>
    state = STATE_INIT;
     17a:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <state>
    voltageTriggerIndex = 0;
     17e:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <voltageTriggerIndex>
    currentTriggerIndex = 0;
     182:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <currentTriggerIndex>
	
	triggerSize = 0;
     186:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <triggerSize>
	peakVoltage = 0;
     18a:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <peakVoltage+0x1>
     18e:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <peakVoltage>
	peakCurrent = 0;
     192:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <peakCurrent+0x1>
     196:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <peakCurrent>
	voltage = 0;
     19a:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <voltage+0x1>
     19e:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <voltage>
	current = 0;
     1a2:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <current+0x1>
     1a6:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <current>
	phase = 0;
     1aa:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <phase+0x1>
     1ae:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <phase>
	pf = 0;
     1b2:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <pf+0x1>
     1b6:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <pf>
	power = 0;
     1ba:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <power+0x1>
     1be:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <power>
     1c2:	08 95       	ret

000001c4 <stateInit>:

// init state
void stateInit()
{
    // init uart
    functions->uart_init(BAUD);
     1c4:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     1c8:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     1cc:	01 90       	ld	r0, Z+
     1ce:	f0 81       	ld	r31, Z
     1d0:	e0 2d       	mov	r30, r0
     1d2:	80 e8       	ldi	r24, 0x80	; 128
     1d4:	95 e2       	ldi	r25, 0x25	; 37
     1d6:	09 95       	icall
    // init io
    functions->io_init();
     1d8:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     1dc:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     1e0:	02 80       	ldd	r0, Z+2	; 0x02
     1e2:	f3 81       	ldd	r31, Z+3	; 0x03
     1e4:	e0 2d       	mov	r30, r0
     1e6:	09 95       	icall
    // init adc
    functions->adc_init();
     1e8:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     1ec:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     1f0:	04 80       	ldd	r0, Z+4	; 0x04
     1f2:	f5 81       	ldd	r31, Z+5	; 0x05
     1f4:	e0 2d       	mov	r30, r0
     1f6:	09 95       	icall
    // init timer
    functions->timer_init();
     1f8:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     1fc:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     200:	06 80       	ldd	r0, Z+6	; 0x06
     202:	f7 81       	ldd	r31, Z+7	; 0x07
     204:	e0 2d       	mov	r30, r0
     206:	09 95       	icall
    // init interrupts
    functions->int_init(voltageTriggerTimes, currentTriggerTimes, SIZE, functions->get_time);
     208:	a0 91 ff 01 	lds	r26, 0x01FF	; 0x8001ff <functions>
     20c:	b0 91 00 02 	lds	r27, 0x0200	; 0x800200 <functions+0x1>
     210:	18 96       	adiw	r26, 0x08	; 8
     212:	ed 91       	ld	r30, X+
     214:	fc 91       	ld	r31, X
     216:	19 97       	sbiw	r26, 0x09	; 9
     218:	54 96       	adiw	r26, 0x14	; 20
     21a:	2d 91       	ld	r18, X+
     21c:	3c 91       	ld	r19, X
     21e:	55 97       	sbiw	r26, 0x15	; 21
     220:	42 e3       	ldi	r20, 0x32	; 50
     222:	6b e9       	ldi	r22, 0x9B	; 155
     224:	71 e0       	ldi	r23, 0x01	; 1
     226:	86 ed       	ldi	r24, 0xD6	; 214
     228:	92 e0       	ldi	r25, 0x02	; 2
     22a:	09 95       	icall
    // change state on function completion
    state = STATE_READ_POWER;
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <state>
     232:	08 95       	ret

00000234 <stateReadPower>:
}

// read power state
void stateReadPower()
{
     234:	1f 93       	push	r17
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
    // enable interrupts and reset timer
	functions->timer_reset();
     23a:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     23e:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     242:	06 88       	ldd	r0, Z+22	; 0x16
     244:	f7 89       	ldd	r31, Z+23	; 0x17
     246:	e0 2d       	mov	r30, r0
     248:	09 95       	icall
	//functions->timer_init();
    functions->enable_interrupts();
     24a:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     24e:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     252:	00 88       	ldd	r0, Z+16	; 0x10
     254:	f1 89       	ldd	r31, Z+17	; 0x11
     256:	e0 2d       	mov	r30, r0
     258:	09 95       	icall
    for (int8_t j = 0; j < SIZE; j++) {
     25a:	10 e0       	ldi	r17, 0x00	; 0
     25c:	22 c0       	rjmp	.+68     	; 0x2a2 <stateReadPower+0x6e>
		voltages[j] = functions->read_adc(VOLTAGE_PIN);
     25e:	c1 2f       	mov	r28, r17
     260:	01 2e       	mov	r0, r17
     262:	00 0c       	add	r0, r0
     264:	dd 0b       	sbc	r29, r29
     266:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     26a:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     26e:	02 88       	ldd	r0, Z+18	; 0x12
     270:	f3 89       	ldd	r31, Z+19	; 0x13
     272:	e0 2d       	mov	r30, r0
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	09 95       	icall
     278:	cc 0f       	add	r28, r28
     27a:	dd 1f       	adc	r29, r29
     27c:	fe 01       	movw	r30, r28
     27e:	ec 5c       	subi	r30, 0xCC	; 204
     280:	fe 4f       	sbci	r31, 0xFE	; 254
     282:	91 83       	std	Z+1, r25	; 0x01
     284:	80 83       	st	Z, r24
        //voltageTimes[j] = functions->get_time();
        currents[j] = functions->read_adc(CURRENT_PIN);
     286:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     28a:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     28e:	02 88       	ldd	r0, Z+18	; 0x12
     290:	f3 89       	ldd	r31, Z+19	; 0x13
     292:	e0 2d       	mov	r30, r0
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	09 95       	icall
     298:	c6 5c       	subi	r28, 0xC6	; 198
     29a:	dc 4f       	sbci	r29, 0xFC	; 252
     29c:	99 83       	std	Y+1, r25	; 0x01
     29e:	88 83       	st	Y, r24
{
    // enable interrupts and reset timer
	functions->timer_reset();
	//functions->timer_init();
    functions->enable_interrupts();
    for (int8_t j = 0; j < SIZE; j++) {
     2a0:	1f 5f       	subi	r17, 0xFF	; 255
     2a2:	12 33       	cpi	r17, 0x32	; 50
     2a4:	e4 f2       	brlt	.-72     	; 0x25e <stateReadPower+0x2a>
        currents[j] = functions->read_adc(CURRENT_PIN);
        //currentTimes[j] = functions->get_time();
    }

    // disable interrupts - prevent the trigger array from overflowing
    functions->disable_interrupts();
     2a6:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     2aa:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     2ae:	06 84       	ldd	r0, Z+14	; 0x0e
     2b0:	f7 85       	ldd	r31, Z+15	; 0x0f
     2b2:	e0 2d       	mov	r30, r0
     2b4:	09 95       	icall

    // possible change the implementation to avoid interrupts by setting a 
    // volatile boolean with an int
    
    // need to add condition for state change
    state = STATE_CALCULATE_POWER;
     2b6:	82 e0       	ldi	r24, 0x02	; 2
     2b8:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <state>
}
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	1f 91       	pop	r17
     2c2:	08 95       	ret

000002c4 <stateCalculatePower>:

// calculate power state
void stateCalculatePower()
{  
    // calculate peak, RMS
    peakVoltage = functions->find_peak(voltages, SIZE);
     2c4:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     2c8:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     2cc:	00 8c       	ldd	r0, Z+24	; 0x18
     2ce:	f1 8d       	ldd	r31, Z+25	; 0x19
     2d0:	e0 2d       	mov	r30, r0
     2d2:	62 e3       	ldi	r22, 0x32	; 50
     2d4:	84 e3       	ldi	r24, 0x34	; 52
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	09 95       	icall
     2da:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <peakVoltage+0x1>
     2de:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <peakVoltage>
    peakCurrent = functions->find_peak(currents, SIZE);
     2e2:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     2e6:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     2ea:	00 8c       	ldd	r0, Z+24	; 0x18
     2ec:	f1 8d       	ldd	r31, Z+25	; 0x19
     2ee:	e0 2d       	mov	r30, r0
     2f0:	62 e3       	ldi	r22, 0x32	; 50
     2f2:	8a e3       	ldi	r24, 0x3A	; 58
     2f4:	93 e0       	ldi	r25, 0x03	; 3
     2f6:	09 95       	icall
     2f8:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <peakCurrent+0x1>
     2fc:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <peakCurrent>
    voltage = functions->calculate_RMS(peakVoltage);
     300:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     304:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     308:	02 8c       	ldd	r0, Z+26	; 0x1a
     30a:	f3 8d       	ldd	r31, Z+27	; 0x1b
     30c:	e0 2d       	mov	r30, r0
     30e:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <peakVoltage>
     312:	90 91 71 02 	lds	r25, 0x0271	; 0x800271 <peakVoltage+0x1>
     316:	09 95       	icall
     318:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <voltage+0x1>
     31c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <voltage>
    current = functions->calculate_RMS(peakCurrent);
     320:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     324:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     328:	02 8c       	ldd	r0, Z+26	; 0x1a
     32a:	f3 8d       	ldd	r31, Z+27	; 0x1b
     32c:	e0 2d       	mov	r30, r0
     32e:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <peakCurrent>
     332:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <peakCurrent+0x1>
     336:	09 95       	icall
     338:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <current+0x1>
     33c:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <current>

    // calculate phase of two signals
    phase = functions->get_phase_difference(voltageTriggerTimes, voltageTriggerIndex,
     340:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     344:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     348:	04 8c       	ldd	r0, Z+28	; 0x1c
     34a:	f5 8d       	ldd	r31, Z+29	; 0x1d
     34c:	e0 2d       	mov	r30, r0
     34e:	20 91 04 02 	lds	r18, 0x0204	; 0x800204 <currentTriggerIndex>
     352:	4b e9       	ldi	r20, 0x9B	; 155
     354:	51 e0       	ldi	r21, 0x01	; 1
     356:	60 91 98 01 	lds	r22, 0x0198	; 0x800198 <voltageTriggerIndex>
     35a:	86 ed       	ldi	r24, 0xD6	; 214
     35c:	92 e0       	ldi	r25, 0x02	; 2
     35e:	09 95       	icall
     360:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <phase+0x1>
     364:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <phase>
            currentTriggerTimes, currentTriggerIndex);
    
    // place holder phase
    pf = functions->calculate_power_factor(phase);
     368:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     36c:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     370:	06 8c       	ldd	r0, Z+30	; 0x1e
     372:	f7 8d       	ldd	r31, Z+31	; 0x1f
     374:	e0 2d       	mov	r30, r0
     376:	09 95       	icall
     378:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <pf+0x1>
     37c:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <pf>
    power = functions->calculate_average_power(voltage, 
     380:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     384:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     388:	00 a0       	ldd	r0, Z+32	; 0x20
     38a:	f1 a1       	ldd	r31, Z+33	; 0x21
     38c:	e0 2d       	mov	r30, r0
     38e:	60 91 0a 02 	lds	r22, 0x020A	; 0x80020a <current>
     392:	70 91 0b 02 	lds	r23, 0x020B	; 0x80020b <current+0x1>
     396:	ac 01       	movw	r20, r24
     398:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <voltage>
     39c:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <voltage+0x1>
     3a0:	09 95       	icall
     3a2:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <power+0x1>
     3a6:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <power>
            current, pf);
    
    // start iterating over the trigger arrays from zero
    // this effectively resets the array
    voltageTriggerIndex = 0;
     3aa:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <voltageTriggerIndex>
    currentTriggerIndex = 0;
     3ae:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <currentTriggerIndex>
    
	// reset interrupt handler
	functions->int_init(voltageTriggerTimes, currentTriggerTimes, SIZE, functions->get_time);
     3b2:	a0 91 ff 01 	lds	r26, 0x01FF	; 0x8001ff <functions>
     3b6:	b0 91 00 02 	lds	r27, 0x0200	; 0x800200 <functions+0x1>
     3ba:	18 96       	adiw	r26, 0x08	; 8
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	19 97       	sbiw	r26, 0x09	; 9
     3c2:	54 96       	adiw	r26, 0x14	; 20
     3c4:	2d 91       	ld	r18, X+
     3c6:	3c 91       	ld	r19, X
     3c8:	55 97       	sbiw	r26, 0x15	; 21
     3ca:	42 e3       	ldi	r20, 0x32	; 50
     3cc:	6b e9       	ldi	r22, 0x9B	; 155
     3ce:	71 e0       	ldi	r23, 0x01	; 1
     3d0:	86 ed       	ldi	r24, 0xD6	; 214
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	09 95       	icall
    // new state needed to be added for correct transition
    state = STATE_TRANSMIT_POWER;
     3d6:	83 e0       	ldi	r24, 0x03	; 3
     3d8:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <state>
     3dc:	08 95       	ret

000003de <stateTransmitPower>:
}

// transmit the power over UART
void stateTransmitPower()
{
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
     3e6:	60 97       	sbiw	r28, 0x10	; 16
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	cd bf       	out	0x3d, r28	; 61
    char dataString[16];
    functions->get_uart_string(power, dataString, 'P');
     3f2:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     3f6:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     3fa:	02 84       	ldd	r0, Z+10	; 0x0a
     3fc:	f3 85       	ldd	r31, Z+11	; 0x0b
     3fe:	e0 2d       	mov	r30, r0
     400:	40 e5       	ldi	r20, 0x50	; 80
     402:	be 01       	movw	r22, r28
     404:	6f 5f       	subi	r22, 0xFF	; 255
     406:	7f 4f       	sbci	r23, 0xFF	; 255
     408:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <power>
     40c:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <power+0x1>
     410:	09 95       	icall
    functions->uart_write(dataString);
     412:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     416:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     41a:	04 84       	ldd	r0, Z+12	; 0x0c
     41c:	f5 85       	ldd	r31, Z+13	; 0x0d
     41e:	e0 2d       	mov	r30, r0
     420:	ce 01       	movw	r24, r28
     422:	01 96       	adiw	r24, 0x01	; 1
     424:	09 95       	icall
	functions->get_uart_string(pf, dataString, 'F');
     426:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     42a:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     42e:	02 84       	ldd	r0, Z+10	; 0x0a
     430:	f3 85       	ldd	r31, Z+11	; 0x0b
     432:	e0 2d       	mov	r30, r0
     434:	46 e4       	ldi	r20, 0x46	; 70
     436:	be 01       	movw	r22, r28
     438:	6f 5f       	subi	r22, 0xFF	; 255
     43a:	7f 4f       	sbci	r23, 0xFF	; 255
     43c:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <pf>
     440:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <pf+0x1>
     444:	09 95       	icall
	functions->uart_write(dataString);
     446:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     44a:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     44e:	04 84       	ldd	r0, Z+12	; 0x0c
     450:	f5 85       	ldd	r31, Z+13	; 0x0d
     452:	e0 2d       	mov	r30, r0
     454:	ce 01       	movw	r24, r28
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	09 95       	icall
	functions->get_uart_string(voltage, dataString, 'V');
     45a:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     45e:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     462:	02 84       	ldd	r0, Z+10	; 0x0a
     464:	f3 85       	ldd	r31, Z+11	; 0x0b
     466:	e0 2d       	mov	r30, r0
     468:	46 e5       	ldi	r20, 0x56	; 86
     46a:	be 01       	movw	r22, r28
     46c:	6f 5f       	subi	r22, 0xFF	; 255
     46e:	7f 4f       	sbci	r23, 0xFF	; 255
     470:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <voltage>
     474:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <voltage+0x1>
     478:	09 95       	icall
	functions->uart_write(dataString);
     47a:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     47e:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     482:	04 84       	ldd	r0, Z+12	; 0x0c
     484:	f5 85       	ldd	r31, Z+13	; 0x0d
     486:	e0 2d       	mov	r30, r0
     488:	ce 01       	movw	r24, r28
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	09 95       	icall
	functions->get_uart_string(current, dataString, 'I');
     48e:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     492:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     496:	02 84       	ldd	r0, Z+10	; 0x0a
     498:	f3 85       	ldd	r31, Z+11	; 0x0b
     49a:	e0 2d       	mov	r30, r0
     49c:	49 e4       	ldi	r20, 0x49	; 73
     49e:	be 01       	movw	r22, r28
     4a0:	6f 5f       	subi	r22, 0xFF	; 255
     4a2:	7f 4f       	sbci	r23, 0xFF	; 255
     4a4:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <current>
     4a8:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <current+0x1>
     4ac:	09 95       	icall
	functions->uart_write(dataString);
     4ae:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <functions>
     4b2:	f0 91 00 02 	lds	r31, 0x0200	; 0x800200 <functions+0x1>
     4b6:	04 84       	ldd	r0, Z+12	; 0x0c
     4b8:	f5 85       	ldd	r31, Z+13	; 0x0d
     4ba:	e0 2d       	mov	r30, r0
     4bc:	ce 01       	movw	r24, r28
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	09 95       	icall

    state = STATE_READ_POWER;
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <state>
     4c8:	60 96       	adiw	r28, 0x10	; 16
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <run>:
}
// main fsm function
int run()
{ 
    while (1) {
        switch(state) {
     4da:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <state>
     4de:	81 30       	cpi	r24, 0x01	; 1
     4e0:	49 f0       	breq	.+18     	; 0x4f4 <run+0x1a>
     4e2:	28 f0       	brcs	.+10     	; 0x4ee <run+0x14>
     4e4:	82 30       	cpi	r24, 0x02	; 2
     4e6:	49 f0       	breq	.+18     	; 0x4fa <run+0x20>
     4e8:	83 30       	cpi	r24, 0x03	; 3
     4ea:	51 f0       	breq	.+20     	; 0x500 <run+0x26>
     4ec:	0c c0       	rjmp	.+24     	; 0x506 <run+0x2c>
            case STATE_INIT:
                // set this to correct ubbr
                stateInit();
     4ee:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <stateInit>
                break;
     4f2:	f3 cf       	rjmp	.-26     	; 0x4da <run>
            case STATE_READ_POWER:
                // read data from adc and store it
                stateReadPower();
     4f4:	0e 94 1a 01 	call	0x234	; 0x234 <stateReadPower>
                break;
     4f8:	f0 cf       	rjmp	.-32     	; 0x4da <run>
            case STATE_CALCULATE_POWER:
                // use data from adc to calculate power
                stateCalculatePower();
     4fa:	0e 94 62 01 	call	0x2c4	; 0x2c4 <stateCalculatePower>
                break;
     4fe:	ed cf       	rjmp	.-38     	; 0x4da <run>
            case STATE_TRANSMIT_POWER:
                // send power to bt module with uart
                stateTransmitPower();
     500:	0e 94 ef 01 	call	0x3de	; 0x3de <stateTransmitPower>
                break;
     504:	ea cf       	rjmp	.-44     	; 0x4da <run>
                break;
        }
    }

    return 0;
}
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	08 95       	ret

0000050c <io_init>:
#include "gpio.h"

void io_init()
{
	//Set all PORTC pins as inputs
	DDRC = 0x00;
     50c:	17 b8       	out	0x07, r1	; 7

	//Set PORTD Pins 1 and 0 as outputs
	DDRD = 0x00;
     50e:	1a b8       	out	0x0a, r1	; 10
	DDRD |= (1<<PIND0) | (1<<PIND1);
     510:	8a b1       	in	r24, 0x0a	; 10
     512:	83 60       	ori	r24, 0x03	; 3
     514:	8a b9       	out	0x0a, r24	; 10
     516:	08 95       	ret

00000518 <enable_interrupts>:
	interrupt_handler(1);
}

void enable_interrupts()
{
	sei();
     518:	78 94       	sei
     51a:	08 95       	ret

0000051c <disable_interrupts>:
}
void disable_interrupts()
{
	cli();
     51c:	f8 94       	cli
     51e:	08 95       	ret

00000520 <interrupt_init>:
{
	
	voltageTriggers = voltageTriggers;
	currentTriggers = currentTriggers;
	size = size;
	get_time_func = get_time_ptr;
     520:	30 93 a3 03 	sts	0x03A3, r19	; 0x8003a3 <get_time_func+0x1>
     524:	20 93 a2 03 	sts	0x03A2, r18	; 0x8003a2 <get_time_func>
	currentIndex = 0;
     528:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <currentIndex>
	voltageIndex = 0;
     52c:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <voltageIndex>
     530:	08 95       	ret

00000532 <interrupt_handler>:
}

void interrupt_handler(uint8_t interruptPin)
{
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
	switch (interruptPin)
     536:	88 23       	and	r24, r24
     538:	19 f0       	breq	.+6      	; 0x540 <interrupt_handler+0xe>
     53a:	81 30       	cpi	r24, 0x01	; 1
     53c:	e9 f0       	breq	.+58     	; 0x578 <interrupt_handler+0x46>
     53e:	37 c0       	rjmp	.+110    	; 0x5ae <interrupt_handler+0x7c>
	{
		case 0:
			if (currentIndex == size)
     540:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <currentIndex>
     544:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <size>
     548:	89 17       	cp	r24, r25
     54a:	89 f1       	breq	.+98     	; 0x5ae <interrupt_handler+0x7c>
				break;
			currentTriggers[currentIndex++] = get_time_func();
     54c:	20 91 a7 03 	lds	r18, 0x03A7	; 0x8003a7 <currentTriggers>
     550:	30 91 a8 03 	lds	r19, 0x03A8	; 0x8003a8 <currentTriggers+0x1>
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	98 0f       	add	r25, r24
     558:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <currentIndex>
     55c:	c8 2f       	mov	r28, r24
     55e:	d0 e0       	ldi	r29, 0x00	; 0
     560:	cc 0f       	add	r28, r28
     562:	dd 1f       	adc	r29, r29
     564:	c2 0f       	add	r28, r18
     566:	d3 1f       	adc	r29, r19
     568:	e0 91 a2 03 	lds	r30, 0x03A2	; 0x8003a2 <get_time_func>
     56c:	f0 91 a3 03 	lds	r31, 0x03A3	; 0x8003a3 <get_time_func+0x1>
     570:	09 95       	icall
     572:	99 83       	std	Y+1, r25	; 0x01
     574:	88 83       	st	Y, r24
			break;
     576:	1b c0       	rjmp	.+54     	; 0x5ae <interrupt_handler+0x7c>
		case 1:
			if (voltageIndex == size)
     578:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <voltageIndex>
     57c:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <size>
     580:	89 17       	cp	r24, r25
     582:	a9 f0       	breq	.+42     	; 0x5ae <interrupt_handler+0x7c>
				break;
			voltageTriggers[voltageIndex++] = get_time_func();
     584:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <voltageTriggers>
     588:	30 91 a5 03 	lds	r19, 0x03A5	; 0x8003a5 <voltageTriggers+0x1>
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	98 0f       	add	r25, r24
     590:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <voltageIndex>
     594:	c8 2f       	mov	r28, r24
     596:	d0 e0       	ldi	r29, 0x00	; 0
     598:	cc 0f       	add	r28, r28
     59a:	dd 1f       	adc	r29, r29
     59c:	c2 0f       	add	r28, r18
     59e:	d3 1f       	adc	r29, r19
     5a0:	e0 91 a2 03 	lds	r30, 0x03A2	; 0x8003a2 <get_time_func>
     5a4:	f0 91 a3 03 	lds	r31, 0x03A3	; 0x8003a3 <get_time_func+0x1>
     5a8:	09 95       	icall
     5aa:	99 83       	std	Y+1, r25	; 0x01
     5ac:	88 83       	st	Y, r24
			break;
		default:
			break;
	}
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <__vector_1>:

#include "interrupt.h"

// handle interrupts during cycle
ISR(INT0_vect)
{
     5b4:	1f 92       	push	r1
     5b6:	0f 92       	push	r0
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	0f 92       	push	r0
     5bc:	11 24       	eor	r1, r1
     5be:	2f 93       	push	r18
     5c0:	3f 93       	push	r19
     5c2:	4f 93       	push	r20
     5c4:	5f 93       	push	r21
     5c6:	6f 93       	push	r22
     5c8:	7f 93       	push	r23
     5ca:	8f 93       	push	r24
     5cc:	9f 93       	push	r25
     5ce:	af 93       	push	r26
     5d0:	bf 93       	push	r27
     5d2:	ef 93       	push	r30
     5d4:	ff 93       	push	r31
	interrupt_handler(0);
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	0e 94 99 02 	call	0x532	; 0x532 <interrupt_handler>
}
     5dc:	ff 91       	pop	r31
     5de:	ef 91       	pop	r30
     5e0:	bf 91       	pop	r27
     5e2:	af 91       	pop	r26
     5e4:	9f 91       	pop	r25
     5e6:	8f 91       	pop	r24
     5e8:	7f 91       	pop	r23
     5ea:	6f 91       	pop	r22
     5ec:	5f 91       	pop	r21
     5ee:	4f 91       	pop	r20
     5f0:	3f 91       	pop	r19
     5f2:	2f 91       	pop	r18
     5f4:	0f 90       	pop	r0
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	0f 90       	pop	r0
     5fa:	1f 90       	pop	r1
     5fc:	18 95       	reti

000005fe <__vector_2>:

ISR(INT1_vect)
{
     5fe:	1f 92       	push	r1
     600:	0f 92       	push	r0
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	0f 92       	push	r0
     606:	11 24       	eor	r1, r1
     608:	2f 93       	push	r18
     60a:	3f 93       	push	r19
     60c:	4f 93       	push	r20
     60e:	5f 93       	push	r21
     610:	6f 93       	push	r22
     612:	7f 93       	push	r23
     614:	8f 93       	push	r24
     616:	9f 93       	push	r25
     618:	af 93       	push	r26
     61a:	bf 93       	push	r27
     61c:	ef 93       	push	r30
     61e:	ff 93       	push	r31
	interrupt_handler(1);
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	0e 94 99 02 	call	0x532	; 0x532 <interrupt_handler>
}
     626:	ff 91       	pop	r31
     628:	ef 91       	pop	r30
     62a:	bf 91       	pop	r27
     62c:	af 91       	pop	r26
     62e:	9f 91       	pop	r25
     630:	8f 91       	pop	r24
     632:	7f 91       	pop	r23
     634:	6f 91       	pop	r22
     636:	5f 91       	pop	r21
     638:	4f 91       	pop	r20
     63a:	3f 91       	pop	r19
     63c:	2f 91       	pop	r18
     63e:	0f 90       	pop	r0
     640:	0f be       	out	0x3f, r0	; 63
     642:	0f 90       	pop	r0
     644:	1f 90       	pop	r1
     646:	18 95       	reti

00000648 <get_uart_string>:

// convert adc value to real value
uint16_t convertADCValue(uint16_t sample, uint16_t maxVal, uint8_t bits)
{
	return (uint16_t)sample/pow(2,bits) * maxVal;
}
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	ec 01       	movw	r28, r24
     650:	56 2f       	mov	r21, r22
     652:	17 2f       	mov	r17, r23
     654:	fc 01       	movw	r30, r24
     656:	f6 95       	lsr	r31
     658:	e7 95       	ror	r30
     65a:	f6 95       	lsr	r31
     65c:	e7 95       	ror	r30
     65e:	f6 95       	lsr	r31
     660:	e7 95       	ror	r30
     662:	9f 01       	movw	r18, r30
     664:	a5 ec       	ldi	r26, 0xC5	; 197
     666:	b0 e2       	ldi	r27, 0x20	; 32
     668:	0e 94 12 08 	call	0x1024	; 0x1024 <__umulhisi3>
     66c:	9c 01       	movw	r18, r24
     66e:	32 95       	swap	r19
     670:	22 95       	swap	r18
     672:	2f 70       	andi	r18, 0x0F	; 15
     674:	23 27       	eor	r18, r19
     676:	3f 70       	andi	r19, 0x0F	; 15
     678:	23 27       	eor	r18, r19
     67a:	68 ee       	ldi	r22, 0xE8	; 232
     67c:	73 e0       	ldi	r23, 0x03	; 3
     67e:	26 9f       	mul	r18, r22
     680:	c0 01       	movw	r24, r0
     682:	27 9f       	mul	r18, r23
     684:	90 0d       	add	r25, r0
     686:	36 9f       	mul	r19, r22
     688:	90 0d       	add	r25, r0
     68a:	11 24       	eor	r1, r1
     68c:	9e 01       	movw	r18, r28
     68e:	28 1b       	sub	r18, r24
     690:	39 0b       	sbc	r19, r25
     692:	ad ec       	ldi	r26, 0xCD	; 205
     694:	bc ec       	ldi	r27, 0xCC	; 204
     696:	0e 94 12 08 	call	0x1024	; 0x1024 <__umulhisi3>
     69a:	96 95       	lsr	r25
     69c:	87 95       	ror	r24
     69e:	96 95       	lsr	r25
     6a0:	87 95       	ror	r24
     6a2:	96 95       	lsr	r25
     6a4:	87 95       	ror	r24
     6a6:	9f 93       	push	r25
     6a8:	8f 93       	push	r24
     6aa:	9f 01       	movw	r18, r30
     6ac:	a5 ec       	ldi	r26, 0xC5	; 197
     6ae:	b0 e2       	ldi	r27, 0x20	; 32
     6b0:	0e 94 12 08 	call	0x1024	; 0x1024 <__umulhisi3>
     6b4:	92 95       	swap	r25
     6b6:	82 95       	swap	r24
     6b8:	8f 70       	andi	r24, 0x0F	; 15
     6ba:	89 27       	eor	r24, r25
     6bc:	9f 70       	andi	r25, 0x0F	; 15
     6be:	89 27       	eor	r24, r25
     6c0:	9f 93       	push	r25
     6c2:	8f 93       	push	r24
     6c4:	1f 92       	push	r1
     6c6:	4f 93       	push	r20
     6c8:	82 e2       	ldi	r24, 0x22	; 34
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	9f 93       	push	r25
     6ce:	8f 93       	push	r24
     6d0:	1f 93       	push	r17
     6d2:	5f 93       	push	r21
     6d4:	0e 94 21 08 	call	0x1042	; 0x1042 <sprintf>
     6d8:	8d b7       	in	r24, 0x3d	; 61
     6da:	9e b7       	in	r25, 0x3e	; 62
     6dc:	0a 96       	adiw	r24, 0x0a	; 10
     6de:	0f b6       	in	r0, 0x3f	; 63
     6e0:	f8 94       	cli
     6e2:	9e bf       	out	0x3e, r25	; 62
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	8d bf       	out	0x3d, r24	; 61
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	1f 91       	pop	r17
     6ee:	08 95       	ret

000006f0 <findPeak>:

// find peak value of sinusoidal wave
uint16_t findPeak(uint16_t *samples, uint8_t size)
{
     6f0:	dc 01       	movw	r26, r24
	uint16_t peak = 0;
	// iterate over samples and use largest value as peak
	for (uint8_t i = 0; i < size; i++) {
     6f2:	90 e0       	ldi	r25, 0x00	; 0
}

// find peak value of sinusoidal wave
uint16_t findPeak(uint16_t *samples, uint8_t size)
{
	uint16_t peak = 0;
     6f4:	40 e0       	ldi	r20, 0x00	; 0
     6f6:	50 e0       	ldi	r21, 0x00	; 0
	// iterate over samples and use largest value as peak
	for (uint8_t i = 0; i < size; i++) {
     6f8:	0d c0       	rjmp	.+26     	; 0x714 <findPeak+0x24>
		if (samples[i] > peak)
     6fa:	e9 2f       	mov	r30, r25
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	ee 0f       	add	r30, r30
     700:	ff 1f       	adc	r31, r31
     702:	ea 0f       	add	r30, r26
     704:	fb 1f       	adc	r31, r27
     706:	20 81       	ld	r18, Z
     708:	31 81       	ldd	r19, Z+1	; 0x01
     70a:	42 17       	cp	r20, r18
     70c:	53 07       	cpc	r21, r19
     70e:	08 f4       	brcc	.+2      	; 0x712 <findPeak+0x22>
			peak = samples[i];
     710:	a9 01       	movw	r20, r18
// find peak value of sinusoidal wave
uint16_t findPeak(uint16_t *samples, uint8_t size)
{
	uint16_t peak = 0;
	// iterate over samples and use largest value as peak
	for (uint8_t i = 0; i < size; i++) {
     712:	9f 5f       	subi	r25, 0xFF	; 255
     714:	96 17       	cp	r25, r22
     716:	88 f3       	brcs	.-30     	; 0x6fa <findPeak+0xa>
		if (samples[i] > peak)
			peak = samples[i];
	}
	
	return peak;
}
     718:	ca 01       	movw	r24, r20
     71a:	08 95       	ret

0000071c <calculateRMS>:

// calculate the rms value from peak value of sinusoid
uint16_t calculateRMS(uint16_t peak)
{
	return peak/ROOT_2;
     71c:	bc 01       	movw	r22, r24
     71e:	80 e0       	ldi	r24, 0x00	; 0
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__floatunsisf>
     726:	2e ee       	ldi	r18, 0xEE	; 238
     728:	34 e0       	ldi	r19, 0x04	; 4
     72a:	45 eb       	ldi	r20, 0xB5	; 181
     72c:	5f e3       	ldi	r21, 0x3F	; 63
     72e:	0e 94 b8 05 	call	0xb70	; 0xb70 <__divsf3>
     732:	0e 94 2a 06 	call	0xc54	; 0xc54 <__fixunssfsi>
}
     736:	cb 01       	movw	r24, r22
     738:	08 95       	ret

0000073a <getPhaseDifference>:
{
	uint16_t phaseDifference = 0;
	uint16_t Tz = 0;
	uint16_t Tp = 0;

	if (size1 < 3 || size2 < 3)
     73a:	63 30       	cpi	r22, 0x03	; 3
     73c:	a8 f1       	brcs	.+106    	; 0x7a8 <getPhaseDifference+0x6e>
     73e:	23 30       	cpi	r18, 0x03	; 3
     740:	b0 f1       	brcs	.+108    	; 0x7ae <getPhaseDifference+0x74>
		return phaseDifference;

	if (crossTimes1[0] > crossTimes2[0]) {
     742:	fc 01       	movw	r30, r24
     744:	60 81       	ld	r22, Z
     746:	71 81       	ldd	r23, Z+1	; 0x01
     748:	fa 01       	movw	r30, r20
     74a:	20 81       	ld	r18, Z
     74c:	31 81       	ldd	r19, Z+1	; 0x01
     74e:	26 17       	cp	r18, r22
     750:	37 07       	cpc	r19, r23
     752:	50 f4       	brcc	.+20     	; 0x768 <getPhaseDifference+0x2e>
		Tz = crossTimes2[0] - crossTimes2[2];
     754:	44 81       	ldd	r20, Z+4	; 0x04
     756:	55 81       	ldd	r21, Z+5	; 0x05
     758:	24 1b       	sub	r18, r20
     75a:	35 0b       	sbc	r19, r21
		Tp = crossTimes1[2] - crossTimes2[2];
     75c:	fc 01       	movw	r30, r24
     75e:	64 81       	ldd	r22, Z+4	; 0x04
     760:	75 81       	ldd	r23, Z+5	; 0x05
     762:	64 1b       	sub	r22, r20
     764:	75 0b       	sbc	r23, r21
     766:	13 c0       	rjmp	.+38     	; 0x78e <getPhaseDifference+0x54>
	} else if (crossTimes1[0] < crossTimes2[0]) {
     768:	62 17       	cp	r22, r18
     76a:	73 07       	cpc	r23, r19
     76c:	60 f4       	brcc	.+24     	; 0x786 <getPhaseDifference+0x4c>
		Tz = crossTimes1[0] - crossTimes1[2];
     76e:	fc 01       	movw	r30, r24
     770:	84 81       	ldd	r24, Z+4	; 0x04
     772:	95 81       	ldd	r25, Z+5	; 0x05
     774:	9b 01       	movw	r18, r22
     776:	28 1b       	sub	r18, r24
     778:	39 0b       	sbc	r19, r25
		Tp = crossTimes2[2] - crossTimes1[2];
     77a:	fa 01       	movw	r30, r20
     77c:	64 81       	ldd	r22, Z+4	; 0x04
     77e:	75 81       	ldd	r23, Z+5	; 0x05
     780:	68 1b       	sub	r22, r24
     782:	79 0b       	sbc	r23, r25
     784:	04 c0       	rjmp	.+8      	; 0x78e <getPhaseDifference+0x54>
uint16_t getPhaseDifference(uint16_t *crossTimes1, uint8_t size1, 
		uint16_t *crossTimes2, uint8_t size2) 
{
	uint16_t phaseDifference = 0;
	uint16_t Tz = 0;
	uint16_t Tp = 0;
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	70 e0       	ldi	r23, 0x00	; 0
// since these are more accurate
uint16_t getPhaseDifference(uint16_t *crossTimes1, uint8_t size1, 
		uint16_t *crossTimes2, uint8_t size2) 
{
	uint16_t phaseDifference = 0;
	uint16_t Tz = 0;
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
	} else if (crossTimes1[0] < crossTimes2[0]) {
		Tz = crossTimes1[0] - crossTimes1[2];
		Tp = crossTimes2[2] - crossTimes1[2];
	}

	phaseDifference = 360 * (Tz/Tp);
     78e:	c9 01       	movw	r24, r18
     790:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <__udivmodhi4>
     794:	28 e6       	ldi	r18, 0x68	; 104
     796:	31 e0       	ldi	r19, 0x01	; 1
     798:	62 9f       	mul	r22, r18
     79a:	c0 01       	movw	r24, r0
     79c:	63 9f       	mul	r22, r19
     79e:	90 0d       	add	r25, r0
     7a0:	72 9f       	mul	r23, r18
     7a2:	90 0d       	add	r25, r0
     7a4:	11 24       	eor	r1, r1

	return phaseDifference;
     7a6:	08 95       	ret
	uint16_t phaseDifference = 0;
	uint16_t Tz = 0;
	uint16_t Tp = 0;

	if (size1 < 3 || size2 < 3)
		return phaseDifference;
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	08 95       	ret
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
	}

	phaseDifference = 360 * (Tz/Tp);

	return phaseDifference;
}
     7b2:	08 95       	ret

000007b4 <calculatePowerFactor>:

// calculate power factor
uint16_t calculatePowerFactor(uint16_t phase) 
{
	phase *= (PI/180);
     7b4:	bc 01       	movw	r22, r24
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__floatunsisf>
     7be:	2e e2       	ldi	r18, 0x2E	; 46
     7c0:	3a ef       	ldi	r19, 0xFA	; 250
     7c2:	4e e8       	ldi	r20, 0x8E	; 142
     7c4:	5c e3       	ldi	r21, 0x3C	; 60
     7c6:	0e 94 26 07 	call	0xe4c	; 0xe4c <__mulsf3>
     7ca:	0e 94 2a 06 	call	0xc54	; 0xc54 <__fixunssfsi>
	return (cos(phase) * 1000);
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__floatunsisf>
     7d6:	0e 94 b3 05 	call	0xb66	; 0xb66 <cos>
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	4a e7       	ldi	r20, 0x7A	; 122
     7e0:	54 e4       	ldi	r21, 0x44	; 68
     7e2:	0e 94 26 07 	call	0xe4c	; 0xe4c <__mulsf3>
     7e6:	0e 94 2a 06 	call	0xc54	; 0xc54 <__fixunssfsi>
}
     7ea:	cb 01       	movw	r24, r22
     7ec:	08 95       	ret

000007ee <calculateAveragePower>:

// calculate average power using standard equation
uint16_t calculateAveragePower(uint16_t Vrms, uint16_t Irms, uint16_t pf)
{
     7ee:	fb 01       	movw	r30, r22
	double p = (Vrms/1000 * Irms/1000 * pf/1000);
     7f0:	9c 01       	movw	r18, r24
     7f2:	36 95       	lsr	r19
     7f4:	27 95       	ror	r18
     7f6:	36 95       	lsr	r19
     7f8:	27 95       	ror	r18
     7fa:	36 95       	lsr	r19
     7fc:	27 95       	ror	r18
     7fe:	a5 ec       	ldi	r26, 0xC5	; 197
     800:	b0 e2       	ldi	r27, 0x20	; 32
     802:	0e 94 12 08 	call	0x1024	; 0x1024 <__umulhisi3>
     806:	92 95       	swap	r25
     808:	82 95       	swap	r24
     80a:	8f 70       	andi	r24, 0x0F	; 15
     80c:	89 27       	eor	r24, r25
     80e:	9f 70       	andi	r25, 0x0F	; 15
     810:	89 27       	eor	r24, r25
     812:	8e 9f       	mul	r24, r30
     814:	90 01       	movw	r18, r0
     816:	8f 9f       	mul	r24, r31
     818:	30 0d       	add	r19, r0
     81a:	9e 9f       	mul	r25, r30
     81c:	30 0d       	add	r19, r0
     81e:	11 24       	eor	r1, r1
     820:	36 95       	lsr	r19
     822:	27 95       	ror	r18
     824:	36 95       	lsr	r19
     826:	27 95       	ror	r18
     828:	36 95       	lsr	r19
     82a:	27 95       	ror	r18
     82c:	0e 94 12 08 	call	0x1024	; 0x1024 <__umulhisi3>
     830:	92 95       	swap	r25
     832:	82 95       	swap	r24
     834:	8f 70       	andi	r24, 0x0F	; 15
     836:	89 27       	eor	r24, r25
     838:	9f 70       	andi	r25, 0x0F	; 15
     83a:	89 27       	eor	r24, r25
     83c:	84 9f       	mul	r24, r20
     83e:	90 01       	movw	r18, r0
     840:	85 9f       	mul	r24, r21
     842:	30 0d       	add	r19, r0
     844:	94 9f       	mul	r25, r20
     846:	30 0d       	add	r19, r0
     848:	11 24       	eor	r1, r1
     84a:	36 95       	lsr	r19
     84c:	27 95       	ror	r18
     84e:	36 95       	lsr	r19
     850:	27 95       	ror	r18
     852:	36 95       	lsr	r19
     854:	27 95       	ror	r18
     856:	0e 94 12 08 	call	0x1024	; 0x1024 <__umulhisi3>
     85a:	92 95       	swap	r25
     85c:	82 95       	swap	r24
     85e:	8f 70       	andi	r24, 0x0F	; 15
     860:	89 27       	eor	r24, r25
     862:	9f 70       	andi	r25, 0x0F	; 15
     864:	89 27       	eor	r24, r25
     866:	bc 01       	movw	r22, r24
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__floatunsisf>
	return (uint16_t)(p*1000);
     870:	20 e0       	ldi	r18, 0x00	; 0
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	4a e7       	ldi	r20, 0x7A	; 122
     876:	54 e4       	ldi	r21, 0x44	; 68
     878:	0e 94 26 07 	call	0xe4c	; 0xe4c <__mulsf3>
     87c:	0e 94 2a 06 	call	0xc54	; 0xc54 <__fixunssfsi>
}
     880:	cb 01       	movw	r24, r22
     882:	08 95       	ret

00000884 <__vector_13>:
 */ 

#include "timer_driver.h"

// Interrupt service routines
ISR(TIMER1_OVF_vect) {
     884:	1f 92       	push	r1
     886:	0f 92       	push	r0
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	0f 92       	push	r0
     88c:	11 24       	eor	r1, r1
     88e:	8f 93       	push	r24
     890:	9f 93       	push	r25
	timerOverFlowCount++;
     892:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <timerOverFlowCount>
     896:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <timerOverFlowCount+0x1>
     89a:	01 96       	adiw	r24, 0x01	; 1
     89c:	90 93 aa 03 	sts	0x03AA, r25	; 0x8003aa <timerOverFlowCount+0x1>
     8a0:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <timerOverFlowCount>
}
     8a4:	9f 91       	pop	r25
     8a6:	8f 91       	pop	r24
     8a8:	0f 90       	pop	r0
     8aa:	0f be       	out	0x3f, r0	; 63
     8ac:	0f 90       	pop	r0
     8ae:	1f 90       	pop	r1
     8b0:	18 95       	reti

000008b2 <timer_init>:
void timer_init()
{
	//Sets a 256 prescaler, new Frequency = 62.5kHz
	//Time Period for 1 count = 0.000016s = 16us
	//Time Period for 65535 counts = 1.04856s
	TCCR1B |= (1<<CS12);
     8b2:	e1 e8       	ldi	r30, 0x81	; 129
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	80 81       	ld	r24, Z
     8b8:	84 60       	ori	r24, 0x04	; 4
     8ba:	80 83       	st	Z, r24

	//Enables Timer Overflow interrupt (probably won't need it)
	TIMSK1 |= (1<<TOIE1);
     8bc:	ef e6       	ldi	r30, 0x6F	; 111
     8be:	f0 e0       	ldi	r31, 0x00	; 0
     8c0:	80 81       	ld	r24, Z
     8c2:	81 60       	ori	r24, 0x01	; 1
     8c4:	80 83       	st	Z, r24
	
	// initialise timer overflow count
	timerOverFlowCount = 0;
     8c6:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <timerOverFlowCount+0x1>
     8ca:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <timerOverFlowCount>
     8ce:	08 95       	ret

000008d0 <getTimerCount>:
}

uint16_t getTimerCount()
{
	//returns the current value stored in the two 8-bit TIMER1 Registers
	return TCNT1;
     8d0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     8d4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
}
     8d8:	08 95       	ret

000008da <calculateTime>:

uint16_t calculateTime(uint16_t scale)
{
     8da:	8f 92       	push	r8
     8dc:	9f 92       	push	r9
     8de:	af 92       	push	r10
     8e0:	bf 92       	push	r11
     8e2:	cf 92       	push	r12
     8e4:	df 92       	push	r13
     8e6:	ef 92       	push	r14
     8e8:	ff 92       	push	r15
	// set scale into time
	double scaleFactor = scale * 1/F_CPU;
     8ea:	bc 01       	movw	r22, r24
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	34 e2       	ldi	r19, 0x24	; 36
     8f4:	44 ef       	ldi	r20, 0xF4	; 244
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__udivmodsi4>
     8fc:	ca 01       	movw	r24, r20
     8fe:	b9 01       	movw	r22, r18
     900:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__floatunsisf>
     904:	6b 01       	movw	r12, r22
     906:	7c 01       	movw	r14, r24
	uint32_t time = (getTimerCount() * scaleFactor + 65536 * scaleFactor * timerOverFlowCount*100);
     908:	0e 94 68 04 	call	0x8d0	; 0x8d0 <getTimerCount>
     90c:	bc 01       	movw	r22, r24
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__floatunsisf>
     916:	a7 01       	movw	r20, r14
     918:	96 01       	movw	r18, r12
     91a:	0e 94 26 07 	call	0xe4c	; 0xe4c <__mulsf3>
     91e:	4b 01       	movw	r8, r22
     920:	5c 01       	movw	r10, r24
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	40 e8       	ldi	r20, 0x80	; 128
     928:	57 e4       	ldi	r21, 0x47	; 71
     92a:	c7 01       	movw	r24, r14
     92c:	b6 01       	movw	r22, r12
     92e:	0e 94 26 07 	call	0xe4c	; 0xe4c <__mulsf3>
     932:	6b 01       	movw	r12, r22
     934:	7c 01       	movw	r14, r24
     936:	60 91 a9 03 	lds	r22, 0x03A9	; 0x8003a9 <timerOverFlowCount>
     93a:	70 91 aa 03 	lds	r23, 0x03AA	; 0x8003aa <timerOverFlowCount+0x1>
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__floatunsisf>
     946:	a7 01       	movw	r20, r14
     948:	96 01       	movw	r18, r12
     94a:	0e 94 26 07 	call	0xe4c	; 0xe4c <__mulsf3>
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	48 ec       	ldi	r20, 0xC8	; 200
     954:	52 e4       	ldi	r21, 0x42	; 66
     956:	0e 94 26 07 	call	0xe4c	; 0xe4c <__mulsf3>
     95a:	9b 01       	movw	r18, r22
     95c:	ac 01       	movw	r20, r24
     95e:	c5 01       	movw	r24, r10
     960:	b4 01       	movw	r22, r8
     962:	0e 94 47 05 	call	0xa8e	; 0xa8e <__addsf3>
     966:	0e 94 2a 06 	call	0xc54	; 0xc54 <__fixunssfsi>
	return (uint16_t)time;
}
     96a:	cb 01       	movw	r24, r22
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	df 90       	pop	r13
     972:	cf 90       	pop	r12
     974:	bf 90       	pop	r11
     976:	af 90       	pop	r10
     978:	9f 90       	pop	r9
     97a:	8f 90       	pop	r8
     97c:	08 95       	ret

0000097e <resetTimerOverflowCount>:

void resetTimerOverflowCount()
{
	// reset the overflow count
	timerOverFlowCount = 0;
     97e:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <timerOverFlowCount+0x1>
     982:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <timerOverFlowCount>
     986:	08 95       	ret

00000988 <resetTimer>:
}

void resetTimer()
{
	// clear the timer counter
	TCNT1 = 0;
     988:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     98c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	resetTimerOverflowCount();
     990:	0e 94 bf 04 	call	0x97e	; 0x97e <resetTimerOverflowCount>
     994:	08 95       	ret

00000996 <get_time>:
}

uint16_t get_time()
{
	// returns the current timer count to the function caller
	return calculateTime(TIMER_PRESCALER);
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	0e 94 6d 04 	call	0x8da	; 0x8da <calculateTime>
     99e:	08 95       	ret

000009a0 <calculateUBRR>:
#include "uart.h"

// calculate corrext ubrr
uint16_t calculateUBRR(uint16_t baud)
{
	return (uint16_t)(F_CPU/(16*(unsigned long)baud) - 1);
     9a0:	a0 e0       	ldi	r26, 0x00	; 0
     9a2:	b0 e0       	ldi	r27, 0x00	; 0
     9a4:	88 0f       	add	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	aa 1f       	adc	r26, r26
     9aa:	bb 1f       	adc	r27, r27
     9ac:	88 0f       	add	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	aa 1f       	adc	r26, r26
     9b2:	bb 1f       	adc	r27, r27
     9b4:	9c 01       	movw	r18, r24
     9b6:	ad 01       	movw	r20, r26
     9b8:	22 0f       	add	r18, r18
     9ba:	33 1f       	adc	r19, r19
     9bc:	44 1f       	adc	r20, r20
     9be:	55 1f       	adc	r21, r21
     9c0:	22 0f       	add	r18, r18
     9c2:	33 1f       	adc	r19, r19
     9c4:	44 1f       	adc	r20, r20
     9c6:	55 1f       	adc	r21, r21
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	74 e2       	ldi	r23, 0x24	; 36
     9cc:	84 ef       	ldi	r24, 0xF4	; 244
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <__udivmodsi4>
}
     9d4:	c9 01       	movw	r24, r18
     9d6:	01 97       	sbiw	r24, 0x01	; 1
     9d8:	08 95       	ret

000009da <uart_init>:

// uart init function
void uart_init(uint16_t baud)
{	
	uint16_t ubrr = calculateUBRR(baud);
     9da:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <calculateUBRR>
     9de:	9c 01       	movw	r18, r24
	// Enable TX and RX
	UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
     9e0:	e1 ec       	ldi	r30, 0xC1	; 193
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	90 81       	ld	r25, Z
     9e6:	98 61       	ori	r25, 0x18	; 24
     9e8:	90 83       	st	Z, r25
	// set character size to 8-bit
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
     9ea:	e2 ec       	ldi	r30, 0xC2	; 194
     9ec:	f0 e0       	ldi	r31, 0x00	; 0
     9ee:	90 81       	ld	r25, Z
     9f0:	96 60       	ori	r25, 0x06	; 6
     9f2:	90 83       	st	Z, r25
	UCSR0C &= ~(1<<UPM00);
     9f4:	90 81       	ld	r25, Z
     9f6:	9f 7e       	andi	r25, 0xEF	; 239
     9f8:	90 83       	st	Z, r25
	UCSR0C &= ~(1<<UPM01);
     9fa:	90 81       	ld	r25, Z
     9fc:	9f 7d       	andi	r25, 0xDF	; 223
     9fe:	90 83       	st	Z, r25
	// Set the baud rate
	UBRR0 = ubrr;
     a00:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     a04:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     a08:	08 95       	ret

00000a0a <uart_transmit>:

// uart transmit function
void uart_transmit(uint8_t data)
{
	// wait until transmitter is ready
	while ((1<<UDRE0 & UCSR0A) == 0x00) {;} // do nothing
     a0a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     a0e:	95 ff       	sbrs	r25, 5
     a10:	fc cf       	rjmp	.-8      	; 0xa0a <uart_transmit>
	// transmit data
	UDR0 = data;
     a12:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     a16:	08 95       	ret

00000a18 <uart_write>:
}

// uart write function
// write multiple characters at once
void uart_write(char *data) 
{
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	8c 01       	movw	r16, r24
	int i = 0;
     a22:	c0 e0       	ldi	r28, 0x00	; 0
     a24:	d0 e0       	ldi	r29, 0x00	; 0
	while (data[i] != '\0') {
     a26:	03 c0       	rjmp	.+6      	; 0xa2e <uart_write+0x16>
		uart_transmit(data[i]);
     a28:	0e 94 05 05 	call	0xa0a	; 0xa0a <uart_transmit>
		i++;
     a2c:	21 96       	adiw	r28, 0x01	; 1
// uart write function
// write multiple characters at once
void uart_write(char *data) 
{
	int i = 0;
	while (data[i] != '\0') {
     a2e:	f8 01       	movw	r30, r16
     a30:	ec 0f       	add	r30, r28
     a32:	fd 1f       	adc	r31, r29
     a34:	80 81       	ld	r24, Z
     a36:	81 11       	cpse	r24, r1
     a38:	f7 cf       	rjmp	.-18     	; 0xa28 <uart_write+0x10>
		uart_transmit(data[i]);
		i++;
	}
}
     a3a:	df 91       	pop	r29
     a3c:	cf 91       	pop	r28
     a3e:	1f 91       	pop	r17
     a40:	0f 91       	pop	r16
     a42:	08 95       	ret

00000a44 <main>:

// finite state machines
#include "lib/fsm.h"

int main(void) 
{
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
     a4c:	a2 97       	sbiw	r28, 0x22	; 34
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	de bf       	out	0x3e, r29	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	cd bf       	out	0x3d, r28	; 61
	// create function pointer struct
	struct functionPointers funcs = {
     a58:	82 e2       	ldi	r24, 0x22	; 34
     a5a:	e0 e0       	ldi	r30, 0x00	; 0
     a5c:	f1 e0       	ldi	r31, 0x01	; 1
     a5e:	de 01       	movw	r26, r28
     a60:	11 96       	adiw	r26, 0x01	; 1
     a62:	01 90       	ld	r0, Z+
     a64:	0d 92       	st	X+, r0
     a66:	8a 95       	dec	r24
     a68:	e1 f7       	brne	.-8      	; 0xa62 <main+0x1e>
		.calculate_average_power = calculateAveragePower,
	};
	
	
	// init fsm by passing structs to it
	fsmInit(&funcs);
     a6a:	ce 01       	movw	r24, r28
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	0e 94 b9 00 	call	0x172	; 0x172 <fsmInit>
	
	run();
     a72:	0e 94 6d 02 	call	0x4da	; 0x4da <run>
}
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	a2 96       	adiw	r28, 0x22	; 34
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	08 95       	ret

00000a8c <__subsf3>:
     a8c:	50 58       	subi	r21, 0x80	; 128

00000a8e <__addsf3>:
     a8e:	bb 27       	eor	r27, r27
     a90:	aa 27       	eor	r26, r26
     a92:	0e 94 5e 05 	call	0xabc	; 0xabc <__addsf3x>
     a96:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__fp_round>
     a9a:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fp_pscA>
     a9e:	38 f0       	brcs	.+14     	; 0xaae <__addsf3+0x20>
     aa0:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__fp_pscB>
     aa4:	20 f0       	brcs	.+8      	; 0xaae <__addsf3+0x20>
     aa6:	39 f4       	brne	.+14     	; 0xab6 <__addsf3+0x28>
     aa8:	9f 3f       	cpi	r25, 0xFF	; 255
     aaa:	19 f4       	brne	.+6      	; 0xab2 <__addsf3+0x24>
     aac:	26 f4       	brtc	.+8      	; 0xab6 <__addsf3+0x28>
     aae:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__fp_nan>
     ab2:	0e f4       	brtc	.+2      	; 0xab6 <__addsf3+0x28>
     ab4:	e0 95       	com	r30
     ab6:	e7 fb       	bst	r30, 7
     ab8:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_inf>

00000abc <__addsf3x>:
     abc:	e9 2f       	mov	r30, r25
     abe:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__fp_split3>
     ac2:	58 f3       	brcs	.-42     	; 0xa9a <__addsf3+0xc>
     ac4:	ba 17       	cp	r27, r26
     ac6:	62 07       	cpc	r22, r18
     ac8:	73 07       	cpc	r23, r19
     aca:	84 07       	cpc	r24, r20
     acc:	95 07       	cpc	r25, r21
     ace:	20 f0       	brcs	.+8      	; 0xad8 <__addsf3x+0x1c>
     ad0:	79 f4       	brne	.+30     	; 0xaf0 <__addsf3x+0x34>
     ad2:	a6 f5       	brtc	.+104    	; 0xb3c <__addsf3x+0x80>
     ad4:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__fp_zero>
     ad8:	0e f4       	brtc	.+2      	; 0xadc <__addsf3x+0x20>
     ada:	e0 95       	com	r30
     adc:	0b 2e       	mov	r0, r27
     ade:	ba 2f       	mov	r27, r26
     ae0:	a0 2d       	mov	r26, r0
     ae2:	0b 01       	movw	r0, r22
     ae4:	b9 01       	movw	r22, r18
     ae6:	90 01       	movw	r18, r0
     ae8:	0c 01       	movw	r0, r24
     aea:	ca 01       	movw	r24, r20
     aec:	a0 01       	movw	r20, r0
     aee:	11 24       	eor	r1, r1
     af0:	ff 27       	eor	r31, r31
     af2:	59 1b       	sub	r21, r25
     af4:	99 f0       	breq	.+38     	; 0xb1c <__addsf3x+0x60>
     af6:	59 3f       	cpi	r21, 0xF9	; 249
     af8:	50 f4       	brcc	.+20     	; 0xb0e <__addsf3x+0x52>
     afa:	50 3e       	cpi	r21, 0xE0	; 224
     afc:	68 f1       	brcs	.+90     	; 0xb58 <__addsf3x+0x9c>
     afe:	1a 16       	cp	r1, r26
     b00:	f0 40       	sbci	r31, 0x00	; 0
     b02:	a2 2f       	mov	r26, r18
     b04:	23 2f       	mov	r18, r19
     b06:	34 2f       	mov	r19, r20
     b08:	44 27       	eor	r20, r20
     b0a:	58 5f       	subi	r21, 0xF8	; 248
     b0c:	f3 cf       	rjmp	.-26     	; 0xaf4 <__addsf3x+0x38>
     b0e:	46 95       	lsr	r20
     b10:	37 95       	ror	r19
     b12:	27 95       	ror	r18
     b14:	a7 95       	ror	r26
     b16:	f0 40       	sbci	r31, 0x00	; 0
     b18:	53 95       	inc	r21
     b1a:	c9 f7       	brne	.-14     	; 0xb0e <__addsf3x+0x52>
     b1c:	7e f4       	brtc	.+30     	; 0xb3c <__addsf3x+0x80>
     b1e:	1f 16       	cp	r1, r31
     b20:	ba 0b       	sbc	r27, r26
     b22:	62 0b       	sbc	r22, r18
     b24:	73 0b       	sbc	r23, r19
     b26:	84 0b       	sbc	r24, r20
     b28:	ba f0       	brmi	.+46     	; 0xb58 <__addsf3x+0x9c>
     b2a:	91 50       	subi	r25, 0x01	; 1
     b2c:	a1 f0       	breq	.+40     	; 0xb56 <__addsf3x+0x9a>
     b2e:	ff 0f       	add	r31, r31
     b30:	bb 1f       	adc	r27, r27
     b32:	66 1f       	adc	r22, r22
     b34:	77 1f       	adc	r23, r23
     b36:	88 1f       	adc	r24, r24
     b38:	c2 f7       	brpl	.-16     	; 0xb2a <__addsf3x+0x6e>
     b3a:	0e c0       	rjmp	.+28     	; 0xb58 <__addsf3x+0x9c>
     b3c:	ba 0f       	add	r27, r26
     b3e:	62 1f       	adc	r22, r18
     b40:	73 1f       	adc	r23, r19
     b42:	84 1f       	adc	r24, r20
     b44:	48 f4       	brcc	.+18     	; 0xb58 <__addsf3x+0x9c>
     b46:	87 95       	ror	r24
     b48:	77 95       	ror	r23
     b4a:	67 95       	ror	r22
     b4c:	b7 95       	ror	r27
     b4e:	f7 95       	ror	r31
     b50:	9e 3f       	cpi	r25, 0xFE	; 254
     b52:	08 f0       	brcs	.+2      	; 0xb56 <__addsf3x+0x9a>
     b54:	b0 cf       	rjmp	.-160    	; 0xab6 <__addsf3+0x28>
     b56:	93 95       	inc	r25
     b58:	88 0f       	add	r24, r24
     b5a:	08 f0       	brcs	.+2      	; 0xb5e <__addsf3x+0xa2>
     b5c:	99 27       	eor	r25, r25
     b5e:	ee 0f       	add	r30, r30
     b60:	97 95       	ror	r25
     b62:	87 95       	ror	r24
     b64:	08 95       	ret

00000b66 <cos>:
     b66:	0e 94 af 06 	call	0xd5e	; 0xd5e <__fp_rempio2>
     b6a:	e3 95       	inc	r30
     b6c:	0c 94 e9 06 	jmp	0xdd2	; 0xdd2 <__fp_sinus>

00000b70 <__divsf3>:
     b70:	0e 94 cc 05 	call	0xb98	; 0xb98 <__divsf3x>
     b74:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__fp_round>
     b78:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__fp_pscB>
     b7c:	58 f0       	brcs	.+22     	; 0xb94 <__divsf3+0x24>
     b7e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fp_pscA>
     b82:	40 f0       	brcs	.+16     	; 0xb94 <__divsf3+0x24>
     b84:	29 f4       	brne	.+10     	; 0xb90 <__divsf3+0x20>
     b86:	5f 3f       	cpi	r21, 0xFF	; 255
     b88:	29 f0       	breq	.+10     	; 0xb94 <__divsf3+0x24>
     b8a:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_inf>
     b8e:	51 11       	cpse	r21, r1
     b90:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_szero>
     b94:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__fp_nan>

00000b98 <__divsf3x>:
     b98:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__fp_split3>
     b9c:	68 f3       	brcs	.-38     	; 0xb78 <__divsf3+0x8>

00000b9e <__divsf3_pse>:
     b9e:	99 23       	and	r25, r25
     ba0:	b1 f3       	breq	.-20     	; 0xb8e <__divsf3+0x1e>
     ba2:	55 23       	and	r21, r21
     ba4:	91 f3       	breq	.-28     	; 0xb8a <__divsf3+0x1a>
     ba6:	95 1b       	sub	r25, r21
     ba8:	55 0b       	sbc	r21, r21
     baa:	bb 27       	eor	r27, r27
     bac:	aa 27       	eor	r26, r26
     bae:	62 17       	cp	r22, r18
     bb0:	73 07       	cpc	r23, r19
     bb2:	84 07       	cpc	r24, r20
     bb4:	38 f0       	brcs	.+14     	; 0xbc4 <__divsf3_pse+0x26>
     bb6:	9f 5f       	subi	r25, 0xFF	; 255
     bb8:	5f 4f       	sbci	r21, 0xFF	; 255
     bba:	22 0f       	add	r18, r18
     bbc:	33 1f       	adc	r19, r19
     bbe:	44 1f       	adc	r20, r20
     bc0:	aa 1f       	adc	r26, r26
     bc2:	a9 f3       	breq	.-22     	; 0xbae <__divsf3_pse+0x10>
     bc4:	35 d0       	rcall	.+106    	; 0xc30 <__divsf3_pse+0x92>
     bc6:	0e 2e       	mov	r0, r30
     bc8:	3a f0       	brmi	.+14     	; 0xbd8 <__divsf3_pse+0x3a>
     bca:	e0 e8       	ldi	r30, 0x80	; 128
     bcc:	32 d0       	rcall	.+100    	; 0xc32 <__divsf3_pse+0x94>
     bce:	91 50       	subi	r25, 0x01	; 1
     bd0:	50 40       	sbci	r21, 0x00	; 0
     bd2:	e6 95       	lsr	r30
     bd4:	00 1c       	adc	r0, r0
     bd6:	ca f7       	brpl	.-14     	; 0xbca <__divsf3_pse+0x2c>
     bd8:	2b d0       	rcall	.+86     	; 0xc30 <__divsf3_pse+0x92>
     bda:	fe 2f       	mov	r31, r30
     bdc:	29 d0       	rcall	.+82     	; 0xc30 <__divsf3_pse+0x92>
     bde:	66 0f       	add	r22, r22
     be0:	77 1f       	adc	r23, r23
     be2:	88 1f       	adc	r24, r24
     be4:	bb 1f       	adc	r27, r27
     be6:	26 17       	cp	r18, r22
     be8:	37 07       	cpc	r19, r23
     bea:	48 07       	cpc	r20, r24
     bec:	ab 07       	cpc	r26, r27
     bee:	b0 e8       	ldi	r27, 0x80	; 128
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <__divsf3_pse+0x56>
     bf2:	bb 0b       	sbc	r27, r27
     bf4:	80 2d       	mov	r24, r0
     bf6:	bf 01       	movw	r22, r30
     bf8:	ff 27       	eor	r31, r31
     bfa:	93 58       	subi	r25, 0x83	; 131
     bfc:	5f 4f       	sbci	r21, 0xFF	; 255
     bfe:	3a f0       	brmi	.+14     	; 0xc0e <__divsf3_pse+0x70>
     c00:	9e 3f       	cpi	r25, 0xFE	; 254
     c02:	51 05       	cpc	r21, r1
     c04:	78 f0       	brcs	.+30     	; 0xc24 <__divsf3_pse+0x86>
     c06:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_inf>
     c0a:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_szero>
     c0e:	5f 3f       	cpi	r21, 0xFF	; 255
     c10:	e4 f3       	brlt	.-8      	; 0xc0a <__divsf3_pse+0x6c>
     c12:	98 3e       	cpi	r25, 0xE8	; 232
     c14:	d4 f3       	brlt	.-12     	; 0xc0a <__divsf3_pse+0x6c>
     c16:	86 95       	lsr	r24
     c18:	77 95       	ror	r23
     c1a:	67 95       	ror	r22
     c1c:	b7 95       	ror	r27
     c1e:	f7 95       	ror	r31
     c20:	9f 5f       	subi	r25, 0xFF	; 255
     c22:	c9 f7       	brne	.-14     	; 0xc16 <__divsf3_pse+0x78>
     c24:	88 0f       	add	r24, r24
     c26:	91 1d       	adc	r25, r1
     c28:	96 95       	lsr	r25
     c2a:	87 95       	ror	r24
     c2c:	97 f9       	bld	r25, 7
     c2e:	08 95       	ret
     c30:	e1 e0       	ldi	r30, 0x01	; 1
     c32:	66 0f       	add	r22, r22
     c34:	77 1f       	adc	r23, r23
     c36:	88 1f       	adc	r24, r24
     c38:	bb 1f       	adc	r27, r27
     c3a:	62 17       	cp	r22, r18
     c3c:	73 07       	cpc	r23, r19
     c3e:	84 07       	cpc	r24, r20
     c40:	ba 07       	cpc	r27, r26
     c42:	20 f0       	brcs	.+8      	; 0xc4c <__divsf3_pse+0xae>
     c44:	62 1b       	sub	r22, r18
     c46:	73 0b       	sbc	r23, r19
     c48:	84 0b       	sbc	r24, r20
     c4a:	ba 0b       	sbc	r27, r26
     c4c:	ee 1f       	adc	r30, r30
     c4e:	88 f7       	brcc	.-30     	; 0xc32 <__divsf3_pse+0x94>
     c50:	e0 95       	com	r30
     c52:	08 95       	ret

00000c54 <__fixunssfsi>:
     c54:	0e 94 05 07 	call	0xe0a	; 0xe0a <__fp_splitA>
     c58:	88 f0       	brcs	.+34     	; 0xc7c <__fixunssfsi+0x28>
     c5a:	9f 57       	subi	r25, 0x7F	; 127
     c5c:	98 f0       	brcs	.+38     	; 0xc84 <__fixunssfsi+0x30>
     c5e:	b9 2f       	mov	r27, r25
     c60:	99 27       	eor	r25, r25
     c62:	b7 51       	subi	r27, 0x17	; 23
     c64:	b0 f0       	brcs	.+44     	; 0xc92 <__fixunssfsi+0x3e>
     c66:	e1 f0       	breq	.+56     	; 0xca0 <__fixunssfsi+0x4c>
     c68:	66 0f       	add	r22, r22
     c6a:	77 1f       	adc	r23, r23
     c6c:	88 1f       	adc	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	1a f0       	brmi	.+6      	; 0xc78 <__fixunssfsi+0x24>
     c72:	ba 95       	dec	r27
     c74:	c9 f7       	brne	.-14     	; 0xc68 <__fixunssfsi+0x14>
     c76:	14 c0       	rjmp	.+40     	; 0xca0 <__fixunssfsi+0x4c>
     c78:	b1 30       	cpi	r27, 0x01	; 1
     c7a:	91 f0       	breq	.+36     	; 0xca0 <__fixunssfsi+0x4c>
     c7c:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fp_zero>
     c80:	b1 e0       	ldi	r27, 0x01	; 1
     c82:	08 95       	ret
     c84:	0c 94 1f 07 	jmp	0xe3e	; 0xe3e <__fp_zero>
     c88:	67 2f       	mov	r22, r23
     c8a:	78 2f       	mov	r23, r24
     c8c:	88 27       	eor	r24, r24
     c8e:	b8 5f       	subi	r27, 0xF8	; 248
     c90:	39 f0       	breq	.+14     	; 0xca0 <__fixunssfsi+0x4c>
     c92:	b9 3f       	cpi	r27, 0xF9	; 249
     c94:	cc f3       	brlt	.-14     	; 0xc88 <__fixunssfsi+0x34>
     c96:	86 95       	lsr	r24
     c98:	77 95       	ror	r23
     c9a:	67 95       	ror	r22
     c9c:	b3 95       	inc	r27
     c9e:	d9 f7       	brne	.-10     	; 0xc96 <__fixunssfsi+0x42>
     ca0:	3e f4       	brtc	.+14     	; 0xcb0 <__fixunssfsi+0x5c>
     ca2:	90 95       	com	r25
     ca4:	80 95       	com	r24
     ca6:	70 95       	com	r23
     ca8:	61 95       	neg	r22
     caa:	7f 4f       	sbci	r23, 0xFF	; 255
     cac:	8f 4f       	sbci	r24, 0xFF	; 255
     cae:	9f 4f       	sbci	r25, 0xFF	; 255
     cb0:	08 95       	ret

00000cb2 <__floatunsisf>:
     cb2:	e8 94       	clt
     cb4:	09 c0       	rjmp	.+18     	; 0xcc8 <__floatsisf+0x12>

00000cb6 <__floatsisf>:
     cb6:	97 fb       	bst	r25, 7
     cb8:	3e f4       	brtc	.+14     	; 0xcc8 <__floatsisf+0x12>
     cba:	90 95       	com	r25
     cbc:	80 95       	com	r24
     cbe:	70 95       	com	r23
     cc0:	61 95       	neg	r22
     cc2:	7f 4f       	sbci	r23, 0xFF	; 255
     cc4:	8f 4f       	sbci	r24, 0xFF	; 255
     cc6:	9f 4f       	sbci	r25, 0xFF	; 255
     cc8:	99 23       	and	r25, r25
     cca:	a9 f0       	breq	.+42     	; 0xcf6 <__floatsisf+0x40>
     ccc:	f9 2f       	mov	r31, r25
     cce:	96 e9       	ldi	r25, 0x96	; 150
     cd0:	bb 27       	eor	r27, r27
     cd2:	93 95       	inc	r25
     cd4:	f6 95       	lsr	r31
     cd6:	87 95       	ror	r24
     cd8:	77 95       	ror	r23
     cda:	67 95       	ror	r22
     cdc:	b7 95       	ror	r27
     cde:	f1 11       	cpse	r31, r1
     ce0:	f8 cf       	rjmp	.-16     	; 0xcd2 <__floatsisf+0x1c>
     ce2:	fa f4       	brpl	.+62     	; 0xd22 <__floatsisf+0x6c>
     ce4:	bb 0f       	add	r27, r27
     ce6:	11 f4       	brne	.+4      	; 0xcec <__floatsisf+0x36>
     ce8:	60 ff       	sbrs	r22, 0
     cea:	1b c0       	rjmp	.+54     	; 0xd22 <__floatsisf+0x6c>
     cec:	6f 5f       	subi	r22, 0xFF	; 255
     cee:	7f 4f       	sbci	r23, 0xFF	; 255
     cf0:	8f 4f       	sbci	r24, 0xFF	; 255
     cf2:	9f 4f       	sbci	r25, 0xFF	; 255
     cf4:	16 c0       	rjmp	.+44     	; 0xd22 <__floatsisf+0x6c>
     cf6:	88 23       	and	r24, r24
     cf8:	11 f0       	breq	.+4      	; 0xcfe <__floatsisf+0x48>
     cfa:	96 e9       	ldi	r25, 0x96	; 150
     cfc:	11 c0       	rjmp	.+34     	; 0xd20 <__floatsisf+0x6a>
     cfe:	77 23       	and	r23, r23
     d00:	21 f0       	breq	.+8      	; 0xd0a <__floatsisf+0x54>
     d02:	9e e8       	ldi	r25, 0x8E	; 142
     d04:	87 2f       	mov	r24, r23
     d06:	76 2f       	mov	r23, r22
     d08:	05 c0       	rjmp	.+10     	; 0xd14 <__floatsisf+0x5e>
     d0a:	66 23       	and	r22, r22
     d0c:	71 f0       	breq	.+28     	; 0xd2a <__floatsisf+0x74>
     d0e:	96 e8       	ldi	r25, 0x86	; 134
     d10:	86 2f       	mov	r24, r22
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	2a f0       	brmi	.+10     	; 0xd22 <__floatsisf+0x6c>
     d18:	9a 95       	dec	r25
     d1a:	66 0f       	add	r22, r22
     d1c:	77 1f       	adc	r23, r23
     d1e:	88 1f       	adc	r24, r24
     d20:	da f7       	brpl	.-10     	; 0xd18 <__floatsisf+0x62>
     d22:	88 0f       	add	r24, r24
     d24:	96 95       	lsr	r25
     d26:	87 95       	ror	r24
     d28:	97 f9       	bld	r25, 7
     d2a:	08 95       	ret

00000d2c <__fp_inf>:
     d2c:	97 f9       	bld	r25, 7
     d2e:	9f 67       	ori	r25, 0x7F	; 127
     d30:	80 e8       	ldi	r24, 0x80	; 128
     d32:	70 e0       	ldi	r23, 0x00	; 0
     d34:	60 e0       	ldi	r22, 0x00	; 0
     d36:	08 95       	ret

00000d38 <__fp_nan>:
     d38:	9f ef       	ldi	r25, 0xFF	; 255
     d3a:	80 ec       	ldi	r24, 0xC0	; 192
     d3c:	08 95       	ret

00000d3e <__fp_pscA>:
     d3e:	00 24       	eor	r0, r0
     d40:	0a 94       	dec	r0
     d42:	16 16       	cp	r1, r22
     d44:	17 06       	cpc	r1, r23
     d46:	18 06       	cpc	r1, r24
     d48:	09 06       	cpc	r0, r25
     d4a:	08 95       	ret

00000d4c <__fp_pscB>:
     d4c:	00 24       	eor	r0, r0
     d4e:	0a 94       	dec	r0
     d50:	12 16       	cp	r1, r18
     d52:	13 06       	cpc	r1, r19
     d54:	14 06       	cpc	r1, r20
     d56:	05 06       	cpc	r0, r21
     d58:	08 95       	ret
     d5a:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__fp_nan>

00000d5e <__fp_rempio2>:
     d5e:	0e 94 05 07 	call	0xe0a	; 0xe0a <__fp_splitA>
     d62:	d8 f3       	brcs	.-10     	; 0xd5a <__fp_pscB+0xe>
     d64:	e8 94       	clt
     d66:	e0 e0       	ldi	r30, 0x00	; 0
     d68:	bb 27       	eor	r27, r27
     d6a:	9f 57       	subi	r25, 0x7F	; 127
     d6c:	f0 f0       	brcs	.+60     	; 0xdaa <__fp_rempio2+0x4c>
     d6e:	2a ed       	ldi	r18, 0xDA	; 218
     d70:	3f e0       	ldi	r19, 0x0F	; 15
     d72:	49 ec       	ldi	r20, 0xC9	; 201
     d74:	06 c0       	rjmp	.+12     	; 0xd82 <__fp_rempio2+0x24>
     d76:	ee 0f       	add	r30, r30
     d78:	bb 0f       	add	r27, r27
     d7a:	66 1f       	adc	r22, r22
     d7c:	77 1f       	adc	r23, r23
     d7e:	88 1f       	adc	r24, r24
     d80:	28 f0       	brcs	.+10     	; 0xd8c <__fp_rempio2+0x2e>
     d82:	b2 3a       	cpi	r27, 0xA2	; 162
     d84:	62 07       	cpc	r22, r18
     d86:	73 07       	cpc	r23, r19
     d88:	84 07       	cpc	r24, r20
     d8a:	28 f0       	brcs	.+10     	; 0xd96 <__fp_rempio2+0x38>
     d8c:	b2 5a       	subi	r27, 0xA2	; 162
     d8e:	62 0b       	sbc	r22, r18
     d90:	73 0b       	sbc	r23, r19
     d92:	84 0b       	sbc	r24, r20
     d94:	e3 95       	inc	r30
     d96:	9a 95       	dec	r25
     d98:	72 f7       	brpl	.-36     	; 0xd76 <__fp_rempio2+0x18>
     d9a:	80 38       	cpi	r24, 0x80	; 128
     d9c:	30 f4       	brcc	.+12     	; 0xdaa <__fp_rempio2+0x4c>
     d9e:	9a 95       	dec	r25
     da0:	bb 0f       	add	r27, r27
     da2:	66 1f       	adc	r22, r22
     da4:	77 1f       	adc	r23, r23
     da6:	88 1f       	adc	r24, r24
     da8:	d2 f7       	brpl	.-12     	; 0xd9e <__fp_rempio2+0x40>
     daa:	90 48       	sbci	r25, 0x80	; 128
     dac:	0c 94 95 07 	jmp	0xf2a	; 0xf2a <__fp_mpack_finite>

00000db0 <__fp_round>:
     db0:	09 2e       	mov	r0, r25
     db2:	03 94       	inc	r0
     db4:	00 0c       	add	r0, r0
     db6:	11 f4       	brne	.+4      	; 0xdbc <__fp_round+0xc>
     db8:	88 23       	and	r24, r24
     dba:	52 f0       	brmi	.+20     	; 0xdd0 <__fp_round+0x20>
     dbc:	bb 0f       	add	r27, r27
     dbe:	40 f4       	brcc	.+16     	; 0xdd0 <__fp_round+0x20>
     dc0:	bf 2b       	or	r27, r31
     dc2:	11 f4       	brne	.+4      	; 0xdc8 <__fp_round+0x18>
     dc4:	60 ff       	sbrs	r22, 0
     dc6:	04 c0       	rjmp	.+8      	; 0xdd0 <__fp_round+0x20>
     dc8:	6f 5f       	subi	r22, 0xFF	; 255
     dca:	7f 4f       	sbci	r23, 0xFF	; 255
     dcc:	8f 4f       	sbci	r24, 0xFF	; 255
     dce:	9f 4f       	sbci	r25, 0xFF	; 255
     dd0:	08 95       	ret

00000dd2 <__fp_sinus>:
     dd2:	ef 93       	push	r30
     dd4:	e0 ff       	sbrs	r30, 0
     dd6:	07 c0       	rjmp	.+14     	; 0xde6 <__fp_sinus+0x14>
     dd8:	a2 ea       	ldi	r26, 0xA2	; 162
     dda:	2a ed       	ldi	r18, 0xDA	; 218
     ddc:	3f e0       	ldi	r19, 0x0F	; 15
     dde:	49 ec       	ldi	r20, 0xC9	; 201
     de0:	5f eb       	ldi	r21, 0xBF	; 191
     de2:	0e 94 5e 05 	call	0xabc	; 0xabc <__addsf3x>
     de6:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__fp_round>
     dea:	0f 90       	pop	r0
     dec:	03 94       	inc	r0
     dee:	01 fc       	sbrc	r0, 1
     df0:	90 58       	subi	r25, 0x80	; 128
     df2:	e4 eb       	ldi	r30, 0xB4	; 180
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__fp_powsodd>

00000dfa <__fp_split3>:
     dfa:	57 fd       	sbrc	r21, 7
     dfc:	90 58       	subi	r25, 0x80	; 128
     dfe:	44 0f       	add	r20, r20
     e00:	55 1f       	adc	r21, r21
     e02:	59 f0       	breq	.+22     	; 0xe1a <__fp_splitA+0x10>
     e04:	5f 3f       	cpi	r21, 0xFF	; 255
     e06:	71 f0       	breq	.+28     	; 0xe24 <__fp_splitA+0x1a>
     e08:	47 95       	ror	r20

00000e0a <__fp_splitA>:
     e0a:	88 0f       	add	r24, r24
     e0c:	97 fb       	bst	r25, 7
     e0e:	99 1f       	adc	r25, r25
     e10:	61 f0       	breq	.+24     	; 0xe2a <__fp_splitA+0x20>
     e12:	9f 3f       	cpi	r25, 0xFF	; 255
     e14:	79 f0       	breq	.+30     	; 0xe34 <__fp_splitA+0x2a>
     e16:	87 95       	ror	r24
     e18:	08 95       	ret
     e1a:	12 16       	cp	r1, r18
     e1c:	13 06       	cpc	r1, r19
     e1e:	14 06       	cpc	r1, r20
     e20:	55 1f       	adc	r21, r21
     e22:	f2 cf       	rjmp	.-28     	; 0xe08 <__fp_split3+0xe>
     e24:	46 95       	lsr	r20
     e26:	f1 df       	rcall	.-30     	; 0xe0a <__fp_splitA>
     e28:	08 c0       	rjmp	.+16     	; 0xe3a <__fp_splitA+0x30>
     e2a:	16 16       	cp	r1, r22
     e2c:	17 06       	cpc	r1, r23
     e2e:	18 06       	cpc	r1, r24
     e30:	99 1f       	adc	r25, r25
     e32:	f1 cf       	rjmp	.-30     	; 0xe16 <__fp_splitA+0xc>
     e34:	86 95       	lsr	r24
     e36:	71 05       	cpc	r23, r1
     e38:	61 05       	cpc	r22, r1
     e3a:	08 94       	sec
     e3c:	08 95       	ret

00000e3e <__fp_zero>:
     e3e:	e8 94       	clt

00000e40 <__fp_szero>:
     e40:	bb 27       	eor	r27, r27
     e42:	66 27       	eor	r22, r22
     e44:	77 27       	eor	r23, r23
     e46:	cb 01       	movw	r24, r22
     e48:	97 f9       	bld	r25, 7
     e4a:	08 95       	ret

00000e4c <__mulsf3>:
     e4c:	0e 94 39 07 	call	0xe72	; 0xe72 <__mulsf3x>
     e50:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__fp_round>
     e54:	0e 94 9f 06 	call	0xd3e	; 0xd3e <__fp_pscA>
     e58:	38 f0       	brcs	.+14     	; 0xe68 <__mulsf3+0x1c>
     e5a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__fp_pscB>
     e5e:	20 f0       	brcs	.+8      	; 0xe68 <__mulsf3+0x1c>
     e60:	95 23       	and	r25, r21
     e62:	11 f0       	breq	.+4      	; 0xe68 <__mulsf3+0x1c>
     e64:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_inf>
     e68:	0c 94 9c 06 	jmp	0xd38	; 0xd38 <__fp_nan>
     e6c:	11 24       	eor	r1, r1
     e6e:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_szero>

00000e72 <__mulsf3x>:
     e72:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__fp_split3>
     e76:	70 f3       	brcs	.-36     	; 0xe54 <__mulsf3+0x8>

00000e78 <__mulsf3_pse>:
     e78:	95 9f       	mul	r25, r21
     e7a:	c1 f3       	breq	.-16     	; 0xe6c <__mulsf3+0x20>
     e7c:	95 0f       	add	r25, r21
     e7e:	50 e0       	ldi	r21, 0x00	; 0
     e80:	55 1f       	adc	r21, r21
     e82:	62 9f       	mul	r22, r18
     e84:	f0 01       	movw	r30, r0
     e86:	72 9f       	mul	r23, r18
     e88:	bb 27       	eor	r27, r27
     e8a:	f0 0d       	add	r31, r0
     e8c:	b1 1d       	adc	r27, r1
     e8e:	63 9f       	mul	r22, r19
     e90:	aa 27       	eor	r26, r26
     e92:	f0 0d       	add	r31, r0
     e94:	b1 1d       	adc	r27, r1
     e96:	aa 1f       	adc	r26, r26
     e98:	64 9f       	mul	r22, r20
     e9a:	66 27       	eor	r22, r22
     e9c:	b0 0d       	add	r27, r0
     e9e:	a1 1d       	adc	r26, r1
     ea0:	66 1f       	adc	r22, r22
     ea2:	82 9f       	mul	r24, r18
     ea4:	22 27       	eor	r18, r18
     ea6:	b0 0d       	add	r27, r0
     ea8:	a1 1d       	adc	r26, r1
     eaa:	62 1f       	adc	r22, r18
     eac:	73 9f       	mul	r23, r19
     eae:	b0 0d       	add	r27, r0
     eb0:	a1 1d       	adc	r26, r1
     eb2:	62 1f       	adc	r22, r18
     eb4:	83 9f       	mul	r24, r19
     eb6:	a0 0d       	add	r26, r0
     eb8:	61 1d       	adc	r22, r1
     eba:	22 1f       	adc	r18, r18
     ebc:	74 9f       	mul	r23, r20
     ebe:	33 27       	eor	r19, r19
     ec0:	a0 0d       	add	r26, r0
     ec2:	61 1d       	adc	r22, r1
     ec4:	23 1f       	adc	r18, r19
     ec6:	84 9f       	mul	r24, r20
     ec8:	60 0d       	add	r22, r0
     eca:	21 1d       	adc	r18, r1
     ecc:	82 2f       	mov	r24, r18
     ece:	76 2f       	mov	r23, r22
     ed0:	6a 2f       	mov	r22, r26
     ed2:	11 24       	eor	r1, r1
     ed4:	9f 57       	subi	r25, 0x7F	; 127
     ed6:	50 40       	sbci	r21, 0x00	; 0
     ed8:	9a f0       	brmi	.+38     	; 0xf00 <__mulsf3_pse+0x88>
     eda:	f1 f0       	breq	.+60     	; 0xf18 <__mulsf3_pse+0xa0>
     edc:	88 23       	and	r24, r24
     ede:	4a f0       	brmi	.+18     	; 0xef2 <__mulsf3_pse+0x7a>
     ee0:	ee 0f       	add	r30, r30
     ee2:	ff 1f       	adc	r31, r31
     ee4:	bb 1f       	adc	r27, r27
     ee6:	66 1f       	adc	r22, r22
     ee8:	77 1f       	adc	r23, r23
     eea:	88 1f       	adc	r24, r24
     eec:	91 50       	subi	r25, 0x01	; 1
     eee:	50 40       	sbci	r21, 0x00	; 0
     ef0:	a9 f7       	brne	.-22     	; 0xedc <__mulsf3_pse+0x64>
     ef2:	9e 3f       	cpi	r25, 0xFE	; 254
     ef4:	51 05       	cpc	r21, r1
     ef6:	80 f0       	brcs	.+32     	; 0xf18 <__mulsf3_pse+0xa0>
     ef8:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_inf>
     efc:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__fp_szero>
     f00:	5f 3f       	cpi	r21, 0xFF	; 255
     f02:	e4 f3       	brlt	.-8      	; 0xefc <__mulsf3_pse+0x84>
     f04:	98 3e       	cpi	r25, 0xE8	; 232
     f06:	d4 f3       	brlt	.-12     	; 0xefc <__mulsf3_pse+0x84>
     f08:	86 95       	lsr	r24
     f0a:	77 95       	ror	r23
     f0c:	67 95       	ror	r22
     f0e:	b7 95       	ror	r27
     f10:	f7 95       	ror	r31
     f12:	e7 95       	ror	r30
     f14:	9f 5f       	subi	r25, 0xFF	; 255
     f16:	c1 f7       	brne	.-16     	; 0xf08 <__mulsf3_pse+0x90>
     f18:	fe 2b       	or	r31, r30
     f1a:	88 0f       	add	r24, r24
     f1c:	91 1d       	adc	r25, r1
     f1e:	96 95       	lsr	r25
     f20:	87 95       	ror	r24
     f22:	97 f9       	bld	r25, 7
     f24:	08 95       	ret

00000f26 <__fp_mpack>:
     f26:	9f 3f       	cpi	r25, 0xFF	; 255
     f28:	31 f0       	breq	.+12     	; 0xf36 <__fp_mpack_finite+0xc>

00000f2a <__fp_mpack_finite>:
     f2a:	91 50       	subi	r25, 0x01	; 1
     f2c:	20 f4       	brcc	.+8      	; 0xf36 <__fp_mpack_finite+0xc>
     f2e:	87 95       	ror	r24
     f30:	77 95       	ror	r23
     f32:	67 95       	ror	r22
     f34:	b7 95       	ror	r27
     f36:	88 0f       	add	r24, r24
     f38:	91 1d       	adc	r25, r1
     f3a:	96 95       	lsr	r25
     f3c:	87 95       	ror	r24
     f3e:	97 f9       	bld	r25, 7
     f40:	08 95       	ret

00000f42 <__fp_powser>:
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	1f 93       	push	r17
     f48:	0f 93       	push	r16
     f4a:	ff 92       	push	r15
     f4c:	ef 92       	push	r14
     f4e:	df 92       	push	r13
     f50:	7b 01       	movw	r14, r22
     f52:	8c 01       	movw	r16, r24
     f54:	68 94       	set
     f56:	06 c0       	rjmp	.+12     	; 0xf64 <__fp_powser+0x22>
     f58:	da 2e       	mov	r13, r26
     f5a:	ef 01       	movw	r28, r30
     f5c:	0e 94 39 07 	call	0xe72	; 0xe72 <__mulsf3x>
     f60:	fe 01       	movw	r30, r28
     f62:	e8 94       	clt
     f64:	a5 91       	lpm	r26, Z+
     f66:	25 91       	lpm	r18, Z+
     f68:	35 91       	lpm	r19, Z+
     f6a:	45 91       	lpm	r20, Z+
     f6c:	55 91       	lpm	r21, Z+
     f6e:	a6 f3       	brts	.-24     	; 0xf58 <__fp_powser+0x16>
     f70:	ef 01       	movw	r28, r30
     f72:	0e 94 5e 05 	call	0xabc	; 0xabc <__addsf3x>
     f76:	fe 01       	movw	r30, r28
     f78:	97 01       	movw	r18, r14
     f7a:	a8 01       	movw	r20, r16
     f7c:	da 94       	dec	r13
     f7e:	69 f7       	brne	.-38     	; 0xf5a <__fp_powser+0x18>
     f80:	df 90       	pop	r13
     f82:	ef 90       	pop	r14
     f84:	ff 90       	pop	r15
     f86:	0f 91       	pop	r16
     f88:	1f 91       	pop	r17
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <__fp_powsodd>:
     f90:	9f 93       	push	r25
     f92:	8f 93       	push	r24
     f94:	7f 93       	push	r23
     f96:	6f 93       	push	r22
     f98:	ff 93       	push	r31
     f9a:	ef 93       	push	r30
     f9c:	9b 01       	movw	r18, r22
     f9e:	ac 01       	movw	r20, r24
     fa0:	0e 94 26 07 	call	0xe4c	; 0xe4c <__mulsf3>
     fa4:	ef 91       	pop	r30
     fa6:	ff 91       	pop	r31
     fa8:	0e 94 a1 07 	call	0xf42	; 0xf42 <__fp_powser>
     fac:	2f 91       	pop	r18
     fae:	3f 91       	pop	r19
     fb0:	4f 91       	pop	r20
     fb2:	5f 91       	pop	r21
     fb4:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__mulsf3>

00000fb8 <__udivmodhi4>:
     fb8:	aa 1b       	sub	r26, r26
     fba:	bb 1b       	sub	r27, r27
     fbc:	51 e1       	ldi	r21, 0x11	; 17
     fbe:	07 c0       	rjmp	.+14     	; 0xfce <__udivmodhi4_ep>

00000fc0 <__udivmodhi4_loop>:
     fc0:	aa 1f       	adc	r26, r26
     fc2:	bb 1f       	adc	r27, r27
     fc4:	a6 17       	cp	r26, r22
     fc6:	b7 07       	cpc	r27, r23
     fc8:	10 f0       	brcs	.+4      	; 0xfce <__udivmodhi4_ep>
     fca:	a6 1b       	sub	r26, r22
     fcc:	b7 0b       	sbc	r27, r23

00000fce <__udivmodhi4_ep>:
     fce:	88 1f       	adc	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	5a 95       	dec	r21
     fd4:	a9 f7       	brne	.-22     	; 0xfc0 <__udivmodhi4_loop>
     fd6:	80 95       	com	r24
     fd8:	90 95       	com	r25
     fda:	bc 01       	movw	r22, r24
     fdc:	cd 01       	movw	r24, r26
     fde:	08 95       	ret

00000fe0 <__udivmodsi4>:
     fe0:	a1 e2       	ldi	r26, 0x21	; 33
     fe2:	1a 2e       	mov	r1, r26
     fe4:	aa 1b       	sub	r26, r26
     fe6:	bb 1b       	sub	r27, r27
     fe8:	fd 01       	movw	r30, r26
     fea:	0d c0       	rjmp	.+26     	; 0x1006 <__udivmodsi4_ep>

00000fec <__udivmodsi4_loop>:
     fec:	aa 1f       	adc	r26, r26
     fee:	bb 1f       	adc	r27, r27
     ff0:	ee 1f       	adc	r30, r30
     ff2:	ff 1f       	adc	r31, r31
     ff4:	a2 17       	cp	r26, r18
     ff6:	b3 07       	cpc	r27, r19
     ff8:	e4 07       	cpc	r30, r20
     ffa:	f5 07       	cpc	r31, r21
     ffc:	20 f0       	brcs	.+8      	; 0x1006 <__udivmodsi4_ep>
     ffe:	a2 1b       	sub	r26, r18
    1000:	b3 0b       	sbc	r27, r19
    1002:	e4 0b       	sbc	r30, r20
    1004:	f5 0b       	sbc	r31, r21

00001006 <__udivmodsi4_ep>:
    1006:	66 1f       	adc	r22, r22
    1008:	77 1f       	adc	r23, r23
    100a:	88 1f       	adc	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	1a 94       	dec	r1
    1010:	69 f7       	brne	.-38     	; 0xfec <__udivmodsi4_loop>
    1012:	60 95       	com	r22
    1014:	70 95       	com	r23
    1016:	80 95       	com	r24
    1018:	90 95       	com	r25
    101a:	9b 01       	movw	r18, r22
    101c:	ac 01       	movw	r20, r24
    101e:	bd 01       	movw	r22, r26
    1020:	cf 01       	movw	r24, r30
    1022:	08 95       	ret

00001024 <__umulhisi3>:
    1024:	a2 9f       	mul	r26, r18
    1026:	b0 01       	movw	r22, r0
    1028:	b3 9f       	mul	r27, r19
    102a:	c0 01       	movw	r24, r0
    102c:	a3 9f       	mul	r26, r19
    102e:	70 0d       	add	r23, r0
    1030:	81 1d       	adc	r24, r1
    1032:	11 24       	eor	r1, r1
    1034:	91 1d       	adc	r25, r1
    1036:	b2 9f       	mul	r27, r18
    1038:	70 0d       	add	r23, r0
    103a:	81 1d       	adc	r24, r1
    103c:	11 24       	eor	r1, r1
    103e:	91 1d       	adc	r25, r1
    1040:	08 95       	ret

00001042 <sprintf>:
    1042:	ae e0       	ldi	r26, 0x0E	; 14
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e7 e2       	ldi	r30, 0x27	; 39
    1048:	f8 e0       	ldi	r31, 0x08	; 8
    104a:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <__prologue_saves__+0x1c>
    104e:	0d 89       	ldd	r16, Y+21	; 0x15
    1050:	1e 89       	ldd	r17, Y+22	; 0x16
    1052:	86 e0       	ldi	r24, 0x06	; 6
    1054:	8c 83       	std	Y+4, r24	; 0x04
    1056:	1a 83       	std	Y+2, r17	; 0x02
    1058:	09 83       	std	Y+1, r16	; 0x01
    105a:	8f ef       	ldi	r24, 0xFF	; 255
    105c:	9f e7       	ldi	r25, 0x7F	; 127
    105e:	9e 83       	std	Y+6, r25	; 0x06
    1060:	8d 83       	std	Y+5, r24	; 0x05
    1062:	ae 01       	movw	r20, r28
    1064:	47 5e       	subi	r20, 0xE7	; 231
    1066:	5f 4f       	sbci	r21, 0xFF	; 255
    1068:	6f 89       	ldd	r22, Y+23	; 0x17
    106a:	78 8d       	ldd	r23, Y+24	; 0x18
    106c:	ce 01       	movw	r24, r28
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	0e 94 43 08 	call	0x1086	; 0x1086 <vfprintf>
    1074:	ef 81       	ldd	r30, Y+7	; 0x07
    1076:	f8 85       	ldd	r31, Y+8	; 0x08
    1078:	e0 0f       	add	r30, r16
    107a:	f1 1f       	adc	r31, r17
    107c:	10 82       	st	Z, r1
    107e:	2e 96       	adiw	r28, 0x0e	; 14
    1080:	e4 e0       	ldi	r30, 0x04	; 4
    1082:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__epilogue_restores__+0x1c>

00001086 <vfprintf>:
    1086:	ab e0       	ldi	r26, 0x0B	; 11
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e9 e4       	ldi	r30, 0x49	; 73
    108c:	f8 e0       	ldi	r31, 0x08	; 8
    108e:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__prologue_saves__>
    1092:	6c 01       	movw	r12, r24
    1094:	7b 01       	movw	r14, r22
    1096:	8a 01       	movw	r16, r20
    1098:	fc 01       	movw	r30, r24
    109a:	17 82       	std	Z+7, r1	; 0x07
    109c:	16 82       	std	Z+6, r1	; 0x06
    109e:	83 81       	ldd	r24, Z+3	; 0x03
    10a0:	81 ff       	sbrs	r24, 1
    10a2:	cc c1       	rjmp	.+920    	; 0x143c <vfprintf+0x3b6>
    10a4:	ce 01       	movw	r24, r28
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	3c 01       	movw	r6, r24
    10aa:	f6 01       	movw	r30, r12
    10ac:	93 81       	ldd	r25, Z+3	; 0x03
    10ae:	f7 01       	movw	r30, r14
    10b0:	93 fd       	sbrc	r25, 3
    10b2:	85 91       	lpm	r24, Z+
    10b4:	93 ff       	sbrs	r25, 3
    10b6:	81 91       	ld	r24, Z+
    10b8:	7f 01       	movw	r14, r30
    10ba:	88 23       	and	r24, r24
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <vfprintf+0x3a>
    10be:	ba c1       	rjmp	.+884    	; 0x1434 <vfprintf+0x3ae>
    10c0:	85 32       	cpi	r24, 0x25	; 37
    10c2:	39 f4       	brne	.+14     	; 0x10d2 <vfprintf+0x4c>
    10c4:	93 fd       	sbrc	r25, 3
    10c6:	85 91       	lpm	r24, Z+
    10c8:	93 ff       	sbrs	r25, 3
    10ca:	81 91       	ld	r24, Z+
    10cc:	7f 01       	movw	r14, r30
    10ce:	85 32       	cpi	r24, 0x25	; 37
    10d0:	29 f4       	brne	.+10     	; 0x10dc <vfprintf+0x56>
    10d2:	b6 01       	movw	r22, r12
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 3a 0a 	call	0x1474	; 0x1474 <fputc>
    10da:	e7 cf       	rjmp	.-50     	; 0x10aa <vfprintf+0x24>
    10dc:	91 2c       	mov	r9, r1
    10de:	21 2c       	mov	r2, r1
    10e0:	31 2c       	mov	r3, r1
    10e2:	ff e1       	ldi	r31, 0x1F	; 31
    10e4:	f3 15       	cp	r31, r3
    10e6:	d8 f0       	brcs	.+54     	; 0x111e <vfprintf+0x98>
    10e8:	8b 32       	cpi	r24, 0x2B	; 43
    10ea:	79 f0       	breq	.+30     	; 0x110a <vfprintf+0x84>
    10ec:	38 f4       	brcc	.+14     	; 0x10fc <vfprintf+0x76>
    10ee:	80 32       	cpi	r24, 0x20	; 32
    10f0:	79 f0       	breq	.+30     	; 0x1110 <vfprintf+0x8a>
    10f2:	83 32       	cpi	r24, 0x23	; 35
    10f4:	a1 f4       	brne	.+40     	; 0x111e <vfprintf+0x98>
    10f6:	23 2d       	mov	r18, r3
    10f8:	20 61       	ori	r18, 0x10	; 16
    10fa:	1d c0       	rjmp	.+58     	; 0x1136 <vfprintf+0xb0>
    10fc:	8d 32       	cpi	r24, 0x2D	; 45
    10fe:	61 f0       	breq	.+24     	; 0x1118 <vfprintf+0x92>
    1100:	80 33       	cpi	r24, 0x30	; 48
    1102:	69 f4       	brne	.+26     	; 0x111e <vfprintf+0x98>
    1104:	23 2d       	mov	r18, r3
    1106:	21 60       	ori	r18, 0x01	; 1
    1108:	16 c0       	rjmp	.+44     	; 0x1136 <vfprintf+0xb0>
    110a:	83 2d       	mov	r24, r3
    110c:	82 60       	ori	r24, 0x02	; 2
    110e:	38 2e       	mov	r3, r24
    1110:	e3 2d       	mov	r30, r3
    1112:	e4 60       	ori	r30, 0x04	; 4
    1114:	3e 2e       	mov	r3, r30
    1116:	2a c0       	rjmp	.+84     	; 0x116c <vfprintf+0xe6>
    1118:	f3 2d       	mov	r31, r3
    111a:	f8 60       	ori	r31, 0x08	; 8
    111c:	1d c0       	rjmp	.+58     	; 0x1158 <vfprintf+0xd2>
    111e:	37 fc       	sbrc	r3, 7
    1120:	2d c0       	rjmp	.+90     	; 0x117c <vfprintf+0xf6>
    1122:	20 ed       	ldi	r18, 0xD0	; 208
    1124:	28 0f       	add	r18, r24
    1126:	2a 30       	cpi	r18, 0x0A	; 10
    1128:	40 f0       	brcs	.+16     	; 0x113a <vfprintf+0xb4>
    112a:	8e 32       	cpi	r24, 0x2E	; 46
    112c:	b9 f4       	brne	.+46     	; 0x115c <vfprintf+0xd6>
    112e:	36 fc       	sbrc	r3, 6
    1130:	81 c1       	rjmp	.+770    	; 0x1434 <vfprintf+0x3ae>
    1132:	23 2d       	mov	r18, r3
    1134:	20 64       	ori	r18, 0x40	; 64
    1136:	32 2e       	mov	r3, r18
    1138:	19 c0       	rjmp	.+50     	; 0x116c <vfprintf+0xe6>
    113a:	36 fe       	sbrs	r3, 6
    113c:	06 c0       	rjmp	.+12     	; 0x114a <vfprintf+0xc4>
    113e:	8a e0       	ldi	r24, 0x0A	; 10
    1140:	98 9e       	mul	r9, r24
    1142:	20 0d       	add	r18, r0
    1144:	11 24       	eor	r1, r1
    1146:	92 2e       	mov	r9, r18
    1148:	11 c0       	rjmp	.+34     	; 0x116c <vfprintf+0xe6>
    114a:	ea e0       	ldi	r30, 0x0A	; 10
    114c:	2e 9e       	mul	r2, r30
    114e:	20 0d       	add	r18, r0
    1150:	11 24       	eor	r1, r1
    1152:	22 2e       	mov	r2, r18
    1154:	f3 2d       	mov	r31, r3
    1156:	f0 62       	ori	r31, 0x20	; 32
    1158:	3f 2e       	mov	r3, r31
    115a:	08 c0       	rjmp	.+16     	; 0x116c <vfprintf+0xe6>
    115c:	8c 36       	cpi	r24, 0x6C	; 108
    115e:	21 f4       	brne	.+8      	; 0x1168 <vfprintf+0xe2>
    1160:	83 2d       	mov	r24, r3
    1162:	80 68       	ori	r24, 0x80	; 128
    1164:	38 2e       	mov	r3, r24
    1166:	02 c0       	rjmp	.+4      	; 0x116c <vfprintf+0xe6>
    1168:	88 36       	cpi	r24, 0x68	; 104
    116a:	41 f4       	brne	.+16     	; 0x117c <vfprintf+0xf6>
    116c:	f7 01       	movw	r30, r14
    116e:	93 fd       	sbrc	r25, 3
    1170:	85 91       	lpm	r24, Z+
    1172:	93 ff       	sbrs	r25, 3
    1174:	81 91       	ld	r24, Z+
    1176:	7f 01       	movw	r14, r30
    1178:	81 11       	cpse	r24, r1
    117a:	b3 cf       	rjmp	.-154    	; 0x10e2 <vfprintf+0x5c>
    117c:	98 2f       	mov	r25, r24
    117e:	9f 7d       	andi	r25, 0xDF	; 223
    1180:	95 54       	subi	r25, 0x45	; 69
    1182:	93 30       	cpi	r25, 0x03	; 3
    1184:	28 f4       	brcc	.+10     	; 0x1190 <vfprintf+0x10a>
    1186:	0c 5f       	subi	r16, 0xFC	; 252
    1188:	1f 4f       	sbci	r17, 0xFF	; 255
    118a:	9f e3       	ldi	r25, 0x3F	; 63
    118c:	99 83       	std	Y+1, r25	; 0x01
    118e:	0d c0       	rjmp	.+26     	; 0x11aa <vfprintf+0x124>
    1190:	83 36       	cpi	r24, 0x63	; 99
    1192:	31 f0       	breq	.+12     	; 0x11a0 <vfprintf+0x11a>
    1194:	83 37       	cpi	r24, 0x73	; 115
    1196:	71 f0       	breq	.+28     	; 0x11b4 <vfprintf+0x12e>
    1198:	83 35       	cpi	r24, 0x53	; 83
    119a:	09 f0       	breq	.+2      	; 0x119e <vfprintf+0x118>
    119c:	59 c0       	rjmp	.+178    	; 0x1250 <vfprintf+0x1ca>
    119e:	21 c0       	rjmp	.+66     	; 0x11e2 <vfprintf+0x15c>
    11a0:	f8 01       	movw	r30, r16
    11a2:	80 81       	ld	r24, Z
    11a4:	89 83       	std	Y+1, r24	; 0x01
    11a6:	0e 5f       	subi	r16, 0xFE	; 254
    11a8:	1f 4f       	sbci	r17, 0xFF	; 255
    11aa:	88 24       	eor	r8, r8
    11ac:	83 94       	inc	r8
    11ae:	91 2c       	mov	r9, r1
    11b0:	53 01       	movw	r10, r6
    11b2:	13 c0       	rjmp	.+38     	; 0x11da <vfprintf+0x154>
    11b4:	28 01       	movw	r4, r16
    11b6:	f2 e0       	ldi	r31, 0x02	; 2
    11b8:	4f 0e       	add	r4, r31
    11ba:	51 1c       	adc	r5, r1
    11bc:	f8 01       	movw	r30, r16
    11be:	a0 80       	ld	r10, Z
    11c0:	b1 80       	ldd	r11, Z+1	; 0x01
    11c2:	36 fe       	sbrs	r3, 6
    11c4:	03 c0       	rjmp	.+6      	; 0x11cc <vfprintf+0x146>
    11c6:	69 2d       	mov	r22, r9
    11c8:	70 e0       	ldi	r23, 0x00	; 0
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <vfprintf+0x14a>
    11cc:	6f ef       	ldi	r22, 0xFF	; 255
    11ce:	7f ef       	ldi	r23, 0xFF	; 255
    11d0:	c5 01       	movw	r24, r10
    11d2:	0e 94 2f 0a 	call	0x145e	; 0x145e <strnlen>
    11d6:	4c 01       	movw	r8, r24
    11d8:	82 01       	movw	r16, r4
    11da:	f3 2d       	mov	r31, r3
    11dc:	ff 77       	andi	r31, 0x7F	; 127
    11de:	3f 2e       	mov	r3, r31
    11e0:	16 c0       	rjmp	.+44     	; 0x120e <vfprintf+0x188>
    11e2:	28 01       	movw	r4, r16
    11e4:	22 e0       	ldi	r18, 0x02	; 2
    11e6:	42 0e       	add	r4, r18
    11e8:	51 1c       	adc	r5, r1
    11ea:	f8 01       	movw	r30, r16
    11ec:	a0 80       	ld	r10, Z
    11ee:	b1 80       	ldd	r11, Z+1	; 0x01
    11f0:	36 fe       	sbrs	r3, 6
    11f2:	03 c0       	rjmp	.+6      	; 0x11fa <vfprintf+0x174>
    11f4:	69 2d       	mov	r22, r9
    11f6:	70 e0       	ldi	r23, 0x00	; 0
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <vfprintf+0x178>
    11fa:	6f ef       	ldi	r22, 0xFF	; 255
    11fc:	7f ef       	ldi	r23, 0xFF	; 255
    11fe:	c5 01       	movw	r24, r10
    1200:	0e 94 24 0a 	call	0x1448	; 0x1448 <strnlen_P>
    1204:	4c 01       	movw	r8, r24
    1206:	f3 2d       	mov	r31, r3
    1208:	f0 68       	ori	r31, 0x80	; 128
    120a:	3f 2e       	mov	r3, r31
    120c:	82 01       	movw	r16, r4
    120e:	33 fc       	sbrc	r3, 3
    1210:	1b c0       	rjmp	.+54     	; 0x1248 <vfprintf+0x1c2>
    1212:	82 2d       	mov	r24, r2
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	88 16       	cp	r8, r24
    1218:	99 06       	cpc	r9, r25
    121a:	b0 f4       	brcc	.+44     	; 0x1248 <vfprintf+0x1c2>
    121c:	b6 01       	movw	r22, r12
    121e:	80 e2       	ldi	r24, 0x20	; 32
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0e 94 3a 0a 	call	0x1474	; 0x1474 <fputc>
    1226:	2a 94       	dec	r2
    1228:	f4 cf       	rjmp	.-24     	; 0x1212 <vfprintf+0x18c>
    122a:	f5 01       	movw	r30, r10
    122c:	37 fc       	sbrc	r3, 7
    122e:	85 91       	lpm	r24, Z+
    1230:	37 fe       	sbrs	r3, 7
    1232:	81 91       	ld	r24, Z+
    1234:	5f 01       	movw	r10, r30
    1236:	b6 01       	movw	r22, r12
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <fputc>
    123e:	21 10       	cpse	r2, r1
    1240:	2a 94       	dec	r2
    1242:	21 e0       	ldi	r18, 0x01	; 1
    1244:	82 1a       	sub	r8, r18
    1246:	91 08       	sbc	r9, r1
    1248:	81 14       	cp	r8, r1
    124a:	91 04       	cpc	r9, r1
    124c:	71 f7       	brne	.-36     	; 0x122a <vfprintf+0x1a4>
    124e:	e8 c0       	rjmp	.+464    	; 0x1420 <vfprintf+0x39a>
    1250:	84 36       	cpi	r24, 0x64	; 100
    1252:	11 f0       	breq	.+4      	; 0x1258 <vfprintf+0x1d2>
    1254:	89 36       	cpi	r24, 0x69	; 105
    1256:	41 f5       	brne	.+80     	; 0x12a8 <vfprintf+0x222>
    1258:	f8 01       	movw	r30, r16
    125a:	37 fe       	sbrs	r3, 7
    125c:	07 c0       	rjmp	.+14     	; 0x126c <vfprintf+0x1e6>
    125e:	60 81       	ld	r22, Z
    1260:	71 81       	ldd	r23, Z+1	; 0x01
    1262:	82 81       	ldd	r24, Z+2	; 0x02
    1264:	93 81       	ldd	r25, Z+3	; 0x03
    1266:	0c 5f       	subi	r16, 0xFC	; 252
    1268:	1f 4f       	sbci	r17, 0xFF	; 255
    126a:	08 c0       	rjmp	.+16     	; 0x127c <vfprintf+0x1f6>
    126c:	60 81       	ld	r22, Z
    126e:	71 81       	ldd	r23, Z+1	; 0x01
    1270:	07 2e       	mov	r0, r23
    1272:	00 0c       	add	r0, r0
    1274:	88 0b       	sbc	r24, r24
    1276:	99 0b       	sbc	r25, r25
    1278:	0e 5f       	subi	r16, 0xFE	; 254
    127a:	1f 4f       	sbci	r17, 0xFF	; 255
    127c:	f3 2d       	mov	r31, r3
    127e:	ff 76       	andi	r31, 0x6F	; 111
    1280:	3f 2e       	mov	r3, r31
    1282:	97 ff       	sbrs	r25, 7
    1284:	09 c0       	rjmp	.+18     	; 0x1298 <vfprintf+0x212>
    1286:	90 95       	com	r25
    1288:	80 95       	com	r24
    128a:	70 95       	com	r23
    128c:	61 95       	neg	r22
    128e:	7f 4f       	sbci	r23, 0xFF	; 255
    1290:	8f 4f       	sbci	r24, 0xFF	; 255
    1292:	9f 4f       	sbci	r25, 0xFF	; 255
    1294:	f0 68       	ori	r31, 0x80	; 128
    1296:	3f 2e       	mov	r3, r31
    1298:	2a e0       	ldi	r18, 0x0A	; 10
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	a3 01       	movw	r20, r6
    129e:	0e 94 76 0a 	call	0x14ec	; 0x14ec <__ultoa_invert>
    12a2:	88 2e       	mov	r8, r24
    12a4:	86 18       	sub	r8, r6
    12a6:	45 c0       	rjmp	.+138    	; 0x1332 <vfprintf+0x2ac>
    12a8:	85 37       	cpi	r24, 0x75	; 117
    12aa:	31 f4       	brne	.+12     	; 0x12b8 <vfprintf+0x232>
    12ac:	23 2d       	mov	r18, r3
    12ae:	2f 7e       	andi	r18, 0xEF	; 239
    12b0:	b2 2e       	mov	r11, r18
    12b2:	2a e0       	ldi	r18, 0x0A	; 10
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	25 c0       	rjmp	.+74     	; 0x1302 <vfprintf+0x27c>
    12b8:	93 2d       	mov	r25, r3
    12ba:	99 7f       	andi	r25, 0xF9	; 249
    12bc:	b9 2e       	mov	r11, r25
    12be:	8f 36       	cpi	r24, 0x6F	; 111
    12c0:	c1 f0       	breq	.+48     	; 0x12f2 <vfprintf+0x26c>
    12c2:	18 f4       	brcc	.+6      	; 0x12ca <vfprintf+0x244>
    12c4:	88 35       	cpi	r24, 0x58	; 88
    12c6:	79 f0       	breq	.+30     	; 0x12e6 <vfprintf+0x260>
    12c8:	b5 c0       	rjmp	.+362    	; 0x1434 <vfprintf+0x3ae>
    12ca:	80 37       	cpi	r24, 0x70	; 112
    12cc:	19 f0       	breq	.+6      	; 0x12d4 <vfprintf+0x24e>
    12ce:	88 37       	cpi	r24, 0x78	; 120
    12d0:	21 f0       	breq	.+8      	; 0x12da <vfprintf+0x254>
    12d2:	b0 c0       	rjmp	.+352    	; 0x1434 <vfprintf+0x3ae>
    12d4:	e9 2f       	mov	r30, r25
    12d6:	e0 61       	ori	r30, 0x10	; 16
    12d8:	be 2e       	mov	r11, r30
    12da:	b4 fe       	sbrs	r11, 4
    12dc:	0d c0       	rjmp	.+26     	; 0x12f8 <vfprintf+0x272>
    12de:	fb 2d       	mov	r31, r11
    12e0:	f4 60       	ori	r31, 0x04	; 4
    12e2:	bf 2e       	mov	r11, r31
    12e4:	09 c0       	rjmp	.+18     	; 0x12f8 <vfprintf+0x272>
    12e6:	34 fe       	sbrs	r3, 4
    12e8:	0a c0       	rjmp	.+20     	; 0x12fe <vfprintf+0x278>
    12ea:	29 2f       	mov	r18, r25
    12ec:	26 60       	ori	r18, 0x06	; 6
    12ee:	b2 2e       	mov	r11, r18
    12f0:	06 c0       	rjmp	.+12     	; 0x12fe <vfprintf+0x278>
    12f2:	28 e0       	ldi	r18, 0x08	; 8
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	05 c0       	rjmp	.+10     	; 0x1302 <vfprintf+0x27c>
    12f8:	20 e1       	ldi	r18, 0x10	; 16
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <vfprintf+0x27c>
    12fe:	20 e1       	ldi	r18, 0x10	; 16
    1300:	32 e0       	ldi	r19, 0x02	; 2
    1302:	f8 01       	movw	r30, r16
    1304:	b7 fe       	sbrs	r11, 7
    1306:	07 c0       	rjmp	.+14     	; 0x1316 <vfprintf+0x290>
    1308:	60 81       	ld	r22, Z
    130a:	71 81       	ldd	r23, Z+1	; 0x01
    130c:	82 81       	ldd	r24, Z+2	; 0x02
    130e:	93 81       	ldd	r25, Z+3	; 0x03
    1310:	0c 5f       	subi	r16, 0xFC	; 252
    1312:	1f 4f       	sbci	r17, 0xFF	; 255
    1314:	06 c0       	rjmp	.+12     	; 0x1322 <vfprintf+0x29c>
    1316:	60 81       	ld	r22, Z
    1318:	71 81       	ldd	r23, Z+1	; 0x01
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	0e 5f       	subi	r16, 0xFE	; 254
    1320:	1f 4f       	sbci	r17, 0xFF	; 255
    1322:	a3 01       	movw	r20, r6
    1324:	0e 94 76 0a 	call	0x14ec	; 0x14ec <__ultoa_invert>
    1328:	88 2e       	mov	r8, r24
    132a:	86 18       	sub	r8, r6
    132c:	fb 2d       	mov	r31, r11
    132e:	ff 77       	andi	r31, 0x7F	; 127
    1330:	3f 2e       	mov	r3, r31
    1332:	36 fe       	sbrs	r3, 6
    1334:	0d c0       	rjmp	.+26     	; 0x1350 <vfprintf+0x2ca>
    1336:	23 2d       	mov	r18, r3
    1338:	2e 7f       	andi	r18, 0xFE	; 254
    133a:	a2 2e       	mov	r10, r18
    133c:	89 14       	cp	r8, r9
    133e:	58 f4       	brcc	.+22     	; 0x1356 <vfprintf+0x2d0>
    1340:	34 fe       	sbrs	r3, 4
    1342:	0b c0       	rjmp	.+22     	; 0x135a <vfprintf+0x2d4>
    1344:	32 fc       	sbrc	r3, 2
    1346:	09 c0       	rjmp	.+18     	; 0x135a <vfprintf+0x2d4>
    1348:	83 2d       	mov	r24, r3
    134a:	8e 7e       	andi	r24, 0xEE	; 238
    134c:	a8 2e       	mov	r10, r24
    134e:	05 c0       	rjmp	.+10     	; 0x135a <vfprintf+0x2d4>
    1350:	b8 2c       	mov	r11, r8
    1352:	a3 2c       	mov	r10, r3
    1354:	03 c0       	rjmp	.+6      	; 0x135c <vfprintf+0x2d6>
    1356:	b8 2c       	mov	r11, r8
    1358:	01 c0       	rjmp	.+2      	; 0x135c <vfprintf+0x2d6>
    135a:	b9 2c       	mov	r11, r9
    135c:	a4 fe       	sbrs	r10, 4
    135e:	0f c0       	rjmp	.+30     	; 0x137e <vfprintf+0x2f8>
    1360:	fe 01       	movw	r30, r28
    1362:	e8 0d       	add	r30, r8
    1364:	f1 1d       	adc	r31, r1
    1366:	80 81       	ld	r24, Z
    1368:	80 33       	cpi	r24, 0x30	; 48
    136a:	21 f4       	brne	.+8      	; 0x1374 <vfprintf+0x2ee>
    136c:	9a 2d       	mov	r25, r10
    136e:	99 7e       	andi	r25, 0xE9	; 233
    1370:	a9 2e       	mov	r10, r25
    1372:	09 c0       	rjmp	.+18     	; 0x1386 <vfprintf+0x300>
    1374:	a2 fe       	sbrs	r10, 2
    1376:	06 c0       	rjmp	.+12     	; 0x1384 <vfprintf+0x2fe>
    1378:	b3 94       	inc	r11
    137a:	b3 94       	inc	r11
    137c:	04 c0       	rjmp	.+8      	; 0x1386 <vfprintf+0x300>
    137e:	8a 2d       	mov	r24, r10
    1380:	86 78       	andi	r24, 0x86	; 134
    1382:	09 f0       	breq	.+2      	; 0x1386 <vfprintf+0x300>
    1384:	b3 94       	inc	r11
    1386:	a3 fc       	sbrc	r10, 3
    1388:	11 c0       	rjmp	.+34     	; 0x13ac <vfprintf+0x326>
    138a:	a0 fe       	sbrs	r10, 0
    138c:	06 c0       	rjmp	.+12     	; 0x139a <vfprintf+0x314>
    138e:	b2 14       	cp	r11, r2
    1390:	88 f4       	brcc	.+34     	; 0x13b4 <vfprintf+0x32e>
    1392:	28 0c       	add	r2, r8
    1394:	92 2c       	mov	r9, r2
    1396:	9b 18       	sub	r9, r11
    1398:	0e c0       	rjmp	.+28     	; 0x13b6 <vfprintf+0x330>
    139a:	b2 14       	cp	r11, r2
    139c:	60 f4       	brcc	.+24     	; 0x13b6 <vfprintf+0x330>
    139e:	b6 01       	movw	r22, r12
    13a0:	80 e2       	ldi	r24, 0x20	; 32
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 3a 0a 	call	0x1474	; 0x1474 <fputc>
    13a8:	b3 94       	inc	r11
    13aa:	f7 cf       	rjmp	.-18     	; 0x139a <vfprintf+0x314>
    13ac:	b2 14       	cp	r11, r2
    13ae:	18 f4       	brcc	.+6      	; 0x13b6 <vfprintf+0x330>
    13b0:	2b 18       	sub	r2, r11
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <vfprintf+0x332>
    13b4:	98 2c       	mov	r9, r8
    13b6:	21 2c       	mov	r2, r1
    13b8:	a4 fe       	sbrs	r10, 4
    13ba:	10 c0       	rjmp	.+32     	; 0x13dc <vfprintf+0x356>
    13bc:	b6 01       	movw	r22, r12
    13be:	80 e3       	ldi	r24, 0x30	; 48
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 3a 0a 	call	0x1474	; 0x1474 <fputc>
    13c6:	a2 fe       	sbrs	r10, 2
    13c8:	17 c0       	rjmp	.+46     	; 0x13f8 <vfprintf+0x372>
    13ca:	a1 fc       	sbrc	r10, 1
    13cc:	03 c0       	rjmp	.+6      	; 0x13d4 <vfprintf+0x34e>
    13ce:	88 e7       	ldi	r24, 0x78	; 120
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <vfprintf+0x352>
    13d4:	88 e5       	ldi	r24, 0x58	; 88
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	b6 01       	movw	r22, r12
    13da:	0c c0       	rjmp	.+24     	; 0x13f4 <vfprintf+0x36e>
    13dc:	8a 2d       	mov	r24, r10
    13de:	86 78       	andi	r24, 0x86	; 134
    13e0:	59 f0       	breq	.+22     	; 0x13f8 <vfprintf+0x372>
    13e2:	a1 fe       	sbrs	r10, 1
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <vfprintf+0x364>
    13e6:	8b e2       	ldi	r24, 0x2B	; 43
    13e8:	01 c0       	rjmp	.+2      	; 0x13ec <vfprintf+0x366>
    13ea:	80 e2       	ldi	r24, 0x20	; 32
    13ec:	a7 fc       	sbrc	r10, 7
    13ee:	8d e2       	ldi	r24, 0x2D	; 45
    13f0:	b6 01       	movw	r22, r12
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 3a 0a 	call	0x1474	; 0x1474 <fputc>
    13f8:	89 14       	cp	r8, r9
    13fa:	38 f4       	brcc	.+14     	; 0x140a <vfprintf+0x384>
    13fc:	b6 01       	movw	r22, r12
    13fe:	80 e3       	ldi	r24, 0x30	; 48
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	0e 94 3a 0a 	call	0x1474	; 0x1474 <fputc>
    1406:	9a 94       	dec	r9
    1408:	f7 cf       	rjmp	.-18     	; 0x13f8 <vfprintf+0x372>
    140a:	8a 94       	dec	r8
    140c:	f3 01       	movw	r30, r6
    140e:	e8 0d       	add	r30, r8
    1410:	f1 1d       	adc	r31, r1
    1412:	80 81       	ld	r24, Z
    1414:	b6 01       	movw	r22, r12
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 3a 0a 	call	0x1474	; 0x1474 <fputc>
    141c:	81 10       	cpse	r8, r1
    141e:	f5 cf       	rjmp	.-22     	; 0x140a <vfprintf+0x384>
    1420:	22 20       	and	r2, r2
    1422:	09 f4       	brne	.+2      	; 0x1426 <vfprintf+0x3a0>
    1424:	42 ce       	rjmp	.-892    	; 0x10aa <vfprintf+0x24>
    1426:	b6 01       	movw	r22, r12
    1428:	80 e2       	ldi	r24, 0x20	; 32
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <fputc>
    1430:	2a 94       	dec	r2
    1432:	f6 cf       	rjmp	.-20     	; 0x1420 <vfprintf+0x39a>
    1434:	f6 01       	movw	r30, r12
    1436:	86 81       	ldd	r24, Z+6	; 0x06
    1438:	97 81       	ldd	r25, Z+7	; 0x07
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <vfprintf+0x3ba>
    143c:	8f ef       	ldi	r24, 0xFF	; 255
    143e:	9f ef       	ldi	r25, 0xFF	; 255
    1440:	2b 96       	adiw	r28, 0x0b	; 11
    1442:	e2 e1       	ldi	r30, 0x12	; 18
    1444:	0c 94 f0 0a 	jmp	0x15e0	; 0x15e0 <__epilogue_restores__>

00001448 <strnlen_P>:
    1448:	fc 01       	movw	r30, r24
    144a:	05 90       	lpm	r0, Z+
    144c:	61 50       	subi	r22, 0x01	; 1
    144e:	70 40       	sbci	r23, 0x00	; 0
    1450:	01 10       	cpse	r0, r1
    1452:	d8 f7       	brcc	.-10     	; 0x144a <strnlen_P+0x2>
    1454:	80 95       	com	r24
    1456:	90 95       	com	r25
    1458:	8e 0f       	add	r24, r30
    145a:	9f 1f       	adc	r25, r31
    145c:	08 95       	ret

0000145e <strnlen>:
    145e:	fc 01       	movw	r30, r24
    1460:	61 50       	subi	r22, 0x01	; 1
    1462:	70 40       	sbci	r23, 0x00	; 0
    1464:	01 90       	ld	r0, Z+
    1466:	01 10       	cpse	r0, r1
    1468:	d8 f7       	brcc	.-10     	; 0x1460 <strnlen+0x2>
    146a:	80 95       	com	r24
    146c:	90 95       	com	r25
    146e:	8e 0f       	add	r24, r30
    1470:	9f 1f       	adc	r25, r31
    1472:	08 95       	ret

00001474 <fputc>:
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	fb 01       	movw	r30, r22
    147e:	23 81       	ldd	r18, Z+3	; 0x03
    1480:	21 fd       	sbrc	r18, 1
    1482:	03 c0       	rjmp	.+6      	; 0x148a <fputc+0x16>
    1484:	8f ef       	ldi	r24, 0xFF	; 255
    1486:	9f ef       	ldi	r25, 0xFF	; 255
    1488:	2c c0       	rjmp	.+88     	; 0x14e2 <fputc+0x6e>
    148a:	22 ff       	sbrs	r18, 2
    148c:	16 c0       	rjmp	.+44     	; 0x14ba <fputc+0x46>
    148e:	46 81       	ldd	r20, Z+6	; 0x06
    1490:	57 81       	ldd	r21, Z+7	; 0x07
    1492:	24 81       	ldd	r18, Z+4	; 0x04
    1494:	35 81       	ldd	r19, Z+5	; 0x05
    1496:	42 17       	cp	r20, r18
    1498:	53 07       	cpc	r21, r19
    149a:	44 f4       	brge	.+16     	; 0x14ac <fputc+0x38>
    149c:	a0 81       	ld	r26, Z
    149e:	b1 81       	ldd	r27, Z+1	; 0x01
    14a0:	9d 01       	movw	r18, r26
    14a2:	2f 5f       	subi	r18, 0xFF	; 255
    14a4:	3f 4f       	sbci	r19, 0xFF	; 255
    14a6:	31 83       	std	Z+1, r19	; 0x01
    14a8:	20 83       	st	Z, r18
    14aa:	8c 93       	st	X, r24
    14ac:	26 81       	ldd	r18, Z+6	; 0x06
    14ae:	37 81       	ldd	r19, Z+7	; 0x07
    14b0:	2f 5f       	subi	r18, 0xFF	; 255
    14b2:	3f 4f       	sbci	r19, 0xFF	; 255
    14b4:	37 83       	std	Z+7, r19	; 0x07
    14b6:	26 83       	std	Z+6, r18	; 0x06
    14b8:	14 c0       	rjmp	.+40     	; 0x14e2 <fputc+0x6e>
    14ba:	8b 01       	movw	r16, r22
    14bc:	ec 01       	movw	r28, r24
    14be:	fb 01       	movw	r30, r22
    14c0:	00 84       	ldd	r0, Z+8	; 0x08
    14c2:	f1 85       	ldd	r31, Z+9	; 0x09
    14c4:	e0 2d       	mov	r30, r0
    14c6:	09 95       	icall
    14c8:	89 2b       	or	r24, r25
    14ca:	e1 f6       	brne	.-72     	; 0x1484 <fputc+0x10>
    14cc:	d8 01       	movw	r26, r16
    14ce:	16 96       	adiw	r26, 0x06	; 6
    14d0:	8d 91       	ld	r24, X+
    14d2:	9c 91       	ld	r25, X
    14d4:	17 97       	sbiw	r26, 0x07	; 7
    14d6:	01 96       	adiw	r24, 0x01	; 1
    14d8:	17 96       	adiw	r26, 0x07	; 7
    14da:	9c 93       	st	X, r25
    14dc:	8e 93       	st	-X, r24
    14de:	16 97       	sbiw	r26, 0x06	; 6
    14e0:	ce 01       	movw	r24, r28
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	08 95       	ret

000014ec <__ultoa_invert>:
    14ec:	fa 01       	movw	r30, r20
    14ee:	aa 27       	eor	r26, r26
    14f0:	28 30       	cpi	r18, 0x08	; 8
    14f2:	51 f1       	breq	.+84     	; 0x1548 <__ultoa_invert+0x5c>
    14f4:	20 31       	cpi	r18, 0x10	; 16
    14f6:	81 f1       	breq	.+96     	; 0x1558 <__ultoa_invert+0x6c>
    14f8:	e8 94       	clt
    14fa:	6f 93       	push	r22
    14fc:	6e 7f       	andi	r22, 0xFE	; 254
    14fe:	6e 5f       	subi	r22, 0xFE	; 254
    1500:	7f 4f       	sbci	r23, 0xFF	; 255
    1502:	8f 4f       	sbci	r24, 0xFF	; 255
    1504:	9f 4f       	sbci	r25, 0xFF	; 255
    1506:	af 4f       	sbci	r26, 0xFF	; 255
    1508:	b1 e0       	ldi	r27, 0x01	; 1
    150a:	3e d0       	rcall	.+124    	; 0x1588 <__ultoa_invert+0x9c>
    150c:	b4 e0       	ldi	r27, 0x04	; 4
    150e:	3c d0       	rcall	.+120    	; 0x1588 <__ultoa_invert+0x9c>
    1510:	67 0f       	add	r22, r23
    1512:	78 1f       	adc	r23, r24
    1514:	89 1f       	adc	r24, r25
    1516:	9a 1f       	adc	r25, r26
    1518:	a1 1d       	adc	r26, r1
    151a:	68 0f       	add	r22, r24
    151c:	79 1f       	adc	r23, r25
    151e:	8a 1f       	adc	r24, r26
    1520:	91 1d       	adc	r25, r1
    1522:	a1 1d       	adc	r26, r1
    1524:	6a 0f       	add	r22, r26
    1526:	71 1d       	adc	r23, r1
    1528:	81 1d       	adc	r24, r1
    152a:	91 1d       	adc	r25, r1
    152c:	a1 1d       	adc	r26, r1
    152e:	20 d0       	rcall	.+64     	; 0x1570 <__ultoa_invert+0x84>
    1530:	09 f4       	brne	.+2      	; 0x1534 <__ultoa_invert+0x48>
    1532:	68 94       	set
    1534:	3f 91       	pop	r19
    1536:	2a e0       	ldi	r18, 0x0A	; 10
    1538:	26 9f       	mul	r18, r22
    153a:	11 24       	eor	r1, r1
    153c:	30 19       	sub	r19, r0
    153e:	30 5d       	subi	r19, 0xD0	; 208
    1540:	31 93       	st	Z+, r19
    1542:	de f6       	brtc	.-74     	; 0x14fa <__ultoa_invert+0xe>
    1544:	cf 01       	movw	r24, r30
    1546:	08 95       	ret
    1548:	46 2f       	mov	r20, r22
    154a:	47 70       	andi	r20, 0x07	; 7
    154c:	40 5d       	subi	r20, 0xD0	; 208
    154e:	41 93       	st	Z+, r20
    1550:	b3 e0       	ldi	r27, 0x03	; 3
    1552:	0f d0       	rcall	.+30     	; 0x1572 <__ultoa_invert+0x86>
    1554:	c9 f7       	brne	.-14     	; 0x1548 <__ultoa_invert+0x5c>
    1556:	f6 cf       	rjmp	.-20     	; 0x1544 <__ultoa_invert+0x58>
    1558:	46 2f       	mov	r20, r22
    155a:	4f 70       	andi	r20, 0x0F	; 15
    155c:	40 5d       	subi	r20, 0xD0	; 208
    155e:	4a 33       	cpi	r20, 0x3A	; 58
    1560:	18 f0       	brcs	.+6      	; 0x1568 <__ultoa_invert+0x7c>
    1562:	49 5d       	subi	r20, 0xD9	; 217
    1564:	31 fd       	sbrc	r19, 1
    1566:	40 52       	subi	r20, 0x20	; 32
    1568:	41 93       	st	Z+, r20
    156a:	02 d0       	rcall	.+4      	; 0x1570 <__ultoa_invert+0x84>
    156c:	a9 f7       	brne	.-22     	; 0x1558 <__ultoa_invert+0x6c>
    156e:	ea cf       	rjmp	.-44     	; 0x1544 <__ultoa_invert+0x58>
    1570:	b4 e0       	ldi	r27, 0x04	; 4
    1572:	a6 95       	lsr	r26
    1574:	97 95       	ror	r25
    1576:	87 95       	ror	r24
    1578:	77 95       	ror	r23
    157a:	67 95       	ror	r22
    157c:	ba 95       	dec	r27
    157e:	c9 f7       	brne	.-14     	; 0x1572 <__ultoa_invert+0x86>
    1580:	00 97       	sbiw	r24, 0x00	; 0
    1582:	61 05       	cpc	r22, r1
    1584:	71 05       	cpc	r23, r1
    1586:	08 95       	ret
    1588:	9b 01       	movw	r18, r22
    158a:	ac 01       	movw	r20, r24
    158c:	0a 2e       	mov	r0, r26
    158e:	06 94       	lsr	r0
    1590:	57 95       	ror	r21
    1592:	47 95       	ror	r20
    1594:	37 95       	ror	r19
    1596:	27 95       	ror	r18
    1598:	ba 95       	dec	r27
    159a:	c9 f7       	brne	.-14     	; 0x158e <__ultoa_invert+0xa2>
    159c:	62 0f       	add	r22, r18
    159e:	73 1f       	adc	r23, r19
    15a0:	84 1f       	adc	r24, r20
    15a2:	95 1f       	adc	r25, r21
    15a4:	a0 1d       	adc	r26, r0
    15a6:	08 95       	ret

000015a8 <__prologue_saves__>:
    15a8:	2f 92       	push	r2
    15aa:	3f 92       	push	r3
    15ac:	4f 92       	push	r4
    15ae:	5f 92       	push	r5
    15b0:	6f 92       	push	r6
    15b2:	7f 92       	push	r7
    15b4:	8f 92       	push	r8
    15b6:	9f 92       	push	r9
    15b8:	af 92       	push	r10
    15ba:	bf 92       	push	r11
    15bc:	cf 92       	push	r12
    15be:	df 92       	push	r13
    15c0:	ef 92       	push	r14
    15c2:	ff 92       	push	r15
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
    15d0:	ca 1b       	sub	r28, r26
    15d2:	db 0b       	sbc	r29, r27
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	f8 94       	cli
    15d8:	de bf       	out	0x3e, r29	; 62
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	cd bf       	out	0x3d, r28	; 61
    15de:	09 94       	ijmp

000015e0 <__epilogue_restores__>:
    15e0:	2a 88       	ldd	r2, Y+18	; 0x12
    15e2:	39 88       	ldd	r3, Y+17	; 0x11
    15e4:	48 88       	ldd	r4, Y+16	; 0x10
    15e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    15e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    15ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    15ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    15ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    15f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    15f2:	b9 84       	ldd	r11, Y+9	; 0x09
    15f4:	c8 84       	ldd	r12, Y+8	; 0x08
    15f6:	df 80       	ldd	r13, Y+7	; 0x07
    15f8:	ee 80       	ldd	r14, Y+6	; 0x06
    15fa:	fd 80       	ldd	r15, Y+5	; 0x05
    15fc:	0c 81       	ldd	r16, Y+4	; 0x04
    15fe:	1b 81       	ldd	r17, Y+3	; 0x03
    1600:	aa 81       	ldd	r26, Y+2	; 0x02
    1602:	b9 81       	ldd	r27, Y+1	; 0x01
    1604:	ce 0f       	add	r28, r30
    1606:	d1 1d       	adc	r29, r1
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	ed 01       	movw	r28, r26
    1614:	08 95       	ret

00001616 <_exit>:
    1616:	f8 94       	cli

00001618 <__stop_program>:
    1618:	ff cf       	rjmp	.-2      	; 0x1618 <__stop_program>
