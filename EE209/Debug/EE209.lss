
EE209.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00001d72  00001e06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ad  00800140  00800140  00001e46  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ea4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00001ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dc5  00000000  00000000  000020ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000109f  00000000  00000000  00003e71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cd5  00000000  00000000  00004f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b4  00000000  00000000  00005be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000091a  00000000  00000000  0000609c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000da2  00000000  00000000  000069b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00007758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__ctors_end>
       4:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__vector_1>
       8:	0c 94 90 03 	jmp	0x720	; 0x720 <__vector_2>
       c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      10:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      14:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      18:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      24:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      28:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      2c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      34:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      40:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      44:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      48:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      4c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      50:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      54:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      58:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      5c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      60:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      64:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      68:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      6c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      70:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      74:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      78:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      7c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      80:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      84:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      88:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      8c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      90:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      94:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      98:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      9c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      ac:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      b0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      b4:	05 a8       	ldd	r0, Z+53	; 0x35
      b6:	4c cd       	rjmp	.-1384   	; 0xfffffb50 <__eeprom_end+0xff7efb50>
      b8:	b2 d4       	rcall	.+2404   	; 0xa1e <get_uart_string+0xb4>
      ba:	4e b9       	out	0x0e, r20	; 14
      bc:	38 36       	cpi	r19, 0x68	; 104
      be:	a9 02       	muls	r26, r25
      c0:	0c 50       	subi	r16, 0x0C	; 12
      c2:	b9 91       	ld	r27, Y+
      c4:	86 88       	ldd	r8, Z+22	; 0x16
      c6:	08 3c       	cpi	r16, 0xC8	; 200
      c8:	a6 aa       	std	Z+54, r10	; 0x36
      ca:	aa 2a       	or	r10, r26
      cc:	be 00       	.word	0x00be	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240

000000d2 <__trampolines_end>:
      d2:	6e 61       	ori	r22, 0x1E	; 30
      d4:	6e 00       	.word	0x006e	; ????

000000d6 <__c.2332>:
      d6:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      e6:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      f6:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     106:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     116:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     126:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     136:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     146:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     156:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     166:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     176:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     186:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     196:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1a6:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1b6:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1c6:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	d8 e0       	ldi	r29, 0x08	; 8
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61

000001e0 <__do_copy_data>:
     1e0:	11 e0       	ldi	r17, 0x01	; 1
     1e2:	a0 e0       	ldi	r26, 0x00	; 0
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	e2 e7       	ldi	r30, 0x72	; 114
     1e8:	fd e1       	ldi	r31, 0x1D	; 29
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x10>
     1ec:	05 90       	lpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a0 34       	cpi	r26, 0x40	; 64
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0xc>

000001f6 <__do_clear_bss>:
     1f6:	22 e0       	ldi	r18, 0x02	; 2
     1f8:	a0 e4       	ldi	r26, 0x40	; 64
     1fa:	b1 e0       	ldi	r27, 0x01	; 1
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	ad 3e       	cpi	r26, 0xED	; 237
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 46 06 	call	0xc8c	; 0xc8c <main>
     20a:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <_exit>

0000020e <__bad_interrupt>:
     20e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000212 <read_adc_mv>:


uint16_t read_adc_mv(uint8_t channel)
{
	// clear ADMUX
	ADMUX &= 0xF0;
     212:	ec e7       	ldi	r30, 0x7C	; 124
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	90 81       	ld	r25, Z
     218:	90 7f       	andi	r25, 0xF0	; 240
     21a:	90 83       	st	Z, r25
	// set least significant 4 bits to channel
	ADMUX |= channel;
     21c:	90 81       	ld	r25, Z
     21e:	89 2b       	or	r24, r25
     220:	80 83       	st	Z, r24
	// start conversion
	ADCSRA |= (1<<ADSC);
     222:	ea e7       	ldi	r30, 0x7A	; 122
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	80 81       	ld	r24, Z
     228:	80 64       	ori	r24, 0x40	; 64
     22a:	80 83       	st	Z, r24
	// wait until conversion is finished
	while (ADCSRA & (1<<ADSC));
     22c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     230:	86 fd       	sbrc	r24, 6
     232:	fc cf       	rjmp	.-8      	; 0x22c <read_adc_mv+0x1a>
	
	// read full 10 bits of ADC registers
	uint16_t adc_output = ADCW;
     234:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     238:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	// convert reading into millivolts
	uint32_t mv = (uint32_t)adc_output * ((uint32_t)5000/1023);
     23c:	a0 e0       	ldi	r26, 0x00	; 0
     23e:	b0 e0       	ldi	r27, 0x00	; 0
     240:	88 0f       	add	r24, r24
     242:	99 1f       	adc	r25, r25
     244:	aa 1f       	adc	r26, r26
     246:	bb 1f       	adc	r27, r27
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	aa 1f       	adc	r26, r26
     24e:	bb 1f       	adc	r27, r27
	return (uint16_t)mv;
}
     250:	08 95       	ret

00000252 <adc_init>:

void adc_init() 
{
	// set ADMUX to read from VCC
	ADMUX |= (1<<REFS0);
     252:	ec e7       	ldi	r30, 0x7C	; 124
     254:	f0 e0       	ldi	r31, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	80 64       	ori	r24, 0x40	; 64
     25a:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     25c:	80 81       	ld	r24, Z
     25e:	8f 77       	andi	r24, 0x7F	; 127
     260:	80 83       	st	Z, r24
	// clear channel selection
	ADMUX &= 0xF0;
     262:	80 81       	ld	r24, Z
     264:	80 7f       	andi	r24, 0xF0	; 240
     266:	80 83       	st	Z, r24
	// enable conversions, scale by system clock by 128
	ADCSRA |= (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     268:	ea e7       	ldi	r30, 0x7A	; 122
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	87 68       	ori	r24, 0x87	; 135
     270:	80 83       	st	Z, r24
     272:	08 95       	ret

00000274 <fsmInit>:
#include "fsm.h"

// initialis fsm with function pointers
void fsmInit(struct functionPointers *fsmFunctions) 
{
    functions = fsmFunctions;
     274:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <functions+0x1>
     278:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <functions>
    state = STATE_INIT;
     27c:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <state>
    voltageTriggerIndex = 0;
     280:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <voltageTriggerIndex>
    currentTriggerIndex = 0;
     284:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <currentTriggerIndex>
	
	triggerSize = 0;
     288:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <triggerSize>
	peakVoltage = 0;
     28c:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <peakVoltage+0x1>
     290:	10 92 18 02 	sts	0x0218, r1	; 0x800218 <peakVoltage>
	peakCurrent = 0;
     294:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <peakCurrent+0x1>
     298:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <peakCurrent>
	voltage = 0;
     29c:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <voltage+0x1>
     2a0:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <voltage>
	current = 0;
     2a4:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <current+0x1>
     2a8:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <current>
	phase = 0;
     2ac:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <phase+0x1>
     2b0:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <phase>
	pf = 0;
     2b4:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <pf+0x1>
     2b8:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <pf>
	power = 0;
     2bc:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <power+0x1>
     2c0:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <power>
     2c4:	08 95       	ret

000002c6 <stateInit>:

// init state
void stateInit()
{
    // init uart
    functions->uart_init(BAUD);
     2c6:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     2ca:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     2ce:	01 90       	ld	r0, Z+
     2d0:	f0 81       	ld	r31, Z
     2d2:	e0 2d       	mov	r30, r0
     2d4:	80 e8       	ldi	r24, 0x80	; 128
     2d6:	95 e2       	ldi	r25, 0x25	; 37
     2d8:	09 95       	icall
    // init io
    functions->io_init();
     2da:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     2de:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     2e2:	02 80       	ldd	r0, Z+2	; 0x02
     2e4:	f3 81       	ldd	r31, Z+3	; 0x03
     2e6:	e0 2d       	mov	r30, r0
     2e8:	09 95       	icall
    // init adc
    functions->adc_init();
     2ea:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     2ee:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     2f2:	04 80       	ldd	r0, Z+4	; 0x04
     2f4:	f5 81       	ldd	r31, Z+5	; 0x05
     2f6:	e0 2d       	mov	r30, r0
     2f8:	09 95       	icall
    // init timer
    functions->timer_init();
     2fa:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     2fe:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     302:	06 80       	ldd	r0, Z+6	; 0x06
     304:	f7 81       	ldd	r31, Z+7	; 0x07
     306:	e0 2d       	mov	r30, r0
     308:	09 95       	icall
    // init interrupts
    functions->int_init(voltageTriggerTimes, currentTriggerTimes, SIZE, functions->get_time);
     30a:	a0 91 0b 02 	lds	r26, 0x020B	; 0x80020b <functions>
     30e:	b0 91 0c 02 	lds	r27, 0x020C	; 0x80020c <functions+0x1>
     312:	18 96       	adiw	r26, 0x08	; 8
     314:	ed 91       	ld	r30, X+
     316:	fc 91       	ld	r31, X
     318:	19 97       	sbiw	r26, 0x09	; 9
     31a:	54 96       	adiw	r26, 0x14	; 20
     31c:	2d 91       	ld	r18, X+
     31e:	3c 91       	ld	r19, X
     320:	55 97       	sbiw	r26, 0x15	; 21
     322:	42 e3       	ldi	r20, 0x32	; 50
     324:	67 ea       	ldi	r22, 0xA7	; 167
     326:	71 e0       	ldi	r23, 0x01	; 1
     328:	8a e1       	ldi	r24, 0x1A	; 26
     32a:	92 e0       	ldi	r25, 0x02	; 2
     32c:	09 95       	icall
    // change state on function completion
    state = STATE_READ_POWER;
     32e:	81 e0       	ldi	r24, 0x01	; 1
     330:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <state>
     334:	08 95       	ret

00000336 <stateReadPower>:
}

// read power state
void stateReadPower()
{
     336:	1f 93       	push	r17
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
    // enable interrupts and reset timer
	functions->timer_reset();
     33c:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     340:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     344:	06 88       	ldd	r0, Z+22	; 0x16
     346:	f7 89       	ldd	r31, Z+23	; 0x17
     348:	e0 2d       	mov	r30, r0
     34a:	09 95       	icall
	//functions->timer_init();
    functions->enable_interrupts();
     34c:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     350:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     354:	00 88       	ldd	r0, Z+16	; 0x10
     356:	f1 89       	ldd	r31, Z+17	; 0x11
     358:	e0 2d       	mov	r30, r0
     35a:	09 95       	icall
    for (int8_t j = 0; j < SIZE; j++) {
     35c:	10 e0       	ldi	r17, 0x00	; 0
     35e:	22 c0       	rjmp	.+68     	; 0x3a4 <stateReadPower+0x6e>
		voltages[j] = functions->read_adc(VOLTAGE_PIN);
     360:	c1 2f       	mov	r28, r17
     362:	01 2e       	mov	r0, r17
     364:	00 0c       	add	r0, r0
     366:	dd 0b       	sbc	r29, r29
     368:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     36c:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     370:	02 88       	ldd	r0, Z+18	; 0x12
     372:	f3 89       	ldd	r31, Z+19	; 0x13
     374:	e0 2d       	mov	r30, r0
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	09 95       	icall
     37a:	cc 0f       	add	r28, r28
     37c:	dd 1f       	adc	r29, r29
     37e:	fe 01       	movw	r30, r28
     380:	e0 5c       	subi	r30, 0xC0	; 192
     382:	fe 4f       	sbci	r31, 0xFE	; 254
     384:	91 83       	std	Z+1, r25	; 0x01
     386:	80 83       	st	Z, r24
        //voltageTimes[j] = functions->get_time();
        currents[j] = functions->read_adc(CURRENT_PIN);
     388:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     38c:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     390:	02 88       	ldd	r0, Z+18	; 0x12
     392:	f3 89       	ldd	r31, Z+19	; 0x13
     394:	e0 2d       	mov	r30, r0
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	09 95       	icall
     39a:	c2 58       	subi	r28, 0x82	; 130
     39c:	dd 4f       	sbci	r29, 0xFD	; 253
     39e:	99 83       	std	Y+1, r25	; 0x01
     3a0:	88 83       	st	Y, r24
{
    // enable interrupts and reset timer
	functions->timer_reset();
	//functions->timer_init();
    functions->enable_interrupts();
    for (int8_t j = 0; j < SIZE; j++) {
     3a2:	1f 5f       	subi	r17, 0xFF	; 255
     3a4:	12 33       	cpi	r17, 0x32	; 50
     3a6:	e4 f2       	brlt	.-72     	; 0x360 <stateReadPower+0x2a>
        currents[j] = functions->read_adc(CURRENT_PIN);
        //currentTimes[j] = functions->get_time();
    }

    // disable interrupts - prevent the trigger array from overflowing
    functions->disable_interrupts();
     3a8:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     3ac:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     3b0:	06 84       	ldd	r0, Z+14	; 0x0e
     3b2:	f7 85       	ldd	r31, Z+15	; 0x0f
     3b4:	e0 2d       	mov	r30, r0
     3b6:	09 95       	icall

    // possible change the implementation to avoid interrupts by setting a 
    // volatile boolean with an int
    
    // need to add condition for state change
    state = STATE_CALCULATE_POWER;
     3b8:	82 e0       	ldi	r24, 0x02	; 2
     3ba:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <state>
}
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	08 95       	ret

000003c6 <stateCalculatePower>:

// calculate power state
void stateCalculatePower()
{  
    // calculate peak, RMS
    peakVoltage = functions->find_peak(voltages, SIZE);
     3c6:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     3ca:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     3ce:	00 8c       	ldd	r0, Z+24	; 0x18
     3d0:	f1 8d       	ldd	r31, Z+25	; 0x19
     3d2:	e0 2d       	mov	r30, r0
     3d4:	62 e3       	ldi	r22, 0x32	; 50
     3d6:	80 e4       	ldi	r24, 0x40	; 64
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	09 95       	icall
     3dc:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <peakVoltage+0x1>
     3e0:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <peakVoltage>
    peakCurrent = functions->find_peak(currents, SIZE);
     3e4:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     3e8:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     3ec:	00 8c       	ldd	r0, Z+24	; 0x18
     3ee:	f1 8d       	ldd	r31, Z+25	; 0x19
     3f0:	e0 2d       	mov	r30, r0
     3f2:	62 e3       	ldi	r22, 0x32	; 50
     3f4:	8e e7       	ldi	r24, 0x7E	; 126
     3f6:	92 e0       	ldi	r25, 0x02	; 2
     3f8:	09 95       	icall
     3fa:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <peakCurrent+0x1>
     3fe:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <peakCurrent>
    voltage = functions->calculate_RMS(peakVoltage);
     402:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     406:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     40a:	02 8c       	ldd	r0, Z+26	; 0x1a
     40c:	f3 8d       	ldd	r31, Z+27	; 0x1b
     40e:	e0 2d       	mov	r30, r0
     410:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <peakVoltage>
     414:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <peakVoltage+0x1>
     418:	09 95       	icall
     41a:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <voltage+0x1>
     41e:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <voltage>
    current = functions->calculate_RMS(peakCurrent);
     422:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     426:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     42a:	02 8c       	ldd	r0, Z+26	; 0x1a
     42c:	f3 8d       	ldd	r31, Z+27	; 0x1b
     42e:	e0 2d       	mov	r30, r0
     430:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <peakCurrent>
     434:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <peakCurrent+0x1>
     438:	09 95       	icall
     43a:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <current+0x1>
     43e:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <current>

    // calculate phase of two signals
    phase = functions->get_phase_difference(voltageTriggerTimes, SIZE, currentTriggerTimes, SIZE);
     442:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     446:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     44a:	04 8c       	ldd	r0, Z+28	; 0x1c
     44c:	f5 8d       	ldd	r31, Z+29	; 0x1d
     44e:	e0 2d       	mov	r30, r0
     450:	22 e3       	ldi	r18, 0x32	; 50
     452:	47 ea       	ldi	r20, 0xA7	; 167
     454:	51 e0       	ldi	r21, 0x01	; 1
     456:	62 e3       	ldi	r22, 0x32	; 50
     458:	8a e1       	ldi	r24, 0x1A	; 26
     45a:	92 e0       	ldi	r25, 0x02	; 2
     45c:	09 95       	icall
     45e:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <phase+0x1>
     462:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <phase>
    
    // place holder phase
    pf = functions->calculate_power_factor(phase);
     466:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     46a:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     46e:	06 8c       	ldd	r0, Z+30	; 0x1e
     470:	f7 8d       	ldd	r31, Z+31	; 0x1f
     472:	e0 2d       	mov	r30, r0
     474:	09 95       	icall
     476:	90 93 e3 02 	sts	0x02E3, r25	; 0x8002e3 <pf+0x1>
     47a:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <pf>
    power = functions->calculate_average_power(voltage, current, pf);
     47e:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     482:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     486:	00 a0       	ldd	r0, Z+32	; 0x20
     488:	f1 a1       	ldd	r31, Z+33	; 0x21
     48a:	e0 2d       	mov	r30, r0
     48c:	60 91 16 02 	lds	r22, 0x0216	; 0x800216 <current>
     490:	70 91 17 02 	lds	r23, 0x0217	; 0x800217 <current+0x1>
     494:	ac 01       	movw	r20, r24
     496:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <voltage>
     49a:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <voltage+0x1>
     49e:	09 95       	icall
     4a0:	90 93 a6 01 	sts	0x01A6, r25	; 0x8001a6 <power+0x1>
     4a4:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <power>
    
    // start iterating over the trigger arrays from zero
    // this effectively resets the array
    voltageTriggerIndex = 0;
     4a8:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <voltageTriggerIndex>
    currentTriggerIndex = 0;
     4ac:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <currentTriggerIndex>
    
	// reset interrupt handler
	functions->int_init(voltageTriggerTimes, currentTriggerTimes, SIZE, functions->get_time);
     4b0:	a0 91 0b 02 	lds	r26, 0x020B	; 0x80020b <functions>
     4b4:	b0 91 0c 02 	lds	r27, 0x020C	; 0x80020c <functions+0x1>
     4b8:	18 96       	adiw	r26, 0x08	; 8
     4ba:	ed 91       	ld	r30, X+
     4bc:	fc 91       	ld	r31, X
     4be:	19 97       	sbiw	r26, 0x09	; 9
     4c0:	54 96       	adiw	r26, 0x14	; 20
     4c2:	2d 91       	ld	r18, X+
     4c4:	3c 91       	ld	r19, X
     4c6:	55 97       	sbiw	r26, 0x15	; 21
     4c8:	42 e3       	ldi	r20, 0x32	; 50
     4ca:	67 ea       	ldi	r22, 0xA7	; 167
     4cc:	71 e0       	ldi	r23, 0x01	; 1
     4ce:	8a e1       	ldi	r24, 0x1A	; 26
     4d0:	92 e0       	ldi	r25, 0x02	; 2
     4d2:	09 95       	icall
    // new state needed to be added for correct transition
    state = STATE_TRANSMIT_POWER;
     4d4:	83 e0       	ldi	r24, 0x03	; 3
     4d6:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <state>
     4da:	08 95       	ret

000004dc <stateTransmitPower>:
}

// transmit the power over UART
void stateTransmitPower()
{
     4dc:	cf 93       	push	r28
     4de:	df 93       	push	r29
     4e0:	cd b7       	in	r28, 0x3d	; 61
     4e2:	de b7       	in	r29, 0x3e	; 62
     4e4:	60 97       	sbiw	r28, 0x10	; 16
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	f8 94       	cli
     4ea:	de bf       	out	0x3e, r29	; 62
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	cd bf       	out	0x3d, r28	; 61
    char dataString[16];
    functions->get_uart_string(power, dataString, 'P');
     4f0:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     4f4:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     4f8:	02 84       	ldd	r0, Z+10	; 0x0a
     4fa:	f3 85       	ldd	r31, Z+11	; 0x0b
     4fc:	e0 2d       	mov	r30, r0
     4fe:	40 e5       	ldi	r20, 0x50	; 80
     500:	be 01       	movw	r22, r28
     502:	6f 5f       	subi	r22, 0xFF	; 255
     504:	7f 4f       	sbci	r23, 0xFF	; 255
     506:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <power>
     50a:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <power+0x1>
     50e:	09 95       	icall
    functions->uart_write(dataString);
     510:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     514:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     518:	04 84       	ldd	r0, Z+12	; 0x0c
     51a:	f5 85       	ldd	r31, Z+13	; 0x0d
     51c:	e0 2d       	mov	r30, r0
     51e:	ce 01       	movw	r24, r28
     520:	01 96       	adiw	r24, 0x01	; 1
     522:	09 95       	icall
	functions->get_uart_string(pf, dataString, 'F');
     524:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     528:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     52c:	02 84       	ldd	r0, Z+10	; 0x0a
     52e:	f3 85       	ldd	r31, Z+11	; 0x0b
     530:	e0 2d       	mov	r30, r0
     532:	46 e4       	ldi	r20, 0x46	; 70
     534:	be 01       	movw	r22, r28
     536:	6f 5f       	subi	r22, 0xFF	; 255
     538:	7f 4f       	sbci	r23, 0xFF	; 255
     53a:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <pf>
     53e:	90 91 e3 02 	lds	r25, 0x02E3	; 0x8002e3 <pf+0x1>
     542:	09 95       	icall
	functions->uart_write(dataString);
     544:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     548:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     54c:	04 84       	ldd	r0, Z+12	; 0x0c
     54e:	f5 85       	ldd	r31, Z+13	; 0x0d
     550:	e0 2d       	mov	r30, r0
     552:	ce 01       	movw	r24, r28
     554:	01 96       	adiw	r24, 0x01	; 1
     556:	09 95       	icall
	functions->get_uart_string(voltage, dataString, 'V');
     558:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     55c:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     560:	02 84       	ldd	r0, Z+10	; 0x0a
     562:	f3 85       	ldd	r31, Z+11	; 0x0b
     564:	e0 2d       	mov	r30, r0
     566:	46 e5       	ldi	r20, 0x56	; 86
     568:	be 01       	movw	r22, r28
     56a:	6f 5f       	subi	r22, 0xFF	; 255
     56c:	7f 4f       	sbci	r23, 0xFF	; 255
     56e:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <voltage>
     572:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <voltage+0x1>
     576:	09 95       	icall
	functions->uart_write(dataString);
     578:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     57c:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     580:	04 84       	ldd	r0, Z+12	; 0x0c
     582:	f5 85       	ldd	r31, Z+13	; 0x0d
     584:	e0 2d       	mov	r30, r0
     586:	ce 01       	movw	r24, r28
     588:	01 96       	adiw	r24, 0x01	; 1
     58a:	09 95       	icall
	functions->get_uart_string(current, dataString, 'I');
     58c:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     590:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     594:	02 84       	ldd	r0, Z+10	; 0x0a
     596:	f3 85       	ldd	r31, Z+11	; 0x0b
     598:	e0 2d       	mov	r30, r0
     59a:	49 e4       	ldi	r20, 0x49	; 73
     59c:	be 01       	movw	r22, r28
     59e:	6f 5f       	subi	r22, 0xFF	; 255
     5a0:	7f 4f       	sbci	r23, 0xFF	; 255
     5a2:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <current>
     5a6:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <current+0x1>
     5aa:	09 95       	icall
	functions->uart_write(dataString);
     5ac:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <functions>
     5b0:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <functions+0x1>
     5b4:	04 84       	ldd	r0, Z+12	; 0x0c
     5b6:	f5 85       	ldd	r31, Z+13	; 0x0d
     5b8:	e0 2d       	mov	r30, r0
     5ba:	ce 01       	movw	r24, r28
     5bc:	01 96       	adiw	r24, 0x01	; 1
     5be:	09 95       	icall

    state = STATE_READ_POWER;
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <state>
     5c6:	60 96       	adiw	r28, 0x10	; 16
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	08 95       	ret

000005d8 <run>:
}
// main fsm function
int run()
{ 
    while (1) {
        switch(state) {
     5d8:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <state>
     5dc:	81 30       	cpi	r24, 0x01	; 1
     5de:	49 f0       	breq	.+18     	; 0x5f2 <run+0x1a>
     5e0:	28 f0       	brcs	.+10     	; 0x5ec <run+0x14>
     5e2:	82 30       	cpi	r24, 0x02	; 2
     5e4:	49 f0       	breq	.+18     	; 0x5f8 <run+0x20>
     5e6:	83 30       	cpi	r24, 0x03	; 3
     5e8:	51 f0       	breq	.+20     	; 0x5fe <run+0x26>
     5ea:	0c c0       	rjmp	.+24     	; 0x604 <run+0x2c>
            case STATE_INIT:
                // set this to correct ubbr
                stateInit();
     5ec:	0e 94 63 01 	call	0x2c6	; 0x2c6 <stateInit>
                break;
     5f0:	f3 cf       	rjmp	.-26     	; 0x5d8 <run>
            case STATE_READ_POWER:
                // read data from adc and store it
                stateReadPower();
     5f2:	0e 94 9b 01 	call	0x336	; 0x336 <stateReadPower>
                break;
     5f6:	f0 cf       	rjmp	.-32     	; 0x5d8 <run>
            case STATE_CALCULATE_POWER:
                // use data from adc to calculate power
                stateCalculatePower();
     5f8:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <stateCalculatePower>
                break;
     5fc:	ed cf       	rjmp	.-38     	; 0x5d8 <run>
            case STATE_TRANSMIT_POWER:
                // send power to bt module with uart
                stateTransmitPower();
     5fe:	0e 94 6e 02 	call	0x4dc	; 0x4dc <stateTransmitPower>
                break;
     602:	ea cf       	rjmp	.-44     	; 0x5d8 <run>
                break;
        }
    }

    return 0;
}
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	08 95       	ret

0000060a <io_init>:
#include "gpio.h"

void io_init()
{
	//Set all PORTC pins as inputs
	DDRC = 0x11;
     60a:	81 e1       	ldi	r24, 0x11	; 17
     60c:	87 b9       	out	0x07, r24	; 7

	//Set PORTD Pins 1 and 0 as outputs
	DDRD = 0x00;
     60e:	1a b8       	out	0x0a, r1	; 10
	DDRD |= (1<<PIND0) | (1<<PIND1);
     610:	8a b1       	in	r24, 0x0a	; 10
     612:	83 60       	ori	r24, 0x03	; 3
     614:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PIND2)|(1<<PIND3);
     616:	8b b1       	in	r24, 0x0b	; 11
     618:	8c 60       	ori	r24, 0x0C	; 12
     61a:	8b b9       	out	0x0b, r24	; 11
     61c:	08 95       	ret

0000061e <enable_interrupts>:
	interrupt_handler(1);
}

void enable_interrupts()
{
	sei();
     61e:	78 94       	sei
     620:	08 95       	ret

00000622 <disable_interrupts>:
}
void disable_interrupts()
{
	cli();
     622:	f8 94       	cli
     624:	08 95       	ret

00000626 <interrupt_init>:
void interrupt_init(uint16_t *voltageTriggers, uint16_t *currentTriggers, uint8_t arraySize, uint16_t (*get_time_ptr)(void))
{
	
	voltageTriggers = voltageTriggers;
	currentTriggers = currentTriggers;
	size = arraySize;
     626:	40 93 ea 02 	sts	0x02EA, r20	; 0x8002ea <size>
	get_time_func = get_time_ptr;
     62a:	30 93 e7 02 	sts	0x02E7, r19	; 0x8002e7 <get_time_func+0x1>
     62e:	20 93 e6 02 	sts	0x02E6, r18	; 0x8002e6 <get_time_func>
	
	// set interrupt edge
	EICRA |= 0x0F;
     632:	e9 e6       	ldi	r30, 0x69	; 105
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	80 81       	ld	r24, Z
     638:	8f 60       	ori	r24, 0x0F	; 15
     63a:	80 83       	st	Z, r24
	EIMSK |= 0x03;
     63c:	8d b3       	in	r24, 0x1d	; 29
     63e:	83 60       	ori	r24, 0x03	; 3
     640:	8d bb       	out	0x1d, r24	; 29
	
	currentIndex = 0;
     642:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <currentIndex>
	voltageIndex = 0;
     646:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <voltageIndex>
     64a:	08 95       	ret

0000064c <interrupt_handler>:
}

void interrupt_handler(uint8_t interruptPin)
{
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
	switch (interruptPin)
     650:	88 23       	and	r24, r24
     652:	19 f0       	breq	.+6      	; 0x65a <interrupt_handler+0xe>
     654:	81 30       	cpi	r24, 0x01	; 1
     656:	f9 f0       	breq	.+62     	; 0x696 <interrupt_handler+0x4a>
     658:	3b c0       	rjmp	.+118    	; 0x6d0 <interrupt_handler+0x84>
	{
		case 0:
			if (currentIndex == size)
     65a:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <currentIndex>
     65e:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <size>
     662:	98 17       	cp	r25, r24
     664:	a9 f1       	breq	.+106    	; 0x6d0 <interrupt_handler+0x84>
				break;
			currentTriggers[currentIndex++] = get_time_func();
     666:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <currentTriggers>
     66a:	30 91 ec 02 	lds	r19, 0x02EC	; 0x8002ec <currentTriggers+0x1>
     66e:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <currentIndex>
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	98 0f       	add	r25, r24
     676:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <currentIndex>
     67a:	c8 2f       	mov	r28, r24
     67c:	d0 e0       	ldi	r29, 0x00	; 0
     67e:	cc 0f       	add	r28, r28
     680:	dd 1f       	adc	r29, r29
     682:	c2 0f       	add	r28, r18
     684:	d3 1f       	adc	r29, r19
     686:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <get_time_func>
     68a:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <get_time_func+0x1>
     68e:	09 95       	icall
     690:	99 83       	std	Y+1, r25	; 0x01
     692:	88 83       	st	Y, r24
			break;
     694:	1d c0       	rjmp	.+58     	; 0x6d0 <interrupt_handler+0x84>
		case 1:
			if (voltageIndex == size)
     696:	90 91 e5 02 	lds	r25, 0x02E5	; 0x8002e5 <voltageIndex>
     69a:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <size>
     69e:	98 17       	cp	r25, r24
     6a0:	b9 f0       	breq	.+46     	; 0x6d0 <interrupt_handler+0x84>
				break;
			voltageTriggers[voltageIndex++] = get_time_func();
     6a2:	20 91 e8 02 	lds	r18, 0x02E8	; 0x8002e8 <voltageTriggers>
     6a6:	30 91 e9 02 	lds	r19, 0x02E9	; 0x8002e9 <voltageTriggers+0x1>
     6aa:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <voltageIndex>
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	98 0f       	add	r25, r24
     6b2:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <voltageIndex>
     6b6:	c8 2f       	mov	r28, r24
     6b8:	d0 e0       	ldi	r29, 0x00	; 0
     6ba:	cc 0f       	add	r28, r28
     6bc:	dd 1f       	adc	r29, r29
     6be:	c2 0f       	add	r28, r18
     6c0:	d3 1f       	adc	r29, r19
     6c2:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <get_time_func>
     6c6:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <get_time_func+0x1>
     6ca:	09 95       	icall
     6cc:	99 83       	std	Y+1, r25	; 0x01
     6ce:	88 83       	st	Y, r24
			break;
		default:
			break;
	}
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <__vector_1>:

#include "interrupt.h"

// handle interrupts during cycle
ISR(INT0_vect)
{
     6d6:	1f 92       	push	r1
     6d8:	0f 92       	push	r0
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	0f 92       	push	r0
     6de:	11 24       	eor	r1, r1
     6e0:	2f 93       	push	r18
     6e2:	3f 93       	push	r19
     6e4:	4f 93       	push	r20
     6e6:	5f 93       	push	r21
     6e8:	6f 93       	push	r22
     6ea:	7f 93       	push	r23
     6ec:	8f 93       	push	r24
     6ee:	9f 93       	push	r25
     6f0:	af 93       	push	r26
     6f2:	bf 93       	push	r27
     6f4:	ef 93       	push	r30
     6f6:	ff 93       	push	r31
	interrupt_handler(0);
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	0e 94 26 03 	call	0x64c	; 0x64c <interrupt_handler>
}
     6fe:	ff 91       	pop	r31
     700:	ef 91       	pop	r30
     702:	bf 91       	pop	r27
     704:	af 91       	pop	r26
     706:	9f 91       	pop	r25
     708:	8f 91       	pop	r24
     70a:	7f 91       	pop	r23
     70c:	6f 91       	pop	r22
     70e:	5f 91       	pop	r21
     710:	4f 91       	pop	r20
     712:	3f 91       	pop	r19
     714:	2f 91       	pop	r18
     716:	0f 90       	pop	r0
     718:	0f be       	out	0x3f, r0	; 63
     71a:	0f 90       	pop	r0
     71c:	1f 90       	pop	r1
     71e:	18 95       	reti

00000720 <__vector_2>:

ISR(INT1_vect)
{
     720:	1f 92       	push	r1
     722:	0f 92       	push	r0
     724:	0f b6       	in	r0, 0x3f	; 63
     726:	0f 92       	push	r0
     728:	11 24       	eor	r1, r1
     72a:	2f 93       	push	r18
     72c:	3f 93       	push	r19
     72e:	4f 93       	push	r20
     730:	5f 93       	push	r21
     732:	6f 93       	push	r22
     734:	7f 93       	push	r23
     736:	8f 93       	push	r24
     738:	9f 93       	push	r25
     73a:	af 93       	push	r26
     73c:	bf 93       	push	r27
     73e:	ef 93       	push	r30
     740:	ff 93       	push	r31
	interrupt_handler(1);
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	0e 94 26 03 	call	0x64c	; 0x64c <interrupt_handler>
}
     748:	ff 91       	pop	r31
     74a:	ef 91       	pop	r30
     74c:	bf 91       	pop	r27
     74e:	af 91       	pop	r26
     750:	9f 91       	pop	r25
     752:	8f 91       	pop	r24
     754:	7f 91       	pop	r23
     756:	6f 91       	pop	r22
     758:	5f 91       	pop	r21
     75a:	4f 91       	pop	r20
     75c:	3f 91       	pop	r19
     75e:	2f 91       	pop	r18
     760:	0f 90       	pop	r0
     762:	0f be       	out	0x3f, r0	; 63
     764:	0f 90       	pop	r0
     766:	1f 90       	pop	r1
     768:	18 95       	reti

0000076a <findPeak>:
	return (uint16_t)sample/pow(2,bits) * maxVal;
}

// find peak value of sinusoidal wave
uint16_t findPeak(uint16_t *samples, uint8_t size)
{
     76a:	dc 01       	movw	r26, r24
	uint16_t peak = 0;
	// iterate over samples and use largest value as peak
	for (uint8_t i = 0; i < size; i++) {
     76c:	90 e0       	ldi	r25, 0x00	; 0
}

// find peak value of sinusoidal wave
uint16_t findPeak(uint16_t *samples, uint8_t size)
{
	uint16_t peak = 0;
     76e:	40 e0       	ldi	r20, 0x00	; 0
     770:	50 e0       	ldi	r21, 0x00	; 0
	// iterate over samples and use largest value as peak
	for (uint8_t i = 0; i < size; i++) {
     772:	0d c0       	rjmp	.+26     	; 0x78e <findPeak+0x24>
		if (samples[i] > peak)
     774:	e9 2f       	mov	r30, r25
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	ee 0f       	add	r30, r30
     77a:	ff 1f       	adc	r31, r31
     77c:	ea 0f       	add	r30, r26
     77e:	fb 1f       	adc	r31, r27
     780:	20 81       	ld	r18, Z
     782:	31 81       	ldd	r19, Z+1	; 0x01
     784:	42 17       	cp	r20, r18
     786:	53 07       	cpc	r21, r19
     788:	08 f4       	brcc	.+2      	; 0x78c <findPeak+0x22>
			peak = samples[i];
     78a:	a9 01       	movw	r20, r18
// find peak value of sinusoidal wave
uint16_t findPeak(uint16_t *samples, uint8_t size)
{
	uint16_t peak = 0;
	// iterate over samples and use largest value as peak
	for (uint8_t i = 0; i < size; i++) {
     78c:	9f 5f       	subi	r25, 0xFF	; 255
     78e:	96 17       	cp	r25, r22
     790:	88 f3       	brcs	.-30     	; 0x774 <findPeak+0xa>
		if (samples[i] > peak)
			peak = samples[i];
	}
	
	return peak;
}
     792:	ca 01       	movw	r24, r20
     794:	08 95       	ret

00000796 <calculateRMS>:

// calculate the rms value from peak value of sinusoid
uint16_t calculateRMS(uint16_t peak)
{
	return peak/ROOT_2;
     796:	bc 01       	movw	r22, r24
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 17 07 	call	0xe2e	; 0xe2e <__floatunsisf>
     7a0:	2e ee       	ldi	r18, 0xEE	; 238
     7a2:	34 e0       	ldi	r19, 0x04	; 4
     7a4:	45 eb       	ldi	r20, 0xB5	; 181
     7a6:	5f e3       	ldi	r21, 0x3F	; 63
     7a8:	0e 94 6f 06 	call	0xcde	; 0xcde <__divsf3>
     7ac:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__fixunssfsi>
}
     7b0:	cb 01       	movw	r24, r22
     7b2:	08 95       	ret

000007b4 <getPhaseDifference>:
{
	int16_t phaseDifference = 0;
	int16_t Tz = 0;
	int16_t Tp = 0;

	if (size1 < 3 || size2 < 3)
     7b4:	63 30       	cpi	r22, 0x03	; 3
     7b6:	08 f4       	brcc	.+2      	; 0x7ba <getPhaseDifference+0x6>
     7b8:	44 c0       	rjmp	.+136    	; 0x842 <getPhaseDifference+0x8e>
     7ba:	23 30       	cpi	r18, 0x03	; 3
     7bc:	08 f4       	brcc	.+2      	; 0x7c0 <getPhaseDifference+0xc>
     7be:	44 c0       	rjmp	.+136    	; 0x848 <getPhaseDifference+0x94>
		return phaseDifference;

	if (crossTimes1[0] > crossTimes2[0]) {
     7c0:	fc 01       	movw	r30, r24
     7c2:	60 81       	ld	r22, Z
     7c4:	71 81       	ldd	r23, Z+1	; 0x01
     7c6:	fa 01       	movw	r30, r20
     7c8:	20 81       	ld	r18, Z
     7ca:	31 81       	ldd	r19, Z+1	; 0x01
     7cc:	26 17       	cp	r18, r22
     7ce:	37 07       	cpc	r19, r23
     7d0:	50 f4       	brcc	.+20     	; 0x7e6 <getPhaseDifference+0x32>
		Tz = crossTimes2[0] - crossTimes2[2];
     7d2:	44 81       	ldd	r20, Z+4	; 0x04
     7d4:	55 81       	ldd	r21, Z+5	; 0x05
     7d6:	24 1b       	sub	r18, r20
     7d8:	35 0b       	sbc	r19, r21
		Tp = crossTimes1[2] - crossTimes2[2];
     7da:	fc 01       	movw	r30, r24
     7dc:	64 81       	ldd	r22, Z+4	; 0x04
     7de:	75 81       	ldd	r23, Z+5	; 0x05
     7e0:	64 1b       	sub	r22, r20
     7e2:	75 0b       	sbc	r23, r21
     7e4:	13 c0       	rjmp	.+38     	; 0x80c <getPhaseDifference+0x58>
	} else if (crossTimes1[0] < crossTimes2[0]) {
     7e6:	62 17       	cp	r22, r18
     7e8:	73 07       	cpc	r23, r19
     7ea:	60 f4       	brcc	.+24     	; 0x804 <getPhaseDifference+0x50>
		Tz = crossTimes1[0] - crossTimes1[2];
     7ec:	fc 01       	movw	r30, r24
     7ee:	84 81       	ldd	r24, Z+4	; 0x04
     7f0:	95 81       	ldd	r25, Z+5	; 0x05
     7f2:	9b 01       	movw	r18, r22
     7f4:	28 1b       	sub	r18, r24
     7f6:	39 0b       	sbc	r19, r25
		Tp = crossTimes2[2] - crossTimes1[2];
     7f8:	fa 01       	movw	r30, r20
     7fa:	64 81       	ldd	r22, Z+4	; 0x04
     7fc:	75 81       	ldd	r23, Z+5	; 0x05
     7fe:	68 1b       	sub	r22, r24
     800:	79 0b       	sbc	r23, r25
     802:	04 c0       	rjmp	.+8      	; 0x80c <getPhaseDifference+0x58>
uint16_t getPhaseDifference(uint16_t *crossTimes1, uint8_t size1, 
		uint16_t *crossTimes2, uint8_t size2) 
{
	int16_t phaseDifference = 0;
	int16_t Tz = 0;
	int16_t Tp = 0;
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	70 e0       	ldi	r23, 0x00	; 0
// since these are more accurate
uint16_t getPhaseDifference(uint16_t *crossTimes1, uint8_t size1, 
		uint16_t *crossTimes2, uint8_t size2) 
{
	int16_t phaseDifference = 0;
	int16_t Tz = 0;
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	30 e0       	ldi	r19, 0x00	; 0
	} else if (crossTimes1[0] < crossTimes2[0]) {
		Tz = crossTimes1[0] - crossTimes1[2];
		Tp = crossTimes2[2] - crossTimes1[2];
	}

	phaseDifference = (int16_t)(360 * (double)(Tz/Tp));
     80c:	c9 01       	movw	r24, r18
     80e:	0e 94 91 0c 	call	0x1922	; 0x1922 <__divmodhi4>
     812:	07 2e       	mov	r0, r23
     814:	00 0c       	add	r0, r0
     816:	88 0b       	sbc	r24, r24
     818:	99 0b       	sbc	r25, r25
     81a:	0e 94 19 07 	call	0xe32	; 0xe32 <__floatsisf>
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	44 eb       	ldi	r20, 0xB4	; 180
     824:	53 e4       	ldi	r21, 0x43	; 67
     826:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__mulsf3>
     82a:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <__fixsfsi>

	return abs(phaseDifference);
     82e:	9b 01       	movw	r18, r22
     830:	77 23       	and	r23, r23
     832:	24 f4       	brge	.+8      	; 0x83c <getPhaseDifference+0x88>
     834:	22 27       	eor	r18, r18
     836:	33 27       	eor	r19, r19
     838:	26 1b       	sub	r18, r22
     83a:	37 0b       	sbc	r19, r23
     83c:	82 2f       	mov	r24, r18
     83e:	93 2f       	mov	r25, r19
     840:	08 95       	ret
	int16_t phaseDifference = 0;
	int16_t Tz = 0;
	int16_t Tp = 0;

	if (size1 < 3 || size2 < 3)
		return phaseDifference;
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	08 95       	ret
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	90 e0       	ldi	r25, 0x00	; 0
	}

	phaseDifference = (int16_t)(360 * (double)(Tz/Tp));

	return abs(phaseDifference);
}
     84c:	08 95       	ret

0000084e <calculatePowerFactor>:

// calculate power factor
uint16_t calculatePowerFactor(uint16_t phase) 
{
	phase *= (PI/180);
     84e:	bc 01       	movw	r22, r24
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 17 07 	call	0xe2e	; 0xe2e <__floatunsisf>
     858:	2e e2       	ldi	r18, 0x2E	; 46
     85a:	3a ef       	ldi	r19, 0xFA	; 250
     85c:	4e e8       	ldi	r20, 0x8E	; 142
     85e:	5c e3       	ldi	r21, 0x3C	; 60
     860:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__mulsf3>
     864:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__fixunssfsi>
	return (cos(phase) * 1000);
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 17 07 	call	0xe2e	; 0xe2e <__floatunsisf>
     870:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <cos>
     874:	20 e0       	ldi	r18, 0x00	; 0
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	4a e7       	ldi	r20, 0x7A	; 122
     87a:	54 e4       	ldi	r21, 0x44	; 68
     87c:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__mulsf3>
     880:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__fixunssfsi>
}
     884:	cb 01       	movw	r24, r22
     886:	08 95       	ret

00000888 <calculateAveragePower>:

// calculate average power using standard equation
uint16_t calculateAveragePower(uint16_t Vrms, uint16_t Irms, uint16_t pf)
{
     888:	fb 01       	movw	r30, r22
	double p = (Vrms/1000 * Irms/1000 * pf/1000);
     88a:	9c 01       	movw	r18, r24
     88c:	36 95       	lsr	r19
     88e:	27 95       	ror	r18
     890:	36 95       	lsr	r19
     892:	27 95       	ror	r18
     894:	36 95       	lsr	r19
     896:	27 95       	ror	r18
     898:	a5 ec       	ldi	r26, 0xC5	; 197
     89a:	b0 e2       	ldi	r27, 0x20	; 32
     89c:	0e 94 c7 0c 	call	0x198e	; 0x198e <__umulhisi3>
     8a0:	92 95       	swap	r25
     8a2:	82 95       	swap	r24
     8a4:	8f 70       	andi	r24, 0x0F	; 15
     8a6:	89 27       	eor	r24, r25
     8a8:	9f 70       	andi	r25, 0x0F	; 15
     8aa:	89 27       	eor	r24, r25
     8ac:	8e 9f       	mul	r24, r30
     8ae:	90 01       	movw	r18, r0
     8b0:	8f 9f       	mul	r24, r31
     8b2:	30 0d       	add	r19, r0
     8b4:	9e 9f       	mul	r25, r30
     8b6:	30 0d       	add	r19, r0
     8b8:	11 24       	eor	r1, r1
     8ba:	36 95       	lsr	r19
     8bc:	27 95       	ror	r18
     8be:	36 95       	lsr	r19
     8c0:	27 95       	ror	r18
     8c2:	36 95       	lsr	r19
     8c4:	27 95       	ror	r18
     8c6:	0e 94 c7 0c 	call	0x198e	; 0x198e <__umulhisi3>
     8ca:	92 95       	swap	r25
     8cc:	82 95       	swap	r24
     8ce:	8f 70       	andi	r24, 0x0F	; 15
     8d0:	89 27       	eor	r24, r25
     8d2:	9f 70       	andi	r25, 0x0F	; 15
     8d4:	89 27       	eor	r24, r25
     8d6:	84 9f       	mul	r24, r20
     8d8:	90 01       	movw	r18, r0
     8da:	85 9f       	mul	r24, r21
     8dc:	30 0d       	add	r19, r0
     8de:	94 9f       	mul	r25, r20
     8e0:	30 0d       	add	r19, r0
     8e2:	11 24       	eor	r1, r1
     8e4:	36 95       	lsr	r19
     8e6:	27 95       	ror	r18
     8e8:	36 95       	lsr	r19
     8ea:	27 95       	ror	r18
     8ec:	36 95       	lsr	r19
     8ee:	27 95       	ror	r18
     8f0:	0e 94 c7 0c 	call	0x198e	; 0x198e <__umulhisi3>
     8f4:	92 95       	swap	r25
     8f6:	82 95       	swap	r24
     8f8:	8f 70       	andi	r24, 0x0F	; 15
     8fa:	89 27       	eor	r24, r25
     8fc:	9f 70       	andi	r25, 0x0F	; 15
     8fe:	89 27       	eor	r24, r25
     900:	bc 01       	movw	r22, r24
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 17 07 	call	0xe2e	; 0xe2e <__floatunsisf>
	return (uint16_t)(p*1000);
     90a:	20 e0       	ldi	r18, 0x00	; 0
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	4a e7       	ldi	r20, 0x7A	; 122
     910:	54 e4       	ldi	r21, 0x44	; 68
     912:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__mulsf3>
     916:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__fixunssfsi>
}
     91a:	cb 01       	movw	r24, r22
     91c:	08 95       	ret

0000091e <timer_init>:
void timer_init()
{
	//Sets a 256 prescaler, new Frequency = 62.5kHz
	//Time Period for 1 count = 0.000016s = 16us
	//Time Period for 65535 counts = 1.04856s
	TCCR1B |= (1<<CS12);
     91e:	e1 e8       	ldi	r30, 0x81	; 129
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 81       	ld	r24, Z
     924:	84 60       	ori	r24, 0x04	; 4
     926:	80 83       	st	Z, r24
     928:	08 95       	ret

0000092a <resetTimer>:
}

void resetTimer()
{
	// clear the timer counter
	TCNT1 = 0;
     92a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     92e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     932:	08 95       	ret

00000934 <getTimerCount>:
}

uint16_t getTimerCount()
{
	//returns the current value stored in the two 8-bit TIMER1 Registers
	return TCNT1;
     934:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     938:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
}
     93c:	08 95       	ret

0000093e <calculateTime>:
uint16_t calculateTime(uint16_t scale)
{
	// set scale into time, convert clock speed from Hz to MHz to scale time to us
	double step = 1/((double)(F_CPU/1000000)/256);
	// multiply timer register by value of time step
	double timeSeconds = step * getTimerCount();
     93e:	0e 94 9a 04 	call	0x934	; 0x934 <getTimerCount>
     942:	bc 01       	movw	r22, r24
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 17 07 	call	0xe2e	; 0xe2e <__floatunsisf>
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	40 e8       	ldi	r20, 0x80	; 128
     952:	51 e4       	ldi	r21, 0x41	; 65
     954:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__mulsf3>
	return (uint16_t)(timeSeconds);
     958:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__fixunssfsi>
}
     95c:	cb 01       	movw	r24, r22
     95e:	08 95       	ret

00000960 <get_time>:

uint16_t get_time()
{
	// returns the current timer count to the function caller
	return calculateTime(TIMER_PRESCALER);
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	0e 94 9f 04 	call	0x93e	; 0x93e <calculateTime>
     968:	08 95       	ret

0000096a <get_uart_string>:
 */ 
#include "uart.h"

// get uart string
void get_uart_string(uint16_t val, char *string, char ident)
{
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	8c 01       	movw	r16, r24
     976:	d6 2f       	mov	r29, r22
     978:	f7 2e       	mov	r15, r23
     97a:	c4 2f       	mov	r28, r20
	double value = 0;
	switch (ident) {
     97c:	49 34       	cpi	r20, 0x49	; 73
     97e:	09 f4       	brne	.+2      	; 0x982 <get_uart_string+0x18>
     980:	65 c0       	rjmp	.+202    	; 0xa4c <get_uart_string+0xe2>
     982:	20 f4       	brcc	.+8      	; 0x98c <get_uart_string+0x22>
     984:	46 34       	cpi	r20, 0x46	; 70
     986:	09 f4       	brne	.+2      	; 0x98a <get_uart_string+0x20>
     988:	76 c0       	rjmp	.+236    	; 0xa76 <get_uart_string+0x10c>
     98a:	28 c1       	rjmp	.+592    	; 0xbdc <get_uart_string+0x272>
     98c:	40 35       	cpi	r20, 0x50	; 80
     98e:	09 f4       	brne	.+2      	; 0x992 <get_uart_string+0x28>
     990:	cc c0       	rjmp	.+408    	; 0xb2a <get_uart_string+0x1c0>
     992:	46 35       	cpi	r20, 0x56	; 86
     994:	09 f0       	breq	.+2      	; 0x998 <get_uart_string+0x2e>
     996:	22 c1       	rjmp	.+580    	; 0xbdc <get_uart_string+0x272>
		case 'V':
			value = (double)((double)val/1000);
     998:	bc 01       	movw	r22, r24
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	0e 94 17 07 	call	0xe2e	; 0xe2e <__floatunsisf>
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	4a e7       	ldi	r20, 0x7A	; 122
     9a8:	54 e4       	ldi	r21, 0x44	; 68
     9aa:	0e 94 6f 06 	call	0xcde	; 0xcde <__divsf3>
     9ae:	46 2f       	mov	r20, r22
     9b0:	57 2f       	mov	r21, r23
     9b2:	e8 2f       	mov	r30, r24
     9b4:	f9 2f       	mov	r31, r25
			if (val % 1000 == 0)
     9b6:	98 01       	movw	r18, r16
     9b8:	36 95       	lsr	r19
     9ba:	27 95       	ror	r18
     9bc:	36 95       	lsr	r19
     9be:	27 95       	ror	r18
     9c0:	36 95       	lsr	r19
     9c2:	27 95       	ror	r18
     9c4:	a5 ec       	ldi	r26, 0xC5	; 197
     9c6:	b0 e2       	ldi	r27, 0x20	; 32
     9c8:	0e 94 c7 0c 	call	0x198e	; 0x198e <__umulhisi3>
     9cc:	92 95       	swap	r25
     9ce:	82 95       	swap	r24
     9d0:	8f 70       	andi	r24, 0x0F	; 15
     9d2:	89 27       	eor	r24, r25
     9d4:	9f 70       	andi	r25, 0x0F	; 15
     9d6:	89 27       	eor	r24, r25
     9d8:	68 ee       	ldi	r22, 0xE8	; 232
     9da:	73 e0       	ldi	r23, 0x03	; 3
     9dc:	86 9f       	mul	r24, r22
     9de:	90 01       	movw	r18, r0
     9e0:	87 9f       	mul	r24, r23
     9e2:	30 0d       	add	r19, r0
     9e4:	96 9f       	mul	r25, r22
     9e6:	30 0d       	add	r19, r0
     9e8:	11 24       	eor	r1, r1
     9ea:	02 17       	cp	r16, r18
     9ec:	13 07       	cpc	r17, r19
     9ee:	b9 f4       	brne	.+46     	; 0xa1e <get_uart_string+0xb4>
				sprintf(string, "%c=%04g\n", ident, value);
     9f0:	ff 93       	push	r31
     9f2:	ef 93       	push	r30
     9f4:	5f 93       	push	r21
     9f6:	4f 93       	push	r20
     9f8:	1f 92       	push	r1
     9fa:	cf 93       	push	r28
     9fc:	82 e2       	ldi	r24, 0x22	; 34
     9fe:	91 e0       	ldi	r25, 0x01	; 1
     a00:	9f 93       	push	r25
     a02:	8f 93       	push	r24
     a04:	ff 92       	push	r15
     a06:	df 93       	push	r29
     a08:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <sprintf>
     a0c:	8d b7       	in	r24, 0x3d	; 61
     a0e:	9e b7       	in	r25, 0x3e	; 62
     a10:	0a 96       	adiw	r24, 0x0a	; 10
     a12:	0f b6       	in	r0, 0x3f	; 63
     a14:	f8 94       	cli
     a16:	9e bf       	out	0x3e, r25	; 62
     a18:	0f be       	out	0x3f, r0	; 63
     a1a:	8d bf       	out	0x3d, r24	; 61
     a1c:	df c0       	rjmp	.+446    	; 0xbdc <get_uart_string+0x272>
			else
				sprintf(string, "%c=%05g\n", ident, value);
     a1e:	ff 93       	push	r31
     a20:	ef 93       	push	r30
     a22:	5f 93       	push	r21
     a24:	4f 93       	push	r20
     a26:	1f 92       	push	r1
     a28:	cf 93       	push	r28
     a2a:	8b e2       	ldi	r24, 0x2B	; 43
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	9f 93       	push	r25
     a30:	8f 93       	push	r24
     a32:	ff 92       	push	r15
     a34:	df 93       	push	r29
     a36:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <sprintf>
     a3a:	8d b7       	in	r24, 0x3d	; 61
     a3c:	9e b7       	in	r25, 0x3e	; 62
     a3e:	0a 96       	adiw	r24, 0x0a	; 10
     a40:	0f b6       	in	r0, 0x3f	; 63
     a42:	f8 94       	cli
     a44:	9e bf       	out	0x3e, r25	; 62
     a46:	0f be       	out	0x3f, r0	; 63
     a48:	8d bf       	out	0x3d, r24	; 61
     a4a:	c8 c0       	rjmp	.+400    	; 0xbdc <get_uart_string+0x272>
			break;
		case 'I':
			sprintf(string, "%c=%04u\n", ident, val);
     a4c:	1f 93       	push	r17
     a4e:	8f 93       	push	r24
     a50:	1f 92       	push	r1
     a52:	4f 93       	push	r20
     a54:	84 e3       	ldi	r24, 0x34	; 52
     a56:	91 e0       	ldi	r25, 0x01	; 1
     a58:	9f 93       	push	r25
     a5a:	8f 93       	push	r24
     a5c:	7f 93       	push	r23
     a5e:	6f 93       	push	r22
     a60:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <sprintf>
			break;
     a64:	8d b7       	in	r24, 0x3d	; 61
     a66:	9e b7       	in	r25, 0x3e	; 62
     a68:	08 96       	adiw	r24, 0x08	; 8
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	9e bf       	out	0x3e, r25	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	8d bf       	out	0x3d, r24	; 61
     a74:	b3 c0       	rjmp	.+358    	; 0xbdc <get_uart_string+0x272>
		case 'F':
			value = (double)((double)val/1000);
     a76:	bc 01       	movw	r22, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 17 07 	call	0xe2e	; 0xe2e <__floatunsisf>
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	4a e7       	ldi	r20, 0x7A	; 122
     a86:	54 e4       	ldi	r21, 0x44	; 68
     a88:	0e 94 6f 06 	call	0xcde	; 0xcde <__divsf3>
     a8c:	46 2f       	mov	r20, r22
     a8e:	57 2f       	mov	r21, r23
     a90:	e8 2f       	mov	r30, r24
     a92:	f9 2f       	mov	r31, r25
			if (val % 1000 == 0)
     a94:	98 01       	movw	r18, r16
     a96:	36 95       	lsr	r19
     a98:	27 95       	ror	r18
     a9a:	36 95       	lsr	r19
     a9c:	27 95       	ror	r18
     a9e:	36 95       	lsr	r19
     aa0:	27 95       	ror	r18
     aa2:	a5 ec       	ldi	r26, 0xC5	; 197
     aa4:	b0 e2       	ldi	r27, 0x20	; 32
     aa6:	0e 94 c7 0c 	call	0x198e	; 0x198e <__umulhisi3>
     aaa:	92 95       	swap	r25
     aac:	82 95       	swap	r24
     aae:	8f 70       	andi	r24, 0x0F	; 15
     ab0:	89 27       	eor	r24, r25
     ab2:	9f 70       	andi	r25, 0x0F	; 15
     ab4:	89 27       	eor	r24, r25
     ab6:	68 ee       	ldi	r22, 0xE8	; 232
     ab8:	73 e0       	ldi	r23, 0x03	; 3
     aba:	86 9f       	mul	r24, r22
     abc:	90 01       	movw	r18, r0
     abe:	87 9f       	mul	r24, r23
     ac0:	30 0d       	add	r19, r0
     ac2:	96 9f       	mul	r25, r22
     ac4:	30 0d       	add	r19, r0
     ac6:	11 24       	eor	r1, r1
     ac8:	02 17       	cp	r16, r18
     aca:	13 07       	cpc	r17, r19
     acc:	b9 f4       	brne	.+46     	; 0xafc <get_uart_string+0x192>
				sprintf(string, "%c=%04g\n", ident, value);
     ace:	ff 93       	push	r31
     ad0:	ef 93       	push	r30
     ad2:	5f 93       	push	r21
     ad4:	4f 93       	push	r20
     ad6:	1f 92       	push	r1
     ad8:	cf 93       	push	r28
     ada:	82 e2       	ldi	r24, 0x22	; 34
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	9f 93       	push	r25
     ae0:	8f 93       	push	r24
     ae2:	ff 92       	push	r15
     ae4:	df 93       	push	r29
     ae6:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <sprintf>
     aea:	8d b7       	in	r24, 0x3d	; 61
     aec:	9e b7       	in	r25, 0x3e	; 62
     aee:	0a 96       	adiw	r24, 0x0a	; 10
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	f8 94       	cli
     af4:	9e bf       	out	0x3e, r25	; 62
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	8d bf       	out	0x3d, r24	; 61
     afa:	70 c0       	rjmp	.+224    	; 0xbdc <get_uart_string+0x272>
			else
				sprintf(string, "%c=%05g\n", ident, value);
     afc:	ff 93       	push	r31
     afe:	ef 93       	push	r30
     b00:	5f 93       	push	r21
     b02:	4f 93       	push	r20
     b04:	1f 92       	push	r1
     b06:	cf 93       	push	r28
     b08:	8b e2       	ldi	r24, 0x2B	; 43
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	9f 93       	push	r25
     b0e:	8f 93       	push	r24
     b10:	ff 92       	push	r15
     b12:	df 93       	push	r29
     b14:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <sprintf>
     b18:	8d b7       	in	r24, 0x3d	; 61
     b1a:	9e b7       	in	r25, 0x3e	; 62
     b1c:	0a 96       	adiw	r24, 0x0a	; 10
     b1e:	0f b6       	in	r0, 0x3f	; 63
     b20:	f8 94       	cli
     b22:	9e bf       	out	0x3e, r25	; 62
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	8d bf       	out	0x3d, r24	; 61
     b28:	59 c0       	rjmp	.+178    	; 0xbdc <get_uart_string+0x272>
			break;
		case 'P':
			value = (double)((double)val/1000);
     b2a:	bc 01       	movw	r22, r24
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	0e 94 17 07 	call	0xe2e	; 0xe2e <__floatunsisf>
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	4a e7       	ldi	r20, 0x7A	; 122
     b3a:	54 e4       	ldi	r21, 0x44	; 68
     b3c:	0e 94 6f 06 	call	0xcde	; 0xcde <__divsf3>
     b40:	46 2f       	mov	r20, r22
     b42:	57 2f       	mov	r21, r23
     b44:	e8 2f       	mov	r30, r24
     b46:	f9 2f       	mov	r31, r25
			if (val % 1000 == 0)
     b48:	98 01       	movw	r18, r16
     b4a:	36 95       	lsr	r19
     b4c:	27 95       	ror	r18
     b4e:	36 95       	lsr	r19
     b50:	27 95       	ror	r18
     b52:	36 95       	lsr	r19
     b54:	27 95       	ror	r18
     b56:	a5 ec       	ldi	r26, 0xC5	; 197
     b58:	b0 e2       	ldi	r27, 0x20	; 32
     b5a:	0e 94 c7 0c 	call	0x198e	; 0x198e <__umulhisi3>
     b5e:	92 95       	swap	r25
     b60:	82 95       	swap	r24
     b62:	8f 70       	andi	r24, 0x0F	; 15
     b64:	89 27       	eor	r24, r25
     b66:	9f 70       	andi	r25, 0x0F	; 15
     b68:	89 27       	eor	r24, r25
     b6a:	68 ee       	ldi	r22, 0xE8	; 232
     b6c:	73 e0       	ldi	r23, 0x03	; 3
     b6e:	86 9f       	mul	r24, r22
     b70:	90 01       	movw	r18, r0
     b72:	87 9f       	mul	r24, r23
     b74:	30 0d       	add	r19, r0
     b76:	96 9f       	mul	r25, r22
     b78:	30 0d       	add	r19, r0
     b7a:	11 24       	eor	r1, r1
     b7c:	02 17       	cp	r16, r18
     b7e:	13 07       	cpc	r17, r19
     b80:	b9 f4       	brne	.+46     	; 0xbb0 <get_uart_string+0x246>
				sprintf(string, "%c=%04g\n", ident, value);
     b82:	ff 93       	push	r31
     b84:	ef 93       	push	r30
     b86:	5f 93       	push	r21
     b88:	4f 93       	push	r20
     b8a:	1f 92       	push	r1
     b8c:	cf 93       	push	r28
     b8e:	82 e2       	ldi	r24, 0x22	; 34
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	9f 93       	push	r25
     b94:	8f 93       	push	r24
     b96:	ff 92       	push	r15
     b98:	df 93       	push	r29
     b9a:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <sprintf>
     b9e:	8d b7       	in	r24, 0x3d	; 61
     ba0:	9e b7       	in	r25, 0x3e	; 62
     ba2:	0a 96       	adiw	r24, 0x0a	; 10
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	f8 94       	cli
     ba8:	9e bf       	out	0x3e, r25	; 62
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	8d bf       	out	0x3d, r24	; 61
     bae:	16 c0       	rjmp	.+44     	; 0xbdc <get_uart_string+0x272>
			else
				sprintf(string, "%c=%05g\n", ident, value);
     bb0:	ff 93       	push	r31
     bb2:	ef 93       	push	r30
     bb4:	5f 93       	push	r21
     bb6:	4f 93       	push	r20
     bb8:	1f 92       	push	r1
     bba:	cf 93       	push	r28
     bbc:	8b e2       	ldi	r24, 0x2B	; 43
     bbe:	91 e0       	ldi	r25, 0x01	; 1
     bc0:	9f 93       	push	r25
     bc2:	8f 93       	push	r24
     bc4:	ff 92       	push	r15
     bc6:	df 93       	push	r29
     bc8:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <sprintf>
     bcc:	8d b7       	in	r24, 0x3d	; 61
     bce:	9e b7       	in	r25, 0x3e	; 62
     bd0:	0a 96       	adiw	r24, 0x0a	; 10
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	9e bf       	out	0x3e, r25	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	8d bf       	out	0x3d, r24	; 61
			break;
	}
}
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	ff 90       	pop	r15
     be6:	08 95       	ret

00000be8 <calculateUBRR>:

// calculate corrext ubrr
uint16_t calculateUBRR(uint16_t baud)
{
	return (uint16_t)(F_CPU/(16*(unsigned long)baud) - 1);
     be8:	a0 e0       	ldi	r26, 0x00	; 0
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	aa 1f       	adc	r26, r26
     bf2:	bb 1f       	adc	r27, r27
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	aa 1f       	adc	r26, r26
     bfa:	bb 1f       	adc	r27, r27
     bfc:	9c 01       	movw	r18, r24
     bfe:	ad 01       	movw	r20, r26
     c00:	22 0f       	add	r18, r18
     c02:	33 1f       	adc	r19, r19
     c04:	44 1f       	adc	r20, r20
     c06:	55 1f       	adc	r21, r21
     c08:	22 0f       	add	r18, r18
     c0a:	33 1f       	adc	r19, r19
     c0c:	44 1f       	adc	r20, r20
     c0e:	55 1f       	adc	r21, r21
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	74 e2       	ldi	r23, 0x24	; 36
     c14:	84 ef       	ldi	r24, 0xF4	; 244
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 a5 0c 	call	0x194a	; 0x194a <__udivmodsi4>
}
     c1c:	c9 01       	movw	r24, r18
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	08 95       	ret

00000c22 <uart_init>:

// uart init function
void uart_init(uint16_t baud)
{	
	uint16_t ubrr = calculateUBRR(baud);
     c22:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <calculateUBRR>
     c26:	9c 01       	movw	r18, r24
	// Enable TX and RX
	UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
     c28:	e1 ec       	ldi	r30, 0xC1	; 193
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	90 81       	ld	r25, Z
     c2e:	98 61       	ori	r25, 0x18	; 24
     c30:	90 83       	st	Z, r25
	// set character size to 8-bit
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
     c32:	e2 ec       	ldi	r30, 0xC2	; 194
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	90 81       	ld	r25, Z
     c38:	96 60       	ori	r25, 0x06	; 6
     c3a:	90 83       	st	Z, r25
	UCSR0C &= ~(1<<UPM00);
     c3c:	90 81       	ld	r25, Z
     c3e:	9f 7e       	andi	r25, 0xEF	; 239
     c40:	90 83       	st	Z, r25
	UCSR0C &= ~(1<<UPM01);
     c42:	90 81       	ld	r25, Z
     c44:	9f 7d       	andi	r25, 0xDF	; 223
     c46:	90 83       	st	Z, r25
	// Set the baud rate
	UBRR0 = ubrr;
     c48:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     c4c:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     c50:	08 95       	ret

00000c52 <uart_transmit>:

// uart transmit function
void uart_transmit(uint8_t data)
{
	// wait until transmitter is ready
	while ((1<<UDRE0 & UCSR0A) == 0x00) {;} // do nothing
     c52:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     c56:	95 ff       	sbrs	r25, 5
     c58:	fc cf       	rjmp	.-8      	; 0xc52 <uart_transmit>
	// transmit data
	UDR0 = data;
     c5a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     c5e:	08 95       	ret

00000c60 <uart_write>:
}

// uart write function
// write multiple characters at once
void uart_write(char *data) 
{
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	8c 01       	movw	r16, r24
	int i = 0;
     c6a:	c0 e0       	ldi	r28, 0x00	; 0
     c6c:	d0 e0       	ldi	r29, 0x00	; 0
	while (data[i] != '\0') {
     c6e:	03 c0       	rjmp	.+6      	; 0xc76 <uart_write+0x16>
		uart_transmit(data[i]);
     c70:	0e 94 29 06 	call	0xc52	; 0xc52 <uart_transmit>
		i++;
     c74:	21 96       	adiw	r28, 0x01	; 1
// uart write function
// write multiple characters at once
void uart_write(char *data) 
{
	int i = 0;
	while (data[i] != '\0') {
     c76:	f8 01       	movw	r30, r16
     c78:	ec 0f       	add	r30, r28
     c7a:	fd 1f       	adc	r31, r29
     c7c:	80 81       	ld	r24, Z
     c7e:	81 11       	cpse	r24, r1
     c80:	f7 cf       	rjmp	.-18     	; 0xc70 <uart_write+0x10>
		uart_transmit(data[i]);
		i++;
	}
}
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	1f 91       	pop	r17
     c88:	0f 91       	pop	r16
     c8a:	08 95       	ret

00000c8c <main>:

// finite state machines
#include "lib/fsm.h"

int main(void) 
{
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	a2 97       	sbiw	r28, 0x22	; 34
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
	// create function pointer struct
	struct functionPointers funcs = {
     ca0:	82 e2       	ldi	r24, 0x22	; 34
     ca2:	e0 e0       	ldi	r30, 0x00	; 0
     ca4:	f1 e0       	ldi	r31, 0x01	; 1
     ca6:	de 01       	movw	r26, r28
     ca8:	11 96       	adiw	r26, 0x01	; 1
     caa:	01 90       	ld	r0, Z+
     cac:	0d 92       	st	X+, r0
     cae:	8a 95       	dec	r24
     cb0:	e1 f7       	brne	.-8      	; 0xcaa <main+0x1e>
		.calculate_average_power = calculateAveragePower,
	};
	
	
	// init fsm by passing structs to it
	fsmInit(&funcs);
     cb2:	ce 01       	movw	r24, r28
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	0e 94 3a 01 	call	0x274	; 0x274 <fsmInit>
	
	run();
     cba:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <run>
}
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a2 96       	adiw	r28, 0x22	; 34
     cc4:	0f b6       	in	r0, 0x3f	; 63
     cc6:	f8 94       	cli
     cc8:	de bf       	out	0x3e, r29	; 62
     cca:	0f be       	out	0x3f, r0	; 63
     ccc:	cd bf       	out	0x3d, r28	; 61
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <cos>:
     cd4:	0e 94 6d 07 	call	0xeda	; 0xeda <__fp_rempio2>
     cd8:	e3 95       	inc	r30
     cda:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__fp_sinus>

00000cde <__divsf3>:
     cde:	0e 94 83 06 	call	0xd06	; 0xd06 <__divsf3x>
     ce2:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__fp_round>
     ce6:	0e 94 64 07 	call	0xec8	; 0xec8 <__fp_pscB>
     cea:	58 f0       	brcs	.+22     	; 0xd02 <__divsf3+0x24>
     cec:	0e 94 5d 07 	call	0xeba	; 0xeba <__fp_pscA>
     cf0:	40 f0       	brcs	.+16     	; 0xd02 <__divsf3+0x24>
     cf2:	29 f4       	brne	.+10     	; 0xcfe <__divsf3+0x20>
     cf4:	5f 3f       	cpi	r21, 0xFF	; 255
     cf6:	29 f0       	breq	.+10     	; 0xd02 <__divsf3+0x24>
     cf8:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_inf>
     cfc:	51 11       	cpse	r21, r1
     cfe:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__fp_szero>
     d02:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_nan>

00000d06 <__divsf3x>:
     d06:	0e 94 bb 07 	call	0xf76	; 0xf76 <__fp_split3>
     d0a:	68 f3       	brcs	.-38     	; 0xce6 <__divsf3+0x8>

00000d0c <__divsf3_pse>:
     d0c:	99 23       	and	r25, r25
     d0e:	b1 f3       	breq	.-20     	; 0xcfc <__divsf3+0x1e>
     d10:	55 23       	and	r21, r21
     d12:	91 f3       	breq	.-28     	; 0xcf8 <__divsf3+0x1a>
     d14:	95 1b       	sub	r25, r21
     d16:	55 0b       	sbc	r21, r21
     d18:	bb 27       	eor	r27, r27
     d1a:	aa 27       	eor	r26, r26
     d1c:	62 17       	cp	r22, r18
     d1e:	73 07       	cpc	r23, r19
     d20:	84 07       	cpc	r24, r20
     d22:	38 f0       	brcs	.+14     	; 0xd32 <__divsf3_pse+0x26>
     d24:	9f 5f       	subi	r25, 0xFF	; 255
     d26:	5f 4f       	sbci	r21, 0xFF	; 255
     d28:	22 0f       	add	r18, r18
     d2a:	33 1f       	adc	r19, r19
     d2c:	44 1f       	adc	r20, r20
     d2e:	aa 1f       	adc	r26, r26
     d30:	a9 f3       	breq	.-22     	; 0xd1c <__divsf3_pse+0x10>
     d32:	35 d0       	rcall	.+106    	; 0xd9e <__divsf3_pse+0x92>
     d34:	0e 2e       	mov	r0, r30
     d36:	3a f0       	brmi	.+14     	; 0xd46 <__divsf3_pse+0x3a>
     d38:	e0 e8       	ldi	r30, 0x80	; 128
     d3a:	32 d0       	rcall	.+100    	; 0xda0 <__divsf3_pse+0x94>
     d3c:	91 50       	subi	r25, 0x01	; 1
     d3e:	50 40       	sbci	r21, 0x00	; 0
     d40:	e6 95       	lsr	r30
     d42:	00 1c       	adc	r0, r0
     d44:	ca f7       	brpl	.-14     	; 0xd38 <__divsf3_pse+0x2c>
     d46:	2b d0       	rcall	.+86     	; 0xd9e <__divsf3_pse+0x92>
     d48:	fe 2f       	mov	r31, r30
     d4a:	29 d0       	rcall	.+82     	; 0xd9e <__divsf3_pse+0x92>
     d4c:	66 0f       	add	r22, r22
     d4e:	77 1f       	adc	r23, r23
     d50:	88 1f       	adc	r24, r24
     d52:	bb 1f       	adc	r27, r27
     d54:	26 17       	cp	r18, r22
     d56:	37 07       	cpc	r19, r23
     d58:	48 07       	cpc	r20, r24
     d5a:	ab 07       	cpc	r26, r27
     d5c:	b0 e8       	ldi	r27, 0x80	; 128
     d5e:	09 f0       	breq	.+2      	; 0xd62 <__divsf3_pse+0x56>
     d60:	bb 0b       	sbc	r27, r27
     d62:	80 2d       	mov	r24, r0
     d64:	bf 01       	movw	r22, r30
     d66:	ff 27       	eor	r31, r31
     d68:	93 58       	subi	r25, 0x83	; 131
     d6a:	5f 4f       	sbci	r21, 0xFF	; 255
     d6c:	3a f0       	brmi	.+14     	; 0xd7c <__divsf3_pse+0x70>
     d6e:	9e 3f       	cpi	r25, 0xFE	; 254
     d70:	51 05       	cpc	r21, r1
     d72:	78 f0       	brcs	.+30     	; 0xd92 <__divsf3_pse+0x86>
     d74:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_inf>
     d78:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__fp_szero>
     d7c:	5f 3f       	cpi	r21, 0xFF	; 255
     d7e:	e4 f3       	brlt	.-8      	; 0xd78 <__divsf3_pse+0x6c>
     d80:	98 3e       	cpi	r25, 0xE8	; 232
     d82:	d4 f3       	brlt	.-12     	; 0xd78 <__divsf3_pse+0x6c>
     d84:	86 95       	lsr	r24
     d86:	77 95       	ror	r23
     d88:	67 95       	ror	r22
     d8a:	b7 95       	ror	r27
     d8c:	f7 95       	ror	r31
     d8e:	9f 5f       	subi	r25, 0xFF	; 255
     d90:	c9 f7       	brne	.-14     	; 0xd84 <__divsf3_pse+0x78>
     d92:	88 0f       	add	r24, r24
     d94:	91 1d       	adc	r25, r1
     d96:	96 95       	lsr	r25
     d98:	87 95       	ror	r24
     d9a:	97 f9       	bld	r25, 7
     d9c:	08 95       	ret
     d9e:	e1 e0       	ldi	r30, 0x01	; 1
     da0:	66 0f       	add	r22, r22
     da2:	77 1f       	adc	r23, r23
     da4:	88 1f       	adc	r24, r24
     da6:	bb 1f       	adc	r27, r27
     da8:	62 17       	cp	r22, r18
     daa:	73 07       	cpc	r23, r19
     dac:	84 07       	cpc	r24, r20
     dae:	ba 07       	cpc	r27, r26
     db0:	20 f0       	brcs	.+8      	; 0xdba <__divsf3_pse+0xae>
     db2:	62 1b       	sub	r22, r18
     db4:	73 0b       	sbc	r23, r19
     db6:	84 0b       	sbc	r24, r20
     db8:	ba 0b       	sbc	r27, r26
     dba:	ee 1f       	adc	r30, r30
     dbc:	88 f7       	brcc	.-30     	; 0xda0 <__divsf3_pse+0x94>
     dbe:	e0 95       	com	r30
     dc0:	08 95       	ret

00000dc2 <__fixsfsi>:
     dc2:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__fixunssfsi>
     dc6:	68 94       	set
     dc8:	b1 11       	cpse	r27, r1
     dca:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__fp_szero>
     dce:	08 95       	ret

00000dd0 <__fixunssfsi>:
     dd0:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fp_splitA>
     dd4:	88 f0       	brcs	.+34     	; 0xdf8 <__fixunssfsi+0x28>
     dd6:	9f 57       	subi	r25, 0x7F	; 127
     dd8:	98 f0       	brcs	.+38     	; 0xe00 <__fixunssfsi+0x30>
     dda:	b9 2f       	mov	r27, r25
     ddc:	99 27       	eor	r25, r25
     dde:	b7 51       	subi	r27, 0x17	; 23
     de0:	b0 f0       	brcs	.+44     	; 0xe0e <__fixunssfsi+0x3e>
     de2:	e1 f0       	breq	.+56     	; 0xe1c <__fixunssfsi+0x4c>
     de4:	66 0f       	add	r22, r22
     de6:	77 1f       	adc	r23, r23
     de8:	88 1f       	adc	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	1a f0       	brmi	.+6      	; 0xdf4 <__fixunssfsi+0x24>
     dee:	ba 95       	dec	r27
     df0:	c9 f7       	brne	.-14     	; 0xde4 <__fixunssfsi+0x14>
     df2:	14 c0       	rjmp	.+40     	; 0xe1c <__fixunssfsi+0x4c>
     df4:	b1 30       	cpi	r27, 0x01	; 1
     df6:	91 f0       	breq	.+36     	; 0xe1c <__fixunssfsi+0x4c>
     df8:	0e 94 dd 07 	call	0xfba	; 0xfba <__fp_zero>
     dfc:	b1 e0       	ldi	r27, 0x01	; 1
     dfe:	08 95       	ret
     e00:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_zero>
     e04:	67 2f       	mov	r22, r23
     e06:	78 2f       	mov	r23, r24
     e08:	88 27       	eor	r24, r24
     e0a:	b8 5f       	subi	r27, 0xF8	; 248
     e0c:	39 f0       	breq	.+14     	; 0xe1c <__fixunssfsi+0x4c>
     e0e:	b9 3f       	cpi	r27, 0xF9	; 249
     e10:	cc f3       	brlt	.-14     	; 0xe04 <__fixunssfsi+0x34>
     e12:	86 95       	lsr	r24
     e14:	77 95       	ror	r23
     e16:	67 95       	ror	r22
     e18:	b3 95       	inc	r27
     e1a:	d9 f7       	brne	.-10     	; 0xe12 <__fixunssfsi+0x42>
     e1c:	3e f4       	brtc	.+14     	; 0xe2c <__fixunssfsi+0x5c>
     e1e:	90 95       	com	r25
     e20:	80 95       	com	r24
     e22:	70 95       	com	r23
     e24:	61 95       	neg	r22
     e26:	7f 4f       	sbci	r23, 0xFF	; 255
     e28:	8f 4f       	sbci	r24, 0xFF	; 255
     e2a:	9f 4f       	sbci	r25, 0xFF	; 255
     e2c:	08 95       	ret

00000e2e <__floatunsisf>:
     e2e:	e8 94       	clt
     e30:	09 c0       	rjmp	.+18     	; 0xe44 <__floatsisf+0x12>

00000e32 <__floatsisf>:
     e32:	97 fb       	bst	r25, 7
     e34:	3e f4       	brtc	.+14     	; 0xe44 <__floatsisf+0x12>
     e36:	90 95       	com	r25
     e38:	80 95       	com	r24
     e3a:	70 95       	com	r23
     e3c:	61 95       	neg	r22
     e3e:	7f 4f       	sbci	r23, 0xFF	; 255
     e40:	8f 4f       	sbci	r24, 0xFF	; 255
     e42:	9f 4f       	sbci	r25, 0xFF	; 255
     e44:	99 23       	and	r25, r25
     e46:	a9 f0       	breq	.+42     	; 0xe72 <__floatsisf+0x40>
     e48:	f9 2f       	mov	r31, r25
     e4a:	96 e9       	ldi	r25, 0x96	; 150
     e4c:	bb 27       	eor	r27, r27
     e4e:	93 95       	inc	r25
     e50:	f6 95       	lsr	r31
     e52:	87 95       	ror	r24
     e54:	77 95       	ror	r23
     e56:	67 95       	ror	r22
     e58:	b7 95       	ror	r27
     e5a:	f1 11       	cpse	r31, r1
     e5c:	f8 cf       	rjmp	.-16     	; 0xe4e <__floatsisf+0x1c>
     e5e:	fa f4       	brpl	.+62     	; 0xe9e <__floatsisf+0x6c>
     e60:	bb 0f       	add	r27, r27
     e62:	11 f4       	brne	.+4      	; 0xe68 <__floatsisf+0x36>
     e64:	60 ff       	sbrs	r22, 0
     e66:	1b c0       	rjmp	.+54     	; 0xe9e <__floatsisf+0x6c>
     e68:	6f 5f       	subi	r22, 0xFF	; 255
     e6a:	7f 4f       	sbci	r23, 0xFF	; 255
     e6c:	8f 4f       	sbci	r24, 0xFF	; 255
     e6e:	9f 4f       	sbci	r25, 0xFF	; 255
     e70:	16 c0       	rjmp	.+44     	; 0xe9e <__floatsisf+0x6c>
     e72:	88 23       	and	r24, r24
     e74:	11 f0       	breq	.+4      	; 0xe7a <__floatsisf+0x48>
     e76:	96 e9       	ldi	r25, 0x96	; 150
     e78:	11 c0       	rjmp	.+34     	; 0xe9c <__floatsisf+0x6a>
     e7a:	77 23       	and	r23, r23
     e7c:	21 f0       	breq	.+8      	; 0xe86 <__floatsisf+0x54>
     e7e:	9e e8       	ldi	r25, 0x8E	; 142
     e80:	87 2f       	mov	r24, r23
     e82:	76 2f       	mov	r23, r22
     e84:	05 c0       	rjmp	.+10     	; 0xe90 <__floatsisf+0x5e>
     e86:	66 23       	and	r22, r22
     e88:	71 f0       	breq	.+28     	; 0xea6 <__floatsisf+0x74>
     e8a:	96 e8       	ldi	r25, 0x86	; 134
     e8c:	86 2f       	mov	r24, r22
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	2a f0       	brmi	.+10     	; 0xe9e <__floatsisf+0x6c>
     e94:	9a 95       	dec	r25
     e96:	66 0f       	add	r22, r22
     e98:	77 1f       	adc	r23, r23
     e9a:	88 1f       	adc	r24, r24
     e9c:	da f7       	brpl	.-10     	; 0xe94 <__floatsisf+0x62>
     e9e:	88 0f       	add	r24, r24
     ea0:	96 95       	lsr	r25
     ea2:	87 95       	ror	r24
     ea4:	97 f9       	bld	r25, 7
     ea6:	08 95       	ret

00000ea8 <__fp_inf>:
     ea8:	97 f9       	bld	r25, 7
     eaa:	9f 67       	ori	r25, 0x7F	; 127
     eac:	80 e8       	ldi	r24, 0x80	; 128
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	08 95       	ret

00000eb4 <__fp_nan>:
     eb4:	9f ef       	ldi	r25, 0xFF	; 255
     eb6:	80 ec       	ldi	r24, 0xC0	; 192
     eb8:	08 95       	ret

00000eba <__fp_pscA>:
     eba:	00 24       	eor	r0, r0
     ebc:	0a 94       	dec	r0
     ebe:	16 16       	cp	r1, r22
     ec0:	17 06       	cpc	r1, r23
     ec2:	18 06       	cpc	r1, r24
     ec4:	09 06       	cpc	r0, r25
     ec6:	08 95       	ret

00000ec8 <__fp_pscB>:
     ec8:	00 24       	eor	r0, r0
     eca:	0a 94       	dec	r0
     ecc:	12 16       	cp	r1, r18
     ece:	13 06       	cpc	r1, r19
     ed0:	14 06       	cpc	r1, r20
     ed2:	05 06       	cpc	r0, r21
     ed4:	08 95       	ret
     ed6:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_nan>

00000eda <__fp_rempio2>:
     eda:	0e 94 c3 07 	call	0xf86	; 0xf86 <__fp_splitA>
     ede:	d8 f3       	brcs	.-10     	; 0xed6 <__fp_pscB+0xe>
     ee0:	e8 94       	clt
     ee2:	e0 e0       	ldi	r30, 0x00	; 0
     ee4:	bb 27       	eor	r27, r27
     ee6:	9f 57       	subi	r25, 0x7F	; 127
     ee8:	f0 f0       	brcs	.+60     	; 0xf26 <__fp_rempio2+0x4c>
     eea:	2a ed       	ldi	r18, 0xDA	; 218
     eec:	3f e0       	ldi	r19, 0x0F	; 15
     eee:	49 ec       	ldi	r20, 0xC9	; 201
     ef0:	06 c0       	rjmp	.+12     	; 0xefe <__fp_rempio2+0x24>
     ef2:	ee 0f       	add	r30, r30
     ef4:	bb 0f       	add	r27, r27
     ef6:	66 1f       	adc	r22, r22
     ef8:	77 1f       	adc	r23, r23
     efa:	88 1f       	adc	r24, r24
     efc:	28 f0       	brcs	.+10     	; 0xf08 <__fp_rempio2+0x2e>
     efe:	b2 3a       	cpi	r27, 0xA2	; 162
     f00:	62 07       	cpc	r22, r18
     f02:	73 07       	cpc	r23, r19
     f04:	84 07       	cpc	r24, r20
     f06:	28 f0       	brcs	.+10     	; 0xf12 <__fp_rempio2+0x38>
     f08:	b2 5a       	subi	r27, 0xA2	; 162
     f0a:	62 0b       	sbc	r22, r18
     f0c:	73 0b       	sbc	r23, r19
     f0e:	84 0b       	sbc	r24, r20
     f10:	e3 95       	inc	r30
     f12:	9a 95       	dec	r25
     f14:	72 f7       	brpl	.-36     	; 0xef2 <__fp_rempio2+0x18>
     f16:	80 38       	cpi	r24, 0x80	; 128
     f18:	30 f4       	brcc	.+12     	; 0xf26 <__fp_rempio2+0x4c>
     f1a:	9a 95       	dec	r25
     f1c:	bb 0f       	add	r27, r27
     f1e:	66 1f       	adc	r22, r22
     f20:	77 1f       	adc	r23, r23
     f22:	88 1f       	adc	r24, r24
     f24:	d2 f7       	brpl	.-12     	; 0xf1a <__fp_rempio2+0x40>
     f26:	90 48       	sbci	r25, 0x80	; 128
     f28:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__fp_mpack_finite>

00000f2c <__fp_round>:
     f2c:	09 2e       	mov	r0, r25
     f2e:	03 94       	inc	r0
     f30:	00 0c       	add	r0, r0
     f32:	11 f4       	brne	.+4      	; 0xf38 <__fp_round+0xc>
     f34:	88 23       	and	r24, r24
     f36:	52 f0       	brmi	.+20     	; 0xf4c <__fp_round+0x20>
     f38:	bb 0f       	add	r27, r27
     f3a:	40 f4       	brcc	.+16     	; 0xf4c <__fp_round+0x20>
     f3c:	bf 2b       	or	r27, r31
     f3e:	11 f4       	brne	.+4      	; 0xf44 <__fp_round+0x18>
     f40:	60 ff       	sbrs	r22, 0
     f42:	04 c0       	rjmp	.+8      	; 0xf4c <__fp_round+0x20>
     f44:	6f 5f       	subi	r22, 0xFF	; 255
     f46:	7f 4f       	sbci	r23, 0xFF	; 255
     f48:	8f 4f       	sbci	r24, 0xFF	; 255
     f4a:	9f 4f       	sbci	r25, 0xFF	; 255
     f4c:	08 95       	ret

00000f4e <__fp_sinus>:
     f4e:	ef 93       	push	r30
     f50:	e0 ff       	sbrs	r30, 0
     f52:	07 c0       	rjmp	.+14     	; 0xf62 <__fp_sinus+0x14>
     f54:	a2 ea       	ldi	r26, 0xA2	; 162
     f56:	2a ed       	ldi	r18, 0xDA	; 218
     f58:	3f e0       	ldi	r19, 0x0F	; 15
     f5a:	49 ec       	ldi	r20, 0xC9	; 201
     f5c:	5f eb       	ldi	r21, 0xBF	; 191
     f5e:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__addsf3x>
     f62:	0e 94 96 07 	call	0xf2c	; 0xf2c <__fp_round>
     f66:	0f 90       	pop	r0
     f68:	03 94       	inc	r0
     f6a:	01 fc       	sbrc	r0, 1
     f6c:	90 58       	subi	r25, 0x80	; 128
     f6e:	e4 eb       	ldi	r30, 0xB4	; 180
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	0c 94 ec 08 	jmp	0x11d8	; 0x11d8 <__fp_powsodd>

00000f76 <__fp_split3>:
     f76:	57 fd       	sbrc	r21, 7
     f78:	90 58       	subi	r25, 0x80	; 128
     f7a:	44 0f       	add	r20, r20
     f7c:	55 1f       	adc	r21, r21
     f7e:	59 f0       	breq	.+22     	; 0xf96 <__fp_splitA+0x10>
     f80:	5f 3f       	cpi	r21, 0xFF	; 255
     f82:	71 f0       	breq	.+28     	; 0xfa0 <__fp_splitA+0x1a>
     f84:	47 95       	ror	r20

00000f86 <__fp_splitA>:
     f86:	88 0f       	add	r24, r24
     f88:	97 fb       	bst	r25, 7
     f8a:	99 1f       	adc	r25, r25
     f8c:	61 f0       	breq	.+24     	; 0xfa6 <__fp_splitA+0x20>
     f8e:	9f 3f       	cpi	r25, 0xFF	; 255
     f90:	79 f0       	breq	.+30     	; 0xfb0 <__fp_splitA+0x2a>
     f92:	87 95       	ror	r24
     f94:	08 95       	ret
     f96:	12 16       	cp	r1, r18
     f98:	13 06       	cpc	r1, r19
     f9a:	14 06       	cpc	r1, r20
     f9c:	55 1f       	adc	r21, r21
     f9e:	f2 cf       	rjmp	.-28     	; 0xf84 <__fp_split3+0xe>
     fa0:	46 95       	lsr	r20
     fa2:	f1 df       	rcall	.-30     	; 0xf86 <__fp_splitA>
     fa4:	08 c0       	rjmp	.+16     	; 0xfb6 <__fp_splitA+0x30>
     fa6:	16 16       	cp	r1, r22
     fa8:	17 06       	cpc	r1, r23
     faa:	18 06       	cpc	r1, r24
     fac:	99 1f       	adc	r25, r25
     fae:	f1 cf       	rjmp	.-30     	; 0xf92 <__fp_splitA+0xc>
     fb0:	86 95       	lsr	r24
     fb2:	71 05       	cpc	r23, r1
     fb4:	61 05       	cpc	r22, r1
     fb6:	08 94       	sec
     fb8:	08 95       	ret

00000fba <__fp_zero>:
     fba:	e8 94       	clt

00000fbc <__fp_szero>:
     fbc:	bb 27       	eor	r27, r27
     fbe:	66 27       	eor	r22, r22
     fc0:	77 27       	eor	r23, r23
     fc2:	cb 01       	movw	r24, r22
     fc4:	97 f9       	bld	r25, 7
     fc6:	08 95       	ret

00000fc8 <__mulsf3>:
     fc8:	0e 94 f7 07 	call	0xfee	; 0xfee <__mulsf3x>
     fcc:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__fp_round>
     fd0:	0e 94 5d 07 	call	0xeba	; 0xeba <__fp_pscA>
     fd4:	38 f0       	brcs	.+14     	; 0xfe4 <__mulsf3+0x1c>
     fd6:	0e 94 64 07 	call	0xec8	; 0xec8 <__fp_pscB>
     fda:	20 f0       	brcs	.+8      	; 0xfe4 <__mulsf3+0x1c>
     fdc:	95 23       	and	r25, r21
     fde:	11 f0       	breq	.+4      	; 0xfe4 <__mulsf3+0x1c>
     fe0:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_inf>
     fe4:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_nan>
     fe8:	11 24       	eor	r1, r1
     fea:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__fp_szero>

00000fee <__mulsf3x>:
     fee:	0e 94 bb 07 	call	0xf76	; 0xf76 <__fp_split3>
     ff2:	70 f3       	brcs	.-36     	; 0xfd0 <__mulsf3+0x8>

00000ff4 <__mulsf3_pse>:
     ff4:	95 9f       	mul	r25, r21
     ff6:	c1 f3       	breq	.-16     	; 0xfe8 <__mulsf3+0x20>
     ff8:	95 0f       	add	r25, r21
     ffa:	50 e0       	ldi	r21, 0x00	; 0
     ffc:	55 1f       	adc	r21, r21
     ffe:	62 9f       	mul	r22, r18
    1000:	f0 01       	movw	r30, r0
    1002:	72 9f       	mul	r23, r18
    1004:	bb 27       	eor	r27, r27
    1006:	f0 0d       	add	r31, r0
    1008:	b1 1d       	adc	r27, r1
    100a:	63 9f       	mul	r22, r19
    100c:	aa 27       	eor	r26, r26
    100e:	f0 0d       	add	r31, r0
    1010:	b1 1d       	adc	r27, r1
    1012:	aa 1f       	adc	r26, r26
    1014:	64 9f       	mul	r22, r20
    1016:	66 27       	eor	r22, r22
    1018:	b0 0d       	add	r27, r0
    101a:	a1 1d       	adc	r26, r1
    101c:	66 1f       	adc	r22, r22
    101e:	82 9f       	mul	r24, r18
    1020:	22 27       	eor	r18, r18
    1022:	b0 0d       	add	r27, r0
    1024:	a1 1d       	adc	r26, r1
    1026:	62 1f       	adc	r22, r18
    1028:	73 9f       	mul	r23, r19
    102a:	b0 0d       	add	r27, r0
    102c:	a1 1d       	adc	r26, r1
    102e:	62 1f       	adc	r22, r18
    1030:	83 9f       	mul	r24, r19
    1032:	a0 0d       	add	r26, r0
    1034:	61 1d       	adc	r22, r1
    1036:	22 1f       	adc	r18, r18
    1038:	74 9f       	mul	r23, r20
    103a:	33 27       	eor	r19, r19
    103c:	a0 0d       	add	r26, r0
    103e:	61 1d       	adc	r22, r1
    1040:	23 1f       	adc	r18, r19
    1042:	84 9f       	mul	r24, r20
    1044:	60 0d       	add	r22, r0
    1046:	21 1d       	adc	r18, r1
    1048:	82 2f       	mov	r24, r18
    104a:	76 2f       	mov	r23, r22
    104c:	6a 2f       	mov	r22, r26
    104e:	11 24       	eor	r1, r1
    1050:	9f 57       	subi	r25, 0x7F	; 127
    1052:	50 40       	sbci	r21, 0x00	; 0
    1054:	9a f0       	brmi	.+38     	; 0x107c <__mulsf3_pse+0x88>
    1056:	f1 f0       	breq	.+60     	; 0x1094 <__mulsf3_pse+0xa0>
    1058:	88 23       	and	r24, r24
    105a:	4a f0       	brmi	.+18     	; 0x106e <__mulsf3_pse+0x7a>
    105c:	ee 0f       	add	r30, r30
    105e:	ff 1f       	adc	r31, r31
    1060:	bb 1f       	adc	r27, r27
    1062:	66 1f       	adc	r22, r22
    1064:	77 1f       	adc	r23, r23
    1066:	88 1f       	adc	r24, r24
    1068:	91 50       	subi	r25, 0x01	; 1
    106a:	50 40       	sbci	r21, 0x00	; 0
    106c:	a9 f7       	brne	.-22     	; 0x1058 <__mulsf3_pse+0x64>
    106e:	9e 3f       	cpi	r25, 0xFE	; 254
    1070:	51 05       	cpc	r21, r1
    1072:	80 f0       	brcs	.+32     	; 0x1094 <__mulsf3_pse+0xa0>
    1074:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_inf>
    1078:	0c 94 de 07 	jmp	0xfbc	; 0xfbc <__fp_szero>
    107c:	5f 3f       	cpi	r21, 0xFF	; 255
    107e:	e4 f3       	brlt	.-8      	; 0x1078 <__mulsf3_pse+0x84>
    1080:	98 3e       	cpi	r25, 0xE8	; 232
    1082:	d4 f3       	brlt	.-12     	; 0x1078 <__mulsf3_pse+0x84>
    1084:	86 95       	lsr	r24
    1086:	77 95       	ror	r23
    1088:	67 95       	ror	r22
    108a:	b7 95       	ror	r27
    108c:	f7 95       	ror	r31
    108e:	e7 95       	ror	r30
    1090:	9f 5f       	subi	r25, 0xFF	; 255
    1092:	c1 f7       	brne	.-16     	; 0x1084 <__mulsf3_pse+0x90>
    1094:	fe 2b       	or	r31, r30
    1096:	88 0f       	add	r24, r24
    1098:	91 1d       	adc	r25, r1
    109a:	96 95       	lsr	r25
    109c:	87 95       	ror	r24
    109e:	97 f9       	bld	r25, 7
    10a0:	08 95       	ret
    10a2:	0e 94 5d 07 	call	0xeba	; 0xeba <__fp_pscA>
    10a6:	38 f0       	brcs	.+14     	; 0x10b6 <__mulsf3_pse+0xc2>
    10a8:	0e 94 64 07 	call	0xec8	; 0xec8 <__fp_pscB>
    10ac:	20 f0       	brcs	.+8      	; 0x10b6 <__mulsf3_pse+0xc2>
    10ae:	39 f4       	brne	.+14     	; 0x10be <__mulsf3_pse+0xca>
    10b0:	9f 3f       	cpi	r25, 0xFF	; 255
    10b2:	19 f4       	brne	.+6      	; 0x10ba <__mulsf3_pse+0xc6>
    10b4:	26 f4       	brtc	.+8      	; 0x10be <__mulsf3_pse+0xca>
    10b6:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_nan>
    10ba:	0e f4       	brtc	.+2      	; 0x10be <__mulsf3_pse+0xca>
    10bc:	e0 95       	com	r30
    10be:	e7 fb       	bst	r30, 7
    10c0:	0c 94 54 07 	jmp	0xea8	; 0xea8 <__fp_inf>

000010c4 <__addsf3x>:
    10c4:	e9 2f       	mov	r30, r25
    10c6:	0e 94 bb 07 	call	0xf76	; 0xf76 <__fp_split3>
    10ca:	58 f3       	brcs	.-42     	; 0x10a2 <__mulsf3_pse+0xae>
    10cc:	ba 17       	cp	r27, r26
    10ce:	62 07       	cpc	r22, r18
    10d0:	73 07       	cpc	r23, r19
    10d2:	84 07       	cpc	r24, r20
    10d4:	95 07       	cpc	r25, r21
    10d6:	20 f0       	brcs	.+8      	; 0x10e0 <__addsf3x+0x1c>
    10d8:	79 f4       	brne	.+30     	; 0x10f8 <__addsf3x+0x34>
    10da:	a6 f5       	brtc	.+104    	; 0x1144 <__addsf3x+0x80>
    10dc:	0c 94 dd 07 	jmp	0xfba	; 0xfba <__fp_zero>
    10e0:	0e f4       	brtc	.+2      	; 0x10e4 <__addsf3x+0x20>
    10e2:	e0 95       	com	r30
    10e4:	0b 2e       	mov	r0, r27
    10e6:	ba 2f       	mov	r27, r26
    10e8:	a0 2d       	mov	r26, r0
    10ea:	0b 01       	movw	r0, r22
    10ec:	b9 01       	movw	r22, r18
    10ee:	90 01       	movw	r18, r0
    10f0:	0c 01       	movw	r0, r24
    10f2:	ca 01       	movw	r24, r20
    10f4:	a0 01       	movw	r20, r0
    10f6:	11 24       	eor	r1, r1
    10f8:	ff 27       	eor	r31, r31
    10fa:	59 1b       	sub	r21, r25
    10fc:	99 f0       	breq	.+38     	; 0x1124 <__addsf3x+0x60>
    10fe:	59 3f       	cpi	r21, 0xF9	; 249
    1100:	50 f4       	brcc	.+20     	; 0x1116 <__addsf3x+0x52>
    1102:	50 3e       	cpi	r21, 0xE0	; 224
    1104:	68 f1       	brcs	.+90     	; 0x1160 <__addsf3x+0x9c>
    1106:	1a 16       	cp	r1, r26
    1108:	f0 40       	sbci	r31, 0x00	; 0
    110a:	a2 2f       	mov	r26, r18
    110c:	23 2f       	mov	r18, r19
    110e:	34 2f       	mov	r19, r20
    1110:	44 27       	eor	r20, r20
    1112:	58 5f       	subi	r21, 0xF8	; 248
    1114:	f3 cf       	rjmp	.-26     	; 0x10fc <__addsf3x+0x38>
    1116:	46 95       	lsr	r20
    1118:	37 95       	ror	r19
    111a:	27 95       	ror	r18
    111c:	a7 95       	ror	r26
    111e:	f0 40       	sbci	r31, 0x00	; 0
    1120:	53 95       	inc	r21
    1122:	c9 f7       	brne	.-14     	; 0x1116 <__addsf3x+0x52>
    1124:	7e f4       	brtc	.+30     	; 0x1144 <__addsf3x+0x80>
    1126:	1f 16       	cp	r1, r31
    1128:	ba 0b       	sbc	r27, r26
    112a:	62 0b       	sbc	r22, r18
    112c:	73 0b       	sbc	r23, r19
    112e:	84 0b       	sbc	r24, r20
    1130:	ba f0       	brmi	.+46     	; 0x1160 <__addsf3x+0x9c>
    1132:	91 50       	subi	r25, 0x01	; 1
    1134:	a1 f0       	breq	.+40     	; 0x115e <__addsf3x+0x9a>
    1136:	ff 0f       	add	r31, r31
    1138:	bb 1f       	adc	r27, r27
    113a:	66 1f       	adc	r22, r22
    113c:	77 1f       	adc	r23, r23
    113e:	88 1f       	adc	r24, r24
    1140:	c2 f7       	brpl	.-16     	; 0x1132 <__addsf3x+0x6e>
    1142:	0e c0       	rjmp	.+28     	; 0x1160 <__addsf3x+0x9c>
    1144:	ba 0f       	add	r27, r26
    1146:	62 1f       	adc	r22, r18
    1148:	73 1f       	adc	r23, r19
    114a:	84 1f       	adc	r24, r20
    114c:	48 f4       	brcc	.+18     	; 0x1160 <__addsf3x+0x9c>
    114e:	87 95       	ror	r24
    1150:	77 95       	ror	r23
    1152:	67 95       	ror	r22
    1154:	b7 95       	ror	r27
    1156:	f7 95       	ror	r31
    1158:	9e 3f       	cpi	r25, 0xFE	; 254
    115a:	08 f0       	brcs	.+2      	; 0x115e <__addsf3x+0x9a>
    115c:	b0 cf       	rjmp	.-160    	; 0x10be <__mulsf3_pse+0xca>
    115e:	93 95       	inc	r25
    1160:	88 0f       	add	r24, r24
    1162:	08 f0       	brcs	.+2      	; 0x1166 <__addsf3x+0xa2>
    1164:	99 27       	eor	r25, r25
    1166:	ee 0f       	add	r30, r30
    1168:	97 95       	ror	r25
    116a:	87 95       	ror	r24
    116c:	08 95       	ret

0000116e <__fp_mpack>:
    116e:	9f 3f       	cpi	r25, 0xFF	; 255
    1170:	31 f0       	breq	.+12     	; 0x117e <__fp_mpack_finite+0xc>

00001172 <__fp_mpack_finite>:
    1172:	91 50       	subi	r25, 0x01	; 1
    1174:	20 f4       	brcc	.+8      	; 0x117e <__fp_mpack_finite+0xc>
    1176:	87 95       	ror	r24
    1178:	77 95       	ror	r23
    117a:	67 95       	ror	r22
    117c:	b7 95       	ror	r27
    117e:	88 0f       	add	r24, r24
    1180:	91 1d       	adc	r25, r1
    1182:	96 95       	lsr	r25
    1184:	87 95       	ror	r24
    1186:	97 f9       	bld	r25, 7
    1188:	08 95       	ret

0000118a <__fp_powser>:
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	1f 93       	push	r17
    1190:	0f 93       	push	r16
    1192:	ff 92       	push	r15
    1194:	ef 92       	push	r14
    1196:	df 92       	push	r13
    1198:	7b 01       	movw	r14, r22
    119a:	8c 01       	movw	r16, r24
    119c:	68 94       	set
    119e:	06 c0       	rjmp	.+12     	; 0x11ac <__fp_powser+0x22>
    11a0:	da 2e       	mov	r13, r26
    11a2:	ef 01       	movw	r28, r30
    11a4:	0e 94 f7 07 	call	0xfee	; 0xfee <__mulsf3x>
    11a8:	fe 01       	movw	r30, r28
    11aa:	e8 94       	clt
    11ac:	a5 91       	lpm	r26, Z+
    11ae:	25 91       	lpm	r18, Z+
    11b0:	35 91       	lpm	r19, Z+
    11b2:	45 91       	lpm	r20, Z+
    11b4:	55 91       	lpm	r21, Z+
    11b6:	a6 f3       	brts	.-24     	; 0x11a0 <__fp_powser+0x16>
    11b8:	ef 01       	movw	r28, r30
    11ba:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__addsf3x>
    11be:	fe 01       	movw	r30, r28
    11c0:	97 01       	movw	r18, r14
    11c2:	a8 01       	movw	r20, r16
    11c4:	da 94       	dec	r13
    11c6:	69 f7       	brne	.-38     	; 0x11a2 <__fp_powser+0x18>
    11c8:	df 90       	pop	r13
    11ca:	ef 90       	pop	r14
    11cc:	ff 90       	pop	r15
    11ce:	0f 91       	pop	r16
    11d0:	1f 91       	pop	r17
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <__fp_powsodd>:
    11d8:	9f 93       	push	r25
    11da:	8f 93       	push	r24
    11dc:	7f 93       	push	r23
    11de:	6f 93       	push	r22
    11e0:	ff 93       	push	r31
    11e2:	ef 93       	push	r30
    11e4:	9b 01       	movw	r18, r22
    11e6:	ac 01       	movw	r20, r24
    11e8:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__mulsf3>
    11ec:	ef 91       	pop	r30
    11ee:	ff 91       	pop	r31
    11f0:	0e 94 c5 08 	call	0x118a	; 0x118a <__fp_powser>
    11f4:	2f 91       	pop	r18
    11f6:	3f 91       	pop	r19
    11f8:	4f 91       	pop	r20
    11fa:	5f 91       	pop	r21
    11fc:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__mulsf3>

00001200 <vfprintf>:
    1200:	a0 e1       	ldi	r26, 0x10	; 16
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e6 e0       	ldi	r30, 0x06	; 6
    1206:	f9 e0       	ldi	r31, 0x09	; 9
    1208:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <__prologue_saves__>
    120c:	7c 01       	movw	r14, r24
    120e:	1b 01       	movw	r2, r22
    1210:	6a 01       	movw	r12, r20
    1212:	fc 01       	movw	r30, r24
    1214:	17 82       	std	Z+7, r1	; 0x07
    1216:	16 82       	std	Z+6, r1	; 0x06
    1218:	83 81       	ldd	r24, Z+3	; 0x03
    121a:	81 ff       	sbrs	r24, 1
    121c:	44 c3       	rjmp	.+1672   	; 0x18a6 <vfprintf+0x6a6>
    121e:	9e 01       	movw	r18, r28
    1220:	2f 5f       	subi	r18, 0xFF	; 255
    1222:	3f 4f       	sbci	r19, 0xFF	; 255
    1224:	39 01       	movw	r6, r18
    1226:	f7 01       	movw	r30, r14
    1228:	93 81       	ldd	r25, Z+3	; 0x03
    122a:	f1 01       	movw	r30, r2
    122c:	93 fd       	sbrc	r25, 3
    122e:	85 91       	lpm	r24, Z+
    1230:	93 ff       	sbrs	r25, 3
    1232:	81 91       	ld	r24, Z+
    1234:	1f 01       	movw	r2, r30
    1236:	88 23       	and	r24, r24
    1238:	09 f4       	brne	.+2      	; 0x123c <vfprintf+0x3c>
    123a:	31 c3       	rjmp	.+1634   	; 0x189e <vfprintf+0x69e>
    123c:	85 32       	cpi	r24, 0x25	; 37
    123e:	39 f4       	brne	.+14     	; 0x124e <vfprintf+0x4e>
    1240:	93 fd       	sbrc	r25, 3
    1242:	85 91       	lpm	r24, Z+
    1244:	93 ff       	sbrs	r25, 3
    1246:	81 91       	ld	r24, Z+
    1248:	1f 01       	movw	r2, r30
    124a:	85 32       	cpi	r24, 0x25	; 37
    124c:	39 f4       	brne	.+14     	; 0x125c <vfprintf+0x5c>
    124e:	b7 01       	movw	r22, r14
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    1256:	56 01       	movw	r10, r12
    1258:	65 01       	movw	r12, r10
    125a:	e5 cf       	rjmp	.-54     	; 0x1226 <vfprintf+0x26>
    125c:	10 e0       	ldi	r17, 0x00	; 0
    125e:	51 2c       	mov	r5, r1
    1260:	91 2c       	mov	r9, r1
    1262:	ff e1       	ldi	r31, 0x1F	; 31
    1264:	f9 15       	cp	r31, r9
    1266:	d8 f0       	brcs	.+54     	; 0x129e <vfprintf+0x9e>
    1268:	8b 32       	cpi	r24, 0x2B	; 43
    126a:	79 f0       	breq	.+30     	; 0x128a <vfprintf+0x8a>
    126c:	38 f4       	brcc	.+14     	; 0x127c <vfprintf+0x7c>
    126e:	80 32       	cpi	r24, 0x20	; 32
    1270:	79 f0       	breq	.+30     	; 0x1290 <vfprintf+0x90>
    1272:	83 32       	cpi	r24, 0x23	; 35
    1274:	a1 f4       	brne	.+40     	; 0x129e <vfprintf+0x9e>
    1276:	f9 2d       	mov	r31, r9
    1278:	f0 61       	ori	r31, 0x10	; 16
    127a:	2e c0       	rjmp	.+92     	; 0x12d8 <vfprintf+0xd8>
    127c:	8d 32       	cpi	r24, 0x2D	; 45
    127e:	61 f0       	breq	.+24     	; 0x1298 <vfprintf+0x98>
    1280:	80 33       	cpi	r24, 0x30	; 48
    1282:	69 f4       	brne	.+26     	; 0x129e <vfprintf+0x9e>
    1284:	29 2d       	mov	r18, r9
    1286:	21 60       	ori	r18, 0x01	; 1
    1288:	2d c0       	rjmp	.+90     	; 0x12e4 <vfprintf+0xe4>
    128a:	39 2d       	mov	r19, r9
    128c:	32 60       	ori	r19, 0x02	; 2
    128e:	93 2e       	mov	r9, r19
    1290:	89 2d       	mov	r24, r9
    1292:	84 60       	ori	r24, 0x04	; 4
    1294:	98 2e       	mov	r9, r24
    1296:	2a c0       	rjmp	.+84     	; 0x12ec <vfprintf+0xec>
    1298:	e9 2d       	mov	r30, r9
    129a:	e8 60       	ori	r30, 0x08	; 8
    129c:	15 c0       	rjmp	.+42     	; 0x12c8 <vfprintf+0xc8>
    129e:	97 fc       	sbrc	r9, 7
    12a0:	2d c0       	rjmp	.+90     	; 0x12fc <vfprintf+0xfc>
    12a2:	20 ed       	ldi	r18, 0xD0	; 208
    12a4:	28 0f       	add	r18, r24
    12a6:	2a 30       	cpi	r18, 0x0A	; 10
    12a8:	88 f4       	brcc	.+34     	; 0x12cc <vfprintf+0xcc>
    12aa:	96 fe       	sbrs	r9, 6
    12ac:	06 c0       	rjmp	.+12     	; 0x12ba <vfprintf+0xba>
    12ae:	3a e0       	ldi	r19, 0x0A	; 10
    12b0:	13 9f       	mul	r17, r19
    12b2:	20 0d       	add	r18, r0
    12b4:	11 24       	eor	r1, r1
    12b6:	12 2f       	mov	r17, r18
    12b8:	19 c0       	rjmp	.+50     	; 0x12ec <vfprintf+0xec>
    12ba:	8a e0       	ldi	r24, 0x0A	; 10
    12bc:	58 9e       	mul	r5, r24
    12be:	20 0d       	add	r18, r0
    12c0:	11 24       	eor	r1, r1
    12c2:	52 2e       	mov	r5, r18
    12c4:	e9 2d       	mov	r30, r9
    12c6:	e0 62       	ori	r30, 0x20	; 32
    12c8:	9e 2e       	mov	r9, r30
    12ca:	10 c0       	rjmp	.+32     	; 0x12ec <vfprintf+0xec>
    12cc:	8e 32       	cpi	r24, 0x2E	; 46
    12ce:	31 f4       	brne	.+12     	; 0x12dc <vfprintf+0xdc>
    12d0:	96 fc       	sbrc	r9, 6
    12d2:	e5 c2       	rjmp	.+1482   	; 0x189e <vfprintf+0x69e>
    12d4:	f9 2d       	mov	r31, r9
    12d6:	f0 64       	ori	r31, 0x40	; 64
    12d8:	9f 2e       	mov	r9, r31
    12da:	08 c0       	rjmp	.+16     	; 0x12ec <vfprintf+0xec>
    12dc:	8c 36       	cpi	r24, 0x6C	; 108
    12de:	21 f4       	brne	.+8      	; 0x12e8 <vfprintf+0xe8>
    12e0:	29 2d       	mov	r18, r9
    12e2:	20 68       	ori	r18, 0x80	; 128
    12e4:	92 2e       	mov	r9, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <vfprintf+0xec>
    12e8:	88 36       	cpi	r24, 0x68	; 104
    12ea:	41 f4       	brne	.+16     	; 0x12fc <vfprintf+0xfc>
    12ec:	f1 01       	movw	r30, r2
    12ee:	93 fd       	sbrc	r25, 3
    12f0:	85 91       	lpm	r24, Z+
    12f2:	93 ff       	sbrs	r25, 3
    12f4:	81 91       	ld	r24, Z+
    12f6:	1f 01       	movw	r2, r30
    12f8:	81 11       	cpse	r24, r1
    12fa:	b3 cf       	rjmp	.-154    	; 0x1262 <vfprintf+0x62>
    12fc:	9b eb       	ldi	r25, 0xBB	; 187
    12fe:	98 0f       	add	r25, r24
    1300:	93 30       	cpi	r25, 0x03	; 3
    1302:	20 f4       	brcc	.+8      	; 0x130c <vfprintf+0x10c>
    1304:	99 2d       	mov	r25, r9
    1306:	90 61       	ori	r25, 0x10	; 16
    1308:	80 5e       	subi	r24, 0xE0	; 224
    130a:	07 c0       	rjmp	.+14     	; 0x131a <vfprintf+0x11a>
    130c:	9b e9       	ldi	r25, 0x9B	; 155
    130e:	98 0f       	add	r25, r24
    1310:	93 30       	cpi	r25, 0x03	; 3
    1312:	08 f0       	brcs	.+2      	; 0x1316 <vfprintf+0x116>
    1314:	66 c1       	rjmp	.+716    	; 0x15e2 <vfprintf+0x3e2>
    1316:	99 2d       	mov	r25, r9
    1318:	9f 7e       	andi	r25, 0xEF	; 239
    131a:	96 ff       	sbrs	r25, 6
    131c:	16 e0       	ldi	r17, 0x06	; 6
    131e:	9f 73       	andi	r25, 0x3F	; 63
    1320:	99 2e       	mov	r9, r25
    1322:	85 36       	cpi	r24, 0x65	; 101
    1324:	19 f4       	brne	.+6      	; 0x132c <vfprintf+0x12c>
    1326:	90 64       	ori	r25, 0x40	; 64
    1328:	99 2e       	mov	r9, r25
    132a:	08 c0       	rjmp	.+16     	; 0x133c <vfprintf+0x13c>
    132c:	86 36       	cpi	r24, 0x66	; 102
    132e:	21 f4       	brne	.+8      	; 0x1338 <vfprintf+0x138>
    1330:	39 2f       	mov	r19, r25
    1332:	30 68       	ori	r19, 0x80	; 128
    1334:	93 2e       	mov	r9, r19
    1336:	02 c0       	rjmp	.+4      	; 0x133c <vfprintf+0x13c>
    1338:	11 11       	cpse	r17, r1
    133a:	11 50       	subi	r17, 0x01	; 1
    133c:	97 fe       	sbrs	r9, 7
    133e:	07 c0       	rjmp	.+14     	; 0x134e <vfprintf+0x14e>
    1340:	1c 33       	cpi	r17, 0x3C	; 60
    1342:	50 f4       	brcc	.+20     	; 0x1358 <vfprintf+0x158>
    1344:	44 24       	eor	r4, r4
    1346:	43 94       	inc	r4
    1348:	41 0e       	add	r4, r17
    134a:	27 e0       	ldi	r18, 0x07	; 7
    134c:	0b c0       	rjmp	.+22     	; 0x1364 <vfprintf+0x164>
    134e:	18 30       	cpi	r17, 0x08	; 8
    1350:	38 f0       	brcs	.+14     	; 0x1360 <vfprintf+0x160>
    1352:	27 e0       	ldi	r18, 0x07	; 7
    1354:	17 e0       	ldi	r17, 0x07	; 7
    1356:	05 c0       	rjmp	.+10     	; 0x1362 <vfprintf+0x162>
    1358:	27 e0       	ldi	r18, 0x07	; 7
    135a:	9c e3       	ldi	r25, 0x3C	; 60
    135c:	49 2e       	mov	r4, r25
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <vfprintf+0x164>
    1360:	21 2f       	mov	r18, r17
    1362:	41 2c       	mov	r4, r1
    1364:	56 01       	movw	r10, r12
    1366:	84 e0       	ldi	r24, 0x04	; 4
    1368:	a8 0e       	add	r10, r24
    136a:	b1 1c       	adc	r11, r1
    136c:	f6 01       	movw	r30, r12
    136e:	60 81       	ld	r22, Z
    1370:	71 81       	ldd	r23, Z+1	; 0x01
    1372:	82 81       	ldd	r24, Z+2	; 0x02
    1374:	93 81       	ldd	r25, Z+3	; 0x03
    1376:	04 2d       	mov	r16, r4
    1378:	a3 01       	movw	r20, r6
    137a:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <__ftoa_engine>
    137e:	6c 01       	movw	r12, r24
    1380:	f9 81       	ldd	r31, Y+1	; 0x01
    1382:	fc 87       	std	Y+12, r31	; 0x0c
    1384:	f0 ff       	sbrs	r31, 0
    1386:	02 c0       	rjmp	.+4      	; 0x138c <vfprintf+0x18c>
    1388:	f3 ff       	sbrs	r31, 3
    138a:	06 c0       	rjmp	.+12     	; 0x1398 <vfprintf+0x198>
    138c:	91 fc       	sbrc	r9, 1
    138e:	06 c0       	rjmp	.+12     	; 0x139c <vfprintf+0x19c>
    1390:	92 fe       	sbrs	r9, 2
    1392:	06 c0       	rjmp	.+12     	; 0x13a0 <vfprintf+0x1a0>
    1394:	00 e2       	ldi	r16, 0x20	; 32
    1396:	05 c0       	rjmp	.+10     	; 0x13a2 <vfprintf+0x1a2>
    1398:	0d e2       	ldi	r16, 0x2D	; 45
    139a:	03 c0       	rjmp	.+6      	; 0x13a2 <vfprintf+0x1a2>
    139c:	0b e2       	ldi	r16, 0x2B	; 43
    139e:	01 c0       	rjmp	.+2      	; 0x13a2 <vfprintf+0x1a2>
    13a0:	00 e0       	ldi	r16, 0x00	; 0
    13a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    13a4:	8c 70       	andi	r24, 0x0C	; 12
    13a6:	19 f0       	breq	.+6      	; 0x13ae <vfprintf+0x1ae>
    13a8:	01 11       	cpse	r16, r1
    13aa:	5a c2       	rjmp	.+1204   	; 0x1860 <vfprintf+0x660>
    13ac:	9b c2       	rjmp	.+1334   	; 0x18e4 <vfprintf+0x6e4>
    13ae:	97 fe       	sbrs	r9, 7
    13b0:	10 c0       	rjmp	.+32     	; 0x13d2 <vfprintf+0x1d2>
    13b2:	4c 0c       	add	r4, r12
    13b4:	fc 85       	ldd	r31, Y+12	; 0x0c
    13b6:	f4 ff       	sbrs	r31, 4
    13b8:	04 c0       	rjmp	.+8      	; 0x13c2 <vfprintf+0x1c2>
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	81 33       	cpi	r24, 0x31	; 49
    13be:	09 f4       	brne	.+2      	; 0x13c2 <vfprintf+0x1c2>
    13c0:	4a 94       	dec	r4
    13c2:	14 14       	cp	r1, r4
    13c4:	74 f5       	brge	.+92     	; 0x1422 <vfprintf+0x222>
    13c6:	28 e0       	ldi	r18, 0x08	; 8
    13c8:	24 15       	cp	r18, r4
    13ca:	78 f5       	brcc	.+94     	; 0x142a <vfprintf+0x22a>
    13cc:	88 e0       	ldi	r24, 0x08	; 8
    13ce:	48 2e       	mov	r4, r24
    13d0:	2c c0       	rjmp	.+88     	; 0x142a <vfprintf+0x22a>
    13d2:	96 fc       	sbrc	r9, 6
    13d4:	2a c0       	rjmp	.+84     	; 0x142a <vfprintf+0x22a>
    13d6:	81 2f       	mov	r24, r17
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	8c 15       	cp	r24, r12
    13dc:	9d 05       	cpc	r25, r13
    13de:	9c f0       	brlt	.+38     	; 0x1406 <vfprintf+0x206>
    13e0:	3c ef       	ldi	r19, 0xFC	; 252
    13e2:	c3 16       	cp	r12, r19
    13e4:	3f ef       	ldi	r19, 0xFF	; 255
    13e6:	d3 06       	cpc	r13, r19
    13e8:	74 f0       	brlt	.+28     	; 0x1406 <vfprintf+0x206>
    13ea:	89 2d       	mov	r24, r9
    13ec:	80 68       	ori	r24, 0x80	; 128
    13ee:	98 2e       	mov	r9, r24
    13f0:	0a c0       	rjmp	.+20     	; 0x1406 <vfprintf+0x206>
    13f2:	e2 e0       	ldi	r30, 0x02	; 2
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	ec 0f       	add	r30, r28
    13f8:	fd 1f       	adc	r31, r29
    13fa:	e1 0f       	add	r30, r17
    13fc:	f1 1d       	adc	r31, r1
    13fe:	80 81       	ld	r24, Z
    1400:	80 33       	cpi	r24, 0x30	; 48
    1402:	19 f4       	brne	.+6      	; 0x140a <vfprintf+0x20a>
    1404:	11 50       	subi	r17, 0x01	; 1
    1406:	11 11       	cpse	r17, r1
    1408:	f4 cf       	rjmp	.-24     	; 0x13f2 <vfprintf+0x1f2>
    140a:	97 fe       	sbrs	r9, 7
    140c:	0e c0       	rjmp	.+28     	; 0x142a <vfprintf+0x22a>
    140e:	44 24       	eor	r4, r4
    1410:	43 94       	inc	r4
    1412:	41 0e       	add	r4, r17
    1414:	81 2f       	mov	r24, r17
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	c8 16       	cp	r12, r24
    141a:	d9 06       	cpc	r13, r25
    141c:	2c f4       	brge	.+10     	; 0x1428 <vfprintf+0x228>
    141e:	1c 19       	sub	r17, r12
    1420:	04 c0       	rjmp	.+8      	; 0x142a <vfprintf+0x22a>
    1422:	44 24       	eor	r4, r4
    1424:	43 94       	inc	r4
    1426:	01 c0       	rjmp	.+2      	; 0x142a <vfprintf+0x22a>
    1428:	10 e0       	ldi	r17, 0x00	; 0
    142a:	97 fe       	sbrs	r9, 7
    142c:	06 c0       	rjmp	.+12     	; 0x143a <vfprintf+0x23a>
    142e:	1c 14       	cp	r1, r12
    1430:	1d 04       	cpc	r1, r13
    1432:	34 f4       	brge	.+12     	; 0x1440 <vfprintf+0x240>
    1434:	c6 01       	movw	r24, r12
    1436:	01 96       	adiw	r24, 0x01	; 1
    1438:	05 c0       	rjmp	.+10     	; 0x1444 <vfprintf+0x244>
    143a:	85 e0       	ldi	r24, 0x05	; 5
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <vfprintf+0x244>
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	01 11       	cpse	r16, r1
    1446:	01 96       	adiw	r24, 0x01	; 1
    1448:	11 23       	and	r17, r17
    144a:	31 f0       	breq	.+12     	; 0x1458 <vfprintf+0x258>
    144c:	21 2f       	mov	r18, r17
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	2f 5f       	subi	r18, 0xFF	; 255
    1452:	3f 4f       	sbci	r19, 0xFF	; 255
    1454:	82 0f       	add	r24, r18
    1456:	93 1f       	adc	r25, r19
    1458:	25 2d       	mov	r18, r5
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	82 17       	cp	r24, r18
    145e:	93 07       	cpc	r25, r19
    1460:	14 f4       	brge	.+4      	; 0x1466 <vfprintf+0x266>
    1462:	58 1a       	sub	r5, r24
    1464:	01 c0       	rjmp	.+2      	; 0x1468 <vfprintf+0x268>
    1466:	51 2c       	mov	r5, r1
    1468:	89 2d       	mov	r24, r9
    146a:	89 70       	andi	r24, 0x09	; 9
    146c:	49 f4       	brne	.+18     	; 0x1480 <vfprintf+0x280>
    146e:	55 20       	and	r5, r5
    1470:	39 f0       	breq	.+14     	; 0x1480 <vfprintf+0x280>
    1472:	b7 01       	movw	r22, r14
    1474:	80 e2       	ldi	r24, 0x20	; 32
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    147c:	5a 94       	dec	r5
    147e:	f7 cf       	rjmp	.-18     	; 0x146e <vfprintf+0x26e>
    1480:	00 23       	and	r16, r16
    1482:	29 f0       	breq	.+10     	; 0x148e <vfprintf+0x28e>
    1484:	b7 01       	movw	r22, r14
    1486:	80 2f       	mov	r24, r16
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    148e:	93 fc       	sbrc	r9, 3
    1490:	09 c0       	rjmp	.+18     	; 0x14a4 <vfprintf+0x2a4>
    1492:	55 20       	and	r5, r5
    1494:	39 f0       	breq	.+14     	; 0x14a4 <vfprintf+0x2a4>
    1496:	b7 01       	movw	r22, r14
    1498:	80 e3       	ldi	r24, 0x30	; 48
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    14a0:	5a 94       	dec	r5
    14a2:	f7 cf       	rjmp	.-18     	; 0x1492 <vfprintf+0x292>
    14a4:	97 fe       	sbrs	r9, 7
    14a6:	4c c0       	rjmp	.+152    	; 0x1540 <vfprintf+0x340>
    14a8:	46 01       	movw	r8, r12
    14aa:	d7 fe       	sbrs	r13, 7
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <vfprintf+0x2b2>
    14ae:	81 2c       	mov	r8, r1
    14b0:	91 2c       	mov	r9, r1
    14b2:	c6 01       	movw	r24, r12
    14b4:	88 19       	sub	r24, r8
    14b6:	99 09       	sbc	r25, r9
    14b8:	f3 01       	movw	r30, r6
    14ba:	e8 0f       	add	r30, r24
    14bc:	f9 1f       	adc	r31, r25
    14be:	fe 87       	std	Y+14, r31	; 0x0e
    14c0:	ed 87       	std	Y+13, r30	; 0x0d
    14c2:	96 01       	movw	r18, r12
    14c4:	24 19       	sub	r18, r4
    14c6:	31 09       	sbc	r19, r1
    14c8:	38 8b       	std	Y+16, r19	; 0x10
    14ca:	2f 87       	std	Y+15, r18	; 0x0f
    14cc:	01 2f       	mov	r16, r17
    14ce:	10 e0       	ldi	r17, 0x00	; 0
    14d0:	11 95       	neg	r17
    14d2:	01 95       	neg	r16
    14d4:	11 09       	sbc	r17, r1
    14d6:	3f ef       	ldi	r19, 0xFF	; 255
    14d8:	83 16       	cp	r8, r19
    14da:	93 06       	cpc	r9, r19
    14dc:	29 f4       	brne	.+10     	; 0x14e8 <vfprintf+0x2e8>
    14de:	b7 01       	movw	r22, r14
    14e0:	8e e2       	ldi	r24, 0x2E	; 46
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    14e8:	c8 14       	cp	r12, r8
    14ea:	d9 04       	cpc	r13, r9
    14ec:	4c f0       	brlt	.+18     	; 0x1500 <vfprintf+0x300>
    14ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f0:	98 89       	ldd	r25, Y+16	; 0x10
    14f2:	88 15       	cp	r24, r8
    14f4:	99 05       	cpc	r25, r9
    14f6:	24 f4       	brge	.+8      	; 0x1500 <vfprintf+0x300>
    14f8:	ed 85       	ldd	r30, Y+13	; 0x0d
    14fa:	fe 85       	ldd	r31, Y+14	; 0x0e
    14fc:	81 81       	ldd	r24, Z+1	; 0x01
    14fe:	01 c0       	rjmp	.+2      	; 0x1502 <vfprintf+0x302>
    1500:	80 e3       	ldi	r24, 0x30	; 48
    1502:	f1 e0       	ldi	r31, 0x01	; 1
    1504:	8f 1a       	sub	r8, r31
    1506:	91 08       	sbc	r9, r1
    1508:	2d 85       	ldd	r18, Y+13	; 0x0d
    150a:	3e 85       	ldd	r19, Y+14	; 0x0e
    150c:	2f 5f       	subi	r18, 0xFF	; 255
    150e:	3f 4f       	sbci	r19, 0xFF	; 255
    1510:	3e 87       	std	Y+14, r19	; 0x0e
    1512:	2d 87       	std	Y+13, r18	; 0x0d
    1514:	80 16       	cp	r8, r16
    1516:	91 06       	cpc	r9, r17
    1518:	2c f0       	brlt	.+10     	; 0x1524 <vfprintf+0x324>
    151a:	b7 01       	movw	r22, r14
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    1522:	d9 cf       	rjmp	.-78     	; 0x14d6 <vfprintf+0x2d6>
    1524:	c8 14       	cp	r12, r8
    1526:	d9 04       	cpc	r13, r9
    1528:	41 f4       	brne	.+16     	; 0x153a <vfprintf+0x33a>
    152a:	9a 81       	ldd	r25, Y+2	; 0x02
    152c:	96 33       	cpi	r25, 0x36	; 54
    152e:	20 f4       	brcc	.+8      	; 0x1538 <vfprintf+0x338>
    1530:	95 33       	cpi	r25, 0x35	; 53
    1532:	19 f4       	brne	.+6      	; 0x153a <vfprintf+0x33a>
    1534:	3c 85       	ldd	r19, Y+12	; 0x0c
    1536:	34 ff       	sbrs	r19, 4
    1538:	81 e3       	ldi	r24, 0x31	; 49
    153a:	b7 01       	movw	r22, r14
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	4e c0       	rjmp	.+156    	; 0x15dc <vfprintf+0x3dc>
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	81 33       	cpi	r24, 0x31	; 49
    1544:	19 f0       	breq	.+6      	; 0x154c <vfprintf+0x34c>
    1546:	9c 85       	ldd	r25, Y+12	; 0x0c
    1548:	9f 7e       	andi	r25, 0xEF	; 239
    154a:	9c 87       	std	Y+12, r25	; 0x0c
    154c:	b7 01       	movw	r22, r14
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    1554:	11 11       	cpse	r17, r1
    1556:	05 c0       	rjmp	.+10     	; 0x1562 <vfprintf+0x362>
    1558:	94 fc       	sbrc	r9, 4
    155a:	18 c0       	rjmp	.+48     	; 0x158c <vfprintf+0x38c>
    155c:	85 e6       	ldi	r24, 0x65	; 101
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	17 c0       	rjmp	.+46     	; 0x1590 <vfprintf+0x390>
    1562:	b7 01       	movw	r22, r14
    1564:	8e e2       	ldi	r24, 0x2E	; 46
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    156c:	1e 5f       	subi	r17, 0xFE	; 254
    156e:	82 e0       	ldi	r24, 0x02	; 2
    1570:	01 e0       	ldi	r16, 0x01	; 1
    1572:	08 0f       	add	r16, r24
    1574:	f3 01       	movw	r30, r6
    1576:	e8 0f       	add	r30, r24
    1578:	f1 1d       	adc	r31, r1
    157a:	80 81       	ld	r24, Z
    157c:	b7 01       	movw	r22, r14
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    1584:	80 2f       	mov	r24, r16
    1586:	01 13       	cpse	r16, r17
    1588:	f3 cf       	rjmp	.-26     	; 0x1570 <vfprintf+0x370>
    158a:	e6 cf       	rjmp	.-52     	; 0x1558 <vfprintf+0x358>
    158c:	85 e4       	ldi	r24, 0x45	; 69
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	b7 01       	movw	r22, r14
    1592:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    1596:	d7 fc       	sbrc	r13, 7
    1598:	06 c0       	rjmp	.+12     	; 0x15a6 <vfprintf+0x3a6>
    159a:	c1 14       	cp	r12, r1
    159c:	d1 04       	cpc	r13, r1
    159e:	41 f4       	brne	.+16     	; 0x15b0 <vfprintf+0x3b0>
    15a0:	ec 85       	ldd	r30, Y+12	; 0x0c
    15a2:	e4 ff       	sbrs	r30, 4
    15a4:	05 c0       	rjmp	.+10     	; 0x15b0 <vfprintf+0x3b0>
    15a6:	d1 94       	neg	r13
    15a8:	c1 94       	neg	r12
    15aa:	d1 08       	sbc	r13, r1
    15ac:	8d e2       	ldi	r24, 0x2D	; 45
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <vfprintf+0x3b2>
    15b0:	8b e2       	ldi	r24, 0x2B	; 43
    15b2:	b7 01       	movw	r22, r14
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    15ba:	80 e3       	ldi	r24, 0x30	; 48
    15bc:	2a e0       	ldi	r18, 0x0A	; 10
    15be:	c2 16       	cp	r12, r18
    15c0:	d1 04       	cpc	r13, r1
    15c2:	2c f0       	brlt	.+10     	; 0x15ce <vfprintf+0x3ce>
    15c4:	8f 5f       	subi	r24, 0xFF	; 255
    15c6:	fa e0       	ldi	r31, 0x0A	; 10
    15c8:	cf 1a       	sub	r12, r31
    15ca:	d1 08       	sbc	r13, r1
    15cc:	f7 cf       	rjmp	.-18     	; 0x15bc <vfprintf+0x3bc>
    15ce:	b7 01       	movw	r22, r14
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    15d6:	b7 01       	movw	r22, r14
    15d8:	c6 01       	movw	r24, r12
    15da:	c0 96       	adiw	r24, 0x30	; 48
    15dc:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    15e0:	54 c1       	rjmp	.+680    	; 0x188a <vfprintf+0x68a>
    15e2:	83 36       	cpi	r24, 0x63	; 99
    15e4:	31 f0       	breq	.+12     	; 0x15f2 <vfprintf+0x3f2>
    15e6:	83 37       	cpi	r24, 0x73	; 115
    15e8:	79 f0       	breq	.+30     	; 0x1608 <vfprintf+0x408>
    15ea:	83 35       	cpi	r24, 0x53	; 83
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <vfprintf+0x3f0>
    15ee:	56 c0       	rjmp	.+172    	; 0x169c <vfprintf+0x49c>
    15f0:	20 c0       	rjmp	.+64     	; 0x1632 <vfprintf+0x432>
    15f2:	56 01       	movw	r10, r12
    15f4:	32 e0       	ldi	r19, 0x02	; 2
    15f6:	a3 0e       	add	r10, r19
    15f8:	b1 1c       	adc	r11, r1
    15fa:	f6 01       	movw	r30, r12
    15fc:	80 81       	ld	r24, Z
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	01 e0       	ldi	r16, 0x01	; 1
    1602:	10 e0       	ldi	r17, 0x00	; 0
    1604:	63 01       	movw	r12, r6
    1606:	12 c0       	rjmp	.+36     	; 0x162c <vfprintf+0x42c>
    1608:	56 01       	movw	r10, r12
    160a:	f2 e0       	ldi	r31, 0x02	; 2
    160c:	af 0e       	add	r10, r31
    160e:	b1 1c       	adc	r11, r1
    1610:	f6 01       	movw	r30, r12
    1612:	c0 80       	ld	r12, Z
    1614:	d1 80       	ldd	r13, Z+1	; 0x01
    1616:	96 fe       	sbrs	r9, 6
    1618:	03 c0       	rjmp	.+6      	; 0x1620 <vfprintf+0x420>
    161a:	61 2f       	mov	r22, r17
    161c:	70 e0       	ldi	r23, 0x00	; 0
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <vfprintf+0x424>
    1620:	6f ef       	ldi	r22, 0xFF	; 255
    1622:	7f ef       	ldi	r23, 0xFF	; 255
    1624:	c6 01       	movw	r24, r12
    1626:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <strnlen>
    162a:	8c 01       	movw	r16, r24
    162c:	f9 2d       	mov	r31, r9
    162e:	ff 77       	andi	r31, 0x7F	; 127
    1630:	14 c0       	rjmp	.+40     	; 0x165a <vfprintf+0x45a>
    1632:	56 01       	movw	r10, r12
    1634:	22 e0       	ldi	r18, 0x02	; 2
    1636:	a2 0e       	add	r10, r18
    1638:	b1 1c       	adc	r11, r1
    163a:	f6 01       	movw	r30, r12
    163c:	c0 80       	ld	r12, Z
    163e:	d1 80       	ldd	r13, Z+1	; 0x01
    1640:	96 fe       	sbrs	r9, 6
    1642:	03 c0       	rjmp	.+6      	; 0x164a <vfprintf+0x44a>
    1644:	61 2f       	mov	r22, r17
    1646:	70 e0       	ldi	r23, 0x00	; 0
    1648:	02 c0       	rjmp	.+4      	; 0x164e <vfprintf+0x44e>
    164a:	6f ef       	ldi	r22, 0xFF	; 255
    164c:	7f ef       	ldi	r23, 0xFF	; 255
    164e:	c6 01       	movw	r24, r12
    1650:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <strnlen_P>
    1654:	8c 01       	movw	r16, r24
    1656:	f9 2d       	mov	r31, r9
    1658:	f0 68       	ori	r31, 0x80	; 128
    165a:	9f 2e       	mov	r9, r31
    165c:	f3 fd       	sbrc	r31, 3
    165e:	1a c0       	rjmp	.+52     	; 0x1694 <vfprintf+0x494>
    1660:	85 2d       	mov	r24, r5
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	08 17       	cp	r16, r24
    1666:	19 07       	cpc	r17, r25
    1668:	a8 f4       	brcc	.+42     	; 0x1694 <vfprintf+0x494>
    166a:	b7 01       	movw	r22, r14
    166c:	80 e2       	ldi	r24, 0x20	; 32
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    1674:	5a 94       	dec	r5
    1676:	f4 cf       	rjmp	.-24     	; 0x1660 <vfprintf+0x460>
    1678:	f6 01       	movw	r30, r12
    167a:	97 fc       	sbrc	r9, 7
    167c:	85 91       	lpm	r24, Z+
    167e:	97 fe       	sbrs	r9, 7
    1680:	81 91       	ld	r24, Z+
    1682:	6f 01       	movw	r12, r30
    1684:	b7 01       	movw	r22, r14
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    168c:	51 10       	cpse	r5, r1
    168e:	5a 94       	dec	r5
    1690:	01 50       	subi	r16, 0x01	; 1
    1692:	11 09       	sbc	r17, r1
    1694:	01 15       	cp	r16, r1
    1696:	11 05       	cpc	r17, r1
    1698:	79 f7       	brne	.-34     	; 0x1678 <vfprintf+0x478>
    169a:	f7 c0       	rjmp	.+494    	; 0x188a <vfprintf+0x68a>
    169c:	84 36       	cpi	r24, 0x64	; 100
    169e:	11 f0       	breq	.+4      	; 0x16a4 <vfprintf+0x4a4>
    16a0:	89 36       	cpi	r24, 0x69	; 105
    16a2:	61 f5       	brne	.+88     	; 0x16fc <vfprintf+0x4fc>
    16a4:	56 01       	movw	r10, r12
    16a6:	97 fe       	sbrs	r9, 7
    16a8:	09 c0       	rjmp	.+18     	; 0x16bc <vfprintf+0x4bc>
    16aa:	24 e0       	ldi	r18, 0x04	; 4
    16ac:	a2 0e       	add	r10, r18
    16ae:	b1 1c       	adc	r11, r1
    16b0:	f6 01       	movw	r30, r12
    16b2:	60 81       	ld	r22, Z
    16b4:	71 81       	ldd	r23, Z+1	; 0x01
    16b6:	82 81       	ldd	r24, Z+2	; 0x02
    16b8:	93 81       	ldd	r25, Z+3	; 0x03
    16ba:	0a c0       	rjmp	.+20     	; 0x16d0 <vfprintf+0x4d0>
    16bc:	f2 e0       	ldi	r31, 0x02	; 2
    16be:	af 0e       	add	r10, r31
    16c0:	b1 1c       	adc	r11, r1
    16c2:	f6 01       	movw	r30, r12
    16c4:	60 81       	ld	r22, Z
    16c6:	71 81       	ldd	r23, Z+1	; 0x01
    16c8:	07 2e       	mov	r0, r23
    16ca:	00 0c       	add	r0, r0
    16cc:	88 0b       	sbc	r24, r24
    16ce:	99 0b       	sbc	r25, r25
    16d0:	f9 2d       	mov	r31, r9
    16d2:	ff 76       	andi	r31, 0x6F	; 111
    16d4:	9f 2e       	mov	r9, r31
    16d6:	97 ff       	sbrs	r25, 7
    16d8:	09 c0       	rjmp	.+18     	; 0x16ec <vfprintf+0x4ec>
    16da:	90 95       	com	r25
    16dc:	80 95       	com	r24
    16de:	70 95       	com	r23
    16e0:	61 95       	neg	r22
    16e2:	7f 4f       	sbci	r23, 0xFF	; 255
    16e4:	8f 4f       	sbci	r24, 0xFF	; 255
    16e6:	9f 4f       	sbci	r25, 0xFF	; 255
    16e8:	f0 68       	ori	r31, 0x80	; 128
    16ea:	9f 2e       	mov	r9, r31
    16ec:	2a e0       	ldi	r18, 0x0A	; 10
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	a3 01       	movw	r20, r6
    16f2:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__ultoa_invert>
    16f6:	c8 2e       	mov	r12, r24
    16f8:	c6 18       	sub	r12, r6
    16fa:	3f c0       	rjmp	.+126    	; 0x177a <vfprintf+0x57a>
    16fc:	09 2d       	mov	r16, r9
    16fe:	85 37       	cpi	r24, 0x75	; 117
    1700:	21 f4       	brne	.+8      	; 0x170a <vfprintf+0x50a>
    1702:	0f 7e       	andi	r16, 0xEF	; 239
    1704:	2a e0       	ldi	r18, 0x0A	; 10
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	1d c0       	rjmp	.+58     	; 0x1744 <vfprintf+0x544>
    170a:	09 7f       	andi	r16, 0xF9	; 249
    170c:	8f 36       	cpi	r24, 0x6F	; 111
    170e:	91 f0       	breq	.+36     	; 0x1734 <vfprintf+0x534>
    1710:	18 f4       	brcc	.+6      	; 0x1718 <vfprintf+0x518>
    1712:	88 35       	cpi	r24, 0x58	; 88
    1714:	59 f0       	breq	.+22     	; 0x172c <vfprintf+0x52c>
    1716:	c3 c0       	rjmp	.+390    	; 0x189e <vfprintf+0x69e>
    1718:	80 37       	cpi	r24, 0x70	; 112
    171a:	19 f0       	breq	.+6      	; 0x1722 <vfprintf+0x522>
    171c:	88 37       	cpi	r24, 0x78	; 120
    171e:	11 f0       	breq	.+4      	; 0x1724 <vfprintf+0x524>
    1720:	be c0       	rjmp	.+380    	; 0x189e <vfprintf+0x69e>
    1722:	00 61       	ori	r16, 0x10	; 16
    1724:	04 ff       	sbrs	r16, 4
    1726:	09 c0       	rjmp	.+18     	; 0x173a <vfprintf+0x53a>
    1728:	04 60       	ori	r16, 0x04	; 4
    172a:	07 c0       	rjmp	.+14     	; 0x173a <vfprintf+0x53a>
    172c:	94 fe       	sbrs	r9, 4
    172e:	08 c0       	rjmp	.+16     	; 0x1740 <vfprintf+0x540>
    1730:	06 60       	ori	r16, 0x06	; 6
    1732:	06 c0       	rjmp	.+12     	; 0x1740 <vfprintf+0x540>
    1734:	28 e0       	ldi	r18, 0x08	; 8
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	05 c0       	rjmp	.+10     	; 0x1744 <vfprintf+0x544>
    173a:	20 e1       	ldi	r18, 0x10	; 16
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <vfprintf+0x544>
    1740:	20 e1       	ldi	r18, 0x10	; 16
    1742:	32 e0       	ldi	r19, 0x02	; 2
    1744:	56 01       	movw	r10, r12
    1746:	07 ff       	sbrs	r16, 7
    1748:	09 c0       	rjmp	.+18     	; 0x175c <vfprintf+0x55c>
    174a:	84 e0       	ldi	r24, 0x04	; 4
    174c:	a8 0e       	add	r10, r24
    174e:	b1 1c       	adc	r11, r1
    1750:	f6 01       	movw	r30, r12
    1752:	60 81       	ld	r22, Z
    1754:	71 81       	ldd	r23, Z+1	; 0x01
    1756:	82 81       	ldd	r24, Z+2	; 0x02
    1758:	93 81       	ldd	r25, Z+3	; 0x03
    175a:	08 c0       	rjmp	.+16     	; 0x176c <vfprintf+0x56c>
    175c:	f2 e0       	ldi	r31, 0x02	; 2
    175e:	af 0e       	add	r10, r31
    1760:	b1 1c       	adc	r11, r1
    1762:	f6 01       	movw	r30, r12
    1764:	60 81       	ld	r22, Z
    1766:	71 81       	ldd	r23, Z+1	; 0x01
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	a3 01       	movw	r20, r6
    176e:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <__ultoa_invert>
    1772:	c8 2e       	mov	r12, r24
    1774:	c6 18       	sub	r12, r6
    1776:	0f 77       	andi	r16, 0x7F	; 127
    1778:	90 2e       	mov	r9, r16
    177a:	96 fe       	sbrs	r9, 6
    177c:	0b c0       	rjmp	.+22     	; 0x1794 <vfprintf+0x594>
    177e:	09 2d       	mov	r16, r9
    1780:	0e 7f       	andi	r16, 0xFE	; 254
    1782:	c1 16       	cp	r12, r17
    1784:	50 f4       	brcc	.+20     	; 0x179a <vfprintf+0x59a>
    1786:	94 fe       	sbrs	r9, 4
    1788:	0a c0       	rjmp	.+20     	; 0x179e <vfprintf+0x59e>
    178a:	92 fc       	sbrc	r9, 2
    178c:	08 c0       	rjmp	.+16     	; 0x179e <vfprintf+0x59e>
    178e:	09 2d       	mov	r16, r9
    1790:	0e 7e       	andi	r16, 0xEE	; 238
    1792:	05 c0       	rjmp	.+10     	; 0x179e <vfprintf+0x59e>
    1794:	dc 2c       	mov	r13, r12
    1796:	09 2d       	mov	r16, r9
    1798:	03 c0       	rjmp	.+6      	; 0x17a0 <vfprintf+0x5a0>
    179a:	dc 2c       	mov	r13, r12
    179c:	01 c0       	rjmp	.+2      	; 0x17a0 <vfprintf+0x5a0>
    179e:	d1 2e       	mov	r13, r17
    17a0:	04 ff       	sbrs	r16, 4
    17a2:	0d c0       	rjmp	.+26     	; 0x17be <vfprintf+0x5be>
    17a4:	fe 01       	movw	r30, r28
    17a6:	ec 0d       	add	r30, r12
    17a8:	f1 1d       	adc	r31, r1
    17aa:	80 81       	ld	r24, Z
    17ac:	80 33       	cpi	r24, 0x30	; 48
    17ae:	11 f4       	brne	.+4      	; 0x17b4 <vfprintf+0x5b4>
    17b0:	09 7e       	andi	r16, 0xE9	; 233
    17b2:	09 c0       	rjmp	.+18     	; 0x17c6 <vfprintf+0x5c6>
    17b4:	02 ff       	sbrs	r16, 2
    17b6:	06 c0       	rjmp	.+12     	; 0x17c4 <vfprintf+0x5c4>
    17b8:	d3 94       	inc	r13
    17ba:	d3 94       	inc	r13
    17bc:	04 c0       	rjmp	.+8      	; 0x17c6 <vfprintf+0x5c6>
    17be:	80 2f       	mov	r24, r16
    17c0:	86 78       	andi	r24, 0x86	; 134
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <vfprintf+0x5c6>
    17c4:	d3 94       	inc	r13
    17c6:	03 fd       	sbrc	r16, 3
    17c8:	11 c0       	rjmp	.+34     	; 0x17ec <vfprintf+0x5ec>
    17ca:	00 ff       	sbrs	r16, 0
    17cc:	06 c0       	rjmp	.+12     	; 0x17da <vfprintf+0x5da>
    17ce:	1c 2d       	mov	r17, r12
    17d0:	d5 14       	cp	r13, r5
    17d2:	80 f4       	brcc	.+32     	; 0x17f4 <vfprintf+0x5f4>
    17d4:	15 0d       	add	r17, r5
    17d6:	1d 19       	sub	r17, r13
    17d8:	0d c0       	rjmp	.+26     	; 0x17f4 <vfprintf+0x5f4>
    17da:	d5 14       	cp	r13, r5
    17dc:	58 f4       	brcc	.+22     	; 0x17f4 <vfprintf+0x5f4>
    17de:	b7 01       	movw	r22, r14
    17e0:	80 e2       	ldi	r24, 0x20	; 32
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    17e8:	d3 94       	inc	r13
    17ea:	f7 cf       	rjmp	.-18     	; 0x17da <vfprintf+0x5da>
    17ec:	d5 14       	cp	r13, r5
    17ee:	10 f4       	brcc	.+4      	; 0x17f4 <vfprintf+0x5f4>
    17f0:	5d 18       	sub	r5, r13
    17f2:	01 c0       	rjmp	.+2      	; 0x17f6 <vfprintf+0x5f6>
    17f4:	51 2c       	mov	r5, r1
    17f6:	04 ff       	sbrs	r16, 4
    17f8:	10 c0       	rjmp	.+32     	; 0x181a <vfprintf+0x61a>
    17fa:	b7 01       	movw	r22, r14
    17fc:	80 e3       	ldi	r24, 0x30	; 48
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    1804:	02 ff       	sbrs	r16, 2
    1806:	17 c0       	rjmp	.+46     	; 0x1836 <vfprintf+0x636>
    1808:	01 fd       	sbrc	r16, 1
    180a:	03 c0       	rjmp	.+6      	; 0x1812 <vfprintf+0x612>
    180c:	88 e7       	ldi	r24, 0x78	; 120
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <vfprintf+0x616>
    1812:	88 e5       	ldi	r24, 0x58	; 88
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	b7 01       	movw	r22, r14
    1818:	0c c0       	rjmp	.+24     	; 0x1832 <vfprintf+0x632>
    181a:	80 2f       	mov	r24, r16
    181c:	86 78       	andi	r24, 0x86	; 134
    181e:	59 f0       	breq	.+22     	; 0x1836 <vfprintf+0x636>
    1820:	01 ff       	sbrs	r16, 1
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <vfprintf+0x628>
    1824:	8b e2       	ldi	r24, 0x2B	; 43
    1826:	01 c0       	rjmp	.+2      	; 0x182a <vfprintf+0x62a>
    1828:	80 e2       	ldi	r24, 0x20	; 32
    182a:	07 fd       	sbrc	r16, 7
    182c:	8d e2       	ldi	r24, 0x2D	; 45
    182e:	b7 01       	movw	r22, r14
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    1836:	c1 16       	cp	r12, r17
    1838:	38 f4       	brcc	.+14     	; 0x1848 <vfprintf+0x648>
    183a:	b7 01       	movw	r22, r14
    183c:	80 e3       	ldi	r24, 0x30	; 48
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    1844:	11 50       	subi	r17, 0x01	; 1
    1846:	f7 cf       	rjmp	.-18     	; 0x1836 <vfprintf+0x636>
    1848:	ca 94       	dec	r12
    184a:	f3 01       	movw	r30, r6
    184c:	ec 0d       	add	r30, r12
    184e:	f1 1d       	adc	r31, r1
    1850:	80 81       	ld	r24, Z
    1852:	b7 01       	movw	r22, r14
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    185a:	c1 10       	cpse	r12, r1
    185c:	f5 cf       	rjmp	.-22     	; 0x1848 <vfprintf+0x648>
    185e:	15 c0       	rjmp	.+42     	; 0x188a <vfprintf+0x68a>
    1860:	f4 e0       	ldi	r31, 0x04	; 4
    1862:	f5 15       	cp	r31, r5
    1864:	60 f5       	brcc	.+88     	; 0x18be <vfprintf+0x6be>
    1866:	84 e0       	ldi	r24, 0x04	; 4
    1868:	58 1a       	sub	r5, r24
    186a:	93 fe       	sbrs	r9, 3
    186c:	1f c0       	rjmp	.+62     	; 0x18ac <vfprintf+0x6ac>
    186e:	01 11       	cpse	r16, r1
    1870:	27 c0       	rjmp	.+78     	; 0x18c0 <vfprintf+0x6c0>
    1872:	2c 85       	ldd	r18, Y+12	; 0x0c
    1874:	23 ff       	sbrs	r18, 3
    1876:	2a c0       	rjmp	.+84     	; 0x18cc <vfprintf+0x6cc>
    1878:	02 ed       	ldi	r16, 0xD2	; 210
    187a:	10 e0       	ldi	r17, 0x00	; 0
    187c:	39 2d       	mov	r19, r9
    187e:	30 71       	andi	r19, 0x10	; 16
    1880:	93 2e       	mov	r9, r19
    1882:	f8 01       	movw	r30, r16
    1884:	84 91       	lpm	r24, Z
    1886:	81 11       	cpse	r24, r1
    1888:	24 c0       	rjmp	.+72     	; 0x18d2 <vfprintf+0x6d2>
    188a:	55 20       	and	r5, r5
    188c:	09 f4       	brne	.+2      	; 0x1890 <vfprintf+0x690>
    188e:	e4 cc       	rjmp	.-1592   	; 0x1258 <vfprintf+0x58>
    1890:	b7 01       	movw	r22, r14
    1892:	80 e2       	ldi	r24, 0x20	; 32
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    189a:	5a 94       	dec	r5
    189c:	f6 cf       	rjmp	.-20     	; 0x188a <vfprintf+0x68a>
    189e:	f7 01       	movw	r30, r14
    18a0:	86 81       	ldd	r24, Z+6	; 0x06
    18a2:	97 81       	ldd	r25, Z+7	; 0x07
    18a4:	26 c0       	rjmp	.+76     	; 0x18f2 <vfprintf+0x6f2>
    18a6:	8f ef       	ldi	r24, 0xFF	; 255
    18a8:	9f ef       	ldi	r25, 0xFF	; 255
    18aa:	23 c0       	rjmp	.+70     	; 0x18f2 <vfprintf+0x6f2>
    18ac:	b7 01       	movw	r22, r14
    18ae:	80 e2       	ldi	r24, 0x20	; 32
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    18b6:	5a 94       	dec	r5
    18b8:	51 10       	cpse	r5, r1
    18ba:	f8 cf       	rjmp	.-16     	; 0x18ac <vfprintf+0x6ac>
    18bc:	d8 cf       	rjmp	.-80     	; 0x186e <vfprintf+0x66e>
    18be:	51 2c       	mov	r5, r1
    18c0:	b7 01       	movw	r22, r14
    18c2:	80 2f       	mov	r24, r16
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    18ca:	d3 cf       	rjmp	.-90     	; 0x1872 <vfprintf+0x672>
    18cc:	06 ed       	ldi	r16, 0xD6	; 214
    18ce:	10 e0       	ldi	r17, 0x00	; 0
    18d0:	d5 cf       	rjmp	.-86     	; 0x187c <vfprintf+0x67c>
    18d2:	91 10       	cpse	r9, r1
    18d4:	80 52       	subi	r24, 0x20	; 32
    18d6:	b7 01       	movw	r22, r14
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <fputc>
    18de:	0f 5f       	subi	r16, 0xFF	; 255
    18e0:	1f 4f       	sbci	r17, 0xFF	; 255
    18e2:	cf cf       	rjmp	.-98     	; 0x1882 <vfprintf+0x682>
    18e4:	23 e0       	ldi	r18, 0x03	; 3
    18e6:	25 15       	cp	r18, r5
    18e8:	10 f4       	brcc	.+4      	; 0x18ee <vfprintf+0x6ee>
    18ea:	83 e0       	ldi	r24, 0x03	; 3
    18ec:	bd cf       	rjmp	.-134    	; 0x1868 <vfprintf+0x668>
    18ee:	51 2c       	mov	r5, r1
    18f0:	c0 cf       	rjmp	.-128    	; 0x1872 <vfprintf+0x672>
    18f2:	60 96       	adiw	r28, 0x10	; 16
    18f4:	e2 e1       	ldi	r30, 0x12	; 18
    18f6:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <__epilogue_restores__>

000018fa <__udivmodhi4>:
    18fa:	aa 1b       	sub	r26, r26
    18fc:	bb 1b       	sub	r27, r27
    18fe:	51 e1       	ldi	r21, 0x11	; 17
    1900:	07 c0       	rjmp	.+14     	; 0x1910 <__udivmodhi4_ep>

00001902 <__udivmodhi4_loop>:
    1902:	aa 1f       	adc	r26, r26
    1904:	bb 1f       	adc	r27, r27
    1906:	a6 17       	cp	r26, r22
    1908:	b7 07       	cpc	r27, r23
    190a:	10 f0       	brcs	.+4      	; 0x1910 <__udivmodhi4_ep>
    190c:	a6 1b       	sub	r26, r22
    190e:	b7 0b       	sbc	r27, r23

00001910 <__udivmodhi4_ep>:
    1910:	88 1f       	adc	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	5a 95       	dec	r21
    1916:	a9 f7       	brne	.-22     	; 0x1902 <__udivmodhi4_loop>
    1918:	80 95       	com	r24
    191a:	90 95       	com	r25
    191c:	bc 01       	movw	r22, r24
    191e:	cd 01       	movw	r24, r26
    1920:	08 95       	ret

00001922 <__divmodhi4>:
    1922:	97 fb       	bst	r25, 7
    1924:	07 2e       	mov	r0, r23
    1926:	16 f4       	brtc	.+4      	; 0x192c <__divmodhi4+0xa>
    1928:	00 94       	com	r0
    192a:	07 d0       	rcall	.+14     	; 0x193a <__divmodhi4_neg1>
    192c:	77 fd       	sbrc	r23, 7
    192e:	09 d0       	rcall	.+18     	; 0x1942 <__divmodhi4_neg2>
    1930:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <__udivmodhi4>
    1934:	07 fc       	sbrc	r0, 7
    1936:	05 d0       	rcall	.+10     	; 0x1942 <__divmodhi4_neg2>
    1938:	3e f4       	brtc	.+14     	; 0x1948 <__divmodhi4_exit>

0000193a <__divmodhi4_neg1>:
    193a:	90 95       	com	r25
    193c:	81 95       	neg	r24
    193e:	9f 4f       	sbci	r25, 0xFF	; 255
    1940:	08 95       	ret

00001942 <__divmodhi4_neg2>:
    1942:	70 95       	com	r23
    1944:	61 95       	neg	r22
    1946:	7f 4f       	sbci	r23, 0xFF	; 255

00001948 <__divmodhi4_exit>:
    1948:	08 95       	ret

0000194a <__udivmodsi4>:
    194a:	a1 e2       	ldi	r26, 0x21	; 33
    194c:	1a 2e       	mov	r1, r26
    194e:	aa 1b       	sub	r26, r26
    1950:	bb 1b       	sub	r27, r27
    1952:	fd 01       	movw	r30, r26
    1954:	0d c0       	rjmp	.+26     	; 0x1970 <__udivmodsi4_ep>

00001956 <__udivmodsi4_loop>:
    1956:	aa 1f       	adc	r26, r26
    1958:	bb 1f       	adc	r27, r27
    195a:	ee 1f       	adc	r30, r30
    195c:	ff 1f       	adc	r31, r31
    195e:	a2 17       	cp	r26, r18
    1960:	b3 07       	cpc	r27, r19
    1962:	e4 07       	cpc	r30, r20
    1964:	f5 07       	cpc	r31, r21
    1966:	20 f0       	brcs	.+8      	; 0x1970 <__udivmodsi4_ep>
    1968:	a2 1b       	sub	r26, r18
    196a:	b3 0b       	sbc	r27, r19
    196c:	e4 0b       	sbc	r30, r20
    196e:	f5 0b       	sbc	r31, r21

00001970 <__udivmodsi4_ep>:
    1970:	66 1f       	adc	r22, r22
    1972:	77 1f       	adc	r23, r23
    1974:	88 1f       	adc	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	1a 94       	dec	r1
    197a:	69 f7       	brne	.-38     	; 0x1956 <__udivmodsi4_loop>
    197c:	60 95       	com	r22
    197e:	70 95       	com	r23
    1980:	80 95       	com	r24
    1982:	90 95       	com	r25
    1984:	9b 01       	movw	r18, r22
    1986:	ac 01       	movw	r20, r24
    1988:	bd 01       	movw	r22, r26
    198a:	cf 01       	movw	r24, r30
    198c:	08 95       	ret

0000198e <__umulhisi3>:
    198e:	a2 9f       	mul	r26, r18
    1990:	b0 01       	movw	r22, r0
    1992:	b3 9f       	mul	r27, r19
    1994:	c0 01       	movw	r24, r0
    1996:	a3 9f       	mul	r26, r19
    1998:	70 0d       	add	r23, r0
    199a:	81 1d       	adc	r24, r1
    199c:	11 24       	eor	r1, r1
    199e:	91 1d       	adc	r25, r1
    19a0:	b2 9f       	mul	r27, r18
    19a2:	70 0d       	add	r23, r0
    19a4:	81 1d       	adc	r24, r1
    19a6:	11 24       	eor	r1, r1
    19a8:	91 1d       	adc	r25, r1
    19aa:	08 95       	ret

000019ac <__prologue_saves__>:
    19ac:	2f 92       	push	r2
    19ae:	3f 92       	push	r3
    19b0:	4f 92       	push	r4
    19b2:	5f 92       	push	r5
    19b4:	6f 92       	push	r6
    19b6:	7f 92       	push	r7
    19b8:	8f 92       	push	r8
    19ba:	9f 92       	push	r9
    19bc:	af 92       	push	r10
    19be:	bf 92       	push	r11
    19c0:	cf 92       	push	r12
    19c2:	df 92       	push	r13
    19c4:	ef 92       	push	r14
    19c6:	ff 92       	push	r15
    19c8:	0f 93       	push	r16
    19ca:	1f 93       	push	r17
    19cc:	cf 93       	push	r28
    19ce:	df 93       	push	r29
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    19d4:	ca 1b       	sub	r28, r26
    19d6:	db 0b       	sbc	r29, r27
    19d8:	0f b6       	in	r0, 0x3f	; 63
    19da:	f8 94       	cli
    19dc:	de bf       	out	0x3e, r29	; 62
    19de:	0f be       	out	0x3f, r0	; 63
    19e0:	cd bf       	out	0x3d, r28	; 61
    19e2:	09 94       	ijmp

000019e4 <__epilogue_restores__>:
    19e4:	2a 88       	ldd	r2, Y+18	; 0x12
    19e6:	39 88       	ldd	r3, Y+17	; 0x11
    19e8:	48 88       	ldd	r4, Y+16	; 0x10
    19ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    19ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    19ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    19f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    19f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    19f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    19f6:	b9 84       	ldd	r11, Y+9	; 0x09
    19f8:	c8 84       	ldd	r12, Y+8	; 0x08
    19fa:	df 80       	ldd	r13, Y+7	; 0x07
    19fc:	ee 80       	ldd	r14, Y+6	; 0x06
    19fe:	fd 80       	ldd	r15, Y+5	; 0x05
    1a00:	0c 81       	ldd	r16, Y+4	; 0x04
    1a02:	1b 81       	ldd	r17, Y+3	; 0x03
    1a04:	aa 81       	ldd	r26, Y+2	; 0x02
    1a06:	b9 81       	ldd	r27, Y+1	; 0x01
    1a08:	ce 0f       	add	r28, r30
    1a0a:	d1 1d       	adc	r29, r1
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	ed 01       	movw	r28, r26
    1a18:	08 95       	ret

00001a1a <__ftoa_engine>:
    1a1a:	28 30       	cpi	r18, 0x08	; 8
    1a1c:	08 f0       	brcs	.+2      	; 0x1a20 <__ftoa_engine+0x6>
    1a1e:	27 e0       	ldi	r18, 0x07	; 7
    1a20:	33 27       	eor	r19, r19
    1a22:	da 01       	movw	r26, r20
    1a24:	99 0f       	add	r25, r25
    1a26:	31 1d       	adc	r19, r1
    1a28:	87 fd       	sbrc	r24, 7
    1a2a:	91 60       	ori	r25, 0x01	; 1
    1a2c:	00 96       	adiw	r24, 0x00	; 0
    1a2e:	61 05       	cpc	r22, r1
    1a30:	71 05       	cpc	r23, r1
    1a32:	39 f4       	brne	.+14     	; 0x1a42 <__ftoa_engine+0x28>
    1a34:	32 60       	ori	r19, 0x02	; 2
    1a36:	2e 5f       	subi	r18, 0xFE	; 254
    1a38:	3d 93       	st	X+, r19
    1a3a:	30 e3       	ldi	r19, 0x30	; 48
    1a3c:	2a 95       	dec	r18
    1a3e:	e1 f7       	brne	.-8      	; 0x1a38 <__ftoa_engine+0x1e>
    1a40:	08 95       	ret
    1a42:	9f 3f       	cpi	r25, 0xFF	; 255
    1a44:	30 f0       	brcs	.+12     	; 0x1a52 <__ftoa_engine+0x38>
    1a46:	80 38       	cpi	r24, 0x80	; 128
    1a48:	71 05       	cpc	r23, r1
    1a4a:	61 05       	cpc	r22, r1
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <__ftoa_engine+0x36>
    1a4e:	3c 5f       	subi	r19, 0xFC	; 252
    1a50:	3c 5f       	subi	r19, 0xFC	; 252
    1a52:	3d 93       	st	X+, r19
    1a54:	91 30       	cpi	r25, 0x01	; 1
    1a56:	08 f0       	brcs	.+2      	; 0x1a5a <__ftoa_engine+0x40>
    1a58:	80 68       	ori	r24, 0x80	; 128
    1a5a:	91 1d       	adc	r25, r1
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	1f 93       	push	r17
    1a62:	0f 93       	push	r16
    1a64:	ff 92       	push	r15
    1a66:	ef 92       	push	r14
    1a68:	19 2f       	mov	r17, r25
    1a6a:	98 7f       	andi	r25, 0xF8	; 248
    1a6c:	96 95       	lsr	r25
    1a6e:	e9 2f       	mov	r30, r25
    1a70:	96 95       	lsr	r25
    1a72:	96 95       	lsr	r25
    1a74:	e9 0f       	add	r30, r25
    1a76:	ff 27       	eor	r31, r31
    1a78:	ec 5c       	subi	r30, 0xCC	; 204
    1a7a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a7c:	99 27       	eor	r25, r25
    1a7e:	33 27       	eor	r19, r19
    1a80:	ee 24       	eor	r14, r14
    1a82:	ff 24       	eor	r15, r15
    1a84:	a7 01       	movw	r20, r14
    1a86:	e7 01       	movw	r28, r14
    1a88:	05 90       	lpm	r0, Z+
    1a8a:	08 94       	sec
    1a8c:	07 94       	ror	r0
    1a8e:	28 f4       	brcc	.+10     	; 0x1a9a <__ftoa_engine+0x80>
    1a90:	36 0f       	add	r19, r22
    1a92:	e7 1e       	adc	r14, r23
    1a94:	f8 1e       	adc	r15, r24
    1a96:	49 1f       	adc	r20, r25
    1a98:	51 1d       	adc	r21, r1
    1a9a:	66 0f       	add	r22, r22
    1a9c:	77 1f       	adc	r23, r23
    1a9e:	88 1f       	adc	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	06 94       	lsr	r0
    1aa4:	a1 f7       	brne	.-24     	; 0x1a8e <__ftoa_engine+0x74>
    1aa6:	05 90       	lpm	r0, Z+
    1aa8:	07 94       	ror	r0
    1aaa:	28 f4       	brcc	.+10     	; 0x1ab6 <__ftoa_engine+0x9c>
    1aac:	e7 0e       	add	r14, r23
    1aae:	f8 1e       	adc	r15, r24
    1ab0:	49 1f       	adc	r20, r25
    1ab2:	56 1f       	adc	r21, r22
    1ab4:	c1 1d       	adc	r28, r1
    1ab6:	77 0f       	add	r23, r23
    1ab8:	88 1f       	adc	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	66 1f       	adc	r22, r22
    1abe:	06 94       	lsr	r0
    1ac0:	a1 f7       	brne	.-24     	; 0x1aaa <__ftoa_engine+0x90>
    1ac2:	05 90       	lpm	r0, Z+
    1ac4:	07 94       	ror	r0
    1ac6:	28 f4       	brcc	.+10     	; 0x1ad2 <__ftoa_engine+0xb8>
    1ac8:	f8 0e       	add	r15, r24
    1aca:	49 1f       	adc	r20, r25
    1acc:	56 1f       	adc	r21, r22
    1ace:	c7 1f       	adc	r28, r23
    1ad0:	d1 1d       	adc	r29, r1
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	66 1f       	adc	r22, r22
    1ad8:	77 1f       	adc	r23, r23
    1ada:	06 94       	lsr	r0
    1adc:	a1 f7       	brne	.-24     	; 0x1ac6 <__ftoa_engine+0xac>
    1ade:	05 90       	lpm	r0, Z+
    1ae0:	07 94       	ror	r0
    1ae2:	20 f4       	brcc	.+8      	; 0x1aec <__ftoa_engine+0xd2>
    1ae4:	49 0f       	add	r20, r25
    1ae6:	56 1f       	adc	r21, r22
    1ae8:	c7 1f       	adc	r28, r23
    1aea:	d8 1f       	adc	r29, r24
    1aec:	99 0f       	add	r25, r25
    1aee:	66 1f       	adc	r22, r22
    1af0:	77 1f       	adc	r23, r23
    1af2:	88 1f       	adc	r24, r24
    1af4:	06 94       	lsr	r0
    1af6:	a9 f7       	brne	.-22     	; 0x1ae2 <__ftoa_engine+0xc8>
    1af8:	84 91       	lpm	r24, Z
    1afa:	10 95       	com	r17
    1afc:	17 70       	andi	r17, 0x07	; 7
    1afe:	41 f0       	breq	.+16     	; 0x1b10 <__ftoa_engine+0xf6>
    1b00:	d6 95       	lsr	r29
    1b02:	c7 95       	ror	r28
    1b04:	57 95       	ror	r21
    1b06:	47 95       	ror	r20
    1b08:	f7 94       	ror	r15
    1b0a:	e7 94       	ror	r14
    1b0c:	1a 95       	dec	r17
    1b0e:	c1 f7       	brne	.-16     	; 0x1b00 <__ftoa_engine+0xe6>
    1b10:	ea ed       	ldi	r30, 0xDA	; 218
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	68 94       	set
    1b16:	15 90       	lpm	r1, Z+
    1b18:	15 91       	lpm	r17, Z+
    1b1a:	35 91       	lpm	r19, Z+
    1b1c:	65 91       	lpm	r22, Z+
    1b1e:	95 91       	lpm	r25, Z+
    1b20:	05 90       	lpm	r0, Z+
    1b22:	7f e2       	ldi	r23, 0x2F	; 47
    1b24:	73 95       	inc	r23
    1b26:	e1 18       	sub	r14, r1
    1b28:	f1 0a       	sbc	r15, r17
    1b2a:	43 0b       	sbc	r20, r19
    1b2c:	56 0b       	sbc	r21, r22
    1b2e:	c9 0b       	sbc	r28, r25
    1b30:	d0 09       	sbc	r29, r0
    1b32:	c0 f7       	brcc	.-16     	; 0x1b24 <__ftoa_engine+0x10a>
    1b34:	e1 0c       	add	r14, r1
    1b36:	f1 1e       	adc	r15, r17
    1b38:	43 1f       	adc	r20, r19
    1b3a:	56 1f       	adc	r21, r22
    1b3c:	c9 1f       	adc	r28, r25
    1b3e:	d0 1d       	adc	r29, r0
    1b40:	7e f4       	brtc	.+30     	; 0x1b60 <__ftoa_engine+0x146>
    1b42:	70 33       	cpi	r23, 0x30	; 48
    1b44:	11 f4       	brne	.+4      	; 0x1b4a <__ftoa_engine+0x130>
    1b46:	8a 95       	dec	r24
    1b48:	e6 cf       	rjmp	.-52     	; 0x1b16 <__ftoa_engine+0xfc>
    1b4a:	e8 94       	clt
    1b4c:	01 50       	subi	r16, 0x01	; 1
    1b4e:	30 f0       	brcs	.+12     	; 0x1b5c <__ftoa_engine+0x142>
    1b50:	08 0f       	add	r16, r24
    1b52:	0a f4       	brpl	.+2      	; 0x1b56 <__ftoa_engine+0x13c>
    1b54:	00 27       	eor	r16, r16
    1b56:	02 17       	cp	r16, r18
    1b58:	08 f4       	brcc	.+2      	; 0x1b5c <__ftoa_engine+0x142>
    1b5a:	20 2f       	mov	r18, r16
    1b5c:	23 95       	inc	r18
    1b5e:	02 2f       	mov	r16, r18
    1b60:	7a 33       	cpi	r23, 0x3A	; 58
    1b62:	28 f0       	brcs	.+10     	; 0x1b6e <__ftoa_engine+0x154>
    1b64:	79 e3       	ldi	r23, 0x39	; 57
    1b66:	7d 93       	st	X+, r23
    1b68:	2a 95       	dec	r18
    1b6a:	e9 f7       	brne	.-6      	; 0x1b66 <__ftoa_engine+0x14c>
    1b6c:	10 c0       	rjmp	.+32     	; 0x1b8e <__ftoa_engine+0x174>
    1b6e:	7d 93       	st	X+, r23
    1b70:	2a 95       	dec	r18
    1b72:	89 f6       	brne	.-94     	; 0x1b16 <__ftoa_engine+0xfc>
    1b74:	06 94       	lsr	r0
    1b76:	97 95       	ror	r25
    1b78:	67 95       	ror	r22
    1b7a:	37 95       	ror	r19
    1b7c:	17 95       	ror	r17
    1b7e:	17 94       	ror	r1
    1b80:	e1 18       	sub	r14, r1
    1b82:	f1 0a       	sbc	r15, r17
    1b84:	43 0b       	sbc	r20, r19
    1b86:	56 0b       	sbc	r21, r22
    1b88:	c9 0b       	sbc	r28, r25
    1b8a:	d0 09       	sbc	r29, r0
    1b8c:	98 f0       	brcs	.+38     	; 0x1bb4 <__ftoa_engine+0x19a>
    1b8e:	23 95       	inc	r18
    1b90:	7e 91       	ld	r23, -X
    1b92:	73 95       	inc	r23
    1b94:	7a 33       	cpi	r23, 0x3A	; 58
    1b96:	08 f0       	brcs	.+2      	; 0x1b9a <__ftoa_engine+0x180>
    1b98:	70 e3       	ldi	r23, 0x30	; 48
    1b9a:	7c 93       	st	X, r23
    1b9c:	20 13       	cpse	r18, r16
    1b9e:	b8 f7       	brcc	.-18     	; 0x1b8e <__ftoa_engine+0x174>
    1ba0:	7e 91       	ld	r23, -X
    1ba2:	70 61       	ori	r23, 0x10	; 16
    1ba4:	7d 93       	st	X+, r23
    1ba6:	30 f0       	brcs	.+12     	; 0x1bb4 <__ftoa_engine+0x19a>
    1ba8:	83 95       	inc	r24
    1baa:	71 e3       	ldi	r23, 0x31	; 49
    1bac:	7d 93       	st	X+, r23
    1bae:	70 e3       	ldi	r23, 0x30	; 48
    1bb0:	2a 95       	dec	r18
    1bb2:	e1 f7       	brne	.-8      	; 0x1bac <__ftoa_engine+0x192>
    1bb4:	11 24       	eor	r1, r1
    1bb6:	ef 90       	pop	r14
    1bb8:	ff 90       	pop	r15
    1bba:	0f 91       	pop	r16
    1bbc:	1f 91       	pop	r17
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	99 27       	eor	r25, r25
    1bc4:	87 fd       	sbrc	r24, 7
    1bc6:	90 95       	com	r25
    1bc8:	08 95       	ret

00001bca <strnlen_P>:
    1bca:	fc 01       	movw	r30, r24
    1bcc:	05 90       	lpm	r0, Z+
    1bce:	61 50       	subi	r22, 0x01	; 1
    1bd0:	70 40       	sbci	r23, 0x00	; 0
    1bd2:	01 10       	cpse	r0, r1
    1bd4:	d8 f7       	brcc	.-10     	; 0x1bcc <strnlen_P+0x2>
    1bd6:	80 95       	com	r24
    1bd8:	90 95       	com	r25
    1bda:	8e 0f       	add	r24, r30
    1bdc:	9f 1f       	adc	r25, r31
    1bde:	08 95       	ret

00001be0 <strnlen>:
    1be0:	fc 01       	movw	r30, r24
    1be2:	61 50       	subi	r22, 0x01	; 1
    1be4:	70 40       	sbci	r23, 0x00	; 0
    1be6:	01 90       	ld	r0, Z+
    1be8:	01 10       	cpse	r0, r1
    1bea:	d8 f7       	brcc	.-10     	; 0x1be2 <strnlen+0x2>
    1bec:	80 95       	com	r24
    1bee:	90 95       	com	r25
    1bf0:	8e 0f       	add	r24, r30
    1bf2:	9f 1f       	adc	r25, r31
    1bf4:	08 95       	ret

00001bf6 <fputc>:
    1bf6:	0f 93       	push	r16
    1bf8:	1f 93       	push	r17
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	fb 01       	movw	r30, r22
    1c00:	23 81       	ldd	r18, Z+3	; 0x03
    1c02:	21 fd       	sbrc	r18, 1
    1c04:	03 c0       	rjmp	.+6      	; 0x1c0c <fputc+0x16>
    1c06:	8f ef       	ldi	r24, 0xFF	; 255
    1c08:	9f ef       	ldi	r25, 0xFF	; 255
    1c0a:	2c c0       	rjmp	.+88     	; 0x1c64 <fputc+0x6e>
    1c0c:	22 ff       	sbrs	r18, 2
    1c0e:	16 c0       	rjmp	.+44     	; 0x1c3c <fputc+0x46>
    1c10:	46 81       	ldd	r20, Z+6	; 0x06
    1c12:	57 81       	ldd	r21, Z+7	; 0x07
    1c14:	24 81       	ldd	r18, Z+4	; 0x04
    1c16:	35 81       	ldd	r19, Z+5	; 0x05
    1c18:	42 17       	cp	r20, r18
    1c1a:	53 07       	cpc	r21, r19
    1c1c:	44 f4       	brge	.+16     	; 0x1c2e <fputc+0x38>
    1c1e:	a0 81       	ld	r26, Z
    1c20:	b1 81       	ldd	r27, Z+1	; 0x01
    1c22:	9d 01       	movw	r18, r26
    1c24:	2f 5f       	subi	r18, 0xFF	; 255
    1c26:	3f 4f       	sbci	r19, 0xFF	; 255
    1c28:	31 83       	std	Z+1, r19	; 0x01
    1c2a:	20 83       	st	Z, r18
    1c2c:	8c 93       	st	X, r24
    1c2e:	26 81       	ldd	r18, Z+6	; 0x06
    1c30:	37 81       	ldd	r19, Z+7	; 0x07
    1c32:	2f 5f       	subi	r18, 0xFF	; 255
    1c34:	3f 4f       	sbci	r19, 0xFF	; 255
    1c36:	37 83       	std	Z+7, r19	; 0x07
    1c38:	26 83       	std	Z+6, r18	; 0x06
    1c3a:	14 c0       	rjmp	.+40     	; 0x1c64 <fputc+0x6e>
    1c3c:	8b 01       	movw	r16, r22
    1c3e:	ec 01       	movw	r28, r24
    1c40:	fb 01       	movw	r30, r22
    1c42:	00 84       	ldd	r0, Z+8	; 0x08
    1c44:	f1 85       	ldd	r31, Z+9	; 0x09
    1c46:	e0 2d       	mov	r30, r0
    1c48:	09 95       	icall
    1c4a:	89 2b       	or	r24, r25
    1c4c:	e1 f6       	brne	.-72     	; 0x1c06 <fputc+0x10>
    1c4e:	d8 01       	movw	r26, r16
    1c50:	16 96       	adiw	r26, 0x06	; 6
    1c52:	8d 91       	ld	r24, X+
    1c54:	9c 91       	ld	r25, X
    1c56:	17 97       	sbiw	r26, 0x07	; 7
    1c58:	01 96       	adiw	r24, 0x01	; 1
    1c5a:	17 96       	adiw	r26, 0x07	; 7
    1c5c:	9c 93       	st	X, r25
    1c5e:	8e 93       	st	-X, r24
    1c60:	16 97       	sbiw	r26, 0x06	; 6
    1c62:	ce 01       	movw	r24, r28
    1c64:	df 91       	pop	r29
    1c66:	cf 91       	pop	r28
    1c68:	1f 91       	pop	r17
    1c6a:	0f 91       	pop	r16
    1c6c:	08 95       	ret

00001c6e <sprintf>:
    1c6e:	ae e0       	ldi	r26, 0x0E	; 14
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	ed e3       	ldi	r30, 0x3D	; 61
    1c74:	fe e0       	ldi	r31, 0x0E	; 14
    1c76:	0c 94 e4 0c 	jmp	0x19c8	; 0x19c8 <__prologue_saves__+0x1c>
    1c7a:	0d 89       	ldd	r16, Y+21	; 0x15
    1c7c:	1e 89       	ldd	r17, Y+22	; 0x16
    1c7e:	86 e0       	ldi	r24, 0x06	; 6
    1c80:	8c 83       	std	Y+4, r24	; 0x04
    1c82:	1a 83       	std	Y+2, r17	; 0x02
    1c84:	09 83       	std	Y+1, r16	; 0x01
    1c86:	8f ef       	ldi	r24, 0xFF	; 255
    1c88:	9f e7       	ldi	r25, 0x7F	; 127
    1c8a:	9e 83       	std	Y+6, r25	; 0x06
    1c8c:	8d 83       	std	Y+5, r24	; 0x05
    1c8e:	ae 01       	movw	r20, r28
    1c90:	47 5e       	subi	r20, 0xE7	; 231
    1c92:	5f 4f       	sbci	r21, 0xFF	; 255
    1c94:	6f 89       	ldd	r22, Y+23	; 0x17
    1c96:	78 8d       	ldd	r23, Y+24	; 0x18
    1c98:	ce 01       	movw	r24, r28
    1c9a:	01 96       	adiw	r24, 0x01	; 1
    1c9c:	0e 94 00 09 	call	0x1200	; 0x1200 <vfprintf>
    1ca0:	ef 81       	ldd	r30, Y+7	; 0x07
    1ca2:	f8 85       	ldd	r31, Y+8	; 0x08
    1ca4:	e0 0f       	add	r30, r16
    1ca6:	f1 1f       	adc	r31, r17
    1ca8:	10 82       	st	Z, r1
    1caa:	2e 96       	adiw	r28, 0x0e	; 14
    1cac:	e4 e0       	ldi	r30, 0x04	; 4
    1cae:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <__epilogue_restores__+0x1c>

00001cb2 <__ultoa_invert>:
    1cb2:	fa 01       	movw	r30, r20
    1cb4:	aa 27       	eor	r26, r26
    1cb6:	28 30       	cpi	r18, 0x08	; 8
    1cb8:	51 f1       	breq	.+84     	; 0x1d0e <__ultoa_invert+0x5c>
    1cba:	20 31       	cpi	r18, 0x10	; 16
    1cbc:	81 f1       	breq	.+96     	; 0x1d1e <__ultoa_invert+0x6c>
    1cbe:	e8 94       	clt
    1cc0:	6f 93       	push	r22
    1cc2:	6e 7f       	andi	r22, 0xFE	; 254
    1cc4:	6e 5f       	subi	r22, 0xFE	; 254
    1cc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc8:	8f 4f       	sbci	r24, 0xFF	; 255
    1cca:	9f 4f       	sbci	r25, 0xFF	; 255
    1ccc:	af 4f       	sbci	r26, 0xFF	; 255
    1cce:	b1 e0       	ldi	r27, 0x01	; 1
    1cd0:	3e d0       	rcall	.+124    	; 0x1d4e <__ultoa_invert+0x9c>
    1cd2:	b4 e0       	ldi	r27, 0x04	; 4
    1cd4:	3c d0       	rcall	.+120    	; 0x1d4e <__ultoa_invert+0x9c>
    1cd6:	67 0f       	add	r22, r23
    1cd8:	78 1f       	adc	r23, r24
    1cda:	89 1f       	adc	r24, r25
    1cdc:	9a 1f       	adc	r25, r26
    1cde:	a1 1d       	adc	r26, r1
    1ce0:	68 0f       	add	r22, r24
    1ce2:	79 1f       	adc	r23, r25
    1ce4:	8a 1f       	adc	r24, r26
    1ce6:	91 1d       	adc	r25, r1
    1ce8:	a1 1d       	adc	r26, r1
    1cea:	6a 0f       	add	r22, r26
    1cec:	71 1d       	adc	r23, r1
    1cee:	81 1d       	adc	r24, r1
    1cf0:	91 1d       	adc	r25, r1
    1cf2:	a1 1d       	adc	r26, r1
    1cf4:	20 d0       	rcall	.+64     	; 0x1d36 <__ultoa_invert+0x84>
    1cf6:	09 f4       	brne	.+2      	; 0x1cfa <__ultoa_invert+0x48>
    1cf8:	68 94       	set
    1cfa:	3f 91       	pop	r19
    1cfc:	2a e0       	ldi	r18, 0x0A	; 10
    1cfe:	26 9f       	mul	r18, r22
    1d00:	11 24       	eor	r1, r1
    1d02:	30 19       	sub	r19, r0
    1d04:	30 5d       	subi	r19, 0xD0	; 208
    1d06:	31 93       	st	Z+, r19
    1d08:	de f6       	brtc	.-74     	; 0x1cc0 <__ultoa_invert+0xe>
    1d0a:	cf 01       	movw	r24, r30
    1d0c:	08 95       	ret
    1d0e:	46 2f       	mov	r20, r22
    1d10:	47 70       	andi	r20, 0x07	; 7
    1d12:	40 5d       	subi	r20, 0xD0	; 208
    1d14:	41 93       	st	Z+, r20
    1d16:	b3 e0       	ldi	r27, 0x03	; 3
    1d18:	0f d0       	rcall	.+30     	; 0x1d38 <__ultoa_invert+0x86>
    1d1a:	c9 f7       	brne	.-14     	; 0x1d0e <__ultoa_invert+0x5c>
    1d1c:	f6 cf       	rjmp	.-20     	; 0x1d0a <__ultoa_invert+0x58>
    1d1e:	46 2f       	mov	r20, r22
    1d20:	4f 70       	andi	r20, 0x0F	; 15
    1d22:	40 5d       	subi	r20, 0xD0	; 208
    1d24:	4a 33       	cpi	r20, 0x3A	; 58
    1d26:	18 f0       	brcs	.+6      	; 0x1d2e <__ultoa_invert+0x7c>
    1d28:	49 5d       	subi	r20, 0xD9	; 217
    1d2a:	31 fd       	sbrc	r19, 1
    1d2c:	40 52       	subi	r20, 0x20	; 32
    1d2e:	41 93       	st	Z+, r20
    1d30:	02 d0       	rcall	.+4      	; 0x1d36 <__ultoa_invert+0x84>
    1d32:	a9 f7       	brne	.-22     	; 0x1d1e <__ultoa_invert+0x6c>
    1d34:	ea cf       	rjmp	.-44     	; 0x1d0a <__ultoa_invert+0x58>
    1d36:	b4 e0       	ldi	r27, 0x04	; 4
    1d38:	a6 95       	lsr	r26
    1d3a:	97 95       	ror	r25
    1d3c:	87 95       	ror	r24
    1d3e:	77 95       	ror	r23
    1d40:	67 95       	ror	r22
    1d42:	ba 95       	dec	r27
    1d44:	c9 f7       	brne	.-14     	; 0x1d38 <__ultoa_invert+0x86>
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	61 05       	cpc	r22, r1
    1d4a:	71 05       	cpc	r23, r1
    1d4c:	08 95       	ret
    1d4e:	9b 01       	movw	r18, r22
    1d50:	ac 01       	movw	r20, r24
    1d52:	0a 2e       	mov	r0, r26
    1d54:	06 94       	lsr	r0
    1d56:	57 95       	ror	r21
    1d58:	47 95       	ror	r20
    1d5a:	37 95       	ror	r19
    1d5c:	27 95       	ror	r18
    1d5e:	ba 95       	dec	r27
    1d60:	c9 f7       	brne	.-14     	; 0x1d54 <__ultoa_invert+0xa2>
    1d62:	62 0f       	add	r22, r18
    1d64:	73 1f       	adc	r23, r19
    1d66:	84 1f       	adc	r24, r20
    1d68:	95 1f       	adc	r25, r21
    1d6a:	a0 1d       	adc	r26, r0
    1d6c:	08 95       	ret

00001d6e <_exit>:
    1d6e:	f8 94       	cli

00001d70 <__stop_program>:
    1d70:	ff cf       	rjmp	.-2      	; 0x1d70 <__stop_program>
