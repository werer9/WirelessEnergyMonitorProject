
EE209.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00001d7a  00001e0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001d7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001cf  0080013c  0080013c  00001e4a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001ea8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f6e  00000000  00000000  000020b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010b5  00000000  00000000  00004026  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dfb  00000000  00000000  000050db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004bc  00000000  00000000  00005ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ab  00000000  00000000  00006394  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e51  00000000  00000000  00006d3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  00007b90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__ctors_end>
       4:	0c 94 a0 03 	jmp	0x740	; 0x740 <__vector_1>
       8:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__vector_2>
       c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      10:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      14:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      18:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      24:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      28:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      2c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      34:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      40:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      44:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      48:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      4c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      50:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      54:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      58:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      5c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      60:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      64:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      68:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      6c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      70:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      74:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      78:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      7c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      80:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      84:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      88:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      8c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      90:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      94:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      98:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      9c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      a8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      ac:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      b0:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      b4:	05 a8       	ldd	r0, Z+53	; 0x35
      b6:	4c cd       	rjmp	.-1384   	; 0xfffffb50 <__eeprom_end+0xff7efb50>
      b8:	b2 d4       	rcall	.+2404   	; 0xa1e <calculatePowerFactor+0x20>
      ba:	4e b9       	out	0x0e, r20	; 14
      bc:	38 36       	cpi	r19, 0x68	; 104
      be:	a9 02       	muls	r26, r25
      c0:	0c 50       	subi	r16, 0x0C	; 12
      c2:	b9 91       	ld	r27, Y+
      c4:	86 88       	ldd	r8, Z+22	; 0x16
      c6:	08 3c       	cpi	r16, 0xC8	; 200
      c8:	a6 aa       	std	Z+54, r10	; 0x36
      ca:	aa 2a       	or	r10, r26
      cc:	be 00       	.word	0x00be	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240

000000d2 <__trampolines_end>:
      d2:	6e 61       	ori	r22, 0x1E	; 30
      d4:	6e 00       	.word	0x006e	; ????

000000d6 <__c.2332>:
      d6:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      e6:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      f6:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     106:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     116:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     126:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     136:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     146:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     156:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     166:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     176:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     186:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     196:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1a6:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1b6:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1c6:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	d8 e0       	ldi	r29, 0x08	; 8
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61

000001e0 <__do_copy_data>:
     1e0:	11 e0       	ldi	r17, 0x01	; 1
     1e2:	a0 e0       	ldi	r26, 0x00	; 0
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	ea e7       	ldi	r30, 0x7A	; 122
     1e8:	fd e1       	ldi	r31, 0x1D	; 29
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x10>
     1ec:	05 90       	lpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	ac 33       	cpi	r26, 0x3C	; 60
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0xc>

000001f6 <__do_clear_bss>:
     1f6:	23 e0       	ldi	r18, 0x03	; 3
     1f8:	ac e3       	ldi	r26, 0x3C	; 60
     1fa:	b1 e0       	ldi	r27, 0x01	; 1
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	ab 30       	cpi	r26, 0x0B	; 11
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <main>
     20a:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <_exit>

0000020e <__bad_interrupt>:
     20e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000212 <read_adc_mv>:


uint16_t read_adc_mv(uint8_t channel)
{
	// clear ADMUX
	ADMUX &= 0xF0;
     212:	ec e7       	ldi	r30, 0x7C	; 124
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	90 81       	ld	r25, Z
     218:	90 7f       	andi	r25, 0xF0	; 240
     21a:	90 83       	st	Z, r25
	// set least significant 4 bits to channel
	ADMUX |= channel;
     21c:	90 81       	ld	r25, Z
     21e:	89 2b       	or	r24, r25
     220:	80 83       	st	Z, r24
	// start conversion
	ADCSRA |= (1<<ADSC);
     222:	ea e7       	ldi	r30, 0x7A	; 122
     224:	f0 e0       	ldi	r31, 0x00	; 0
     226:	80 81       	ld	r24, Z
     228:	80 64       	ori	r24, 0x40	; 64
     22a:	80 83       	st	Z, r24
	// wait until conversion is finished
	while (ADCSRA & (1<<ADSC));
     22c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     230:	86 fd       	sbrc	r24, 6
     232:	fc cf       	rjmp	.-8      	; 0x22c <read_adc_mv+0x1a>
	
	// read full 10 bits of ADC registers
	uint16_t adc_output = ADCW;
     234:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     238:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	// convert reading into millivolts
	return adc_output;
}
     23c:	08 95       	ret

0000023e <adc_init>:

void adc_init() 
{
	// set ADMUX to read from VCC
	ADMUX |= (1<<REFS0);
     23e:	ec e7       	ldi	r30, 0x7C	; 124
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	80 64       	ori	r24, 0x40	; 64
     246:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     248:	80 81       	ld	r24, Z
     24a:	8f 77       	andi	r24, 0x7F	; 127
     24c:	80 83       	st	Z, r24
	// clear channel selection
	ADMUX &= 0xF0;
     24e:	80 81       	ld	r24, Z
     250:	80 7f       	andi	r24, 0xF0	; 240
     252:	80 83       	st	Z, r24
	// enable conversions, scale by system clock by 128
	ADCSRA |= (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     254:	ea e7       	ldi	r30, 0x7A	; 122
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	87 68       	ori	r24, 0x87	; 135
     25c:	80 83       	st	Z, r24
     25e:	08 95       	ret

00000260 <fsmInit>:
#include "fsm.h"

// initialis fsm with function pointers
void fsmInit(struct functionPointers *fsmFunctions) 
{
    functions = fsmFunctions;
     260:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <functions+0x1>
     264:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <functions>
    state = STATE_INIT;
     268:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <state>
    voltageTriggerIndex = 0;
     26c:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <voltageTriggerIndex>
    currentTriggerIndex = 0;
     270:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <currentTriggerIndex>
	
	triggerSize = 0;
     274:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <triggerSize>
	peakVoltage = 0;
     278:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <peakVoltage+0x1>
     27c:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <peakVoltage>
	peakCurrent = 0;
     280:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <peakCurrent+0x1>
     284:	10 92 19 02 	sts	0x0219, r1	; 0x800219 <peakCurrent>
	voltage = 0;
     288:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <voltage+0x1>
     28c:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <voltage>
	current = 0;
     290:	10 92 23 02 	sts	0x0223, r1	; 0x800223 <current+0x1>
     294:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <current>
	phase = 0;
     298:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <phase+0x1>
     29c:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <phase>
	pf = 0;
     2a0:	10 92 ff 02 	sts	0x02FF, r1	; 0x8002ff <pf+0x1>
     2a4:	10 92 fe 02 	sts	0x02FE, r1	; 0x8002fe <pf>
	power = 0;
     2a8:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <power+0x1>
     2ac:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <power>
     2b0:	08 95       	ret

000002b2 <stateInit>:

// init state
void stateInit()
{
    // init uart
    functions->uart_init(BAUD);
     2b2:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     2b6:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     2ba:	01 90       	ld	r0, Z+
     2bc:	f0 81       	ld	r31, Z
     2be:	e0 2d       	mov	r30, r0
     2c0:	80 e8       	ldi	r24, 0x80	; 128
     2c2:	95 e2       	ldi	r25, 0x25	; 37
     2c4:	09 95       	icall
    // init io
    functions->io_init();
     2c6:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     2ca:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     2ce:	02 80       	ldd	r0, Z+2	; 0x02
     2d0:	f3 81       	ldd	r31, Z+3	; 0x03
     2d2:	e0 2d       	mov	r30, r0
     2d4:	09 95       	icall
    // init adc
    functions->adc_init();
     2d6:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     2da:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     2de:	04 80       	ldd	r0, Z+4	; 0x04
     2e0:	f5 81       	ldd	r31, Z+5	; 0x05
     2e2:	e0 2d       	mov	r30, r0
     2e4:	09 95       	icall
    // init timer
    functions->timer_init();
     2e6:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     2ea:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     2ee:	06 80       	ldd	r0, Z+6	; 0x06
     2f0:	f7 81       	ldd	r31, Z+7	; 0x07
     2f2:	e0 2d       	mov	r30, r0
     2f4:	09 95       	icall
    // init interrupts
    functions->int_init(voltageTriggerTimes, currentTriggerTimes, TRIGGER_SIZE, functions->get_time);
     2f6:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <functions>
     2fa:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <functions+0x1>
     2fe:	18 96       	adiw	r26, 0x08	; 8
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	19 97       	sbiw	r26, 0x09	; 9
     306:	58 96       	adiw	r26, 0x18	; 24
     308:	2d 91       	ld	r18, X+
     30a:	3c 91       	ld	r19, X
     30c:	59 97       	sbiw	r26, 0x19	; 25
     30e:	44 e0       	ldi	r20, 0x04	; 4
     310:	67 e0       	ldi	r22, 0x07	; 7
     312:	72 e0       	ldi	r23, 0x02	; 2
     314:	86 e2       	ldi	r24, 0x26	; 38
     316:	92 e0       	ldi	r25, 0x02	; 2
     318:	09 95       	icall
    // change state on function completion
    state = STATE_READ_POWER;
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <state>
     320:	08 95       	ret

00000322 <stateReadPower>:
}

// read power state
void stateReadPower()
{
     322:	1f 93       	push	r17
     324:	cf 93       	push	r28
     326:	df 93       	push	r29
    // enable interrupts and reset timer
    
    for (int8_t j = 0; j < SIZE; j++) {
     328:	10 e0       	ldi	r17, 0x00	; 0
     32a:	22 c0       	rjmp	.+68     	; 0x370 <stateReadPower+0x4e>
		voltages[j] = functions->read_adc(VOLTAGE_PIN);
     32c:	c1 2f       	mov	r28, r17
     32e:	01 2e       	mov	r0, r17
     330:	00 0c       	add	r0, r0
     332:	dd 0b       	sbc	r29, r29
     334:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     338:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     33c:	06 88       	ldd	r0, Z+22	; 0x16
     33e:	f7 89       	ldd	r31, Z+23	; 0x17
     340:	e0 2d       	mov	r30, r0
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	09 95       	icall
     346:	cc 0f       	add	r28, r28
     348:	dd 1f       	adc	r29, r29
     34a:	fe 01       	movw	r30, r28
     34c:	e4 5c       	subi	r30, 0xC4	; 196
     34e:	fe 4f       	sbci	r31, 0xFE	; 254
     350:	91 83       	std	Z+1, r25	; 0x01
     352:	80 83       	st	Z, r24
        currents[j] = functions->read_adc(CURRENT_PIN);
     354:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     358:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     35c:	06 88       	ldd	r0, Z+22	; 0x16
     35e:	f7 89       	ldd	r31, Z+23	; 0x17
     360:	e0 2d       	mov	r30, r0
     362:	84 e0       	ldi	r24, 0x04	; 4
     364:	09 95       	icall
     366:	ca 5c       	subi	r28, 0xCA	; 202
     368:	dd 4f       	sbci	r29, 0xFD	; 253
     36a:	99 83       	std	Y+1, r25	; 0x01
     36c:	88 83       	st	Y, r24
// read power state
void stateReadPower()
{
    // enable interrupts and reset timer
    
    for (int8_t j = 0; j < SIZE; j++) {
     36e:	1f 5f       	subi	r17, 0xFF	; 255
     370:	14 36       	cpi	r17, 0x64	; 100
     372:	e4 f2       	brlt	.-72     	; 0x32c <stateReadPower+0xa>
		voltages[j] = functions->read_adc(VOLTAGE_PIN);
        currents[j] = functions->read_adc(CURRENT_PIN);
    }

	functions->timer_reset();
     374:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     378:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     37c:	02 8c       	ldd	r0, Z+26	; 0x1a
     37e:	f3 8d       	ldd	r31, Z+27	; 0x1b
     380:	e0 2d       	mov	r30, r0
     382:	09 95       	icall
	functions->enable_interrupts();
     384:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     388:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     38c:	04 88       	ldd	r0, Z+20	; 0x14
     38e:	f5 89       	ldd	r31, Z+21	; 0x15
     390:	e0 2d       	mov	r30, r0
     392:	09 95       	icall
	while (functions->get_trigger_index() < TRIGGER_SIZE) {}
     394:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     398:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     39c:	02 84       	ldd	r0, Z+10	; 0x0a
     39e:	f3 85       	ldd	r31, Z+11	; 0x0b
     3a0:	e0 2d       	mov	r30, r0
     3a2:	09 95       	icall
     3a4:	84 30       	cpi	r24, 0x04	; 4
     3a6:	b0 f3       	brcs	.-20     	; 0x394 <stateReadPower+0x72>
	
    // disable interrupts - prevent the trigger array from overflowing
    functions->disable_interrupts();
     3a8:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     3ac:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     3b0:	02 88       	ldd	r0, Z+18	; 0x12
     3b2:	f3 89       	ldd	r31, Z+19	; 0x13
     3b4:	e0 2d       	mov	r30, r0
     3b6:	09 95       	icall
    
    // need to add condition for state change
    state = STATE_CALCULATE_POWER;
     3b8:	82 e0       	ldi	r24, 0x02	; 2
     3ba:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <state>
}
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	1f 91       	pop	r17
     3c4:	08 95       	ret

000003c6 <stateCalculatePower>:

// calculate power state
void stateCalculatePower()
{  
    // calculate peak, RMS
    peakVoltage = functions->find_peak(voltages, SIZE, VOLTAGE_PIN, functions->read_adc);
     3c6:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <functions>
     3ca:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <functions+0x1>
     3ce:	5c 96       	adiw	r26, 0x1c	; 28
     3d0:	ed 91       	ld	r30, X+
     3d2:	fc 91       	ld	r31, X
     3d4:	5d 97       	sbiw	r26, 0x1d	; 29
     3d6:	56 96       	adiw	r26, 0x16	; 22
     3d8:	2d 91       	ld	r18, X+
     3da:	3c 91       	ld	r19, X
     3dc:	57 97       	sbiw	r26, 0x17	; 23
     3de:	40 e0       	ldi	r20, 0x00	; 0
     3e0:	64 e6       	ldi	r22, 0x64	; 100
     3e2:	8c e3       	ldi	r24, 0x3C	; 60
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	09 95       	icall
     3e8:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <peakVoltage+0x1>
     3ec:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <peakVoltage>
    peakCurrent = functions->find_peak(currents, SIZE, CURRENT_PIN, functions->read_adc);
     3f0:	a0 91 17 02 	lds	r26, 0x0217	; 0x800217 <functions>
     3f4:	b0 91 18 02 	lds	r27, 0x0218	; 0x800218 <functions+0x1>
     3f8:	5c 96       	adiw	r26, 0x1c	; 28
     3fa:	ed 91       	ld	r30, X+
     3fc:	fc 91       	ld	r31, X
     3fe:	5d 97       	sbiw	r26, 0x1d	; 29
     400:	56 96       	adiw	r26, 0x16	; 22
     402:	2d 91       	ld	r18, X+
     404:	3c 91       	ld	r19, X
     406:	57 97       	sbiw	r26, 0x17	; 23
     408:	44 e0       	ldi	r20, 0x04	; 4
     40a:	64 e6       	ldi	r22, 0x64	; 100
     40c:	86 e3       	ldi	r24, 0x36	; 54
     40e:	92 e0       	ldi	r25, 0x02	; 2
     410:	09 95       	icall
     412:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <peakCurrent+0x1>
     416:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <peakCurrent>
    voltage = functions->calculate_RMS(peakVoltage);
     41a:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     41e:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     422:	06 8c       	ldd	r0, Z+30	; 0x1e
     424:	f7 8d       	ldd	r31, Z+31	; 0x1f
     426:	e0 2d       	mov	r30, r0
     428:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <peakVoltage>
     42c:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <peakVoltage+0x1>
     430:	09 95       	icall
     432:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <voltage+0x1>
     436:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <voltage>
    current = functions->calculate_RMS(peakCurrent);
     43a:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     43e:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     442:	06 8c       	ldd	r0, Z+30	; 0x1e
     444:	f7 8d       	ldd	r31, Z+31	; 0x1f
     446:	e0 2d       	mov	r30, r0
     448:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <peakCurrent>
     44c:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <peakCurrent+0x1>
     450:	09 95       	icall
     452:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <current+0x1>
     456:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <current>

    // calculate phase of two signals
    phase = functions->get_phase_difference(voltageTriggerTimes, currentTriggerTimes, TRIGGER_SIZE);
     45a:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     45e:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     462:	00 a0       	ldd	r0, Z+32	; 0x20
     464:	f1 a1       	ldd	r31, Z+33	; 0x21
     466:	e0 2d       	mov	r30, r0
     468:	44 e0       	ldi	r20, 0x04	; 4
     46a:	67 e0       	ldi	r22, 0x07	; 7
     46c:	72 e0       	ldi	r23, 0x02	; 2
     46e:	86 e2       	ldi	r24, 0x26	; 38
     470:	92 e0       	ldi	r25, 0x02	; 2
     472:	09 95       	icall
     474:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <phase+0x1>
     478:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <phase>
    
    // place holder phase
    pf = functions->calculate_power_factor(phase);
     47c:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     480:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     484:	02 a0       	ldd	r0, Z+34	; 0x22
     486:	f3 a1       	ldd	r31, Z+35	; 0x23
     488:	e0 2d       	mov	r30, r0
     48a:	09 95       	icall
     48c:	90 93 ff 02 	sts	0x02FF, r25	; 0x8002ff <pf+0x1>
     490:	80 93 fe 02 	sts	0x02FE, r24	; 0x8002fe <pf>
    power = functions->calculate_average_power(voltage, current, pf);
     494:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     498:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     49c:	04 a0       	ldd	r0, Z+36	; 0x24
     49e:	f5 a1       	ldd	r31, Z+37	; 0x25
     4a0:	e0 2d       	mov	r30, r0
     4a2:	60 91 22 02 	lds	r22, 0x0222	; 0x800222 <current>
     4a6:	70 91 23 02 	lds	r23, 0x0223	; 0x800223 <current+0x1>
     4aa:	ac 01       	movw	r20, r24
     4ac:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <voltage>
     4b0:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <voltage+0x1>
     4b4:	09 95       	icall
     4b6:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <power+0x1>
     4ba:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <power>
    
    // start iterating over the trigger arrays from zero
    // this effectively resets the array
    voltageTriggerIndex = 0;
     4be:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <voltageTriggerIndex>
    currentTriggerIndex = 0;
     4c2:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <currentTriggerIndex>
	
	// reset interrupt trigger array index
	functions->set_trigger_index(voltageTriggerIndex);
     4c6:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     4ca:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     4ce:	04 84       	ldd	r0, Z+12	; 0x0c
     4d0:	f5 85       	ldd	r31, Z+13	; 0x0d
     4d2:	e0 2d       	mov	r30, r0
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	09 95       	icall
   
    // new state needed to be added for correct transition
    state = STATE_TRANSMIT_POWER;
     4d8:	83 e0       	ldi	r24, 0x03	; 3
     4da:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <state>
     4de:	08 95       	ret

000004e0 <stateTransmitPower>:
}

// transmit the power over UART
void stateTransmitPower()
{
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	cd b7       	in	r28, 0x3d	; 61
     4e6:	de b7       	in	r29, 0x3e	; 62
     4e8:	60 97       	sbiw	r28, 0x10	; 16
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	de bf       	out	0x3e, r29	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	cd bf       	out	0x3d, r28	; 61
    char dataString[16];
    functions->get_uart_string(power, dataString, 'P');
     4f4:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     4f8:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     4fc:	06 84       	ldd	r0, Z+14	; 0x0e
     4fe:	f7 85       	ldd	r31, Z+15	; 0x0f
     500:	e0 2d       	mov	r30, r0
     502:	40 e5       	ldi	r20, 0x50	; 80
     504:	be 01       	movw	r22, r28
     506:	6f 5f       	subi	r22, 0xFF	; 255
     508:	7f 4f       	sbci	r23, 0xFF	; 255
     50a:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <power>
     50e:	90 91 06 02 	lds	r25, 0x0206	; 0x800206 <power+0x1>
     512:	09 95       	icall
    functions->uart_write(dataString);
     514:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     518:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     51c:	00 88       	ldd	r0, Z+16	; 0x10
     51e:	f1 89       	ldd	r31, Z+17	; 0x11
     520:	e0 2d       	mov	r30, r0
     522:	ce 01       	movw	r24, r28
     524:	01 96       	adiw	r24, 0x01	; 1
     526:	09 95       	icall
	functions->get_uart_string(pf, dataString, 'F');
     528:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     52c:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     530:	06 84       	ldd	r0, Z+14	; 0x0e
     532:	f7 85       	ldd	r31, Z+15	; 0x0f
     534:	e0 2d       	mov	r30, r0
     536:	46 e4       	ldi	r20, 0x46	; 70
     538:	be 01       	movw	r22, r28
     53a:	6f 5f       	subi	r22, 0xFF	; 255
     53c:	7f 4f       	sbci	r23, 0xFF	; 255
     53e:	80 91 fe 02 	lds	r24, 0x02FE	; 0x8002fe <pf>
     542:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <pf+0x1>
     546:	09 95       	icall
	functions->uart_write(dataString);
     548:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     54c:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     550:	00 88       	ldd	r0, Z+16	; 0x10
     552:	f1 89       	ldd	r31, Z+17	; 0x11
     554:	e0 2d       	mov	r30, r0
     556:	ce 01       	movw	r24, r28
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	09 95       	icall
	functions->get_uart_string(peakVoltage, dataString, 'V');
     55c:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     560:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     564:	06 84       	ldd	r0, Z+14	; 0x0e
     566:	f7 85       	ldd	r31, Z+15	; 0x0f
     568:	e0 2d       	mov	r30, r0
     56a:	46 e5       	ldi	r20, 0x56	; 86
     56c:	be 01       	movw	r22, r28
     56e:	6f 5f       	subi	r22, 0xFF	; 255
     570:	7f 4f       	sbci	r23, 0xFF	; 255
     572:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <peakVoltage>
     576:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <peakVoltage+0x1>
     57a:	09 95       	icall
	functions->uart_write(dataString);
     57c:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     580:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     584:	00 88       	ldd	r0, Z+16	; 0x10
     586:	f1 89       	ldd	r31, Z+17	; 0x11
     588:	e0 2d       	mov	r30, r0
     58a:	ce 01       	movw	r24, r28
     58c:	01 96       	adiw	r24, 0x01	; 1
     58e:	09 95       	icall
	functions->get_uart_string(current, dataString, 'I');
     590:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     594:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     598:	06 84       	ldd	r0, Z+14	; 0x0e
     59a:	f7 85       	ldd	r31, Z+15	; 0x0f
     59c:	e0 2d       	mov	r30, r0
     59e:	49 e4       	ldi	r20, 0x49	; 73
     5a0:	be 01       	movw	r22, r28
     5a2:	6f 5f       	subi	r22, 0xFF	; 255
     5a4:	7f 4f       	sbci	r23, 0xFF	; 255
     5a6:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <current>
     5aa:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <current+0x1>
     5ae:	09 95       	icall
	functions->uart_write(dataString);
     5b0:	e0 91 17 02 	lds	r30, 0x0217	; 0x800217 <functions>
     5b4:	f0 91 18 02 	lds	r31, 0x0218	; 0x800218 <functions+0x1>
     5b8:	00 88       	ldd	r0, Z+16	; 0x10
     5ba:	f1 89       	ldd	r31, Z+17	; 0x11
     5bc:	e0 2d       	mov	r30, r0
     5be:	ce 01       	movw	r24, r28
     5c0:	01 96       	adiw	r24, 0x01	; 1
     5c2:	09 95       	icall

    state = STATE_READ_POWER;
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <state>
     5ca:	60 96       	adiw	r28, 0x10	; 16
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	df 91       	pop	r29
     5d8:	cf 91       	pop	r28
     5da:	08 95       	ret

000005dc <run>:
}
// main fsm function
int run()
{ 
    while (1) {
        switch(state) {
     5dc:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <state>
     5e0:	81 30       	cpi	r24, 0x01	; 1
     5e2:	49 f0       	breq	.+18     	; 0x5f6 <run+0x1a>
     5e4:	28 f0       	brcs	.+10     	; 0x5f0 <run+0x14>
     5e6:	82 30       	cpi	r24, 0x02	; 2
     5e8:	49 f0       	breq	.+18     	; 0x5fc <run+0x20>
     5ea:	83 30       	cpi	r24, 0x03	; 3
     5ec:	51 f0       	breq	.+20     	; 0x602 <run+0x26>
     5ee:	0c c0       	rjmp	.+24     	; 0x608 <run+0x2c>
            case STATE_INIT:
                // set this to correct ubbr
                stateInit();
     5f0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <stateInit>
                break;
     5f4:	f3 cf       	rjmp	.-26     	; 0x5dc <run>
            case STATE_READ_POWER:
                // read data from adc and store it
                stateReadPower();
     5f6:	0e 94 91 01 	call	0x322	; 0x322 <stateReadPower>
                break;
     5fa:	f0 cf       	rjmp	.-32     	; 0x5dc <run>
            case STATE_CALCULATE_POWER:
                // use data from adc to calculate power
                stateCalculatePower();
     5fc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <stateCalculatePower>
                break;
     600:	ed cf       	rjmp	.-38     	; 0x5dc <run>
            case STATE_TRANSMIT_POWER:
                // send power to bt module with uart
                stateTransmitPower();
     602:	0e 94 70 02 	call	0x4e0	; 0x4e0 <stateTransmitPower>
                break;
     606:	ea cf       	rjmp	.-44     	; 0x5dc <run>
                break;
        }
    }

    return 0;
}
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	08 95       	ret

0000060e <io_init>:
#include "gpio.h"

void io_init()
{
	//Set all PORTC pins as inputs
	DDRC = 0x00;
     60e:	17 b8       	out	0x07, r1	; 7

	//Set PORTD Pins 1 and 0 as outputs
	DDRD = 0x00;
     610:	1a b8       	out	0x0a, r1	; 10
     612:	08 95       	ret

00000614 <enable_interrupts>:
	interrupt_handler(1);
}

void enable_interrupts()
{
	sei();
     614:	78 94       	sei
     616:	08 95       	ret

00000618 <disable_interrupts>:
}
void disable_interrupts()
{
	cli();
     618:	f8 94       	cli
     61a:	08 95       	ret

0000061c <set_index>:
}

void set_index(uint8_t index)
{
	voltageIndex = index;
     61c:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <voltageIndex>
	currentIndex = index;
     620:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <currentIndex>
	enableVoltage = 0;
     624:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <enableVoltage>
	enableCurrent = 0;
     628:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <enableCurrent>
     62c:	08 95       	ret

0000062e <get_index>:
}

uint8_t get_index()
{
	return voltageIndex > currentIndex ? currentIndex : voltageIndex;
     62e:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <voltageIndex>
     632:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <currentIndex>
     636:	89 17       	cp	r24, r25
     638:	18 f4       	brcc	.+6      	; 0x640 <get_index+0x12>
     63a:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <currentIndex>
     63e:	08 95       	ret
     640:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <voltageIndex>
}
     644:	08 95       	ret

00000646 <interrupt_init>:

void interrupt_init(uint32_t *voltageTriggersArray, uint32_t *currentTriggersArray, uint8_t arraySize, uint32_t (*get_time_ptr)(void))
{
	
	voltageTriggers = voltageTriggersArray;
     646:	90 93 07 03 	sts	0x0307, r25	; 0x800307 <voltageTriggers+0x1>
     64a:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <voltageTriggers>
	currentTriggers = currentTriggersArray;
     64e:	70 93 0a 03 	sts	0x030A, r23	; 0x80030a <currentTriggers+0x1>
     652:	60 93 09 03 	sts	0x0309, r22	; 0x800309 <currentTriggers>
	enableVoltage = 0;
     656:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <enableVoltage>
	enableCurrent = 0;
     65a:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <enableCurrent>
	size = arraySize;
     65e:	40 93 08 03 	sts	0x0308, r20	; 0x800308 <size>
	get_time_func = get_time_ptr;
     662:	30 93 05 03 	sts	0x0305, r19	; 0x800305 <get_time_func+0x1>
     666:	20 93 04 03 	sts	0x0304, r18	; 0x800304 <get_time_func>
	
	// set interrupt edge
	EICRA |= 0x0A;
     66a:	e9 e6       	ldi	r30, 0x69	; 105
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	80 81       	ld	r24, Z
     670:	8a 60       	ori	r24, 0x0A	; 10
     672:	80 83       	st	Z, r24
	EIMSK |= 0x03;
     674:	8d b3       	in	r24, 0x1d	; 29
     676:	83 60       	ori	r24, 0x03	; 3
     678:	8d bb       	out	0x1d, r24	; 29
	
	currentIndex = 0;
     67a:	10 92 00 03 	sts	0x0300, r1	; 0x800300 <currentIndex>
	voltageIndex = 0;
     67e:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <voltageIndex>
     682:	08 95       	ret

00000684 <interrupt_handler>:
}

void interrupt_handler(uint8_t interruptPin)
{
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
	switch (interruptPin)
     688:	88 23       	and	r24, r24
     68a:	19 f0       	breq	.+6      	; 0x692 <interrupt_handler+0xe>
     68c:	81 30       	cpi	r24, 0x01	; 1
     68e:	61 f1       	breq	.+88     	; 0x6e8 <interrupt_handler+0x64>
     690:	54 c0       	rjmp	.+168    	; 0x73a <interrupt_handler+0xb6>
	{
		case 0:
			if (!enableCurrent) {
     692:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <enableCurrent>
     696:	81 11       	cpse	r24, r1
     698:	04 c0       	rjmp	.+8      	; 0x6a2 <interrupt_handler+0x1e>
				enableCurrent = 1;
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <enableCurrent>
				break;
     6a0:	4c c0       	rjmp	.+152    	; 0x73a <interrupt_handler+0xb6>
			}
			if (currentIndex == size)
     6a2:	90 91 00 03 	lds	r25, 0x0300	; 0x800300 <currentIndex>
     6a6:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <size>
     6aa:	98 17       	cp	r25, r24
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <interrupt_handler+0x2c>
     6ae:	45 c0       	rjmp	.+138    	; 0x73a <interrupt_handler+0xb6>
				break;
			currentTriggers[currentIndex] = get_time_func();
     6b0:	c0 91 00 03 	lds	r28, 0x0300	; 0x800300 <currentIndex>
     6b4:	d0 e0       	ldi	r29, 0x00	; 0
     6b6:	cc 0f       	add	r28, r28
     6b8:	dd 1f       	adc	r29, r29
     6ba:	cc 0f       	add	r28, r28
     6bc:	dd 1f       	adc	r29, r29
     6be:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <currentTriggers>
     6c2:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <currentTriggers+0x1>
     6c6:	c8 0f       	add	r28, r24
     6c8:	d9 1f       	adc	r29, r25
     6ca:	e0 91 04 03 	lds	r30, 0x0304	; 0x800304 <get_time_func>
     6ce:	f0 91 05 03 	lds	r31, 0x0305	; 0x800305 <get_time_func+0x1>
     6d2:	09 95       	icall
     6d4:	68 83       	st	Y, r22
     6d6:	79 83       	std	Y+1, r23	; 0x01
     6d8:	8a 83       	std	Y+2, r24	; 0x02
     6da:	9b 83       	std	Y+3, r25	; 0x03
			currentIndex++;
     6dc:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <currentIndex>
     6e0:	8f 5f       	subi	r24, 0xFF	; 255
     6e2:	80 93 00 03 	sts	0x0300, r24	; 0x800300 <currentIndex>
			break;
     6e6:	29 c0       	rjmp	.+82     	; 0x73a <interrupt_handler+0xb6>
		case 1:
			if (!enableVoltage) {
     6e8:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <enableVoltage>
     6ec:	81 11       	cpse	r24, r1
     6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <interrupt_handler+0x74>
				enableVoltage = 1;
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <enableVoltage>
				break;
     6f6:	21 c0       	rjmp	.+66     	; 0x73a <interrupt_handler+0xb6>
			}
			if (voltageIndex == size)
     6f8:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <voltageIndex>
     6fc:	80 91 08 03 	lds	r24, 0x0308	; 0x800308 <size>
     700:	98 17       	cp	r25, r24
     702:	d9 f0       	breq	.+54     	; 0x73a <interrupt_handler+0xb6>
				break;
			voltageTriggers[voltageIndex] = get_time_func();
     704:	c0 91 02 03 	lds	r28, 0x0302	; 0x800302 <voltageIndex>
     708:	d0 e0       	ldi	r29, 0x00	; 0
     70a:	cc 0f       	add	r28, r28
     70c:	dd 1f       	adc	r29, r29
     70e:	cc 0f       	add	r28, r28
     710:	dd 1f       	adc	r29, r29
     712:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <voltageTriggers>
     716:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <voltageTriggers+0x1>
     71a:	c8 0f       	add	r28, r24
     71c:	d9 1f       	adc	r29, r25
     71e:	e0 91 04 03 	lds	r30, 0x0304	; 0x800304 <get_time_func>
     722:	f0 91 05 03 	lds	r31, 0x0305	; 0x800305 <get_time_func+0x1>
     726:	09 95       	icall
     728:	68 83       	st	Y, r22
     72a:	79 83       	std	Y+1, r23	; 0x01
     72c:	8a 83       	std	Y+2, r24	; 0x02
     72e:	9b 83       	std	Y+3, r25	; 0x03
			voltageIndex++;
     730:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <voltageIndex>
     734:	8f 5f       	subi	r24, 0xFF	; 255
     736:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <voltageIndex>
			break;
		default:
			break;
	}
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <__vector_1>:

#include "interrupt.h"

// handle interrupts during cycle
ISR(INT0_vect)
{
     740:	1f 92       	push	r1
     742:	0f 92       	push	r0
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	0f 92       	push	r0
     748:	11 24       	eor	r1, r1
     74a:	2f 93       	push	r18
     74c:	3f 93       	push	r19
     74e:	4f 93       	push	r20
     750:	5f 93       	push	r21
     752:	6f 93       	push	r22
     754:	7f 93       	push	r23
     756:	8f 93       	push	r24
     758:	9f 93       	push	r25
     75a:	af 93       	push	r26
     75c:	bf 93       	push	r27
     75e:	ef 93       	push	r30
     760:	ff 93       	push	r31
	interrupt_handler(0);
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	0e 94 42 03 	call	0x684	; 0x684 <interrupt_handler>
}
     768:	ff 91       	pop	r31
     76a:	ef 91       	pop	r30
     76c:	bf 91       	pop	r27
     76e:	af 91       	pop	r26
     770:	9f 91       	pop	r25
     772:	8f 91       	pop	r24
     774:	7f 91       	pop	r23
     776:	6f 91       	pop	r22
     778:	5f 91       	pop	r21
     77a:	4f 91       	pop	r20
     77c:	3f 91       	pop	r19
     77e:	2f 91       	pop	r18
     780:	0f 90       	pop	r0
     782:	0f be       	out	0x3f, r0	; 63
     784:	0f 90       	pop	r0
     786:	1f 90       	pop	r1
     788:	18 95       	reti

0000078a <__vector_2>:

ISR(INT1_vect)
{
     78a:	1f 92       	push	r1
     78c:	0f 92       	push	r0
     78e:	0f b6       	in	r0, 0x3f	; 63
     790:	0f 92       	push	r0
     792:	11 24       	eor	r1, r1
     794:	2f 93       	push	r18
     796:	3f 93       	push	r19
     798:	4f 93       	push	r20
     79a:	5f 93       	push	r21
     79c:	6f 93       	push	r22
     79e:	7f 93       	push	r23
     7a0:	8f 93       	push	r24
     7a2:	9f 93       	push	r25
     7a4:	af 93       	push	r26
     7a6:	bf 93       	push	r27
     7a8:	ef 93       	push	r30
     7aa:	ff 93       	push	r31
	interrupt_handler(1);
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	0e 94 42 03 	call	0x684	; 0x684 <interrupt_handler>
}
     7b2:	ff 91       	pop	r31
     7b4:	ef 91       	pop	r30
     7b6:	bf 91       	pop	r27
     7b8:	af 91       	pop	r26
     7ba:	9f 91       	pop	r25
     7bc:	8f 91       	pop	r24
     7be:	7f 91       	pop	r23
     7c0:	6f 91       	pop	r22
     7c2:	5f 91       	pop	r21
     7c4:	4f 91       	pop	r20
     7c6:	3f 91       	pop	r19
     7c8:	2f 91       	pop	r18
     7ca:	0f 90       	pop	r0
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	0f 90       	pop	r0
     7d0:	1f 90       	pop	r1
     7d2:	18 95       	reti

000007d4 <findPeak>:

#include "processing.h"

// find peak value of sinusoidal wave
uint16_t findPeak(uint16_t *samples, uint8_t size, uint8_t pin, uint16_t (*read_adc_func)(uint8_t))
{
     7d4:	cf 92       	push	r12
     7d6:	df 92       	push	r13
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	dc 01       	movw	r26, r24
     7e6:	89 01       	movw	r16, r18
	uint16_t peak = 0;
	uint16_t Ioff;
	uint16_t Voff;
	// iterate over samples and use largest value as peak
	for (uint8_t i = 0; i < size; i++) {
     7e8:	90 e0       	ldi	r25, 0x00	; 0
#include "processing.h"

// find peak value of sinusoidal wave
uint16_t findPeak(uint16_t *samples, uint8_t size, uint8_t pin, uint16_t (*read_adc_func)(uint8_t))
{
	uint16_t peak = 0;
     7ea:	c0 e0       	ldi	r28, 0x00	; 0
     7ec:	d0 e0       	ldi	r29, 0x00	; 0
	uint16_t Ioff;
	uint16_t Voff;
	// iterate over samples and use largest value as peak
	for (uint8_t i = 0; i < size; i++) {
     7ee:	0d c0       	rjmp	.+26     	; 0x80a <findPeak+0x36>
		if (samples[i] > peak)
     7f0:	e9 2f       	mov	r30, r25
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	ee 0f       	add	r30, r30
     7f6:	ff 1f       	adc	r31, r31
     7f8:	ea 0f       	add	r30, r26
     7fa:	fb 1f       	adc	r31, r27
     7fc:	20 81       	ld	r18, Z
     7fe:	31 81       	ldd	r19, Z+1	; 0x01
     800:	c2 17       	cp	r28, r18
     802:	d3 07       	cpc	r29, r19
     804:	08 f4       	brcc	.+2      	; 0x808 <findPeak+0x34>
			peak = samples[i];
     806:	e9 01       	movw	r28, r18
{
	uint16_t peak = 0;
	uint16_t Ioff;
	uint16_t Voff;
	// iterate over samples and use largest value as peak
	for (uint8_t i = 0; i < size; i++) {
     808:	9f 5f       	subi	r25, 0xFF	; 255
     80a:	96 17       	cp	r25, r22
     80c:	88 f3       	brcs	.-30     	; 0x7f0 <findPeak+0x1c>
		if (samples[i] > peak)
			peak = samples[i];
	}
	
	switch (pin) {
     80e:	44 23       	and	r20, r20
     810:	61 f0       	breq	.+24     	; 0x82a <findPeak+0x56>
     812:	44 30       	cpi	r20, 0x04	; 4
     814:	a1 f1       	breq	.+104    	; 0x87e <findPeak+0xaa>
     816:	64 c0       	rjmp	.+200    	; 0x8e0 <findPeak+0x10c>
		case VOLTAGE_PIN:
			Voff = 0;
			for (int i = 0; i < 20; i++) {
				Voff += read_adc_func(VOLTAGE_OFFSET);
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	f8 01       	movw	r30, r16
     81c:	09 95       	icall
     81e:	c8 0e       	add	r12, r24
     820:	d9 1e       	adc	r13, r25
	}
	
	switch (pin) {
		case VOLTAGE_PIN:
			Voff = 0;
			for (int i = 0; i < 20; i++) {
     822:	ff ef       	ldi	r31, 0xFF	; 255
     824:	ef 1a       	sub	r14, r31
     826:	ff 0a       	sbc	r15, r31
     828:	04 c0       	rjmp	.+8      	; 0x832 <findPeak+0x5e>
	for (uint8_t i = 0; i < size; i++) {
		if (samples[i] > peak)
			peak = samples[i];
	}
	
	switch (pin) {
     82a:	e1 2c       	mov	r14, r1
     82c:	f1 2c       	mov	r15, r1
     82e:	c1 2c       	mov	r12, r1
     830:	d1 2c       	mov	r13, r1
		case VOLTAGE_PIN:
			Voff = 0;
			for (int i = 0; i < 20; i++) {
     832:	84 e1       	ldi	r24, 0x14	; 20
     834:	e8 16       	cp	r14, r24
     836:	f1 04       	cpc	r15, r1
     838:	7c f3       	brlt	.-34     	; 0x818 <findPeak+0x44>
				Voff += read_adc_func(VOLTAGE_OFFSET);
			}
			Voff /= 20;	
     83a:	96 01       	movw	r18, r12
     83c:	ad ec       	ldi	r26, 0xCD	; 205
     83e:	bc ec       	ldi	r27, 0xCC	; 204
     840:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__umulhisi3>
     844:	92 95       	swap	r25
     846:	82 95       	swap	r24
     848:	8f 70       	andi	r24, 0x0F	; 15
     84a:	89 27       	eor	r24, r25
     84c:	9f 70       	andi	r25, 0x0F	; 15
     84e:	89 27       	eor	r24, r25
		
			peak -= Voff;
     850:	be 01       	movw	r22, r28
     852:	68 1b       	sub	r22, r24
     854:	79 0b       	sbc	r23, r25
			peak *= 5000/1024;
     856:	66 0f       	add	r22, r22
     858:	77 1f       	adc	r23, r23
     85a:	66 0f       	add	r22, r22
     85c:	77 1f       	adc	r23, r23
			peak *= 28;
     85e:	8c e1       	ldi	r24, 0x1C	; 28
     860:	86 9f       	mul	r24, r22
     862:	e0 01       	movw	r28, r0
     864:	87 9f       	mul	r24, r23
     866:	d0 0d       	add	r29, r0
     868:	11 24       	eor	r1, r1
			
			break;
     86a:	3a c0       	rjmp	.+116    	; 0x8e0 <findPeak+0x10c>
		case CURRENT_PIN:
			Ioff = 0;
			for (int i = 0; i < 20; i++) {
				Ioff += read_adc_func(CURRENT_OFFSET);
     86c:	85 e0       	ldi	r24, 0x05	; 5
     86e:	f8 01       	movw	r30, r16
     870:	09 95       	icall
     872:	c8 0e       	add	r12, r24
     874:	d9 1e       	adc	r13, r25
			peak *= 28;
			
			break;
		case CURRENT_PIN:
			Ioff = 0;
			for (int i = 0; i < 20; i++) {
     876:	ff ef       	ldi	r31, 0xFF	; 255
     878:	ef 1a       	sub	r14, r31
     87a:	ff 0a       	sbc	r15, r31
     87c:	04 c0       	rjmp	.+8      	; 0x886 <findPeak+0xb2>
	for (uint8_t i = 0; i < size; i++) {
		if (samples[i] > peak)
			peak = samples[i];
	}
	
	switch (pin) {
     87e:	e1 2c       	mov	r14, r1
     880:	f1 2c       	mov	r15, r1
     882:	c1 2c       	mov	r12, r1
     884:	d1 2c       	mov	r13, r1
			peak *= 28;
			
			break;
		case CURRENT_PIN:
			Ioff = 0;
			for (int i = 0; i < 20; i++) {
     886:	84 e1       	ldi	r24, 0x14	; 20
     888:	e8 16       	cp	r14, r24
     88a:	f1 04       	cpc	r15, r1
     88c:	7c f3       	brlt	.-34     	; 0x86c <findPeak+0x98>
				Ioff += read_adc_func(CURRENT_OFFSET);
			}
			Ioff /= 20;
     88e:	96 01       	movw	r18, r12
     890:	ad ec       	ldi	r26, 0xCD	; 205
     892:	bc ec       	ldi	r27, 0xCC	; 204
     894:	0e 94 cb 0c 	call	0x1996	; 0x1996 <__umulhisi3>
     898:	92 95       	swap	r25
     89a:	82 95       	swap	r24
     89c:	8f 70       	andi	r24, 0x0F	; 15
     89e:	89 27       	eor	r24, r25
     8a0:	9f 70       	andi	r25, 0x0F	; 15
     8a2:	89 27       	eor	r24, r25
			
			peak -= Ioff;
     8a4:	be 01       	movw	r22, r28
     8a6:	68 1b       	sub	r22, r24
     8a8:	79 0b       	sbc	r23, r25
			peak *= 5000/1024;
     8aa:	66 0f       	add	r22, r22
     8ac:	77 1f       	adc	r23, r23
     8ae:	66 0f       	add	r22, r22
     8b0:	77 1f       	adc	r23, r23
			peak /= SHUNT_VAL;
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 a9 07 	call	0xf52	; 0xf52 <__floatunsisf>
     8ba:	9b 01       	movw	r18, r22
     8bc:	ac 01       	movw	r20, r24
     8be:	0e 94 90 06 	call	0xd20	; 0xd20 <__addsf3>
     8c2:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fixunssfsi>
			peak *= 0.46;
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 a9 07 	call	0xf52	; 0xf52 <__floatunsisf>
     8ce:	2f e1       	ldi	r18, 0x1F	; 31
     8d0:	35 e8       	ldi	r19, 0x85	; 133
     8d2:	4b ee       	ldi	r20, 0xEB	; 235
     8d4:	5e e3       	ldi	r21, 0x3E	; 62
     8d6:	0e 94 76 08 	call	0x10ec	; 0x10ec <__mulsf3>
     8da:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fixunssfsi>
     8de:	eb 01       	movw	r28, r22
		default:
			break;
	}
	
	return peak;
}
     8e0:	ce 01       	movw	r24, r28
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	df 90       	pop	r13
     8f0:	cf 90       	pop	r12
     8f2:	08 95       	ret

000008f4 <calculateRMS>:

// calculate the rms value from peak value of sinusoid
uint16_t calculateRMS(uint16_t peak)
{
	return peak/ROOT_2;
     8f4:	bc 01       	movw	r22, r24
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 a9 07 	call	0xf52	; 0xf52 <__floatunsisf>
     8fe:	2e ee       	ldi	r18, 0xEE	; 238
     900:	34 e0       	ldi	r19, 0x04	; 4
     902:	45 eb       	ldi	r20, 0xB5	; 181
     904:	5f e3       	ldi	r21, 0x3F	; 63
     906:	0e 94 01 07 	call	0xe02	; 0xe02 <__divsf3>
     90a:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fixunssfsi>
}
     90e:	cb 01       	movw	r24, r22
     910:	08 95       	ret

00000912 <getPhaseDifference>:

// get phase difference in degrees
// since these are more accurate
uint16_t getPhaseDifference(uint32_t *voltageTriggerTimes,
		uint32_t *currentTriggerTimes, uint8_t arraySize) 
{
     912:	8f 92       	push	r8
     914:	9f 92       	push	r9
     916:	af 92       	push	r10
     918:	bf 92       	push	r11
     91a:	cf 92       	push	r12
     91c:	df 92       	push	r13
     91e:	ef 92       	push	r14
     920:	ff 92       	push	r15
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	cf 93       	push	r28
     928:	df 93       	push	r29
	int16_t phaseDifference = 0;
	int16_t Tz = 0;
	int16_t Tp = 0;

	Tz = abs(currentTriggerTimes[0] - voltageTriggerTimes[0]) < abs(currentTriggerTimes[1] - voltageTriggerTimes[1]) ?
		abs(currentTriggerTimes[0] - voltageTriggerTimes[0]) : abs(currentTriggerTimes[1] - voltageTriggerTimes[1]);
     92a:	db 01       	movw	r26, r22
     92c:	14 96       	adiw	r26, 0x04	; 4
     92e:	cd 90       	ld	r12, X+
     930:	dd 90       	ld	r13, X+
     932:	ed 90       	ld	r14, X+
     934:	fc 90       	ld	r15, X
     936:	17 97       	sbiw	r26, 0x07	; 7
     938:	ec 01       	movw	r28, r24
     93a:	0c 81       	ldd	r16, Y+4	; 0x04
     93c:	1d 81       	ldd	r17, Y+5	; 0x05
     93e:	2e 81       	ldd	r18, Y+6	; 0x06
     940:	3f 81       	ldd	r19, Y+7	; 0x07
     942:	a6 01       	movw	r20, r12
     944:	40 1b       	sub	r20, r16
     946:	51 0b       	sbc	r21, r17
     948:	9a 01       	movw	r18, r20
     94a:	22 f4       	brpl	.+8      	; 0x954 <getPhaseDifference+0x42>
     94c:	22 27       	eor	r18, r18
     94e:	33 27       	eor	r19, r19
     950:	24 1b       	sub	r18, r20
     952:	35 0b       	sbc	r19, r21
     954:	f2 2f       	mov	r31, r18
     956:	e3 2f       	mov	r30, r19
     958:	db 01       	movw	r26, r22
     95a:	0d 91       	ld	r16, X+
     95c:	1d 91       	ld	r17, X+
     95e:	2d 91       	ld	r18, X+
     960:	3c 91       	ld	r19, X
     962:	ec 01       	movw	r28, r24
     964:	88 81       	ld	r24, Y
     966:	99 81       	ldd	r25, Y+1	; 0x01
     968:	aa 81       	ldd	r26, Y+2	; 0x02
     96a:	bb 81       	ldd	r27, Y+3	; 0x03
     96c:	a8 01       	movw	r20, r16
     96e:	48 1b       	sub	r20, r24
     970:	59 0b       	sbc	r21, r25
     972:	ca 01       	movw	r24, r20
     974:	99 23       	and	r25, r25
     976:	24 f4       	brge	.+8      	; 0x980 <getPhaseDifference+0x6e>
     978:	88 27       	eor	r24, r24
     97a:	99 27       	eor	r25, r25
     97c:	84 1b       	sub	r24, r20
     97e:	95 0b       	sbc	r25, r21
{
	int16_t phaseDifference = 0;
	int16_t Tz = 0;
	int16_t Tp = 0;

	Tz = abs(currentTriggerTimes[0] - voltageTriggerTimes[0]) < abs(currentTriggerTimes[1] - voltageTriggerTimes[1]) ?
     980:	6f 2f       	mov	r22, r31
     982:	7e 2f       	mov	r23, r30
     984:	86 17       	cp	r24, r22
     986:	97 07       	cpc	r25, r23
     988:	0c f4       	brge	.+2      	; 0x98c <getPhaseDifference+0x7a>
     98a:	bc 01       	movw	r22, r24
		abs(currentTriggerTimes[0] - voltageTriggerTimes[0]) : abs(currentTriggerTimes[1] - voltageTriggerTimes[1]);
	Tp = currentTriggerTimes[1] - currentTriggerTimes[0];
     98c:	c0 1a       	sub	r12, r16
     98e:	d1 0a       	sbc	r13, r17

	phaseDifference = (uint16_t)((2.0*PI * Tz/Tp) * 1000);
     990:	07 2e       	mov	r0, r23
     992:	00 0c       	add	r0, r0
     994:	88 0b       	sbc	r24, r24
     996:	99 0b       	sbc	r25, r25
     998:	0e 94 ab 07 	call	0xf56	; 0xf56 <__floatsisf>
     99c:	20 ed       	ldi	r18, 0xD0	; 208
     99e:	3f e0       	ldi	r19, 0x0F	; 15
     9a0:	49 ec       	ldi	r20, 0xC9	; 201
     9a2:	50 e4       	ldi	r21, 0x40	; 64
     9a4:	0e 94 76 08 	call	0x10ec	; 0x10ec <__mulsf3>
     9a8:	4b 01       	movw	r8, r22
     9aa:	5c 01       	movw	r10, r24
     9ac:	b6 01       	movw	r22, r12
     9ae:	dd 0c       	add	r13, r13
     9b0:	88 0b       	sbc	r24, r24
     9b2:	99 0b       	sbc	r25, r25
     9b4:	0e 94 ab 07 	call	0xf56	; 0xf56 <__floatsisf>
     9b8:	9b 01       	movw	r18, r22
     9ba:	ac 01       	movw	r20, r24
     9bc:	c5 01       	movw	r24, r10
     9be:	b4 01       	movw	r22, r8
     9c0:	0e 94 01 07 	call	0xe02	; 0xe02 <__divsf3>
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	4a e7       	ldi	r20, 0x7A	; 122
     9ca:	54 e4       	ldi	r21, 0x44	; 68
     9cc:	0e 94 76 08 	call	0x10ec	; 0x10ec <__mulsf3>
     9d0:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fixunssfsi>

	return (uint16_t)abs(phaseDifference);
     9d4:	9b 01       	movw	r18, r22
     9d6:	77 23       	and	r23, r23
     9d8:	24 f4       	brge	.+8      	; 0x9e2 <getPhaseDifference+0xd0>
     9da:	22 27       	eor	r18, r18
     9dc:	33 27       	eor	r19, r19
     9de:	26 1b       	sub	r18, r22
     9e0:	37 0b       	sbc	r19, r23
}
     9e2:	c9 01       	movw	r24, r18
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	1f 91       	pop	r17
     9ea:	0f 91       	pop	r16
     9ec:	ff 90       	pop	r15
     9ee:	ef 90       	pop	r14
     9f0:	df 90       	pop	r13
     9f2:	cf 90       	pop	r12
     9f4:	bf 90       	pop	r11
     9f6:	af 90       	pop	r10
     9f8:	9f 90       	pop	r9
     9fa:	8f 90       	pop	r8
     9fc:	08 95       	ret

000009fe <calculatePowerFactor>:

// calculate power factor
uint16_t calculatePowerFactor(uint16_t phase) 
{
	double phaseRadians = phase/1000.0;
     9fe:	bc 01       	movw	r22, r24
     a00:	80 e0       	ldi	r24, 0x00	; 0
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	0e 94 a9 07 	call	0xf52	; 0xf52 <__floatunsisf>
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	4a e7       	ldi	r20, 0x7A	; 122
     a0e:	54 e4       	ldi	r21, 0x44	; 68
     a10:	0e 94 01 07 	call	0xe02	; 0xe02 <__divsf3>
	return abs(cos(phaseRadians) * 1000);
     a14:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <cos>
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	4a e7       	ldi	r20, 0x7A	; 122
     a1e:	54 e4       	ldi	r21, 0x44	; 68
     a20:	0e 94 76 08 	call	0x10ec	; 0x10ec <__mulsf3>
     a24:	0e 94 73 07 	call	0xee6	; 0xee6 <__fixsfsi>
     a28:	9b 01       	movw	r18, r22
     a2a:	77 23       	and	r23, r23
     a2c:	24 f4       	brge	.+8      	; 0xa36 <calculatePowerFactor+0x38>
     a2e:	22 27       	eor	r18, r18
     a30:	33 27       	eor	r19, r19
     a32:	26 1b       	sub	r18, r22
     a34:	37 0b       	sbc	r19, r23
}
     a36:	c9 01       	movw	r24, r18
     a38:	08 95       	ret

00000a3a <calculateAveragePower>:

// calculate average power using standard equation
uint16_t calculateAveragePower(uint16_t Vrms, uint16_t Irms, uint16_t pf)
{
     a3a:	cf 92       	push	r12
     a3c:	df 92       	push	r13
     a3e:	ef 92       	push	r14
     a40:	ff 92       	push	r15
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	8b 01       	movw	r16, r22
     a4c:	ea 01       	movw	r28, r20
	double p = ((Vrms/1000.0) * (Irms/1000.0) * (pf/1000.0));
     a4e:	bc 01       	movw	r22, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 a9 07 	call	0xf52	; 0xf52 <__floatunsisf>
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	4a e7       	ldi	r20, 0x7A	; 122
     a5e:	54 e4       	ldi	r21, 0x44	; 68
     a60:	0e 94 01 07 	call	0xe02	; 0xe02 <__divsf3>
     a64:	6b 01       	movw	r12, r22
     a66:	7c 01       	movw	r14, r24
     a68:	b8 01       	movw	r22, r16
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 a9 07 	call	0xf52	; 0xf52 <__floatunsisf>
     a72:	20 e0       	ldi	r18, 0x00	; 0
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	4a e7       	ldi	r20, 0x7A	; 122
     a78:	54 e4       	ldi	r21, 0x44	; 68
     a7a:	0e 94 01 07 	call	0xe02	; 0xe02 <__divsf3>
     a7e:	9b 01       	movw	r18, r22
     a80:	ac 01       	movw	r20, r24
     a82:	c7 01       	movw	r24, r14
     a84:	b6 01       	movw	r22, r12
     a86:	0e 94 76 08 	call	0x10ec	; 0x10ec <__mulsf3>
     a8a:	6b 01       	movw	r12, r22
     a8c:	7c 01       	movw	r14, r24
     a8e:	be 01       	movw	r22, r28
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	0e 94 a9 07 	call	0xf52	; 0xf52 <__floatunsisf>
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	4a e7       	ldi	r20, 0x7A	; 122
     a9e:	54 e4       	ldi	r21, 0x44	; 68
     aa0:	0e 94 01 07 	call	0xe02	; 0xe02 <__divsf3>
     aa4:	9b 01       	movw	r18, r22
     aa6:	ac 01       	movw	r20, r24
     aa8:	c7 01       	movw	r24, r14
     aaa:	b6 01       	movw	r22, r12
     aac:	0e 94 76 08 	call	0x10ec	; 0x10ec <__mulsf3>
	return (uint16_t)(p*1000);
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	4a e7       	ldi	r20, 0x7A	; 122
     ab6:	54 e4       	ldi	r21, 0x44	; 68
     ab8:	0e 94 76 08 	call	0x10ec	; 0x10ec <__mulsf3>
     abc:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fixunssfsi>
}
     ac0:	cb 01       	movw	r24, r22
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	ff 90       	pop	r15
     acc:	ef 90       	pop	r14
     ace:	df 90       	pop	r13
     ad0:	cf 90       	pop	r12
     ad2:	08 95       	ret

00000ad4 <timer_init>:
	// set scale into time, convert clock speed from Hz to MHz to scale time to us
	double step = 1/((double)(F_CPU/1000000)/256);
	// multiply timer register by value of time step
	double timeSeconds = step * getTimerCount();
	return (uint32_t)(timeSeconds);
}
     ad4:	e1 e8       	ldi	r30, 0x81	; 129
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	84 60       	ori	r24, 0x04	; 4
     adc:	80 83       	st	Z, r24
     ade:	08 95       	ret

00000ae0 <resetTimer>:
     ae0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     ae4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     ae8:	08 95       	ret

00000aea <getTimerCount>:
     aea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     aee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     af2:	08 95       	ret

00000af4 <get_time>:

uint32_t get_time()
{
	// returns the current timer count to the function caller
	return getTimerCount();
     af4:	0e 94 75 05 	call	0xaea	; 0xaea <getTimerCount>
     af8:	bc 01       	movw	r22, r24
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	90 e0       	ldi	r25, 0x00	; 0
	//return calculateTime(TIMER_PRESCALER);
     afe:	08 95       	ret

00000b00 <get_uart_string>:
 */ 
#include "uart.h"

// get uart string
void get_uart_string(uint16_t val, char *string, char ident)
{
     b00:	1f 93       	push	r17
     b02:	cf 93       	push	r28
     b04:	df 93       	push	r29
     b06:	d6 2f       	mov	r29, r22
     b08:	17 2f       	mov	r17, r23
     b0a:	c4 2f       	mov	r28, r20
	double value = 0;
	switch (ident) {
     b0c:	49 34       	cpi	r20, 0x49	; 73
     b0e:	61 f1       	breq	.+88     	; 0xb68 <get_uart_string+0x68>
     b10:	18 f4       	brcc	.+6      	; 0xb18 <get_uart_string+0x18>
     b12:	46 34       	cpi	r20, 0x46	; 70
     b14:	f1 f1       	breq	.+124    	; 0xb92 <get_uart_string+0x92>
     b16:	80 c0       	rjmp	.+256    	; 0xc18 <get_uart_string+0x118>
     b18:	40 35       	cpi	r20, 0x50	; 80
     b1a:	09 f4       	brne	.+2      	; 0xb1e <get_uart_string+0x1e>
     b1c:	5c c0       	rjmp	.+184    	; 0xbd6 <get_uart_string+0xd6>
     b1e:	46 35       	cpi	r20, 0x56	; 86
     b20:	09 f0       	breq	.+2      	; 0xb24 <get_uart_string+0x24>
     b22:	7a c0       	rjmp	.+244    	; 0xc18 <get_uart_string+0x118>
		case 'V':
			value = (double)((double)val/1000);
     b24:	bc 01       	movw	r22, r24
     b26:	80 e0       	ldi	r24, 0x00	; 0
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	0e 94 a9 07 	call	0xf52	; 0xf52 <__floatunsisf>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	4a e7       	ldi	r20, 0x7A	; 122
     b34:	54 e4       	ldi	r21, 0x44	; 68
     b36:	0e 94 01 07 	call	0xe02	; 0xe02 <__divsf3>
			sprintf(string, "%c=%.4g\n", ident, value);
     b3a:	9f 93       	push	r25
     b3c:	8f 93       	push	r24
     b3e:	7f 93       	push	r23
     b40:	6f 93       	push	r22
     b42:	1f 92       	push	r1
     b44:	cf 93       	push	r28
     b46:	86 e2       	ldi	r24, 0x26	; 38
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	9f 93       	push	r25
     b4c:	8f 93       	push	r24
     b4e:	1f 93       	push	r17
     b50:	df 93       	push	r29
     b52:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <sprintf>
			break;
     b56:	8d b7       	in	r24, 0x3d	; 61
     b58:	9e b7       	in	r25, 0x3e	; 62
     b5a:	0a 96       	adiw	r24, 0x0a	; 10
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	9e bf       	out	0x3e, r25	; 62
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	8d bf       	out	0x3d, r24	; 61
     b66:	58 c0       	rjmp	.+176    	; 0xc18 <get_uart_string+0x118>
		case 'I':
			sprintf(string, "%c=%04u\n", ident, val);
     b68:	9f 93       	push	r25
     b6a:	8f 93       	push	r24
     b6c:	1f 92       	push	r1
     b6e:	4f 93       	push	r20
     b70:	8f e2       	ldi	r24, 0x2F	; 47
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	9f 93       	push	r25
     b76:	8f 93       	push	r24
     b78:	7f 93       	push	r23
     b7a:	6f 93       	push	r22
     b7c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <sprintf>
			break;
     b80:	8d b7       	in	r24, 0x3d	; 61
     b82:	9e b7       	in	r25, 0x3e	; 62
     b84:	08 96       	adiw	r24, 0x08	; 8
     b86:	0f b6       	in	r0, 0x3f	; 63
     b88:	f8 94       	cli
     b8a:	9e bf       	out	0x3e, r25	; 62
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	8d bf       	out	0x3d, r24	; 61
     b90:	43 c0       	rjmp	.+134    	; 0xc18 <get_uart_string+0x118>
		case 'F':
			value = (double)((double)val/1000);
     b92:	bc 01       	movw	r22, r24
     b94:	80 e0       	ldi	r24, 0x00	; 0
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 a9 07 	call	0xf52	; 0xf52 <__floatunsisf>
     b9c:	20 e0       	ldi	r18, 0x00	; 0
     b9e:	30 e0       	ldi	r19, 0x00	; 0
     ba0:	4a e7       	ldi	r20, 0x7A	; 122
     ba2:	54 e4       	ldi	r21, 0x44	; 68
     ba4:	0e 94 01 07 	call	0xe02	; 0xe02 <__divsf3>
			sprintf(string, "%c=%.4g\n", ident, value);
     ba8:	9f 93       	push	r25
     baa:	8f 93       	push	r24
     bac:	7f 93       	push	r23
     bae:	6f 93       	push	r22
     bb0:	1f 92       	push	r1
     bb2:	cf 93       	push	r28
     bb4:	86 e2       	ldi	r24, 0x26	; 38
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	9f 93       	push	r25
     bba:	8f 93       	push	r24
     bbc:	1f 93       	push	r17
     bbe:	df 93       	push	r29
     bc0:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <sprintf>
			break;
     bc4:	8d b7       	in	r24, 0x3d	; 61
     bc6:	9e b7       	in	r25, 0x3e	; 62
     bc8:	0a 96       	adiw	r24, 0x0a	; 10
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	f8 94       	cli
     bce:	9e bf       	out	0x3e, r25	; 62
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	8d bf       	out	0x3d, r24	; 61
     bd4:	21 c0       	rjmp	.+66     	; 0xc18 <get_uart_string+0x118>
		case 'P':
			value = (double)((double)val/1000);
     bd6:	bc 01       	movw	r22, r24
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 a9 07 	call	0xf52	; 0xf52 <__floatunsisf>
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	4a e7       	ldi	r20, 0x7A	; 122
     be6:	54 e4       	ldi	r21, 0x44	; 68
     be8:	0e 94 01 07 	call	0xe02	; 0xe02 <__divsf3>
			sprintf(string, "%c=%.4g\n", ident, value);
     bec:	9f 93       	push	r25
     bee:	8f 93       	push	r24
     bf0:	7f 93       	push	r23
     bf2:	6f 93       	push	r22
     bf4:	1f 92       	push	r1
     bf6:	cf 93       	push	r28
     bf8:	86 e2       	ldi	r24, 0x26	; 38
     bfa:	91 e0       	ldi	r25, 0x01	; 1
     bfc:	9f 93       	push	r25
     bfe:	8f 93       	push	r24
     c00:	1f 93       	push	r17
     c02:	df 93       	push	r29
     c04:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <sprintf>
			break;
     c08:	8d b7       	in	r24, 0x3d	; 61
     c0a:	9e b7       	in	r25, 0x3e	; 62
     c0c:	0a 96       	adiw	r24, 0x0a	; 10
     c0e:	0f b6       	in	r0, 0x3f	; 63
     c10:	f8 94       	cli
     c12:	9e bf       	out	0x3e, r25	; 62
     c14:	0f be       	out	0x3f, r0	; 63
     c16:	8d bf       	out	0x3d, r24	; 61
	}
}
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	08 95       	ret

00000c20 <calculateUBRR>:

// calculate corrext ubrr
uint16_t calculateUBRR(uint16_t baud)
{
	return (uint16_t)(F_CPU/(16*(unsigned long)baud) - 1);
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	aa 1f       	adc	r26, r26
     c2a:	bb 1f       	adc	r27, r27
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	aa 1f       	adc	r26, r26
     c32:	bb 1f       	adc	r27, r27
     c34:	9c 01       	movw	r18, r24
     c36:	ad 01       	movw	r20, r26
     c38:	22 0f       	add	r18, r18
     c3a:	33 1f       	adc	r19, r19
     c3c:	44 1f       	adc	r20, r20
     c3e:	55 1f       	adc	r21, r21
     c40:	22 0f       	add	r18, r18
     c42:	33 1f       	adc	r19, r19
     c44:	44 1f       	adc	r20, r20
     c46:	55 1f       	adc	r21, r21
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	74 e2       	ldi	r23, 0x24	; 36
     c4c:	84 ef       	ldi	r24, 0xF4	; 244
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__udivmodsi4>
}
     c54:	c9 01       	movw	r24, r18
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	08 95       	ret

00000c5a <uart_init>:

// uart init function
void uart_init(uint16_t baud)
{	
	uint16_t ubrr = calculateUBRR(baud);
     c5a:	0e 94 10 06 	call	0xc20	; 0xc20 <calculateUBRR>
     c5e:	9c 01       	movw	r18, r24
	// Enable TX and RX
	UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
     c60:	e1 ec       	ldi	r30, 0xC1	; 193
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	90 81       	ld	r25, Z
     c66:	98 61       	ori	r25, 0x18	; 24
     c68:	90 83       	st	Z, r25
	// set character size to 8-bit
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
     c6a:	e2 ec       	ldi	r30, 0xC2	; 194
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	90 81       	ld	r25, Z
     c70:	96 60       	ori	r25, 0x06	; 6
     c72:	90 83       	st	Z, r25
	UCSR0C &= ~(1<<UPM00);
     c74:	90 81       	ld	r25, Z
     c76:	9f 7e       	andi	r25, 0xEF	; 239
     c78:	90 83       	st	Z, r25
	UCSR0C &= ~(1<<UPM01);
     c7a:	90 81       	ld	r25, Z
     c7c:	9f 7d       	andi	r25, 0xDF	; 223
     c7e:	90 83       	st	Z, r25
	// Set the baud rate
	UBRR0 = ubrr;
     c80:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     c84:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     c88:	08 95       	ret

00000c8a <uart_transmit>:

// uart transmit function
void uart_transmit(uint8_t data)
{
	// wait until transmitter is ready
	while ((1<<UDRE0 & UCSR0A) == 0x00) {;} // do nothing
     c8a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     c8e:	95 ff       	sbrs	r25, 5
     c90:	fc cf       	rjmp	.-8      	; 0xc8a <uart_transmit>
	// transmit data
	UDR0 = data;
     c92:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     c96:	08 95       	ret

00000c98 <uart_write>:
}

// uart write function
// write multiple characters at once
void uart_write(char *data) 
{
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	8c 01       	movw	r16, r24
	int i = 0;
     ca2:	c0 e0       	ldi	r28, 0x00	; 0
     ca4:	d0 e0       	ldi	r29, 0x00	; 0
	while (data[i] != '\0') {
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <uart_write+0x16>
		uart_transmit(data[i]);
     ca8:	0e 94 45 06 	call	0xc8a	; 0xc8a <uart_transmit>
		i++;
     cac:	21 96       	adiw	r28, 0x01	; 1
// uart write function
// write multiple characters at once
void uart_write(char *data) 
{
	int i = 0;
	while (data[i] != '\0') {
     cae:	f8 01       	movw	r30, r16
     cb0:	ec 0f       	add	r30, r28
     cb2:	fd 1f       	adc	r31, r29
     cb4:	80 81       	ld	r24, Z
     cb6:	81 11       	cpse	r24, r1
     cb8:	f7 cf       	rjmp	.-18     	; 0xca8 <uart_write+0x10>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cba:	2f e7       	ldi	r18, 0x7F	; 127
     cbc:	89 ea       	ldi	r24, 0xA9	; 169
     cbe:	93 e0       	ldi	r25, 0x03	; 3
     cc0:	21 50       	subi	r18, 0x01	; 1
     cc2:	80 40       	sbci	r24, 0x00	; 0
     cc4:	90 40       	sbci	r25, 0x00	; 0
     cc6:	e1 f7       	brne	.-8      	; 0xcc0 <uart_write+0x28>
     cc8:	00 c0       	rjmp	.+0      	; 0xcca <uart_write+0x32>
     cca:	00 00       	nop
		uart_transmit(data[i]);
		i++;
	}
	
	_delay_ms(75);
}
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	1f 91       	pop	r17
     cd2:	0f 91       	pop	r16
     cd4:	08 95       	ret

00000cd6 <main>:

// finite state machines
#include "lib/fsm.h"

int main(void) 
{
     cd6:	cf 93       	push	r28
     cd8:	df 93       	push	r29
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	a6 97       	sbiw	r28, 0x26	; 38
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
	// create function pointer struct
	struct functionPointers funcs = {
     cea:	86 e2       	ldi	r24, 0x26	; 38
     cec:	e0 e0       	ldi	r30, 0x00	; 0
     cee:	f1 e0       	ldi	r31, 0x01	; 1
     cf0:	de 01       	movw	r26, r28
     cf2:	11 96       	adiw	r26, 0x01	; 1
     cf4:	01 90       	ld	r0, Z+
     cf6:	0d 92       	st	X+, r0
     cf8:	8a 95       	dec	r24
     cfa:	e1 f7       	brne	.-8      	; 0xcf4 <main+0x1e>
		.calculate_average_power = calculateAveragePower,
	};
	
	
	// init fsm by passing structs to it
	fsmInit(&funcs);
     cfc:	ce 01       	movw	r24, r28
     cfe:	01 96       	adiw	r24, 0x01	; 1
     d00:	0e 94 30 01 	call	0x260	; 0x260 <fsmInit>
	
	run();
     d04:	0e 94 ee 02 	call	0x5dc	; 0x5dc <run>
}
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	a6 96       	adiw	r28, 0x26	; 38
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	08 95       	ret

00000d1e <__subsf3>:
     d1e:	50 58       	subi	r21, 0x80	; 128

00000d20 <__addsf3>:
     d20:	bb 27       	eor	r27, r27
     d22:	aa 27       	eor	r26, r26
     d24:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__addsf3x>
     d28:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__fp_round>
     d2c:	0e 94 ef 07 	call	0xfde	; 0xfde <__fp_pscA>
     d30:	38 f0       	brcs	.+14     	; 0xd40 <__addsf3+0x20>
     d32:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_pscB>
     d36:	20 f0       	brcs	.+8      	; 0xd40 <__addsf3+0x20>
     d38:	39 f4       	brne	.+14     	; 0xd48 <__addsf3+0x28>
     d3a:	9f 3f       	cpi	r25, 0xFF	; 255
     d3c:	19 f4       	brne	.+6      	; 0xd44 <__addsf3+0x24>
     d3e:	26 f4       	brtc	.+8      	; 0xd48 <__addsf3+0x28>
     d40:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__fp_nan>
     d44:	0e f4       	brtc	.+2      	; 0xd48 <__addsf3+0x28>
     d46:	e0 95       	com	r30
     d48:	e7 fb       	bst	r30, 7
     d4a:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_inf>

00000d4e <__addsf3x>:
     d4e:	e9 2f       	mov	r30, r25
     d50:	0e 94 4d 08 	call	0x109a	; 0x109a <__fp_split3>
     d54:	58 f3       	brcs	.-42     	; 0xd2c <__addsf3+0xc>
     d56:	ba 17       	cp	r27, r26
     d58:	62 07       	cpc	r22, r18
     d5a:	73 07       	cpc	r23, r19
     d5c:	84 07       	cpc	r24, r20
     d5e:	95 07       	cpc	r25, r21
     d60:	20 f0       	brcs	.+8      	; 0xd6a <__addsf3x+0x1c>
     d62:	79 f4       	brne	.+30     	; 0xd82 <__addsf3x+0x34>
     d64:	a6 f5       	brtc	.+104    	; 0xdce <__addsf3x+0x80>
     d66:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__fp_zero>
     d6a:	0e f4       	brtc	.+2      	; 0xd6e <__addsf3x+0x20>
     d6c:	e0 95       	com	r30
     d6e:	0b 2e       	mov	r0, r27
     d70:	ba 2f       	mov	r27, r26
     d72:	a0 2d       	mov	r26, r0
     d74:	0b 01       	movw	r0, r22
     d76:	b9 01       	movw	r22, r18
     d78:	90 01       	movw	r18, r0
     d7a:	0c 01       	movw	r0, r24
     d7c:	ca 01       	movw	r24, r20
     d7e:	a0 01       	movw	r20, r0
     d80:	11 24       	eor	r1, r1
     d82:	ff 27       	eor	r31, r31
     d84:	59 1b       	sub	r21, r25
     d86:	99 f0       	breq	.+38     	; 0xdae <__addsf3x+0x60>
     d88:	59 3f       	cpi	r21, 0xF9	; 249
     d8a:	50 f4       	brcc	.+20     	; 0xda0 <__addsf3x+0x52>
     d8c:	50 3e       	cpi	r21, 0xE0	; 224
     d8e:	68 f1       	brcs	.+90     	; 0xdea <__addsf3x+0x9c>
     d90:	1a 16       	cp	r1, r26
     d92:	f0 40       	sbci	r31, 0x00	; 0
     d94:	a2 2f       	mov	r26, r18
     d96:	23 2f       	mov	r18, r19
     d98:	34 2f       	mov	r19, r20
     d9a:	44 27       	eor	r20, r20
     d9c:	58 5f       	subi	r21, 0xF8	; 248
     d9e:	f3 cf       	rjmp	.-26     	; 0xd86 <__addsf3x+0x38>
     da0:	46 95       	lsr	r20
     da2:	37 95       	ror	r19
     da4:	27 95       	ror	r18
     da6:	a7 95       	ror	r26
     da8:	f0 40       	sbci	r31, 0x00	; 0
     daa:	53 95       	inc	r21
     dac:	c9 f7       	brne	.-14     	; 0xda0 <__addsf3x+0x52>
     dae:	7e f4       	brtc	.+30     	; 0xdce <__addsf3x+0x80>
     db0:	1f 16       	cp	r1, r31
     db2:	ba 0b       	sbc	r27, r26
     db4:	62 0b       	sbc	r22, r18
     db6:	73 0b       	sbc	r23, r19
     db8:	84 0b       	sbc	r24, r20
     dba:	ba f0       	brmi	.+46     	; 0xdea <__addsf3x+0x9c>
     dbc:	91 50       	subi	r25, 0x01	; 1
     dbe:	a1 f0       	breq	.+40     	; 0xde8 <__addsf3x+0x9a>
     dc0:	ff 0f       	add	r31, r31
     dc2:	bb 1f       	adc	r27, r27
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	88 1f       	adc	r24, r24
     dca:	c2 f7       	brpl	.-16     	; 0xdbc <__addsf3x+0x6e>
     dcc:	0e c0       	rjmp	.+28     	; 0xdea <__addsf3x+0x9c>
     dce:	ba 0f       	add	r27, r26
     dd0:	62 1f       	adc	r22, r18
     dd2:	73 1f       	adc	r23, r19
     dd4:	84 1f       	adc	r24, r20
     dd6:	48 f4       	brcc	.+18     	; 0xdea <__addsf3x+0x9c>
     dd8:	87 95       	ror	r24
     dda:	77 95       	ror	r23
     ddc:	67 95       	ror	r22
     dde:	b7 95       	ror	r27
     de0:	f7 95       	ror	r31
     de2:	9e 3f       	cpi	r25, 0xFE	; 254
     de4:	08 f0       	brcs	.+2      	; 0xde8 <__addsf3x+0x9a>
     de6:	b0 cf       	rjmp	.-160    	; 0xd48 <__addsf3+0x28>
     de8:	93 95       	inc	r25
     dea:	88 0f       	add	r24, r24
     dec:	08 f0       	brcs	.+2      	; 0xdf0 <__addsf3x+0xa2>
     dee:	99 27       	eor	r25, r25
     df0:	ee 0f       	add	r30, r30
     df2:	97 95       	ror	r25
     df4:	87 95       	ror	r24
     df6:	08 95       	ret

00000df8 <cos>:
     df8:	0e 94 ff 07 	call	0xffe	; 0xffe <__fp_rempio2>
     dfc:	e3 95       	inc	r30
     dfe:	0c 94 39 08 	jmp	0x1072	; 0x1072 <__fp_sinus>

00000e02 <__divsf3>:
     e02:	0e 94 15 07 	call	0xe2a	; 0xe2a <__divsf3x>
     e06:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__fp_round>
     e0a:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_pscB>
     e0e:	58 f0       	brcs	.+22     	; 0xe26 <__divsf3+0x24>
     e10:	0e 94 ef 07 	call	0xfde	; 0xfde <__fp_pscA>
     e14:	40 f0       	brcs	.+16     	; 0xe26 <__divsf3+0x24>
     e16:	29 f4       	brne	.+10     	; 0xe22 <__divsf3+0x20>
     e18:	5f 3f       	cpi	r21, 0xFF	; 255
     e1a:	29 f0       	breq	.+10     	; 0xe26 <__divsf3+0x24>
     e1c:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_inf>
     e20:	51 11       	cpse	r21, r1
     e22:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__fp_szero>
     e26:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__fp_nan>

00000e2a <__divsf3x>:
     e2a:	0e 94 4d 08 	call	0x109a	; 0x109a <__fp_split3>
     e2e:	68 f3       	brcs	.-38     	; 0xe0a <__divsf3+0x8>

00000e30 <__divsf3_pse>:
     e30:	99 23       	and	r25, r25
     e32:	b1 f3       	breq	.-20     	; 0xe20 <__divsf3+0x1e>
     e34:	55 23       	and	r21, r21
     e36:	91 f3       	breq	.-28     	; 0xe1c <__divsf3+0x1a>
     e38:	95 1b       	sub	r25, r21
     e3a:	55 0b       	sbc	r21, r21
     e3c:	bb 27       	eor	r27, r27
     e3e:	aa 27       	eor	r26, r26
     e40:	62 17       	cp	r22, r18
     e42:	73 07       	cpc	r23, r19
     e44:	84 07       	cpc	r24, r20
     e46:	38 f0       	brcs	.+14     	; 0xe56 <__divsf3_pse+0x26>
     e48:	9f 5f       	subi	r25, 0xFF	; 255
     e4a:	5f 4f       	sbci	r21, 0xFF	; 255
     e4c:	22 0f       	add	r18, r18
     e4e:	33 1f       	adc	r19, r19
     e50:	44 1f       	adc	r20, r20
     e52:	aa 1f       	adc	r26, r26
     e54:	a9 f3       	breq	.-22     	; 0xe40 <__divsf3_pse+0x10>
     e56:	35 d0       	rcall	.+106    	; 0xec2 <__divsf3_pse+0x92>
     e58:	0e 2e       	mov	r0, r30
     e5a:	3a f0       	brmi	.+14     	; 0xe6a <__divsf3_pse+0x3a>
     e5c:	e0 e8       	ldi	r30, 0x80	; 128
     e5e:	32 d0       	rcall	.+100    	; 0xec4 <__divsf3_pse+0x94>
     e60:	91 50       	subi	r25, 0x01	; 1
     e62:	50 40       	sbci	r21, 0x00	; 0
     e64:	e6 95       	lsr	r30
     e66:	00 1c       	adc	r0, r0
     e68:	ca f7       	brpl	.-14     	; 0xe5c <__divsf3_pse+0x2c>
     e6a:	2b d0       	rcall	.+86     	; 0xec2 <__divsf3_pse+0x92>
     e6c:	fe 2f       	mov	r31, r30
     e6e:	29 d0       	rcall	.+82     	; 0xec2 <__divsf3_pse+0x92>
     e70:	66 0f       	add	r22, r22
     e72:	77 1f       	adc	r23, r23
     e74:	88 1f       	adc	r24, r24
     e76:	bb 1f       	adc	r27, r27
     e78:	26 17       	cp	r18, r22
     e7a:	37 07       	cpc	r19, r23
     e7c:	48 07       	cpc	r20, r24
     e7e:	ab 07       	cpc	r26, r27
     e80:	b0 e8       	ldi	r27, 0x80	; 128
     e82:	09 f0       	breq	.+2      	; 0xe86 <__divsf3_pse+0x56>
     e84:	bb 0b       	sbc	r27, r27
     e86:	80 2d       	mov	r24, r0
     e88:	bf 01       	movw	r22, r30
     e8a:	ff 27       	eor	r31, r31
     e8c:	93 58       	subi	r25, 0x83	; 131
     e8e:	5f 4f       	sbci	r21, 0xFF	; 255
     e90:	3a f0       	brmi	.+14     	; 0xea0 <__divsf3_pse+0x70>
     e92:	9e 3f       	cpi	r25, 0xFE	; 254
     e94:	51 05       	cpc	r21, r1
     e96:	78 f0       	brcs	.+30     	; 0xeb6 <__divsf3_pse+0x86>
     e98:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_inf>
     e9c:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__fp_szero>
     ea0:	5f 3f       	cpi	r21, 0xFF	; 255
     ea2:	e4 f3       	brlt	.-8      	; 0xe9c <__divsf3_pse+0x6c>
     ea4:	98 3e       	cpi	r25, 0xE8	; 232
     ea6:	d4 f3       	brlt	.-12     	; 0xe9c <__divsf3_pse+0x6c>
     ea8:	86 95       	lsr	r24
     eaa:	77 95       	ror	r23
     eac:	67 95       	ror	r22
     eae:	b7 95       	ror	r27
     eb0:	f7 95       	ror	r31
     eb2:	9f 5f       	subi	r25, 0xFF	; 255
     eb4:	c9 f7       	brne	.-14     	; 0xea8 <__divsf3_pse+0x78>
     eb6:	88 0f       	add	r24, r24
     eb8:	91 1d       	adc	r25, r1
     eba:	96 95       	lsr	r25
     ebc:	87 95       	ror	r24
     ebe:	97 f9       	bld	r25, 7
     ec0:	08 95       	ret
     ec2:	e1 e0       	ldi	r30, 0x01	; 1
     ec4:	66 0f       	add	r22, r22
     ec6:	77 1f       	adc	r23, r23
     ec8:	88 1f       	adc	r24, r24
     eca:	bb 1f       	adc	r27, r27
     ecc:	62 17       	cp	r22, r18
     ece:	73 07       	cpc	r23, r19
     ed0:	84 07       	cpc	r24, r20
     ed2:	ba 07       	cpc	r27, r26
     ed4:	20 f0       	brcs	.+8      	; 0xede <__divsf3_pse+0xae>
     ed6:	62 1b       	sub	r22, r18
     ed8:	73 0b       	sbc	r23, r19
     eda:	84 0b       	sbc	r24, r20
     edc:	ba 0b       	sbc	r27, r26
     ede:	ee 1f       	adc	r30, r30
     ee0:	88 f7       	brcc	.-30     	; 0xec4 <__divsf3_pse+0x94>
     ee2:	e0 95       	com	r30
     ee4:	08 95       	ret

00000ee6 <__fixsfsi>:
     ee6:	0e 94 7a 07 	call	0xef4	; 0xef4 <__fixunssfsi>
     eea:	68 94       	set
     eec:	b1 11       	cpse	r27, r1
     eee:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__fp_szero>
     ef2:	08 95       	ret

00000ef4 <__fixunssfsi>:
     ef4:	0e 94 55 08 	call	0x10aa	; 0x10aa <__fp_splitA>
     ef8:	88 f0       	brcs	.+34     	; 0xf1c <__fixunssfsi+0x28>
     efa:	9f 57       	subi	r25, 0x7F	; 127
     efc:	98 f0       	brcs	.+38     	; 0xf24 <__fixunssfsi+0x30>
     efe:	b9 2f       	mov	r27, r25
     f00:	99 27       	eor	r25, r25
     f02:	b7 51       	subi	r27, 0x17	; 23
     f04:	b0 f0       	brcs	.+44     	; 0xf32 <__fixunssfsi+0x3e>
     f06:	e1 f0       	breq	.+56     	; 0xf40 <__fixunssfsi+0x4c>
     f08:	66 0f       	add	r22, r22
     f0a:	77 1f       	adc	r23, r23
     f0c:	88 1f       	adc	r24, r24
     f0e:	99 1f       	adc	r25, r25
     f10:	1a f0       	brmi	.+6      	; 0xf18 <__fixunssfsi+0x24>
     f12:	ba 95       	dec	r27
     f14:	c9 f7       	brne	.-14     	; 0xf08 <__fixunssfsi+0x14>
     f16:	14 c0       	rjmp	.+40     	; 0xf40 <__fixunssfsi+0x4c>
     f18:	b1 30       	cpi	r27, 0x01	; 1
     f1a:	91 f0       	breq	.+36     	; 0xf40 <__fixunssfsi+0x4c>
     f1c:	0e 94 6f 08 	call	0x10de	; 0x10de <__fp_zero>
     f20:	b1 e0       	ldi	r27, 0x01	; 1
     f22:	08 95       	ret
     f24:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__fp_zero>
     f28:	67 2f       	mov	r22, r23
     f2a:	78 2f       	mov	r23, r24
     f2c:	88 27       	eor	r24, r24
     f2e:	b8 5f       	subi	r27, 0xF8	; 248
     f30:	39 f0       	breq	.+14     	; 0xf40 <__fixunssfsi+0x4c>
     f32:	b9 3f       	cpi	r27, 0xF9	; 249
     f34:	cc f3       	brlt	.-14     	; 0xf28 <__fixunssfsi+0x34>
     f36:	86 95       	lsr	r24
     f38:	77 95       	ror	r23
     f3a:	67 95       	ror	r22
     f3c:	b3 95       	inc	r27
     f3e:	d9 f7       	brne	.-10     	; 0xf36 <__fixunssfsi+0x42>
     f40:	3e f4       	brtc	.+14     	; 0xf50 <__fixunssfsi+0x5c>
     f42:	90 95       	com	r25
     f44:	80 95       	com	r24
     f46:	70 95       	com	r23
     f48:	61 95       	neg	r22
     f4a:	7f 4f       	sbci	r23, 0xFF	; 255
     f4c:	8f 4f       	sbci	r24, 0xFF	; 255
     f4e:	9f 4f       	sbci	r25, 0xFF	; 255
     f50:	08 95       	ret

00000f52 <__floatunsisf>:
     f52:	e8 94       	clt
     f54:	09 c0       	rjmp	.+18     	; 0xf68 <__floatsisf+0x12>

00000f56 <__floatsisf>:
     f56:	97 fb       	bst	r25, 7
     f58:	3e f4       	brtc	.+14     	; 0xf68 <__floatsisf+0x12>
     f5a:	90 95       	com	r25
     f5c:	80 95       	com	r24
     f5e:	70 95       	com	r23
     f60:	61 95       	neg	r22
     f62:	7f 4f       	sbci	r23, 0xFF	; 255
     f64:	8f 4f       	sbci	r24, 0xFF	; 255
     f66:	9f 4f       	sbci	r25, 0xFF	; 255
     f68:	99 23       	and	r25, r25
     f6a:	a9 f0       	breq	.+42     	; 0xf96 <__floatsisf+0x40>
     f6c:	f9 2f       	mov	r31, r25
     f6e:	96 e9       	ldi	r25, 0x96	; 150
     f70:	bb 27       	eor	r27, r27
     f72:	93 95       	inc	r25
     f74:	f6 95       	lsr	r31
     f76:	87 95       	ror	r24
     f78:	77 95       	ror	r23
     f7a:	67 95       	ror	r22
     f7c:	b7 95       	ror	r27
     f7e:	f1 11       	cpse	r31, r1
     f80:	f8 cf       	rjmp	.-16     	; 0xf72 <__floatsisf+0x1c>
     f82:	fa f4       	brpl	.+62     	; 0xfc2 <__floatsisf+0x6c>
     f84:	bb 0f       	add	r27, r27
     f86:	11 f4       	brne	.+4      	; 0xf8c <__floatsisf+0x36>
     f88:	60 ff       	sbrs	r22, 0
     f8a:	1b c0       	rjmp	.+54     	; 0xfc2 <__floatsisf+0x6c>
     f8c:	6f 5f       	subi	r22, 0xFF	; 255
     f8e:	7f 4f       	sbci	r23, 0xFF	; 255
     f90:	8f 4f       	sbci	r24, 0xFF	; 255
     f92:	9f 4f       	sbci	r25, 0xFF	; 255
     f94:	16 c0       	rjmp	.+44     	; 0xfc2 <__floatsisf+0x6c>
     f96:	88 23       	and	r24, r24
     f98:	11 f0       	breq	.+4      	; 0xf9e <__floatsisf+0x48>
     f9a:	96 e9       	ldi	r25, 0x96	; 150
     f9c:	11 c0       	rjmp	.+34     	; 0xfc0 <__floatsisf+0x6a>
     f9e:	77 23       	and	r23, r23
     fa0:	21 f0       	breq	.+8      	; 0xfaa <__floatsisf+0x54>
     fa2:	9e e8       	ldi	r25, 0x8E	; 142
     fa4:	87 2f       	mov	r24, r23
     fa6:	76 2f       	mov	r23, r22
     fa8:	05 c0       	rjmp	.+10     	; 0xfb4 <__floatsisf+0x5e>
     faa:	66 23       	and	r22, r22
     fac:	71 f0       	breq	.+28     	; 0xfca <__floatsisf+0x74>
     fae:	96 e8       	ldi	r25, 0x86	; 134
     fb0:	86 2f       	mov	r24, r22
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	2a f0       	brmi	.+10     	; 0xfc2 <__floatsisf+0x6c>
     fb8:	9a 95       	dec	r25
     fba:	66 0f       	add	r22, r22
     fbc:	77 1f       	adc	r23, r23
     fbe:	88 1f       	adc	r24, r24
     fc0:	da f7       	brpl	.-10     	; 0xfb8 <__floatsisf+0x62>
     fc2:	88 0f       	add	r24, r24
     fc4:	96 95       	lsr	r25
     fc6:	87 95       	ror	r24
     fc8:	97 f9       	bld	r25, 7
     fca:	08 95       	ret

00000fcc <__fp_inf>:
     fcc:	97 f9       	bld	r25, 7
     fce:	9f 67       	ori	r25, 0x7F	; 127
     fd0:	80 e8       	ldi	r24, 0x80	; 128
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	08 95       	ret

00000fd8 <__fp_nan>:
     fd8:	9f ef       	ldi	r25, 0xFF	; 255
     fda:	80 ec       	ldi	r24, 0xC0	; 192
     fdc:	08 95       	ret

00000fde <__fp_pscA>:
     fde:	00 24       	eor	r0, r0
     fe0:	0a 94       	dec	r0
     fe2:	16 16       	cp	r1, r22
     fe4:	17 06       	cpc	r1, r23
     fe6:	18 06       	cpc	r1, r24
     fe8:	09 06       	cpc	r0, r25
     fea:	08 95       	ret

00000fec <__fp_pscB>:
     fec:	00 24       	eor	r0, r0
     fee:	0a 94       	dec	r0
     ff0:	12 16       	cp	r1, r18
     ff2:	13 06       	cpc	r1, r19
     ff4:	14 06       	cpc	r1, r20
     ff6:	05 06       	cpc	r0, r21
     ff8:	08 95       	ret
     ffa:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__fp_nan>

00000ffe <__fp_rempio2>:
     ffe:	0e 94 55 08 	call	0x10aa	; 0x10aa <__fp_splitA>
    1002:	d8 f3       	brcs	.-10     	; 0xffa <__fp_pscB+0xe>
    1004:	e8 94       	clt
    1006:	e0 e0       	ldi	r30, 0x00	; 0
    1008:	bb 27       	eor	r27, r27
    100a:	9f 57       	subi	r25, 0x7F	; 127
    100c:	f0 f0       	brcs	.+60     	; 0x104a <__fp_rempio2+0x4c>
    100e:	2a ed       	ldi	r18, 0xDA	; 218
    1010:	3f e0       	ldi	r19, 0x0F	; 15
    1012:	49 ec       	ldi	r20, 0xC9	; 201
    1014:	06 c0       	rjmp	.+12     	; 0x1022 <__fp_rempio2+0x24>
    1016:	ee 0f       	add	r30, r30
    1018:	bb 0f       	add	r27, r27
    101a:	66 1f       	adc	r22, r22
    101c:	77 1f       	adc	r23, r23
    101e:	88 1f       	adc	r24, r24
    1020:	28 f0       	brcs	.+10     	; 0x102c <__fp_rempio2+0x2e>
    1022:	b2 3a       	cpi	r27, 0xA2	; 162
    1024:	62 07       	cpc	r22, r18
    1026:	73 07       	cpc	r23, r19
    1028:	84 07       	cpc	r24, r20
    102a:	28 f0       	brcs	.+10     	; 0x1036 <__fp_rempio2+0x38>
    102c:	b2 5a       	subi	r27, 0xA2	; 162
    102e:	62 0b       	sbc	r22, r18
    1030:	73 0b       	sbc	r23, r19
    1032:	84 0b       	sbc	r24, r20
    1034:	e3 95       	inc	r30
    1036:	9a 95       	dec	r25
    1038:	72 f7       	brpl	.-36     	; 0x1016 <__fp_rempio2+0x18>
    103a:	80 38       	cpi	r24, 0x80	; 128
    103c:	30 f4       	brcc	.+12     	; 0x104a <__fp_rempio2+0x4c>
    103e:	9a 95       	dec	r25
    1040:	bb 0f       	add	r27, r27
    1042:	66 1f       	adc	r22, r22
    1044:	77 1f       	adc	r23, r23
    1046:	88 1f       	adc	r24, r24
    1048:	d2 f7       	brpl	.-12     	; 0x103e <__fp_rempio2+0x40>
    104a:	90 48       	sbci	r25, 0x80	; 128
    104c:	0c 94 e5 08 	jmp	0x11ca	; 0x11ca <__fp_mpack_finite>

00001050 <__fp_round>:
    1050:	09 2e       	mov	r0, r25
    1052:	03 94       	inc	r0
    1054:	00 0c       	add	r0, r0
    1056:	11 f4       	brne	.+4      	; 0x105c <__fp_round+0xc>
    1058:	88 23       	and	r24, r24
    105a:	52 f0       	brmi	.+20     	; 0x1070 <__fp_round+0x20>
    105c:	bb 0f       	add	r27, r27
    105e:	40 f4       	brcc	.+16     	; 0x1070 <__fp_round+0x20>
    1060:	bf 2b       	or	r27, r31
    1062:	11 f4       	brne	.+4      	; 0x1068 <__fp_round+0x18>
    1064:	60 ff       	sbrs	r22, 0
    1066:	04 c0       	rjmp	.+8      	; 0x1070 <__fp_round+0x20>
    1068:	6f 5f       	subi	r22, 0xFF	; 255
    106a:	7f 4f       	sbci	r23, 0xFF	; 255
    106c:	8f 4f       	sbci	r24, 0xFF	; 255
    106e:	9f 4f       	sbci	r25, 0xFF	; 255
    1070:	08 95       	ret

00001072 <__fp_sinus>:
    1072:	ef 93       	push	r30
    1074:	e0 ff       	sbrs	r30, 0
    1076:	07 c0       	rjmp	.+14     	; 0x1086 <__fp_sinus+0x14>
    1078:	a2 ea       	ldi	r26, 0xA2	; 162
    107a:	2a ed       	ldi	r18, 0xDA	; 218
    107c:	3f e0       	ldi	r19, 0x0F	; 15
    107e:	49 ec       	ldi	r20, 0xC9	; 201
    1080:	5f eb       	ldi	r21, 0xBF	; 191
    1082:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__addsf3x>
    1086:	0e 94 28 08 	call	0x1050	; 0x1050 <__fp_round>
    108a:	0f 90       	pop	r0
    108c:	03 94       	inc	r0
    108e:	01 fc       	sbrc	r0, 1
    1090:	90 58       	subi	r25, 0x80	; 128
    1092:	e4 eb       	ldi	r30, 0xB4	; 180
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	0c 94 18 09 	jmp	0x1230	; 0x1230 <__fp_powsodd>

0000109a <__fp_split3>:
    109a:	57 fd       	sbrc	r21, 7
    109c:	90 58       	subi	r25, 0x80	; 128
    109e:	44 0f       	add	r20, r20
    10a0:	55 1f       	adc	r21, r21
    10a2:	59 f0       	breq	.+22     	; 0x10ba <__fp_splitA+0x10>
    10a4:	5f 3f       	cpi	r21, 0xFF	; 255
    10a6:	71 f0       	breq	.+28     	; 0x10c4 <__fp_splitA+0x1a>
    10a8:	47 95       	ror	r20

000010aa <__fp_splitA>:
    10aa:	88 0f       	add	r24, r24
    10ac:	97 fb       	bst	r25, 7
    10ae:	99 1f       	adc	r25, r25
    10b0:	61 f0       	breq	.+24     	; 0x10ca <__fp_splitA+0x20>
    10b2:	9f 3f       	cpi	r25, 0xFF	; 255
    10b4:	79 f0       	breq	.+30     	; 0x10d4 <__fp_splitA+0x2a>
    10b6:	87 95       	ror	r24
    10b8:	08 95       	ret
    10ba:	12 16       	cp	r1, r18
    10bc:	13 06       	cpc	r1, r19
    10be:	14 06       	cpc	r1, r20
    10c0:	55 1f       	adc	r21, r21
    10c2:	f2 cf       	rjmp	.-28     	; 0x10a8 <__fp_split3+0xe>
    10c4:	46 95       	lsr	r20
    10c6:	f1 df       	rcall	.-30     	; 0x10aa <__fp_splitA>
    10c8:	08 c0       	rjmp	.+16     	; 0x10da <__fp_splitA+0x30>
    10ca:	16 16       	cp	r1, r22
    10cc:	17 06       	cpc	r1, r23
    10ce:	18 06       	cpc	r1, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	f1 cf       	rjmp	.-30     	; 0x10b6 <__fp_splitA+0xc>
    10d4:	86 95       	lsr	r24
    10d6:	71 05       	cpc	r23, r1
    10d8:	61 05       	cpc	r22, r1
    10da:	08 94       	sec
    10dc:	08 95       	ret

000010de <__fp_zero>:
    10de:	e8 94       	clt

000010e0 <__fp_szero>:
    10e0:	bb 27       	eor	r27, r27
    10e2:	66 27       	eor	r22, r22
    10e4:	77 27       	eor	r23, r23
    10e6:	cb 01       	movw	r24, r22
    10e8:	97 f9       	bld	r25, 7
    10ea:	08 95       	ret

000010ec <__mulsf3>:
    10ec:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3x>
    10f0:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__fp_round>
    10f4:	0e 94 ef 07 	call	0xfde	; 0xfde <__fp_pscA>
    10f8:	38 f0       	brcs	.+14     	; 0x1108 <__mulsf3+0x1c>
    10fa:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_pscB>
    10fe:	20 f0       	brcs	.+8      	; 0x1108 <__mulsf3+0x1c>
    1100:	95 23       	and	r25, r21
    1102:	11 f0       	breq	.+4      	; 0x1108 <__mulsf3+0x1c>
    1104:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_inf>
    1108:	0c 94 ec 07 	jmp	0xfd8	; 0xfd8 <__fp_nan>
    110c:	11 24       	eor	r1, r1
    110e:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__fp_szero>

00001112 <__mulsf3x>:
    1112:	0e 94 4d 08 	call	0x109a	; 0x109a <__fp_split3>
    1116:	70 f3       	brcs	.-36     	; 0x10f4 <__mulsf3+0x8>

00001118 <__mulsf3_pse>:
    1118:	95 9f       	mul	r25, r21
    111a:	c1 f3       	breq	.-16     	; 0x110c <__mulsf3+0x20>
    111c:	95 0f       	add	r25, r21
    111e:	50 e0       	ldi	r21, 0x00	; 0
    1120:	55 1f       	adc	r21, r21
    1122:	62 9f       	mul	r22, r18
    1124:	f0 01       	movw	r30, r0
    1126:	72 9f       	mul	r23, r18
    1128:	bb 27       	eor	r27, r27
    112a:	f0 0d       	add	r31, r0
    112c:	b1 1d       	adc	r27, r1
    112e:	63 9f       	mul	r22, r19
    1130:	aa 27       	eor	r26, r26
    1132:	f0 0d       	add	r31, r0
    1134:	b1 1d       	adc	r27, r1
    1136:	aa 1f       	adc	r26, r26
    1138:	64 9f       	mul	r22, r20
    113a:	66 27       	eor	r22, r22
    113c:	b0 0d       	add	r27, r0
    113e:	a1 1d       	adc	r26, r1
    1140:	66 1f       	adc	r22, r22
    1142:	82 9f       	mul	r24, r18
    1144:	22 27       	eor	r18, r18
    1146:	b0 0d       	add	r27, r0
    1148:	a1 1d       	adc	r26, r1
    114a:	62 1f       	adc	r22, r18
    114c:	73 9f       	mul	r23, r19
    114e:	b0 0d       	add	r27, r0
    1150:	a1 1d       	adc	r26, r1
    1152:	62 1f       	adc	r22, r18
    1154:	83 9f       	mul	r24, r19
    1156:	a0 0d       	add	r26, r0
    1158:	61 1d       	adc	r22, r1
    115a:	22 1f       	adc	r18, r18
    115c:	74 9f       	mul	r23, r20
    115e:	33 27       	eor	r19, r19
    1160:	a0 0d       	add	r26, r0
    1162:	61 1d       	adc	r22, r1
    1164:	23 1f       	adc	r18, r19
    1166:	84 9f       	mul	r24, r20
    1168:	60 0d       	add	r22, r0
    116a:	21 1d       	adc	r18, r1
    116c:	82 2f       	mov	r24, r18
    116e:	76 2f       	mov	r23, r22
    1170:	6a 2f       	mov	r22, r26
    1172:	11 24       	eor	r1, r1
    1174:	9f 57       	subi	r25, 0x7F	; 127
    1176:	50 40       	sbci	r21, 0x00	; 0
    1178:	9a f0       	brmi	.+38     	; 0x11a0 <__mulsf3_pse+0x88>
    117a:	f1 f0       	breq	.+60     	; 0x11b8 <__mulsf3_pse+0xa0>
    117c:	88 23       	and	r24, r24
    117e:	4a f0       	brmi	.+18     	; 0x1192 <__mulsf3_pse+0x7a>
    1180:	ee 0f       	add	r30, r30
    1182:	ff 1f       	adc	r31, r31
    1184:	bb 1f       	adc	r27, r27
    1186:	66 1f       	adc	r22, r22
    1188:	77 1f       	adc	r23, r23
    118a:	88 1f       	adc	r24, r24
    118c:	91 50       	subi	r25, 0x01	; 1
    118e:	50 40       	sbci	r21, 0x00	; 0
    1190:	a9 f7       	brne	.-22     	; 0x117c <__mulsf3_pse+0x64>
    1192:	9e 3f       	cpi	r25, 0xFE	; 254
    1194:	51 05       	cpc	r21, r1
    1196:	80 f0       	brcs	.+32     	; 0x11b8 <__mulsf3_pse+0xa0>
    1198:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__fp_inf>
    119c:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__fp_szero>
    11a0:	5f 3f       	cpi	r21, 0xFF	; 255
    11a2:	e4 f3       	brlt	.-8      	; 0x119c <__mulsf3_pse+0x84>
    11a4:	98 3e       	cpi	r25, 0xE8	; 232
    11a6:	d4 f3       	brlt	.-12     	; 0x119c <__mulsf3_pse+0x84>
    11a8:	86 95       	lsr	r24
    11aa:	77 95       	ror	r23
    11ac:	67 95       	ror	r22
    11ae:	b7 95       	ror	r27
    11b0:	f7 95       	ror	r31
    11b2:	e7 95       	ror	r30
    11b4:	9f 5f       	subi	r25, 0xFF	; 255
    11b6:	c1 f7       	brne	.-16     	; 0x11a8 <__mulsf3_pse+0x90>
    11b8:	fe 2b       	or	r31, r30
    11ba:	88 0f       	add	r24, r24
    11bc:	91 1d       	adc	r25, r1
    11be:	96 95       	lsr	r25
    11c0:	87 95       	ror	r24
    11c2:	97 f9       	bld	r25, 7
    11c4:	08 95       	ret

000011c6 <__fp_mpack>:
    11c6:	9f 3f       	cpi	r25, 0xFF	; 255
    11c8:	31 f0       	breq	.+12     	; 0x11d6 <__fp_mpack_finite+0xc>

000011ca <__fp_mpack_finite>:
    11ca:	91 50       	subi	r25, 0x01	; 1
    11cc:	20 f4       	brcc	.+8      	; 0x11d6 <__fp_mpack_finite+0xc>
    11ce:	87 95       	ror	r24
    11d0:	77 95       	ror	r23
    11d2:	67 95       	ror	r22
    11d4:	b7 95       	ror	r27
    11d6:	88 0f       	add	r24, r24
    11d8:	91 1d       	adc	r25, r1
    11da:	96 95       	lsr	r25
    11dc:	87 95       	ror	r24
    11de:	97 f9       	bld	r25, 7
    11e0:	08 95       	ret

000011e2 <__fp_powser>:
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	1f 93       	push	r17
    11e8:	0f 93       	push	r16
    11ea:	ff 92       	push	r15
    11ec:	ef 92       	push	r14
    11ee:	df 92       	push	r13
    11f0:	7b 01       	movw	r14, r22
    11f2:	8c 01       	movw	r16, r24
    11f4:	68 94       	set
    11f6:	06 c0       	rjmp	.+12     	; 0x1204 <__fp_powser+0x22>
    11f8:	da 2e       	mov	r13, r26
    11fa:	ef 01       	movw	r28, r30
    11fc:	0e 94 89 08 	call	0x1112	; 0x1112 <__mulsf3x>
    1200:	fe 01       	movw	r30, r28
    1202:	e8 94       	clt
    1204:	a5 91       	lpm	r26, Z+
    1206:	25 91       	lpm	r18, Z+
    1208:	35 91       	lpm	r19, Z+
    120a:	45 91       	lpm	r20, Z+
    120c:	55 91       	lpm	r21, Z+
    120e:	a6 f3       	brts	.-24     	; 0x11f8 <__fp_powser+0x16>
    1210:	ef 01       	movw	r28, r30
    1212:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__addsf3x>
    1216:	fe 01       	movw	r30, r28
    1218:	97 01       	movw	r18, r14
    121a:	a8 01       	movw	r20, r16
    121c:	da 94       	dec	r13
    121e:	69 f7       	brne	.-38     	; 0x11fa <__fp_powser+0x18>
    1220:	df 90       	pop	r13
    1222:	ef 90       	pop	r14
    1224:	ff 90       	pop	r15
    1226:	0f 91       	pop	r16
    1228:	1f 91       	pop	r17
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <__fp_powsodd>:
    1230:	9f 93       	push	r25
    1232:	8f 93       	push	r24
    1234:	7f 93       	push	r23
    1236:	6f 93       	push	r22
    1238:	ff 93       	push	r31
    123a:	ef 93       	push	r30
    123c:	9b 01       	movw	r18, r22
    123e:	ac 01       	movw	r20, r24
    1240:	0e 94 76 08 	call	0x10ec	; 0x10ec <__mulsf3>
    1244:	ef 91       	pop	r30
    1246:	ff 91       	pop	r31
    1248:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <__fp_powser>
    124c:	2f 91       	pop	r18
    124e:	3f 91       	pop	r19
    1250:	4f 91       	pop	r20
    1252:	5f 91       	pop	r21
    1254:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__mulsf3>

00001258 <vfprintf>:
    1258:	a0 e1       	ldi	r26, 0x10	; 16
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e2 e3       	ldi	r30, 0x32	; 50
    125e:	f9 e0       	ldi	r31, 0x09	; 9
    1260:	0c 94 da 0c 	jmp	0x19b4	; 0x19b4 <__prologue_saves__>
    1264:	7c 01       	movw	r14, r24
    1266:	1b 01       	movw	r2, r22
    1268:	6a 01       	movw	r12, r20
    126a:	fc 01       	movw	r30, r24
    126c:	17 82       	std	Z+7, r1	; 0x07
    126e:	16 82       	std	Z+6, r1	; 0x06
    1270:	83 81       	ldd	r24, Z+3	; 0x03
    1272:	81 ff       	sbrs	r24, 1
    1274:	44 c3       	rjmp	.+1672   	; 0x18fe <vfprintf+0x6a6>
    1276:	9e 01       	movw	r18, r28
    1278:	2f 5f       	subi	r18, 0xFF	; 255
    127a:	3f 4f       	sbci	r19, 0xFF	; 255
    127c:	39 01       	movw	r6, r18
    127e:	f7 01       	movw	r30, r14
    1280:	93 81       	ldd	r25, Z+3	; 0x03
    1282:	f1 01       	movw	r30, r2
    1284:	93 fd       	sbrc	r25, 3
    1286:	85 91       	lpm	r24, Z+
    1288:	93 ff       	sbrs	r25, 3
    128a:	81 91       	ld	r24, Z+
    128c:	1f 01       	movw	r2, r30
    128e:	88 23       	and	r24, r24
    1290:	09 f4       	brne	.+2      	; 0x1294 <vfprintf+0x3c>
    1292:	31 c3       	rjmp	.+1634   	; 0x18f6 <vfprintf+0x69e>
    1294:	85 32       	cpi	r24, 0x25	; 37
    1296:	39 f4       	brne	.+14     	; 0x12a6 <vfprintf+0x4e>
    1298:	93 fd       	sbrc	r25, 3
    129a:	85 91       	lpm	r24, Z+
    129c:	93 ff       	sbrs	r25, 3
    129e:	81 91       	ld	r24, Z+
    12a0:	1f 01       	movw	r2, r30
    12a2:	85 32       	cpi	r24, 0x25	; 37
    12a4:	39 f4       	brne	.+14     	; 0x12b4 <vfprintf+0x5c>
    12a6:	b7 01       	movw	r22, r14
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    12ae:	56 01       	movw	r10, r12
    12b0:	65 01       	movw	r12, r10
    12b2:	e5 cf       	rjmp	.-54     	; 0x127e <vfprintf+0x26>
    12b4:	10 e0       	ldi	r17, 0x00	; 0
    12b6:	51 2c       	mov	r5, r1
    12b8:	91 2c       	mov	r9, r1
    12ba:	ff e1       	ldi	r31, 0x1F	; 31
    12bc:	f9 15       	cp	r31, r9
    12be:	d8 f0       	brcs	.+54     	; 0x12f6 <vfprintf+0x9e>
    12c0:	8b 32       	cpi	r24, 0x2B	; 43
    12c2:	79 f0       	breq	.+30     	; 0x12e2 <vfprintf+0x8a>
    12c4:	38 f4       	brcc	.+14     	; 0x12d4 <vfprintf+0x7c>
    12c6:	80 32       	cpi	r24, 0x20	; 32
    12c8:	79 f0       	breq	.+30     	; 0x12e8 <vfprintf+0x90>
    12ca:	83 32       	cpi	r24, 0x23	; 35
    12cc:	a1 f4       	brne	.+40     	; 0x12f6 <vfprintf+0x9e>
    12ce:	f9 2d       	mov	r31, r9
    12d0:	f0 61       	ori	r31, 0x10	; 16
    12d2:	2e c0       	rjmp	.+92     	; 0x1330 <vfprintf+0xd8>
    12d4:	8d 32       	cpi	r24, 0x2D	; 45
    12d6:	61 f0       	breq	.+24     	; 0x12f0 <vfprintf+0x98>
    12d8:	80 33       	cpi	r24, 0x30	; 48
    12da:	69 f4       	brne	.+26     	; 0x12f6 <vfprintf+0x9e>
    12dc:	29 2d       	mov	r18, r9
    12de:	21 60       	ori	r18, 0x01	; 1
    12e0:	2d c0       	rjmp	.+90     	; 0x133c <vfprintf+0xe4>
    12e2:	39 2d       	mov	r19, r9
    12e4:	32 60       	ori	r19, 0x02	; 2
    12e6:	93 2e       	mov	r9, r19
    12e8:	89 2d       	mov	r24, r9
    12ea:	84 60       	ori	r24, 0x04	; 4
    12ec:	98 2e       	mov	r9, r24
    12ee:	2a c0       	rjmp	.+84     	; 0x1344 <vfprintf+0xec>
    12f0:	e9 2d       	mov	r30, r9
    12f2:	e8 60       	ori	r30, 0x08	; 8
    12f4:	15 c0       	rjmp	.+42     	; 0x1320 <vfprintf+0xc8>
    12f6:	97 fc       	sbrc	r9, 7
    12f8:	2d c0       	rjmp	.+90     	; 0x1354 <vfprintf+0xfc>
    12fa:	20 ed       	ldi	r18, 0xD0	; 208
    12fc:	28 0f       	add	r18, r24
    12fe:	2a 30       	cpi	r18, 0x0A	; 10
    1300:	88 f4       	brcc	.+34     	; 0x1324 <vfprintf+0xcc>
    1302:	96 fe       	sbrs	r9, 6
    1304:	06 c0       	rjmp	.+12     	; 0x1312 <vfprintf+0xba>
    1306:	3a e0       	ldi	r19, 0x0A	; 10
    1308:	13 9f       	mul	r17, r19
    130a:	20 0d       	add	r18, r0
    130c:	11 24       	eor	r1, r1
    130e:	12 2f       	mov	r17, r18
    1310:	19 c0       	rjmp	.+50     	; 0x1344 <vfprintf+0xec>
    1312:	8a e0       	ldi	r24, 0x0A	; 10
    1314:	58 9e       	mul	r5, r24
    1316:	20 0d       	add	r18, r0
    1318:	11 24       	eor	r1, r1
    131a:	52 2e       	mov	r5, r18
    131c:	e9 2d       	mov	r30, r9
    131e:	e0 62       	ori	r30, 0x20	; 32
    1320:	9e 2e       	mov	r9, r30
    1322:	10 c0       	rjmp	.+32     	; 0x1344 <vfprintf+0xec>
    1324:	8e 32       	cpi	r24, 0x2E	; 46
    1326:	31 f4       	brne	.+12     	; 0x1334 <vfprintf+0xdc>
    1328:	96 fc       	sbrc	r9, 6
    132a:	e5 c2       	rjmp	.+1482   	; 0x18f6 <vfprintf+0x69e>
    132c:	f9 2d       	mov	r31, r9
    132e:	f0 64       	ori	r31, 0x40	; 64
    1330:	9f 2e       	mov	r9, r31
    1332:	08 c0       	rjmp	.+16     	; 0x1344 <vfprintf+0xec>
    1334:	8c 36       	cpi	r24, 0x6C	; 108
    1336:	21 f4       	brne	.+8      	; 0x1340 <vfprintf+0xe8>
    1338:	29 2d       	mov	r18, r9
    133a:	20 68       	ori	r18, 0x80	; 128
    133c:	92 2e       	mov	r9, r18
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <vfprintf+0xec>
    1340:	88 36       	cpi	r24, 0x68	; 104
    1342:	41 f4       	brne	.+16     	; 0x1354 <vfprintf+0xfc>
    1344:	f1 01       	movw	r30, r2
    1346:	93 fd       	sbrc	r25, 3
    1348:	85 91       	lpm	r24, Z+
    134a:	93 ff       	sbrs	r25, 3
    134c:	81 91       	ld	r24, Z+
    134e:	1f 01       	movw	r2, r30
    1350:	81 11       	cpse	r24, r1
    1352:	b3 cf       	rjmp	.-154    	; 0x12ba <vfprintf+0x62>
    1354:	9b eb       	ldi	r25, 0xBB	; 187
    1356:	98 0f       	add	r25, r24
    1358:	93 30       	cpi	r25, 0x03	; 3
    135a:	20 f4       	brcc	.+8      	; 0x1364 <vfprintf+0x10c>
    135c:	99 2d       	mov	r25, r9
    135e:	90 61       	ori	r25, 0x10	; 16
    1360:	80 5e       	subi	r24, 0xE0	; 224
    1362:	07 c0       	rjmp	.+14     	; 0x1372 <vfprintf+0x11a>
    1364:	9b e9       	ldi	r25, 0x9B	; 155
    1366:	98 0f       	add	r25, r24
    1368:	93 30       	cpi	r25, 0x03	; 3
    136a:	08 f0       	brcs	.+2      	; 0x136e <vfprintf+0x116>
    136c:	66 c1       	rjmp	.+716    	; 0x163a <vfprintf+0x3e2>
    136e:	99 2d       	mov	r25, r9
    1370:	9f 7e       	andi	r25, 0xEF	; 239
    1372:	96 ff       	sbrs	r25, 6
    1374:	16 e0       	ldi	r17, 0x06	; 6
    1376:	9f 73       	andi	r25, 0x3F	; 63
    1378:	99 2e       	mov	r9, r25
    137a:	85 36       	cpi	r24, 0x65	; 101
    137c:	19 f4       	brne	.+6      	; 0x1384 <vfprintf+0x12c>
    137e:	90 64       	ori	r25, 0x40	; 64
    1380:	99 2e       	mov	r9, r25
    1382:	08 c0       	rjmp	.+16     	; 0x1394 <vfprintf+0x13c>
    1384:	86 36       	cpi	r24, 0x66	; 102
    1386:	21 f4       	brne	.+8      	; 0x1390 <vfprintf+0x138>
    1388:	39 2f       	mov	r19, r25
    138a:	30 68       	ori	r19, 0x80	; 128
    138c:	93 2e       	mov	r9, r19
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <vfprintf+0x13c>
    1390:	11 11       	cpse	r17, r1
    1392:	11 50       	subi	r17, 0x01	; 1
    1394:	97 fe       	sbrs	r9, 7
    1396:	07 c0       	rjmp	.+14     	; 0x13a6 <vfprintf+0x14e>
    1398:	1c 33       	cpi	r17, 0x3C	; 60
    139a:	50 f4       	brcc	.+20     	; 0x13b0 <vfprintf+0x158>
    139c:	44 24       	eor	r4, r4
    139e:	43 94       	inc	r4
    13a0:	41 0e       	add	r4, r17
    13a2:	27 e0       	ldi	r18, 0x07	; 7
    13a4:	0b c0       	rjmp	.+22     	; 0x13bc <vfprintf+0x164>
    13a6:	18 30       	cpi	r17, 0x08	; 8
    13a8:	38 f0       	brcs	.+14     	; 0x13b8 <vfprintf+0x160>
    13aa:	27 e0       	ldi	r18, 0x07	; 7
    13ac:	17 e0       	ldi	r17, 0x07	; 7
    13ae:	05 c0       	rjmp	.+10     	; 0x13ba <vfprintf+0x162>
    13b0:	27 e0       	ldi	r18, 0x07	; 7
    13b2:	9c e3       	ldi	r25, 0x3C	; 60
    13b4:	49 2e       	mov	r4, r25
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <vfprintf+0x164>
    13b8:	21 2f       	mov	r18, r17
    13ba:	41 2c       	mov	r4, r1
    13bc:	56 01       	movw	r10, r12
    13be:	84 e0       	ldi	r24, 0x04	; 4
    13c0:	a8 0e       	add	r10, r24
    13c2:	b1 1c       	adc	r11, r1
    13c4:	f6 01       	movw	r30, r12
    13c6:	60 81       	ld	r22, Z
    13c8:	71 81       	ldd	r23, Z+1	; 0x01
    13ca:	82 81       	ldd	r24, Z+2	; 0x02
    13cc:	93 81       	ldd	r25, Z+3	; 0x03
    13ce:	04 2d       	mov	r16, r4
    13d0:	a3 01       	movw	r20, r6
    13d2:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <__ftoa_engine>
    13d6:	6c 01       	movw	r12, r24
    13d8:	f9 81       	ldd	r31, Y+1	; 0x01
    13da:	fc 87       	std	Y+12, r31	; 0x0c
    13dc:	f0 ff       	sbrs	r31, 0
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <vfprintf+0x18c>
    13e0:	f3 ff       	sbrs	r31, 3
    13e2:	06 c0       	rjmp	.+12     	; 0x13f0 <vfprintf+0x198>
    13e4:	91 fc       	sbrc	r9, 1
    13e6:	06 c0       	rjmp	.+12     	; 0x13f4 <vfprintf+0x19c>
    13e8:	92 fe       	sbrs	r9, 2
    13ea:	06 c0       	rjmp	.+12     	; 0x13f8 <vfprintf+0x1a0>
    13ec:	00 e2       	ldi	r16, 0x20	; 32
    13ee:	05 c0       	rjmp	.+10     	; 0x13fa <vfprintf+0x1a2>
    13f0:	0d e2       	ldi	r16, 0x2D	; 45
    13f2:	03 c0       	rjmp	.+6      	; 0x13fa <vfprintf+0x1a2>
    13f4:	0b e2       	ldi	r16, 0x2B	; 43
    13f6:	01 c0       	rjmp	.+2      	; 0x13fa <vfprintf+0x1a2>
    13f8:	00 e0       	ldi	r16, 0x00	; 0
    13fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    13fc:	8c 70       	andi	r24, 0x0C	; 12
    13fe:	19 f0       	breq	.+6      	; 0x1406 <vfprintf+0x1ae>
    1400:	01 11       	cpse	r16, r1
    1402:	5a c2       	rjmp	.+1204   	; 0x18b8 <vfprintf+0x660>
    1404:	9b c2       	rjmp	.+1334   	; 0x193c <vfprintf+0x6e4>
    1406:	97 fe       	sbrs	r9, 7
    1408:	10 c0       	rjmp	.+32     	; 0x142a <vfprintf+0x1d2>
    140a:	4c 0c       	add	r4, r12
    140c:	fc 85       	ldd	r31, Y+12	; 0x0c
    140e:	f4 ff       	sbrs	r31, 4
    1410:	04 c0       	rjmp	.+8      	; 0x141a <vfprintf+0x1c2>
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	81 33       	cpi	r24, 0x31	; 49
    1416:	09 f4       	brne	.+2      	; 0x141a <vfprintf+0x1c2>
    1418:	4a 94       	dec	r4
    141a:	14 14       	cp	r1, r4
    141c:	74 f5       	brge	.+92     	; 0x147a <vfprintf+0x222>
    141e:	28 e0       	ldi	r18, 0x08	; 8
    1420:	24 15       	cp	r18, r4
    1422:	78 f5       	brcc	.+94     	; 0x1482 <vfprintf+0x22a>
    1424:	88 e0       	ldi	r24, 0x08	; 8
    1426:	48 2e       	mov	r4, r24
    1428:	2c c0       	rjmp	.+88     	; 0x1482 <vfprintf+0x22a>
    142a:	96 fc       	sbrc	r9, 6
    142c:	2a c0       	rjmp	.+84     	; 0x1482 <vfprintf+0x22a>
    142e:	81 2f       	mov	r24, r17
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	8c 15       	cp	r24, r12
    1434:	9d 05       	cpc	r25, r13
    1436:	9c f0       	brlt	.+38     	; 0x145e <vfprintf+0x206>
    1438:	3c ef       	ldi	r19, 0xFC	; 252
    143a:	c3 16       	cp	r12, r19
    143c:	3f ef       	ldi	r19, 0xFF	; 255
    143e:	d3 06       	cpc	r13, r19
    1440:	74 f0       	brlt	.+28     	; 0x145e <vfprintf+0x206>
    1442:	89 2d       	mov	r24, r9
    1444:	80 68       	ori	r24, 0x80	; 128
    1446:	98 2e       	mov	r9, r24
    1448:	0a c0       	rjmp	.+20     	; 0x145e <vfprintf+0x206>
    144a:	e2 e0       	ldi	r30, 0x02	; 2
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	ec 0f       	add	r30, r28
    1450:	fd 1f       	adc	r31, r29
    1452:	e1 0f       	add	r30, r17
    1454:	f1 1d       	adc	r31, r1
    1456:	80 81       	ld	r24, Z
    1458:	80 33       	cpi	r24, 0x30	; 48
    145a:	19 f4       	brne	.+6      	; 0x1462 <vfprintf+0x20a>
    145c:	11 50       	subi	r17, 0x01	; 1
    145e:	11 11       	cpse	r17, r1
    1460:	f4 cf       	rjmp	.-24     	; 0x144a <vfprintf+0x1f2>
    1462:	97 fe       	sbrs	r9, 7
    1464:	0e c0       	rjmp	.+28     	; 0x1482 <vfprintf+0x22a>
    1466:	44 24       	eor	r4, r4
    1468:	43 94       	inc	r4
    146a:	41 0e       	add	r4, r17
    146c:	81 2f       	mov	r24, r17
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	c8 16       	cp	r12, r24
    1472:	d9 06       	cpc	r13, r25
    1474:	2c f4       	brge	.+10     	; 0x1480 <vfprintf+0x228>
    1476:	1c 19       	sub	r17, r12
    1478:	04 c0       	rjmp	.+8      	; 0x1482 <vfprintf+0x22a>
    147a:	44 24       	eor	r4, r4
    147c:	43 94       	inc	r4
    147e:	01 c0       	rjmp	.+2      	; 0x1482 <vfprintf+0x22a>
    1480:	10 e0       	ldi	r17, 0x00	; 0
    1482:	97 fe       	sbrs	r9, 7
    1484:	06 c0       	rjmp	.+12     	; 0x1492 <vfprintf+0x23a>
    1486:	1c 14       	cp	r1, r12
    1488:	1d 04       	cpc	r1, r13
    148a:	34 f4       	brge	.+12     	; 0x1498 <vfprintf+0x240>
    148c:	c6 01       	movw	r24, r12
    148e:	01 96       	adiw	r24, 0x01	; 1
    1490:	05 c0       	rjmp	.+10     	; 0x149c <vfprintf+0x244>
    1492:	85 e0       	ldi	r24, 0x05	; 5
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 c0       	rjmp	.+4      	; 0x149c <vfprintf+0x244>
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	01 11       	cpse	r16, r1
    149e:	01 96       	adiw	r24, 0x01	; 1
    14a0:	11 23       	and	r17, r17
    14a2:	31 f0       	breq	.+12     	; 0x14b0 <vfprintf+0x258>
    14a4:	21 2f       	mov	r18, r17
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	2f 5f       	subi	r18, 0xFF	; 255
    14aa:	3f 4f       	sbci	r19, 0xFF	; 255
    14ac:	82 0f       	add	r24, r18
    14ae:	93 1f       	adc	r25, r19
    14b0:	25 2d       	mov	r18, r5
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	82 17       	cp	r24, r18
    14b6:	93 07       	cpc	r25, r19
    14b8:	14 f4       	brge	.+4      	; 0x14be <vfprintf+0x266>
    14ba:	58 1a       	sub	r5, r24
    14bc:	01 c0       	rjmp	.+2      	; 0x14c0 <vfprintf+0x268>
    14be:	51 2c       	mov	r5, r1
    14c0:	89 2d       	mov	r24, r9
    14c2:	89 70       	andi	r24, 0x09	; 9
    14c4:	49 f4       	brne	.+18     	; 0x14d8 <vfprintf+0x280>
    14c6:	55 20       	and	r5, r5
    14c8:	39 f0       	breq	.+14     	; 0x14d8 <vfprintf+0x280>
    14ca:	b7 01       	movw	r22, r14
    14cc:	80 e2       	ldi	r24, 0x20	; 32
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    14d4:	5a 94       	dec	r5
    14d6:	f7 cf       	rjmp	.-18     	; 0x14c6 <vfprintf+0x26e>
    14d8:	00 23       	and	r16, r16
    14da:	29 f0       	breq	.+10     	; 0x14e6 <vfprintf+0x28e>
    14dc:	b7 01       	movw	r22, r14
    14de:	80 2f       	mov	r24, r16
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    14e6:	93 fc       	sbrc	r9, 3
    14e8:	09 c0       	rjmp	.+18     	; 0x14fc <vfprintf+0x2a4>
    14ea:	55 20       	and	r5, r5
    14ec:	39 f0       	breq	.+14     	; 0x14fc <vfprintf+0x2a4>
    14ee:	b7 01       	movw	r22, r14
    14f0:	80 e3       	ldi	r24, 0x30	; 48
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    14f8:	5a 94       	dec	r5
    14fa:	f7 cf       	rjmp	.-18     	; 0x14ea <vfprintf+0x292>
    14fc:	97 fe       	sbrs	r9, 7
    14fe:	4c c0       	rjmp	.+152    	; 0x1598 <vfprintf+0x340>
    1500:	46 01       	movw	r8, r12
    1502:	d7 fe       	sbrs	r13, 7
    1504:	02 c0       	rjmp	.+4      	; 0x150a <vfprintf+0x2b2>
    1506:	81 2c       	mov	r8, r1
    1508:	91 2c       	mov	r9, r1
    150a:	c6 01       	movw	r24, r12
    150c:	88 19       	sub	r24, r8
    150e:	99 09       	sbc	r25, r9
    1510:	f3 01       	movw	r30, r6
    1512:	e8 0f       	add	r30, r24
    1514:	f9 1f       	adc	r31, r25
    1516:	fe 87       	std	Y+14, r31	; 0x0e
    1518:	ed 87       	std	Y+13, r30	; 0x0d
    151a:	96 01       	movw	r18, r12
    151c:	24 19       	sub	r18, r4
    151e:	31 09       	sbc	r19, r1
    1520:	38 8b       	std	Y+16, r19	; 0x10
    1522:	2f 87       	std	Y+15, r18	; 0x0f
    1524:	01 2f       	mov	r16, r17
    1526:	10 e0       	ldi	r17, 0x00	; 0
    1528:	11 95       	neg	r17
    152a:	01 95       	neg	r16
    152c:	11 09       	sbc	r17, r1
    152e:	3f ef       	ldi	r19, 0xFF	; 255
    1530:	83 16       	cp	r8, r19
    1532:	93 06       	cpc	r9, r19
    1534:	29 f4       	brne	.+10     	; 0x1540 <vfprintf+0x2e8>
    1536:	b7 01       	movw	r22, r14
    1538:	8e e2       	ldi	r24, 0x2E	; 46
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    1540:	c8 14       	cp	r12, r8
    1542:	d9 04       	cpc	r13, r9
    1544:	4c f0       	brlt	.+18     	; 0x1558 <vfprintf+0x300>
    1546:	8f 85       	ldd	r24, Y+15	; 0x0f
    1548:	98 89       	ldd	r25, Y+16	; 0x10
    154a:	88 15       	cp	r24, r8
    154c:	99 05       	cpc	r25, r9
    154e:	24 f4       	brge	.+8      	; 0x1558 <vfprintf+0x300>
    1550:	ed 85       	ldd	r30, Y+13	; 0x0d
    1552:	fe 85       	ldd	r31, Y+14	; 0x0e
    1554:	81 81       	ldd	r24, Z+1	; 0x01
    1556:	01 c0       	rjmp	.+2      	; 0x155a <vfprintf+0x302>
    1558:	80 e3       	ldi	r24, 0x30	; 48
    155a:	f1 e0       	ldi	r31, 0x01	; 1
    155c:	8f 1a       	sub	r8, r31
    155e:	91 08       	sbc	r9, r1
    1560:	2d 85       	ldd	r18, Y+13	; 0x0d
    1562:	3e 85       	ldd	r19, Y+14	; 0x0e
    1564:	2f 5f       	subi	r18, 0xFF	; 255
    1566:	3f 4f       	sbci	r19, 0xFF	; 255
    1568:	3e 87       	std	Y+14, r19	; 0x0e
    156a:	2d 87       	std	Y+13, r18	; 0x0d
    156c:	80 16       	cp	r8, r16
    156e:	91 06       	cpc	r9, r17
    1570:	2c f0       	brlt	.+10     	; 0x157c <vfprintf+0x324>
    1572:	b7 01       	movw	r22, r14
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    157a:	d9 cf       	rjmp	.-78     	; 0x152e <vfprintf+0x2d6>
    157c:	c8 14       	cp	r12, r8
    157e:	d9 04       	cpc	r13, r9
    1580:	41 f4       	brne	.+16     	; 0x1592 <vfprintf+0x33a>
    1582:	9a 81       	ldd	r25, Y+2	; 0x02
    1584:	96 33       	cpi	r25, 0x36	; 54
    1586:	20 f4       	brcc	.+8      	; 0x1590 <vfprintf+0x338>
    1588:	95 33       	cpi	r25, 0x35	; 53
    158a:	19 f4       	brne	.+6      	; 0x1592 <vfprintf+0x33a>
    158c:	3c 85       	ldd	r19, Y+12	; 0x0c
    158e:	34 ff       	sbrs	r19, 4
    1590:	81 e3       	ldi	r24, 0x31	; 49
    1592:	b7 01       	movw	r22, r14
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	4e c0       	rjmp	.+156    	; 0x1634 <vfprintf+0x3dc>
    1598:	8a 81       	ldd	r24, Y+2	; 0x02
    159a:	81 33       	cpi	r24, 0x31	; 49
    159c:	19 f0       	breq	.+6      	; 0x15a4 <vfprintf+0x34c>
    159e:	9c 85       	ldd	r25, Y+12	; 0x0c
    15a0:	9f 7e       	andi	r25, 0xEF	; 239
    15a2:	9c 87       	std	Y+12, r25	; 0x0c
    15a4:	b7 01       	movw	r22, r14
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    15ac:	11 11       	cpse	r17, r1
    15ae:	05 c0       	rjmp	.+10     	; 0x15ba <vfprintf+0x362>
    15b0:	94 fc       	sbrc	r9, 4
    15b2:	18 c0       	rjmp	.+48     	; 0x15e4 <vfprintf+0x38c>
    15b4:	85 e6       	ldi	r24, 0x65	; 101
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	17 c0       	rjmp	.+46     	; 0x15e8 <vfprintf+0x390>
    15ba:	b7 01       	movw	r22, r14
    15bc:	8e e2       	ldi	r24, 0x2E	; 46
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    15c4:	1e 5f       	subi	r17, 0xFE	; 254
    15c6:	82 e0       	ldi	r24, 0x02	; 2
    15c8:	01 e0       	ldi	r16, 0x01	; 1
    15ca:	08 0f       	add	r16, r24
    15cc:	f3 01       	movw	r30, r6
    15ce:	e8 0f       	add	r30, r24
    15d0:	f1 1d       	adc	r31, r1
    15d2:	80 81       	ld	r24, Z
    15d4:	b7 01       	movw	r22, r14
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    15dc:	80 2f       	mov	r24, r16
    15de:	01 13       	cpse	r16, r17
    15e0:	f3 cf       	rjmp	.-26     	; 0x15c8 <vfprintf+0x370>
    15e2:	e6 cf       	rjmp	.-52     	; 0x15b0 <vfprintf+0x358>
    15e4:	85 e4       	ldi	r24, 0x45	; 69
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	b7 01       	movw	r22, r14
    15ea:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    15ee:	d7 fc       	sbrc	r13, 7
    15f0:	06 c0       	rjmp	.+12     	; 0x15fe <vfprintf+0x3a6>
    15f2:	c1 14       	cp	r12, r1
    15f4:	d1 04       	cpc	r13, r1
    15f6:	41 f4       	brne	.+16     	; 0x1608 <vfprintf+0x3b0>
    15f8:	ec 85       	ldd	r30, Y+12	; 0x0c
    15fa:	e4 ff       	sbrs	r30, 4
    15fc:	05 c0       	rjmp	.+10     	; 0x1608 <vfprintf+0x3b0>
    15fe:	d1 94       	neg	r13
    1600:	c1 94       	neg	r12
    1602:	d1 08       	sbc	r13, r1
    1604:	8d e2       	ldi	r24, 0x2D	; 45
    1606:	01 c0       	rjmp	.+2      	; 0x160a <vfprintf+0x3b2>
    1608:	8b e2       	ldi	r24, 0x2B	; 43
    160a:	b7 01       	movw	r22, r14
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    1612:	80 e3       	ldi	r24, 0x30	; 48
    1614:	2a e0       	ldi	r18, 0x0A	; 10
    1616:	c2 16       	cp	r12, r18
    1618:	d1 04       	cpc	r13, r1
    161a:	2c f0       	brlt	.+10     	; 0x1626 <vfprintf+0x3ce>
    161c:	8f 5f       	subi	r24, 0xFF	; 255
    161e:	fa e0       	ldi	r31, 0x0A	; 10
    1620:	cf 1a       	sub	r12, r31
    1622:	d1 08       	sbc	r13, r1
    1624:	f7 cf       	rjmp	.-18     	; 0x1614 <vfprintf+0x3bc>
    1626:	b7 01       	movw	r22, r14
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    162e:	b7 01       	movw	r22, r14
    1630:	c6 01       	movw	r24, r12
    1632:	c0 96       	adiw	r24, 0x30	; 48
    1634:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    1638:	54 c1       	rjmp	.+680    	; 0x18e2 <vfprintf+0x68a>
    163a:	83 36       	cpi	r24, 0x63	; 99
    163c:	31 f0       	breq	.+12     	; 0x164a <vfprintf+0x3f2>
    163e:	83 37       	cpi	r24, 0x73	; 115
    1640:	79 f0       	breq	.+30     	; 0x1660 <vfprintf+0x408>
    1642:	83 35       	cpi	r24, 0x53	; 83
    1644:	09 f0       	breq	.+2      	; 0x1648 <vfprintf+0x3f0>
    1646:	56 c0       	rjmp	.+172    	; 0x16f4 <vfprintf+0x49c>
    1648:	20 c0       	rjmp	.+64     	; 0x168a <vfprintf+0x432>
    164a:	56 01       	movw	r10, r12
    164c:	32 e0       	ldi	r19, 0x02	; 2
    164e:	a3 0e       	add	r10, r19
    1650:	b1 1c       	adc	r11, r1
    1652:	f6 01       	movw	r30, r12
    1654:	80 81       	ld	r24, Z
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	01 e0       	ldi	r16, 0x01	; 1
    165a:	10 e0       	ldi	r17, 0x00	; 0
    165c:	63 01       	movw	r12, r6
    165e:	12 c0       	rjmp	.+36     	; 0x1684 <vfprintf+0x42c>
    1660:	56 01       	movw	r10, r12
    1662:	f2 e0       	ldi	r31, 0x02	; 2
    1664:	af 0e       	add	r10, r31
    1666:	b1 1c       	adc	r11, r1
    1668:	f6 01       	movw	r30, r12
    166a:	c0 80       	ld	r12, Z
    166c:	d1 80       	ldd	r13, Z+1	; 0x01
    166e:	96 fe       	sbrs	r9, 6
    1670:	03 c0       	rjmp	.+6      	; 0x1678 <vfprintf+0x420>
    1672:	61 2f       	mov	r22, r17
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	02 c0       	rjmp	.+4      	; 0x167c <vfprintf+0x424>
    1678:	6f ef       	ldi	r22, 0xFF	; 255
    167a:	7f ef       	ldi	r23, 0xFF	; 255
    167c:	c6 01       	movw	r24, r12
    167e:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <strnlen>
    1682:	8c 01       	movw	r16, r24
    1684:	f9 2d       	mov	r31, r9
    1686:	ff 77       	andi	r31, 0x7F	; 127
    1688:	14 c0       	rjmp	.+40     	; 0x16b2 <vfprintf+0x45a>
    168a:	56 01       	movw	r10, r12
    168c:	22 e0       	ldi	r18, 0x02	; 2
    168e:	a2 0e       	add	r10, r18
    1690:	b1 1c       	adc	r11, r1
    1692:	f6 01       	movw	r30, r12
    1694:	c0 80       	ld	r12, Z
    1696:	d1 80       	ldd	r13, Z+1	; 0x01
    1698:	96 fe       	sbrs	r9, 6
    169a:	03 c0       	rjmp	.+6      	; 0x16a2 <vfprintf+0x44a>
    169c:	61 2f       	mov	r22, r17
    169e:	70 e0       	ldi	r23, 0x00	; 0
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <vfprintf+0x44e>
    16a2:	6f ef       	ldi	r22, 0xFF	; 255
    16a4:	7f ef       	ldi	r23, 0xFF	; 255
    16a6:	c6 01       	movw	r24, r12
    16a8:	0e 94 e9 0d 	call	0x1bd2	; 0x1bd2 <strnlen_P>
    16ac:	8c 01       	movw	r16, r24
    16ae:	f9 2d       	mov	r31, r9
    16b0:	f0 68       	ori	r31, 0x80	; 128
    16b2:	9f 2e       	mov	r9, r31
    16b4:	f3 fd       	sbrc	r31, 3
    16b6:	1a c0       	rjmp	.+52     	; 0x16ec <vfprintf+0x494>
    16b8:	85 2d       	mov	r24, r5
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	08 17       	cp	r16, r24
    16be:	19 07       	cpc	r17, r25
    16c0:	a8 f4       	brcc	.+42     	; 0x16ec <vfprintf+0x494>
    16c2:	b7 01       	movw	r22, r14
    16c4:	80 e2       	ldi	r24, 0x20	; 32
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    16cc:	5a 94       	dec	r5
    16ce:	f4 cf       	rjmp	.-24     	; 0x16b8 <vfprintf+0x460>
    16d0:	f6 01       	movw	r30, r12
    16d2:	97 fc       	sbrc	r9, 7
    16d4:	85 91       	lpm	r24, Z+
    16d6:	97 fe       	sbrs	r9, 7
    16d8:	81 91       	ld	r24, Z+
    16da:	6f 01       	movw	r12, r30
    16dc:	b7 01       	movw	r22, r14
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    16e4:	51 10       	cpse	r5, r1
    16e6:	5a 94       	dec	r5
    16e8:	01 50       	subi	r16, 0x01	; 1
    16ea:	11 09       	sbc	r17, r1
    16ec:	01 15       	cp	r16, r1
    16ee:	11 05       	cpc	r17, r1
    16f0:	79 f7       	brne	.-34     	; 0x16d0 <vfprintf+0x478>
    16f2:	f7 c0       	rjmp	.+494    	; 0x18e2 <vfprintf+0x68a>
    16f4:	84 36       	cpi	r24, 0x64	; 100
    16f6:	11 f0       	breq	.+4      	; 0x16fc <vfprintf+0x4a4>
    16f8:	89 36       	cpi	r24, 0x69	; 105
    16fa:	61 f5       	brne	.+88     	; 0x1754 <vfprintf+0x4fc>
    16fc:	56 01       	movw	r10, r12
    16fe:	97 fe       	sbrs	r9, 7
    1700:	09 c0       	rjmp	.+18     	; 0x1714 <vfprintf+0x4bc>
    1702:	24 e0       	ldi	r18, 0x04	; 4
    1704:	a2 0e       	add	r10, r18
    1706:	b1 1c       	adc	r11, r1
    1708:	f6 01       	movw	r30, r12
    170a:	60 81       	ld	r22, Z
    170c:	71 81       	ldd	r23, Z+1	; 0x01
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	93 81       	ldd	r25, Z+3	; 0x03
    1712:	0a c0       	rjmp	.+20     	; 0x1728 <vfprintf+0x4d0>
    1714:	f2 e0       	ldi	r31, 0x02	; 2
    1716:	af 0e       	add	r10, r31
    1718:	b1 1c       	adc	r11, r1
    171a:	f6 01       	movw	r30, r12
    171c:	60 81       	ld	r22, Z
    171e:	71 81       	ldd	r23, Z+1	; 0x01
    1720:	07 2e       	mov	r0, r23
    1722:	00 0c       	add	r0, r0
    1724:	88 0b       	sbc	r24, r24
    1726:	99 0b       	sbc	r25, r25
    1728:	f9 2d       	mov	r31, r9
    172a:	ff 76       	andi	r31, 0x6F	; 111
    172c:	9f 2e       	mov	r9, r31
    172e:	97 ff       	sbrs	r25, 7
    1730:	09 c0       	rjmp	.+18     	; 0x1744 <vfprintf+0x4ec>
    1732:	90 95       	com	r25
    1734:	80 95       	com	r24
    1736:	70 95       	com	r23
    1738:	61 95       	neg	r22
    173a:	7f 4f       	sbci	r23, 0xFF	; 255
    173c:	8f 4f       	sbci	r24, 0xFF	; 255
    173e:	9f 4f       	sbci	r25, 0xFF	; 255
    1740:	f0 68       	ori	r31, 0x80	; 128
    1742:	9f 2e       	mov	r9, r31
    1744:	2a e0       	ldi	r18, 0x0A	; 10
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	a3 01       	movw	r20, r6
    174a:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__ultoa_invert>
    174e:	c8 2e       	mov	r12, r24
    1750:	c6 18       	sub	r12, r6
    1752:	3f c0       	rjmp	.+126    	; 0x17d2 <vfprintf+0x57a>
    1754:	09 2d       	mov	r16, r9
    1756:	85 37       	cpi	r24, 0x75	; 117
    1758:	21 f4       	brne	.+8      	; 0x1762 <vfprintf+0x50a>
    175a:	0f 7e       	andi	r16, 0xEF	; 239
    175c:	2a e0       	ldi	r18, 0x0A	; 10
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	1d c0       	rjmp	.+58     	; 0x179c <vfprintf+0x544>
    1762:	09 7f       	andi	r16, 0xF9	; 249
    1764:	8f 36       	cpi	r24, 0x6F	; 111
    1766:	91 f0       	breq	.+36     	; 0x178c <vfprintf+0x534>
    1768:	18 f4       	brcc	.+6      	; 0x1770 <vfprintf+0x518>
    176a:	88 35       	cpi	r24, 0x58	; 88
    176c:	59 f0       	breq	.+22     	; 0x1784 <vfprintf+0x52c>
    176e:	c3 c0       	rjmp	.+390    	; 0x18f6 <vfprintf+0x69e>
    1770:	80 37       	cpi	r24, 0x70	; 112
    1772:	19 f0       	breq	.+6      	; 0x177a <vfprintf+0x522>
    1774:	88 37       	cpi	r24, 0x78	; 120
    1776:	11 f0       	breq	.+4      	; 0x177c <vfprintf+0x524>
    1778:	be c0       	rjmp	.+380    	; 0x18f6 <vfprintf+0x69e>
    177a:	00 61       	ori	r16, 0x10	; 16
    177c:	04 ff       	sbrs	r16, 4
    177e:	09 c0       	rjmp	.+18     	; 0x1792 <vfprintf+0x53a>
    1780:	04 60       	ori	r16, 0x04	; 4
    1782:	07 c0       	rjmp	.+14     	; 0x1792 <vfprintf+0x53a>
    1784:	94 fe       	sbrs	r9, 4
    1786:	08 c0       	rjmp	.+16     	; 0x1798 <vfprintf+0x540>
    1788:	06 60       	ori	r16, 0x06	; 6
    178a:	06 c0       	rjmp	.+12     	; 0x1798 <vfprintf+0x540>
    178c:	28 e0       	ldi	r18, 0x08	; 8
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	05 c0       	rjmp	.+10     	; 0x179c <vfprintf+0x544>
    1792:	20 e1       	ldi	r18, 0x10	; 16
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	02 c0       	rjmp	.+4      	; 0x179c <vfprintf+0x544>
    1798:	20 e1       	ldi	r18, 0x10	; 16
    179a:	32 e0       	ldi	r19, 0x02	; 2
    179c:	56 01       	movw	r10, r12
    179e:	07 ff       	sbrs	r16, 7
    17a0:	09 c0       	rjmp	.+18     	; 0x17b4 <vfprintf+0x55c>
    17a2:	84 e0       	ldi	r24, 0x04	; 4
    17a4:	a8 0e       	add	r10, r24
    17a6:	b1 1c       	adc	r11, r1
    17a8:	f6 01       	movw	r30, r12
    17aa:	60 81       	ld	r22, Z
    17ac:	71 81       	ldd	r23, Z+1	; 0x01
    17ae:	82 81       	ldd	r24, Z+2	; 0x02
    17b0:	93 81       	ldd	r25, Z+3	; 0x03
    17b2:	08 c0       	rjmp	.+16     	; 0x17c4 <vfprintf+0x56c>
    17b4:	f2 e0       	ldi	r31, 0x02	; 2
    17b6:	af 0e       	add	r10, r31
    17b8:	b1 1c       	adc	r11, r1
    17ba:	f6 01       	movw	r30, r12
    17bc:	60 81       	ld	r22, Z
    17be:	71 81       	ldd	r23, Z+1	; 0x01
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	a3 01       	movw	r20, r6
    17c6:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <__ultoa_invert>
    17ca:	c8 2e       	mov	r12, r24
    17cc:	c6 18       	sub	r12, r6
    17ce:	0f 77       	andi	r16, 0x7F	; 127
    17d0:	90 2e       	mov	r9, r16
    17d2:	96 fe       	sbrs	r9, 6
    17d4:	0b c0       	rjmp	.+22     	; 0x17ec <vfprintf+0x594>
    17d6:	09 2d       	mov	r16, r9
    17d8:	0e 7f       	andi	r16, 0xFE	; 254
    17da:	c1 16       	cp	r12, r17
    17dc:	50 f4       	brcc	.+20     	; 0x17f2 <vfprintf+0x59a>
    17de:	94 fe       	sbrs	r9, 4
    17e0:	0a c0       	rjmp	.+20     	; 0x17f6 <vfprintf+0x59e>
    17e2:	92 fc       	sbrc	r9, 2
    17e4:	08 c0       	rjmp	.+16     	; 0x17f6 <vfprintf+0x59e>
    17e6:	09 2d       	mov	r16, r9
    17e8:	0e 7e       	andi	r16, 0xEE	; 238
    17ea:	05 c0       	rjmp	.+10     	; 0x17f6 <vfprintf+0x59e>
    17ec:	dc 2c       	mov	r13, r12
    17ee:	09 2d       	mov	r16, r9
    17f0:	03 c0       	rjmp	.+6      	; 0x17f8 <vfprintf+0x5a0>
    17f2:	dc 2c       	mov	r13, r12
    17f4:	01 c0       	rjmp	.+2      	; 0x17f8 <vfprintf+0x5a0>
    17f6:	d1 2e       	mov	r13, r17
    17f8:	04 ff       	sbrs	r16, 4
    17fa:	0d c0       	rjmp	.+26     	; 0x1816 <vfprintf+0x5be>
    17fc:	fe 01       	movw	r30, r28
    17fe:	ec 0d       	add	r30, r12
    1800:	f1 1d       	adc	r31, r1
    1802:	80 81       	ld	r24, Z
    1804:	80 33       	cpi	r24, 0x30	; 48
    1806:	11 f4       	brne	.+4      	; 0x180c <vfprintf+0x5b4>
    1808:	09 7e       	andi	r16, 0xE9	; 233
    180a:	09 c0       	rjmp	.+18     	; 0x181e <vfprintf+0x5c6>
    180c:	02 ff       	sbrs	r16, 2
    180e:	06 c0       	rjmp	.+12     	; 0x181c <vfprintf+0x5c4>
    1810:	d3 94       	inc	r13
    1812:	d3 94       	inc	r13
    1814:	04 c0       	rjmp	.+8      	; 0x181e <vfprintf+0x5c6>
    1816:	80 2f       	mov	r24, r16
    1818:	86 78       	andi	r24, 0x86	; 134
    181a:	09 f0       	breq	.+2      	; 0x181e <vfprintf+0x5c6>
    181c:	d3 94       	inc	r13
    181e:	03 fd       	sbrc	r16, 3
    1820:	11 c0       	rjmp	.+34     	; 0x1844 <vfprintf+0x5ec>
    1822:	00 ff       	sbrs	r16, 0
    1824:	06 c0       	rjmp	.+12     	; 0x1832 <vfprintf+0x5da>
    1826:	1c 2d       	mov	r17, r12
    1828:	d5 14       	cp	r13, r5
    182a:	80 f4       	brcc	.+32     	; 0x184c <vfprintf+0x5f4>
    182c:	15 0d       	add	r17, r5
    182e:	1d 19       	sub	r17, r13
    1830:	0d c0       	rjmp	.+26     	; 0x184c <vfprintf+0x5f4>
    1832:	d5 14       	cp	r13, r5
    1834:	58 f4       	brcc	.+22     	; 0x184c <vfprintf+0x5f4>
    1836:	b7 01       	movw	r22, r14
    1838:	80 e2       	ldi	r24, 0x20	; 32
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    1840:	d3 94       	inc	r13
    1842:	f7 cf       	rjmp	.-18     	; 0x1832 <vfprintf+0x5da>
    1844:	d5 14       	cp	r13, r5
    1846:	10 f4       	brcc	.+4      	; 0x184c <vfprintf+0x5f4>
    1848:	5d 18       	sub	r5, r13
    184a:	01 c0       	rjmp	.+2      	; 0x184e <vfprintf+0x5f6>
    184c:	51 2c       	mov	r5, r1
    184e:	04 ff       	sbrs	r16, 4
    1850:	10 c0       	rjmp	.+32     	; 0x1872 <vfprintf+0x61a>
    1852:	b7 01       	movw	r22, r14
    1854:	80 e3       	ldi	r24, 0x30	; 48
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    185c:	02 ff       	sbrs	r16, 2
    185e:	17 c0       	rjmp	.+46     	; 0x188e <vfprintf+0x636>
    1860:	01 fd       	sbrc	r16, 1
    1862:	03 c0       	rjmp	.+6      	; 0x186a <vfprintf+0x612>
    1864:	88 e7       	ldi	r24, 0x78	; 120
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 c0       	rjmp	.+4      	; 0x186e <vfprintf+0x616>
    186a:	88 e5       	ldi	r24, 0x58	; 88
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	b7 01       	movw	r22, r14
    1870:	0c c0       	rjmp	.+24     	; 0x188a <vfprintf+0x632>
    1872:	80 2f       	mov	r24, r16
    1874:	86 78       	andi	r24, 0x86	; 134
    1876:	59 f0       	breq	.+22     	; 0x188e <vfprintf+0x636>
    1878:	01 ff       	sbrs	r16, 1
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <vfprintf+0x628>
    187c:	8b e2       	ldi	r24, 0x2B	; 43
    187e:	01 c0       	rjmp	.+2      	; 0x1882 <vfprintf+0x62a>
    1880:	80 e2       	ldi	r24, 0x20	; 32
    1882:	07 fd       	sbrc	r16, 7
    1884:	8d e2       	ldi	r24, 0x2D	; 45
    1886:	b7 01       	movw	r22, r14
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    188e:	c1 16       	cp	r12, r17
    1890:	38 f4       	brcc	.+14     	; 0x18a0 <vfprintf+0x648>
    1892:	b7 01       	movw	r22, r14
    1894:	80 e3       	ldi	r24, 0x30	; 48
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    189c:	11 50       	subi	r17, 0x01	; 1
    189e:	f7 cf       	rjmp	.-18     	; 0x188e <vfprintf+0x636>
    18a0:	ca 94       	dec	r12
    18a2:	f3 01       	movw	r30, r6
    18a4:	ec 0d       	add	r30, r12
    18a6:	f1 1d       	adc	r31, r1
    18a8:	80 81       	ld	r24, Z
    18aa:	b7 01       	movw	r22, r14
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    18b2:	c1 10       	cpse	r12, r1
    18b4:	f5 cf       	rjmp	.-22     	; 0x18a0 <vfprintf+0x648>
    18b6:	15 c0       	rjmp	.+42     	; 0x18e2 <vfprintf+0x68a>
    18b8:	f4 e0       	ldi	r31, 0x04	; 4
    18ba:	f5 15       	cp	r31, r5
    18bc:	60 f5       	brcc	.+88     	; 0x1916 <vfprintf+0x6be>
    18be:	84 e0       	ldi	r24, 0x04	; 4
    18c0:	58 1a       	sub	r5, r24
    18c2:	93 fe       	sbrs	r9, 3
    18c4:	1f c0       	rjmp	.+62     	; 0x1904 <vfprintf+0x6ac>
    18c6:	01 11       	cpse	r16, r1
    18c8:	27 c0       	rjmp	.+78     	; 0x1918 <vfprintf+0x6c0>
    18ca:	2c 85       	ldd	r18, Y+12	; 0x0c
    18cc:	23 ff       	sbrs	r18, 3
    18ce:	2a c0       	rjmp	.+84     	; 0x1924 <vfprintf+0x6cc>
    18d0:	02 ed       	ldi	r16, 0xD2	; 210
    18d2:	10 e0       	ldi	r17, 0x00	; 0
    18d4:	39 2d       	mov	r19, r9
    18d6:	30 71       	andi	r19, 0x10	; 16
    18d8:	93 2e       	mov	r9, r19
    18da:	f8 01       	movw	r30, r16
    18dc:	84 91       	lpm	r24, Z
    18de:	81 11       	cpse	r24, r1
    18e0:	24 c0       	rjmp	.+72     	; 0x192a <vfprintf+0x6d2>
    18e2:	55 20       	and	r5, r5
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <vfprintf+0x690>
    18e6:	e4 cc       	rjmp	.-1592   	; 0x12b0 <vfprintf+0x58>
    18e8:	b7 01       	movw	r22, r14
    18ea:	80 e2       	ldi	r24, 0x20	; 32
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    18f2:	5a 94       	dec	r5
    18f4:	f6 cf       	rjmp	.-20     	; 0x18e2 <vfprintf+0x68a>
    18f6:	f7 01       	movw	r30, r14
    18f8:	86 81       	ldd	r24, Z+6	; 0x06
    18fa:	97 81       	ldd	r25, Z+7	; 0x07
    18fc:	26 c0       	rjmp	.+76     	; 0x194a <vfprintf+0x6f2>
    18fe:	8f ef       	ldi	r24, 0xFF	; 255
    1900:	9f ef       	ldi	r25, 0xFF	; 255
    1902:	23 c0       	rjmp	.+70     	; 0x194a <vfprintf+0x6f2>
    1904:	b7 01       	movw	r22, r14
    1906:	80 e2       	ldi	r24, 0x20	; 32
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    190e:	5a 94       	dec	r5
    1910:	51 10       	cpse	r5, r1
    1912:	f8 cf       	rjmp	.-16     	; 0x1904 <vfprintf+0x6ac>
    1914:	d8 cf       	rjmp	.-80     	; 0x18c6 <vfprintf+0x66e>
    1916:	51 2c       	mov	r5, r1
    1918:	b7 01       	movw	r22, r14
    191a:	80 2f       	mov	r24, r16
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    1922:	d3 cf       	rjmp	.-90     	; 0x18ca <vfprintf+0x672>
    1924:	06 ed       	ldi	r16, 0xD6	; 214
    1926:	10 e0       	ldi	r17, 0x00	; 0
    1928:	d5 cf       	rjmp	.-86     	; 0x18d4 <vfprintf+0x67c>
    192a:	91 10       	cpse	r9, r1
    192c:	80 52       	subi	r24, 0x20	; 32
    192e:	b7 01       	movw	r22, r14
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <fputc>
    1936:	0f 5f       	subi	r16, 0xFF	; 255
    1938:	1f 4f       	sbci	r17, 0xFF	; 255
    193a:	cf cf       	rjmp	.-98     	; 0x18da <vfprintf+0x682>
    193c:	23 e0       	ldi	r18, 0x03	; 3
    193e:	25 15       	cp	r18, r5
    1940:	10 f4       	brcc	.+4      	; 0x1946 <vfprintf+0x6ee>
    1942:	83 e0       	ldi	r24, 0x03	; 3
    1944:	bd cf       	rjmp	.-134    	; 0x18c0 <vfprintf+0x668>
    1946:	51 2c       	mov	r5, r1
    1948:	c0 cf       	rjmp	.-128    	; 0x18ca <vfprintf+0x672>
    194a:	60 96       	adiw	r28, 0x10	; 16
    194c:	e2 e1       	ldi	r30, 0x12	; 18
    194e:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <__epilogue_restores__>

00001952 <__udivmodsi4>:
    1952:	a1 e2       	ldi	r26, 0x21	; 33
    1954:	1a 2e       	mov	r1, r26
    1956:	aa 1b       	sub	r26, r26
    1958:	bb 1b       	sub	r27, r27
    195a:	fd 01       	movw	r30, r26
    195c:	0d c0       	rjmp	.+26     	; 0x1978 <__udivmodsi4_ep>

0000195e <__udivmodsi4_loop>:
    195e:	aa 1f       	adc	r26, r26
    1960:	bb 1f       	adc	r27, r27
    1962:	ee 1f       	adc	r30, r30
    1964:	ff 1f       	adc	r31, r31
    1966:	a2 17       	cp	r26, r18
    1968:	b3 07       	cpc	r27, r19
    196a:	e4 07       	cpc	r30, r20
    196c:	f5 07       	cpc	r31, r21
    196e:	20 f0       	brcs	.+8      	; 0x1978 <__udivmodsi4_ep>
    1970:	a2 1b       	sub	r26, r18
    1972:	b3 0b       	sbc	r27, r19
    1974:	e4 0b       	sbc	r30, r20
    1976:	f5 0b       	sbc	r31, r21

00001978 <__udivmodsi4_ep>:
    1978:	66 1f       	adc	r22, r22
    197a:	77 1f       	adc	r23, r23
    197c:	88 1f       	adc	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	1a 94       	dec	r1
    1982:	69 f7       	brne	.-38     	; 0x195e <__udivmodsi4_loop>
    1984:	60 95       	com	r22
    1986:	70 95       	com	r23
    1988:	80 95       	com	r24
    198a:	90 95       	com	r25
    198c:	9b 01       	movw	r18, r22
    198e:	ac 01       	movw	r20, r24
    1990:	bd 01       	movw	r22, r26
    1992:	cf 01       	movw	r24, r30
    1994:	08 95       	ret

00001996 <__umulhisi3>:
    1996:	a2 9f       	mul	r26, r18
    1998:	b0 01       	movw	r22, r0
    199a:	b3 9f       	mul	r27, r19
    199c:	c0 01       	movw	r24, r0
    199e:	a3 9f       	mul	r26, r19
    19a0:	70 0d       	add	r23, r0
    19a2:	81 1d       	adc	r24, r1
    19a4:	11 24       	eor	r1, r1
    19a6:	91 1d       	adc	r25, r1
    19a8:	b2 9f       	mul	r27, r18
    19aa:	70 0d       	add	r23, r0
    19ac:	81 1d       	adc	r24, r1
    19ae:	11 24       	eor	r1, r1
    19b0:	91 1d       	adc	r25, r1
    19b2:	08 95       	ret

000019b4 <__prologue_saves__>:
    19b4:	2f 92       	push	r2
    19b6:	3f 92       	push	r3
    19b8:	4f 92       	push	r4
    19ba:	5f 92       	push	r5
    19bc:	6f 92       	push	r6
    19be:	7f 92       	push	r7
    19c0:	8f 92       	push	r8
    19c2:	9f 92       	push	r9
    19c4:	af 92       	push	r10
    19c6:	bf 92       	push	r11
    19c8:	cf 92       	push	r12
    19ca:	df 92       	push	r13
    19cc:	ef 92       	push	r14
    19ce:	ff 92       	push	r15
    19d0:	0f 93       	push	r16
    19d2:	1f 93       	push	r17
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	ca 1b       	sub	r28, r26
    19de:	db 0b       	sbc	r29, r27
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	09 94       	ijmp

000019ec <__epilogue_restores__>:
    19ec:	2a 88       	ldd	r2, Y+18	; 0x12
    19ee:	39 88       	ldd	r3, Y+17	; 0x11
    19f0:	48 88       	ldd	r4, Y+16	; 0x10
    19f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    19f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    19f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    19f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    19fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    19fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    19fe:	b9 84       	ldd	r11, Y+9	; 0x09
    1a00:	c8 84       	ldd	r12, Y+8	; 0x08
    1a02:	df 80       	ldd	r13, Y+7	; 0x07
    1a04:	ee 80       	ldd	r14, Y+6	; 0x06
    1a06:	fd 80       	ldd	r15, Y+5	; 0x05
    1a08:	0c 81       	ldd	r16, Y+4	; 0x04
    1a0a:	1b 81       	ldd	r17, Y+3	; 0x03
    1a0c:	aa 81       	ldd	r26, Y+2	; 0x02
    1a0e:	b9 81       	ldd	r27, Y+1	; 0x01
    1a10:	ce 0f       	add	r28, r30
    1a12:	d1 1d       	adc	r29, r1
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	de bf       	out	0x3e, r29	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	ed 01       	movw	r28, r26
    1a20:	08 95       	ret

00001a22 <__ftoa_engine>:
    1a22:	28 30       	cpi	r18, 0x08	; 8
    1a24:	08 f0       	brcs	.+2      	; 0x1a28 <__ftoa_engine+0x6>
    1a26:	27 e0       	ldi	r18, 0x07	; 7
    1a28:	33 27       	eor	r19, r19
    1a2a:	da 01       	movw	r26, r20
    1a2c:	99 0f       	add	r25, r25
    1a2e:	31 1d       	adc	r19, r1
    1a30:	87 fd       	sbrc	r24, 7
    1a32:	91 60       	ori	r25, 0x01	; 1
    1a34:	00 96       	adiw	r24, 0x00	; 0
    1a36:	61 05       	cpc	r22, r1
    1a38:	71 05       	cpc	r23, r1
    1a3a:	39 f4       	brne	.+14     	; 0x1a4a <__ftoa_engine+0x28>
    1a3c:	32 60       	ori	r19, 0x02	; 2
    1a3e:	2e 5f       	subi	r18, 0xFE	; 254
    1a40:	3d 93       	st	X+, r19
    1a42:	30 e3       	ldi	r19, 0x30	; 48
    1a44:	2a 95       	dec	r18
    1a46:	e1 f7       	brne	.-8      	; 0x1a40 <__ftoa_engine+0x1e>
    1a48:	08 95       	ret
    1a4a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a4c:	30 f0       	brcs	.+12     	; 0x1a5a <__ftoa_engine+0x38>
    1a4e:	80 38       	cpi	r24, 0x80	; 128
    1a50:	71 05       	cpc	r23, r1
    1a52:	61 05       	cpc	r22, r1
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <__ftoa_engine+0x36>
    1a56:	3c 5f       	subi	r19, 0xFC	; 252
    1a58:	3c 5f       	subi	r19, 0xFC	; 252
    1a5a:	3d 93       	st	X+, r19
    1a5c:	91 30       	cpi	r25, 0x01	; 1
    1a5e:	08 f0       	brcs	.+2      	; 0x1a62 <__ftoa_engine+0x40>
    1a60:	80 68       	ori	r24, 0x80	; 128
    1a62:	91 1d       	adc	r25, r1
    1a64:	df 93       	push	r29
    1a66:	cf 93       	push	r28
    1a68:	1f 93       	push	r17
    1a6a:	0f 93       	push	r16
    1a6c:	ff 92       	push	r15
    1a6e:	ef 92       	push	r14
    1a70:	19 2f       	mov	r17, r25
    1a72:	98 7f       	andi	r25, 0xF8	; 248
    1a74:	96 95       	lsr	r25
    1a76:	e9 2f       	mov	r30, r25
    1a78:	96 95       	lsr	r25
    1a7a:	96 95       	lsr	r25
    1a7c:	e9 0f       	add	r30, r25
    1a7e:	ff 27       	eor	r31, r31
    1a80:	ec 5c       	subi	r30, 0xCC	; 204
    1a82:	fe 4f       	sbci	r31, 0xFE	; 254
    1a84:	99 27       	eor	r25, r25
    1a86:	33 27       	eor	r19, r19
    1a88:	ee 24       	eor	r14, r14
    1a8a:	ff 24       	eor	r15, r15
    1a8c:	a7 01       	movw	r20, r14
    1a8e:	e7 01       	movw	r28, r14
    1a90:	05 90       	lpm	r0, Z+
    1a92:	08 94       	sec
    1a94:	07 94       	ror	r0
    1a96:	28 f4       	brcc	.+10     	; 0x1aa2 <__ftoa_engine+0x80>
    1a98:	36 0f       	add	r19, r22
    1a9a:	e7 1e       	adc	r14, r23
    1a9c:	f8 1e       	adc	r15, r24
    1a9e:	49 1f       	adc	r20, r25
    1aa0:	51 1d       	adc	r21, r1
    1aa2:	66 0f       	add	r22, r22
    1aa4:	77 1f       	adc	r23, r23
    1aa6:	88 1f       	adc	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	06 94       	lsr	r0
    1aac:	a1 f7       	brne	.-24     	; 0x1a96 <__ftoa_engine+0x74>
    1aae:	05 90       	lpm	r0, Z+
    1ab0:	07 94       	ror	r0
    1ab2:	28 f4       	brcc	.+10     	; 0x1abe <__ftoa_engine+0x9c>
    1ab4:	e7 0e       	add	r14, r23
    1ab6:	f8 1e       	adc	r15, r24
    1ab8:	49 1f       	adc	r20, r25
    1aba:	56 1f       	adc	r21, r22
    1abc:	c1 1d       	adc	r28, r1
    1abe:	77 0f       	add	r23, r23
    1ac0:	88 1f       	adc	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	66 1f       	adc	r22, r22
    1ac6:	06 94       	lsr	r0
    1ac8:	a1 f7       	brne	.-24     	; 0x1ab2 <__ftoa_engine+0x90>
    1aca:	05 90       	lpm	r0, Z+
    1acc:	07 94       	ror	r0
    1ace:	28 f4       	brcc	.+10     	; 0x1ada <__ftoa_engine+0xb8>
    1ad0:	f8 0e       	add	r15, r24
    1ad2:	49 1f       	adc	r20, r25
    1ad4:	56 1f       	adc	r21, r22
    1ad6:	c7 1f       	adc	r28, r23
    1ad8:	d1 1d       	adc	r29, r1
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	66 1f       	adc	r22, r22
    1ae0:	77 1f       	adc	r23, r23
    1ae2:	06 94       	lsr	r0
    1ae4:	a1 f7       	brne	.-24     	; 0x1ace <__ftoa_engine+0xac>
    1ae6:	05 90       	lpm	r0, Z+
    1ae8:	07 94       	ror	r0
    1aea:	20 f4       	brcc	.+8      	; 0x1af4 <__ftoa_engine+0xd2>
    1aec:	49 0f       	add	r20, r25
    1aee:	56 1f       	adc	r21, r22
    1af0:	c7 1f       	adc	r28, r23
    1af2:	d8 1f       	adc	r29, r24
    1af4:	99 0f       	add	r25, r25
    1af6:	66 1f       	adc	r22, r22
    1af8:	77 1f       	adc	r23, r23
    1afa:	88 1f       	adc	r24, r24
    1afc:	06 94       	lsr	r0
    1afe:	a9 f7       	brne	.-22     	; 0x1aea <__ftoa_engine+0xc8>
    1b00:	84 91       	lpm	r24, Z
    1b02:	10 95       	com	r17
    1b04:	17 70       	andi	r17, 0x07	; 7
    1b06:	41 f0       	breq	.+16     	; 0x1b18 <__ftoa_engine+0xf6>
    1b08:	d6 95       	lsr	r29
    1b0a:	c7 95       	ror	r28
    1b0c:	57 95       	ror	r21
    1b0e:	47 95       	ror	r20
    1b10:	f7 94       	ror	r15
    1b12:	e7 94       	ror	r14
    1b14:	1a 95       	dec	r17
    1b16:	c1 f7       	brne	.-16     	; 0x1b08 <__ftoa_engine+0xe6>
    1b18:	ea ed       	ldi	r30, 0xDA	; 218
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	68 94       	set
    1b1e:	15 90       	lpm	r1, Z+
    1b20:	15 91       	lpm	r17, Z+
    1b22:	35 91       	lpm	r19, Z+
    1b24:	65 91       	lpm	r22, Z+
    1b26:	95 91       	lpm	r25, Z+
    1b28:	05 90       	lpm	r0, Z+
    1b2a:	7f e2       	ldi	r23, 0x2F	; 47
    1b2c:	73 95       	inc	r23
    1b2e:	e1 18       	sub	r14, r1
    1b30:	f1 0a       	sbc	r15, r17
    1b32:	43 0b       	sbc	r20, r19
    1b34:	56 0b       	sbc	r21, r22
    1b36:	c9 0b       	sbc	r28, r25
    1b38:	d0 09       	sbc	r29, r0
    1b3a:	c0 f7       	brcc	.-16     	; 0x1b2c <__ftoa_engine+0x10a>
    1b3c:	e1 0c       	add	r14, r1
    1b3e:	f1 1e       	adc	r15, r17
    1b40:	43 1f       	adc	r20, r19
    1b42:	56 1f       	adc	r21, r22
    1b44:	c9 1f       	adc	r28, r25
    1b46:	d0 1d       	adc	r29, r0
    1b48:	7e f4       	brtc	.+30     	; 0x1b68 <__ftoa_engine+0x146>
    1b4a:	70 33       	cpi	r23, 0x30	; 48
    1b4c:	11 f4       	brne	.+4      	; 0x1b52 <__ftoa_engine+0x130>
    1b4e:	8a 95       	dec	r24
    1b50:	e6 cf       	rjmp	.-52     	; 0x1b1e <__ftoa_engine+0xfc>
    1b52:	e8 94       	clt
    1b54:	01 50       	subi	r16, 0x01	; 1
    1b56:	30 f0       	brcs	.+12     	; 0x1b64 <__ftoa_engine+0x142>
    1b58:	08 0f       	add	r16, r24
    1b5a:	0a f4       	brpl	.+2      	; 0x1b5e <__ftoa_engine+0x13c>
    1b5c:	00 27       	eor	r16, r16
    1b5e:	02 17       	cp	r16, r18
    1b60:	08 f4       	brcc	.+2      	; 0x1b64 <__ftoa_engine+0x142>
    1b62:	20 2f       	mov	r18, r16
    1b64:	23 95       	inc	r18
    1b66:	02 2f       	mov	r16, r18
    1b68:	7a 33       	cpi	r23, 0x3A	; 58
    1b6a:	28 f0       	brcs	.+10     	; 0x1b76 <__ftoa_engine+0x154>
    1b6c:	79 e3       	ldi	r23, 0x39	; 57
    1b6e:	7d 93       	st	X+, r23
    1b70:	2a 95       	dec	r18
    1b72:	e9 f7       	brne	.-6      	; 0x1b6e <__ftoa_engine+0x14c>
    1b74:	10 c0       	rjmp	.+32     	; 0x1b96 <__ftoa_engine+0x174>
    1b76:	7d 93       	st	X+, r23
    1b78:	2a 95       	dec	r18
    1b7a:	89 f6       	brne	.-94     	; 0x1b1e <__ftoa_engine+0xfc>
    1b7c:	06 94       	lsr	r0
    1b7e:	97 95       	ror	r25
    1b80:	67 95       	ror	r22
    1b82:	37 95       	ror	r19
    1b84:	17 95       	ror	r17
    1b86:	17 94       	ror	r1
    1b88:	e1 18       	sub	r14, r1
    1b8a:	f1 0a       	sbc	r15, r17
    1b8c:	43 0b       	sbc	r20, r19
    1b8e:	56 0b       	sbc	r21, r22
    1b90:	c9 0b       	sbc	r28, r25
    1b92:	d0 09       	sbc	r29, r0
    1b94:	98 f0       	brcs	.+38     	; 0x1bbc <__ftoa_engine+0x19a>
    1b96:	23 95       	inc	r18
    1b98:	7e 91       	ld	r23, -X
    1b9a:	73 95       	inc	r23
    1b9c:	7a 33       	cpi	r23, 0x3A	; 58
    1b9e:	08 f0       	brcs	.+2      	; 0x1ba2 <__ftoa_engine+0x180>
    1ba0:	70 e3       	ldi	r23, 0x30	; 48
    1ba2:	7c 93       	st	X, r23
    1ba4:	20 13       	cpse	r18, r16
    1ba6:	b8 f7       	brcc	.-18     	; 0x1b96 <__ftoa_engine+0x174>
    1ba8:	7e 91       	ld	r23, -X
    1baa:	70 61       	ori	r23, 0x10	; 16
    1bac:	7d 93       	st	X+, r23
    1bae:	30 f0       	brcs	.+12     	; 0x1bbc <__ftoa_engine+0x19a>
    1bb0:	83 95       	inc	r24
    1bb2:	71 e3       	ldi	r23, 0x31	; 49
    1bb4:	7d 93       	st	X+, r23
    1bb6:	70 e3       	ldi	r23, 0x30	; 48
    1bb8:	2a 95       	dec	r18
    1bba:	e1 f7       	brne	.-8      	; 0x1bb4 <__ftoa_engine+0x192>
    1bbc:	11 24       	eor	r1, r1
    1bbe:	ef 90       	pop	r14
    1bc0:	ff 90       	pop	r15
    1bc2:	0f 91       	pop	r16
    1bc4:	1f 91       	pop	r17
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	99 27       	eor	r25, r25
    1bcc:	87 fd       	sbrc	r24, 7
    1bce:	90 95       	com	r25
    1bd0:	08 95       	ret

00001bd2 <strnlen_P>:
    1bd2:	fc 01       	movw	r30, r24
    1bd4:	05 90       	lpm	r0, Z+
    1bd6:	61 50       	subi	r22, 0x01	; 1
    1bd8:	70 40       	sbci	r23, 0x00	; 0
    1bda:	01 10       	cpse	r0, r1
    1bdc:	d8 f7       	brcc	.-10     	; 0x1bd4 <strnlen_P+0x2>
    1bde:	80 95       	com	r24
    1be0:	90 95       	com	r25
    1be2:	8e 0f       	add	r24, r30
    1be4:	9f 1f       	adc	r25, r31
    1be6:	08 95       	ret

00001be8 <strnlen>:
    1be8:	fc 01       	movw	r30, r24
    1bea:	61 50       	subi	r22, 0x01	; 1
    1bec:	70 40       	sbci	r23, 0x00	; 0
    1bee:	01 90       	ld	r0, Z+
    1bf0:	01 10       	cpse	r0, r1
    1bf2:	d8 f7       	brcc	.-10     	; 0x1bea <strnlen+0x2>
    1bf4:	80 95       	com	r24
    1bf6:	90 95       	com	r25
    1bf8:	8e 0f       	add	r24, r30
    1bfa:	9f 1f       	adc	r25, r31
    1bfc:	08 95       	ret

00001bfe <fputc>:
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	cf 93       	push	r28
    1c04:	df 93       	push	r29
    1c06:	fb 01       	movw	r30, r22
    1c08:	23 81       	ldd	r18, Z+3	; 0x03
    1c0a:	21 fd       	sbrc	r18, 1
    1c0c:	03 c0       	rjmp	.+6      	; 0x1c14 <fputc+0x16>
    1c0e:	8f ef       	ldi	r24, 0xFF	; 255
    1c10:	9f ef       	ldi	r25, 0xFF	; 255
    1c12:	2c c0       	rjmp	.+88     	; 0x1c6c <fputc+0x6e>
    1c14:	22 ff       	sbrs	r18, 2
    1c16:	16 c0       	rjmp	.+44     	; 0x1c44 <fputc+0x46>
    1c18:	46 81       	ldd	r20, Z+6	; 0x06
    1c1a:	57 81       	ldd	r21, Z+7	; 0x07
    1c1c:	24 81       	ldd	r18, Z+4	; 0x04
    1c1e:	35 81       	ldd	r19, Z+5	; 0x05
    1c20:	42 17       	cp	r20, r18
    1c22:	53 07       	cpc	r21, r19
    1c24:	44 f4       	brge	.+16     	; 0x1c36 <fputc+0x38>
    1c26:	a0 81       	ld	r26, Z
    1c28:	b1 81       	ldd	r27, Z+1	; 0x01
    1c2a:	9d 01       	movw	r18, r26
    1c2c:	2f 5f       	subi	r18, 0xFF	; 255
    1c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c30:	31 83       	std	Z+1, r19	; 0x01
    1c32:	20 83       	st	Z, r18
    1c34:	8c 93       	st	X, r24
    1c36:	26 81       	ldd	r18, Z+6	; 0x06
    1c38:	37 81       	ldd	r19, Z+7	; 0x07
    1c3a:	2f 5f       	subi	r18, 0xFF	; 255
    1c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c3e:	37 83       	std	Z+7, r19	; 0x07
    1c40:	26 83       	std	Z+6, r18	; 0x06
    1c42:	14 c0       	rjmp	.+40     	; 0x1c6c <fputc+0x6e>
    1c44:	8b 01       	movw	r16, r22
    1c46:	ec 01       	movw	r28, r24
    1c48:	fb 01       	movw	r30, r22
    1c4a:	00 84       	ldd	r0, Z+8	; 0x08
    1c4c:	f1 85       	ldd	r31, Z+9	; 0x09
    1c4e:	e0 2d       	mov	r30, r0
    1c50:	09 95       	icall
    1c52:	89 2b       	or	r24, r25
    1c54:	e1 f6       	brne	.-72     	; 0x1c0e <fputc+0x10>
    1c56:	d8 01       	movw	r26, r16
    1c58:	16 96       	adiw	r26, 0x06	; 6
    1c5a:	8d 91       	ld	r24, X+
    1c5c:	9c 91       	ld	r25, X
    1c5e:	17 97       	sbiw	r26, 0x07	; 7
    1c60:	01 96       	adiw	r24, 0x01	; 1
    1c62:	17 96       	adiw	r26, 0x07	; 7
    1c64:	9c 93       	st	X, r25
    1c66:	8e 93       	st	-X, r24
    1c68:	16 97       	sbiw	r26, 0x06	; 6
    1c6a:	ce 01       	movw	r24, r28
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	1f 91       	pop	r17
    1c72:	0f 91       	pop	r16
    1c74:	08 95       	ret

00001c76 <sprintf>:
    1c76:	ae e0       	ldi	r26, 0x0E	; 14
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	e1 e4       	ldi	r30, 0x41	; 65
    1c7c:	fe e0       	ldi	r31, 0x0E	; 14
    1c7e:	0c 94 e8 0c 	jmp	0x19d0	; 0x19d0 <__prologue_saves__+0x1c>
    1c82:	0d 89       	ldd	r16, Y+21	; 0x15
    1c84:	1e 89       	ldd	r17, Y+22	; 0x16
    1c86:	86 e0       	ldi	r24, 0x06	; 6
    1c88:	8c 83       	std	Y+4, r24	; 0x04
    1c8a:	1a 83       	std	Y+2, r17	; 0x02
    1c8c:	09 83       	std	Y+1, r16	; 0x01
    1c8e:	8f ef       	ldi	r24, 0xFF	; 255
    1c90:	9f e7       	ldi	r25, 0x7F	; 127
    1c92:	9e 83       	std	Y+6, r25	; 0x06
    1c94:	8d 83       	std	Y+5, r24	; 0x05
    1c96:	ae 01       	movw	r20, r28
    1c98:	47 5e       	subi	r20, 0xE7	; 231
    1c9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c9c:	6f 89       	ldd	r22, Y+23	; 0x17
    1c9e:	78 8d       	ldd	r23, Y+24	; 0x18
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	01 96       	adiw	r24, 0x01	; 1
    1ca4:	0e 94 2c 09 	call	0x1258	; 0x1258 <vfprintf>
    1ca8:	ef 81       	ldd	r30, Y+7	; 0x07
    1caa:	f8 85       	ldd	r31, Y+8	; 0x08
    1cac:	e0 0f       	add	r30, r16
    1cae:	f1 1f       	adc	r31, r17
    1cb0:	10 82       	st	Z, r1
    1cb2:	2e 96       	adiw	r28, 0x0e	; 14
    1cb4:	e4 e0       	ldi	r30, 0x04	; 4
    1cb6:	0c 94 04 0d 	jmp	0x1a08	; 0x1a08 <__epilogue_restores__+0x1c>

00001cba <__ultoa_invert>:
    1cba:	fa 01       	movw	r30, r20
    1cbc:	aa 27       	eor	r26, r26
    1cbe:	28 30       	cpi	r18, 0x08	; 8
    1cc0:	51 f1       	breq	.+84     	; 0x1d16 <__ultoa_invert+0x5c>
    1cc2:	20 31       	cpi	r18, 0x10	; 16
    1cc4:	81 f1       	breq	.+96     	; 0x1d26 <__ultoa_invert+0x6c>
    1cc6:	e8 94       	clt
    1cc8:	6f 93       	push	r22
    1cca:	6e 7f       	andi	r22, 0xFE	; 254
    1ccc:	6e 5f       	subi	r22, 0xFE	; 254
    1cce:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd0:	8f 4f       	sbci	r24, 0xFF	; 255
    1cd2:	9f 4f       	sbci	r25, 0xFF	; 255
    1cd4:	af 4f       	sbci	r26, 0xFF	; 255
    1cd6:	b1 e0       	ldi	r27, 0x01	; 1
    1cd8:	3e d0       	rcall	.+124    	; 0x1d56 <__ultoa_invert+0x9c>
    1cda:	b4 e0       	ldi	r27, 0x04	; 4
    1cdc:	3c d0       	rcall	.+120    	; 0x1d56 <__ultoa_invert+0x9c>
    1cde:	67 0f       	add	r22, r23
    1ce0:	78 1f       	adc	r23, r24
    1ce2:	89 1f       	adc	r24, r25
    1ce4:	9a 1f       	adc	r25, r26
    1ce6:	a1 1d       	adc	r26, r1
    1ce8:	68 0f       	add	r22, r24
    1cea:	79 1f       	adc	r23, r25
    1cec:	8a 1f       	adc	r24, r26
    1cee:	91 1d       	adc	r25, r1
    1cf0:	a1 1d       	adc	r26, r1
    1cf2:	6a 0f       	add	r22, r26
    1cf4:	71 1d       	adc	r23, r1
    1cf6:	81 1d       	adc	r24, r1
    1cf8:	91 1d       	adc	r25, r1
    1cfa:	a1 1d       	adc	r26, r1
    1cfc:	20 d0       	rcall	.+64     	; 0x1d3e <__ultoa_invert+0x84>
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <__ultoa_invert+0x48>
    1d00:	68 94       	set
    1d02:	3f 91       	pop	r19
    1d04:	2a e0       	ldi	r18, 0x0A	; 10
    1d06:	26 9f       	mul	r18, r22
    1d08:	11 24       	eor	r1, r1
    1d0a:	30 19       	sub	r19, r0
    1d0c:	30 5d       	subi	r19, 0xD0	; 208
    1d0e:	31 93       	st	Z+, r19
    1d10:	de f6       	brtc	.-74     	; 0x1cc8 <__ultoa_invert+0xe>
    1d12:	cf 01       	movw	r24, r30
    1d14:	08 95       	ret
    1d16:	46 2f       	mov	r20, r22
    1d18:	47 70       	andi	r20, 0x07	; 7
    1d1a:	40 5d       	subi	r20, 0xD0	; 208
    1d1c:	41 93       	st	Z+, r20
    1d1e:	b3 e0       	ldi	r27, 0x03	; 3
    1d20:	0f d0       	rcall	.+30     	; 0x1d40 <__ultoa_invert+0x86>
    1d22:	c9 f7       	brne	.-14     	; 0x1d16 <__ultoa_invert+0x5c>
    1d24:	f6 cf       	rjmp	.-20     	; 0x1d12 <__ultoa_invert+0x58>
    1d26:	46 2f       	mov	r20, r22
    1d28:	4f 70       	andi	r20, 0x0F	; 15
    1d2a:	40 5d       	subi	r20, 0xD0	; 208
    1d2c:	4a 33       	cpi	r20, 0x3A	; 58
    1d2e:	18 f0       	brcs	.+6      	; 0x1d36 <__ultoa_invert+0x7c>
    1d30:	49 5d       	subi	r20, 0xD9	; 217
    1d32:	31 fd       	sbrc	r19, 1
    1d34:	40 52       	subi	r20, 0x20	; 32
    1d36:	41 93       	st	Z+, r20
    1d38:	02 d0       	rcall	.+4      	; 0x1d3e <__ultoa_invert+0x84>
    1d3a:	a9 f7       	brne	.-22     	; 0x1d26 <__ultoa_invert+0x6c>
    1d3c:	ea cf       	rjmp	.-44     	; 0x1d12 <__ultoa_invert+0x58>
    1d3e:	b4 e0       	ldi	r27, 0x04	; 4
    1d40:	a6 95       	lsr	r26
    1d42:	97 95       	ror	r25
    1d44:	87 95       	ror	r24
    1d46:	77 95       	ror	r23
    1d48:	67 95       	ror	r22
    1d4a:	ba 95       	dec	r27
    1d4c:	c9 f7       	brne	.-14     	; 0x1d40 <__ultoa_invert+0x86>
    1d4e:	00 97       	sbiw	r24, 0x00	; 0
    1d50:	61 05       	cpc	r22, r1
    1d52:	71 05       	cpc	r23, r1
    1d54:	08 95       	ret
    1d56:	9b 01       	movw	r18, r22
    1d58:	ac 01       	movw	r20, r24
    1d5a:	0a 2e       	mov	r0, r26
    1d5c:	06 94       	lsr	r0
    1d5e:	57 95       	ror	r21
    1d60:	47 95       	ror	r20
    1d62:	37 95       	ror	r19
    1d64:	27 95       	ror	r18
    1d66:	ba 95       	dec	r27
    1d68:	c9 f7       	brne	.-14     	; 0x1d5c <__ultoa_invert+0xa2>
    1d6a:	62 0f       	add	r22, r18
    1d6c:	73 1f       	adc	r23, r19
    1d6e:	84 1f       	adc	r24, r20
    1d70:	95 1f       	adc	r25, r21
    1d72:	a0 1d       	adc	r26, r0
    1d74:	08 95       	ret

00001d76 <_exit>:
    1d76:	f8 94       	cli

00001d78 <__stop_program>:
    1d78:	ff cf       	rjmp	.-2      	; 0x1d78 <__stop_program>
