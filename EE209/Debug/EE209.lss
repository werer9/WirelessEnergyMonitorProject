
EE209.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000014f6  0000158a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002a  00800130  00800130  000015ba  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001618  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00001658  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ab3  00000000  00000000  00001830  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e11  00000000  00000000  000032e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c34  00000000  00000000  000040f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000478  00000000  00000000  00004d28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000848  00000000  00000000  000051a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bce  00000000  00000000  000059e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000065b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
       4:	0c 94 c0 02 	jmp	0x580	; 0x580 <__vector_1>
       8:	0c 94 e5 02 	jmp	0x5ca	; 0x5ca <__vector_2>
       c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      34:	0c 94 d7 03 	jmp	0x7ae	; 0x7ae <__vector_13>
      38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__addsf3x+0x3a>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
      86:	11 24       	eor	r1, r1
      88:	1f be       	out	0x3f, r1	; 63
      8a:	cf ef       	ldi	r28, 0xFF	; 255
      8c:	d8 e0       	ldi	r29, 0x08	; 8
      8e:	de bf       	out	0x3e, r29	; 62
      90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
      92:	11 e0       	ldi	r17, 0x01	; 1
      94:	a0 e0       	ldi	r26, 0x00	; 0
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	e6 ef       	ldi	r30, 0xF6	; 246
      9a:	f4 e1       	ldi	r31, 0x14	; 20
      9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
      9e:	05 90       	lpm	r0, Z+
      a0:	0d 92       	st	X+, r0
      a2:	a0 33       	cpi	r26, 0x30	; 48
      a4:	b1 07       	cpc	r27, r17
      a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
      a8:	21 e0       	ldi	r18, 0x01	; 1
      aa:	a0 e3       	ldi	r26, 0x30	; 48
      ac:	b1 e0       	ldi	r27, 0x01	; 1
      ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
      b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
      b2:	aa 35       	cpi	r26, 0x5A	; 90
      b4:	b2 07       	cpc	r27, r18
      b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
      b8:	0e 94 92 04 	call	0x924	; 0x924 <main>
      bc:	0c 94 79 0a 	jmp	0x14f2	; 0x14f2 <_exit>

000000c0 <__bad_interrupt>:
      c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <read_adc_mv>:


uint16_t read_adc_mv(uint8_t channel)
{
	// disable interrupts during conversion
	cli();
      c4:	f8 94       	cli
	// clear ADMUX
	ADMUX &= 0xF0;
      c6:	ec e7       	ldi	r30, 0x7C	; 124
      c8:	f0 e0       	ldi	r31, 0x00	; 0
      ca:	90 81       	ld	r25, Z
      cc:	90 7f       	andi	r25, 0xF0	; 240
      ce:	90 83       	st	Z, r25
	// set least significant 4 bits to channel
	ADMUX |= channel;
      d0:	90 81       	ld	r25, Z
      d2:	89 2b       	or	r24, r25
      d4:	80 83       	st	Z, r24
	// start conversion
	ADCSRA |= (1<<ADSC);
      d6:	ea e7       	ldi	r30, 0x7A	; 122
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	80 64       	ori	r24, 0x40	; 64
      de:	80 83       	st	Z, r24
	// wait until conversion is finished
	while (ADCSRA & (1<<ADSC));
      e0:	80 81       	ld	r24, Z
      e2:	86 fd       	sbrc	r24, 6
      e4:	fd cf       	rjmp	.-6      	; 0xe0 <read_adc_mv+0x1c>
	
	// read full 10 bits of ADC registers
	uint16_t adc_output = ADCW;
      e6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      ea:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	// convert reading into millivolts
	uint32_t mv = (uint32_t)adc_output * ((uint32_t)5000/1023);
	
	// enable interrupts when conversion is finished
	sei();
      ee:	78 94       	sei
	return (uint16_t)mv;
      f0:	a0 e0       	ldi	r26, 0x00	; 0
      f2:	b0 e0       	ldi	r27, 0x00	; 0
      f4:	88 0f       	add	r24, r24
      f6:	99 1f       	adc	r25, r25
      f8:	aa 1f       	adc	r26, r26
      fa:	bb 1f       	adc	r27, r27
      fc:	88 0f       	add	r24, r24
      fe:	99 1f       	adc	r25, r25
     100:	aa 1f       	adc	r26, r26
     102:	bb 1f       	adc	r27, r27
}
     104:	08 95       	ret

00000106 <adc_init>:

void adc_init() 
{
	// set ADMUX to read from VCC
	ADMUX |= (1<<REFS0);
     106:	ec e7       	ldi	r30, 0x7C	; 124
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	80 64       	ori	r24, 0x40	; 64
     10e:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     110:	80 81       	ld	r24, Z
     112:	8f 77       	andi	r24, 0x7F	; 127
     114:	80 83       	st	Z, r24
	// clear channel selection
	ADMUX &= 0xF0;
     116:	80 81       	ld	r24, Z
     118:	80 7f       	andi	r24, 0xF0	; 240
     11a:	80 83       	st	Z, r24
	// enable conversions, scale by system clock by 128
	ADCSRA |= (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2) | (1<<ADSC);
     11c:	ea e7       	ldi	r30, 0x7A	; 122
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	87 6c       	ori	r24, 0xC7	; 199
     124:	80 83       	st	Z, r24
     126:	08 95       	ret

00000128 <fsmInit>:
#include "fsm.h"

// initialis fsm with function pointers
void fsmInit(struct functionPointers *fsmFunctions) 
{
    functions = fsmFunctions;
     128:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <functions+0x1>
     12c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <functions>
    state = STATE_INIT;
     130:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <state>
    voltageTriggerIndex = 0;
     134:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
    currentTriggerIndex = 0;
     138:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <currentTriggerIndex>
     13c:	08 95       	ret

0000013e <stateInit>:

// init state
void stateInit()
{
    // init uart
    functions->uart_init(BAUD);
     13e:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     142:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     146:	01 90       	ld	r0, Z+
     148:	f0 81       	ld	r31, Z
     14a:	e0 2d       	mov	r30, r0
     14c:	80 e8       	ldi	r24, 0x80	; 128
     14e:	95 e2       	ldi	r25, 0x25	; 37
     150:	09 95       	icall
    // init io
    functions->io_init();
     152:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     156:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     15a:	02 80       	ldd	r0, Z+2	; 0x02
     15c:	f3 81       	ldd	r31, Z+3	; 0x03
     15e:	e0 2d       	mov	r30, r0
     160:	09 95       	icall
    // init adc
    functions->adc_init();
     162:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     166:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     16a:	04 80       	ldd	r0, Z+4	; 0x04
     16c:	f5 81       	ldd	r31, Z+5	; 0x05
     16e:	e0 2d       	mov	r30, r0
     170:	09 95       	icall
    // init timer
    functions->timer_init();
     172:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     176:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     17a:	06 80       	ldd	r0, Z+6	; 0x06
     17c:	f7 81       	ldd	r31, Z+7	; 0x07
     17e:	e0 2d       	mov	r30, r0
     180:	09 95       	icall
    // init interrupts
    functions->int_init(values.voltageTriggerTimes, values.currentTriggerTimes, SIZE, functions->get_time);
     182:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     186:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     18a:	24 89       	ldd	r18, Z+20	; 0x14
     18c:	35 89       	ldd	r19, Z+21	; 0x15
     18e:	a1 e3       	ldi	r26, 0x31	; 49
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	1a 96       	adiw	r26, 0x0a	; 10
     194:	6d 91       	ld	r22, X+
     196:	7c 91       	ld	r23, X
     198:	1b 97       	sbiw	r26, 0x0b	; 11
     19a:	00 84       	ldd	r0, Z+8	; 0x08
     19c:	f1 85       	ldd	r31, Z+9	; 0x09
     19e:	e0 2d       	mov	r30, r0
     1a0:	42 e3       	ldi	r20, 0x32	; 50
     1a2:	18 96       	adiw	r26, 0x08	; 8
     1a4:	8d 91       	ld	r24, X+
     1a6:	9c 91       	ld	r25, X
     1a8:	19 97       	sbiw	r26, 0x09	; 9
     1aa:	09 95       	icall
    // change state on function completion
    state = STATE_READ_POWER;
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <state>
     1b2:	08 95       	ret

000001b4 <stateReadPower>:
}

// read power state
void stateReadPower()
{
     1b4:	ef 92       	push	r14
     1b6:	ff 92       	push	r15
     1b8:	0f 93       	push	r16
     1ba:	1f 93       	push	r17
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
    // enable interrupts and reset timer
	functions->timer_reset();
     1c0:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     1c4:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     1c8:	06 88       	ldd	r0, Z+22	; 0x16
     1ca:	f7 89       	ldd	r31, Z+23	; 0x17
     1cc:	e0 2d       	mov	r30, r0
     1ce:	09 95       	icall
	functions->timer_init();
     1d0:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     1d4:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     1d8:	06 80       	ldd	r0, Z+6	; 0x06
     1da:	f7 81       	ldd	r31, Z+7	; 0x07
     1dc:	e0 2d       	mov	r30, r0
     1de:	09 95       	icall
    functions->enable_interrupts();
     1e0:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     1e4:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     1e8:	00 88       	ldd	r0, Z+16	; 0x10
     1ea:	f1 89       	ldd	r31, Z+17	; 0x11
     1ec:	e0 2d       	mov	r30, r0
     1ee:	09 95       	icall
     1f0:	c0 e0       	ldi	r28, 0x00	; 0
     1f2:	d0 e0       	ldi	r29, 0x00	; 0
    // loop until voltages and currents full
    for (int i = 0; i < SIZE; i++) {
        values.voltages[i] = functions->read_adc(VOLTAGE_PIN);
     1f4:	01 e3       	ldi	r16, 0x31	; 49
     1f6:	11 e0       	ldi	r17, 0x01	; 1
     1f8:	f8 01       	movw	r30, r16
     1fa:	e0 80       	ld	r14, Z
     1fc:	f1 80       	ldd	r15, Z+1	; 0x01
     1fe:	ec 0e       	add	r14, r28
     200:	fd 1e       	adc	r15, r29
     202:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     206:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     20a:	02 88       	ldd	r0, Z+18	; 0x12
     20c:	f3 89       	ldd	r31, Z+19	; 0x13
     20e:	e0 2d       	mov	r30, r0
     210:	85 e0       	ldi	r24, 0x05	; 5
     212:	09 95       	icall
     214:	f7 01       	movw	r30, r14
     216:	91 83       	std	Z+1, r25	; 0x01
     218:	80 83       	st	Z, r24
        values.voltageTimes[i] = functions->get_time();
     21a:	f8 01       	movw	r30, r16
     21c:	e4 80       	ldd	r14, Z+4	; 0x04
     21e:	f5 80       	ldd	r15, Z+5	; 0x05
     220:	ec 0e       	add	r14, r28
     222:	fd 1e       	adc	r15, r29
     224:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     228:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     22c:	04 88       	ldd	r0, Z+20	; 0x14
     22e:	f5 89       	ldd	r31, Z+21	; 0x15
     230:	e0 2d       	mov	r30, r0
     232:	09 95       	icall
     234:	f7 01       	movw	r30, r14
     236:	91 83       	std	Z+1, r25	; 0x01
     238:	80 83       	st	Z, r24
        values.currents[i] = functions->read_adc(VOLTAGE_PIN);
     23a:	f8 01       	movw	r30, r16
     23c:	e2 80       	ldd	r14, Z+2	; 0x02
     23e:	f3 80       	ldd	r15, Z+3	; 0x03
     240:	ec 0e       	add	r14, r28
     242:	fd 1e       	adc	r15, r29
     244:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     248:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     24c:	02 88       	ldd	r0, Z+18	; 0x12
     24e:	f3 89       	ldd	r31, Z+19	; 0x13
     250:	e0 2d       	mov	r30, r0
     252:	85 e0       	ldi	r24, 0x05	; 5
     254:	09 95       	icall
     256:	f7 01       	movw	r30, r14
     258:	91 83       	std	Z+1, r25	; 0x01
     25a:	80 83       	st	Z, r24
        values.currentTimes[i] = functions->get_time();
     25c:	f8 01       	movw	r30, r16
     25e:	e6 80       	ldd	r14, Z+6	; 0x06
     260:	f7 80       	ldd	r15, Z+7	; 0x07
     262:	ec 0e       	add	r14, r28
     264:	fd 1e       	adc	r15, r29
     266:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     26a:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     26e:	04 88       	ldd	r0, Z+20	; 0x14
     270:	f5 89       	ldd	r31, Z+21	; 0x15
     272:	e0 2d       	mov	r30, r0
     274:	09 95       	icall
     276:	f7 01       	movw	r30, r14
     278:	91 83       	std	Z+1, r25	; 0x01
     27a:	80 83       	st	Z, r24
     27c:	22 96       	adiw	r28, 0x02	; 2
    // enable interrupts and reset timer
	functions->timer_reset();
	functions->timer_init();
    functions->enable_interrupts();
    // loop until voltages and currents full
    for (int i = 0; i < SIZE; i++) {
     27e:	c4 36       	cpi	r28, 0x64	; 100
     280:	d1 05       	cpc	r29, r1
     282:	09 f0       	breq	.+2      	; 0x286 <stateReadPower+0xd2>
     284:	b9 cf       	rjmp	.-142    	; 0x1f8 <stateReadPower+0x44>
        values.currents[i] = functions->read_adc(VOLTAGE_PIN);
        values.currentTimes[i] = functions->get_time();
    }

    // disable interrupts - prevent the trigger array from overflowing
    functions->disable_interrupts();
     286:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     28a:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     28e:	06 84       	ldd	r0, Z+14	; 0x0e
     290:	f7 85       	ldd	r31, Z+15	; 0x0f
     292:	e0 2d       	mov	r30, r0
     294:	09 95       	icall

    // possible change the implementation to avoid interrupts by setting a 
    // volatile boolean with an int
    
    // need to add condition for state change
    state = STATE_CALCULATE_POWER;
     296:	82 e0       	ldi	r24, 0x02	; 2
     298:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <state>
}
     29c:	df 91       	pop	r29
     29e:	cf 91       	pop	r28
     2a0:	1f 91       	pop	r17
     2a2:	0f 91       	pop	r16
     2a4:	ff 90       	pop	r15
     2a6:	ef 90       	pop	r14
     2a8:	08 95       	ret

000002aa <stateCalculatePower>:

// calculate power state
void stateCalculatePower()
{  
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
    // calculate peak, RMS
    values.peakVoltage = functions->find_peak(values.voltages, SIZE);
     2ae:	c1 e3       	ldi	r28, 0x31	; 49
     2b0:	d1 e0       	ldi	r29, 0x01	; 1
     2b2:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     2b6:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     2ba:	00 8c       	ldd	r0, Z+24	; 0x18
     2bc:	f1 8d       	ldd	r31, Z+25	; 0x19
     2be:	e0 2d       	mov	r30, r0
     2c0:	62 e3       	ldi	r22, 0x32	; 50
     2c2:	88 81       	ld	r24, Y
     2c4:	99 81       	ldd	r25, Y+1	; 0x01
     2c6:	09 95       	icall
     2c8:	9e 87       	std	Y+14, r25	; 0x0e
     2ca:	8d 87       	std	Y+13, r24	; 0x0d
    values.peakCurrent = functions->find_peak(values.currents, SIZE);
     2cc:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     2d0:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     2d4:	00 8c       	ldd	r0, Z+24	; 0x18
     2d6:	f1 8d       	ldd	r31, Z+25	; 0x19
     2d8:	e0 2d       	mov	r30, r0
     2da:	62 e3       	ldi	r22, 0x32	; 50
     2dc:	8a 81       	ldd	r24, Y+2	; 0x02
     2de:	9b 81       	ldd	r25, Y+3	; 0x03
     2e0:	09 95       	icall
     2e2:	98 8b       	std	Y+16, r25	; 0x10
     2e4:	8f 87       	std	Y+15, r24	; 0x0f
    values.voltage = functions->calculate_RMS(values.peakVoltage);
     2e6:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     2ea:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     2ee:	02 8c       	ldd	r0, Z+26	; 0x1a
     2f0:	f3 8d       	ldd	r31, Z+27	; 0x1b
     2f2:	e0 2d       	mov	r30, r0
     2f4:	8d 85       	ldd	r24, Y+13	; 0x0d
     2f6:	9e 85       	ldd	r25, Y+14	; 0x0e
     2f8:	09 95       	icall
     2fa:	9a 8b       	std	Y+18, r25	; 0x12
     2fc:	89 8b       	std	Y+17, r24	; 0x11
    values.current = functions->calculate_RMS(values.peakCurrent);
     2fe:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     302:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     306:	02 8c       	ldd	r0, Z+26	; 0x1a
     308:	f3 8d       	ldd	r31, Z+27	; 0x1b
     30a:	e0 2d       	mov	r30, r0
     30c:	8f 85       	ldd	r24, Y+15	; 0x0f
     30e:	98 89       	ldd	r25, Y+16	; 0x10
     310:	09 95       	icall
     312:	9c 8b       	std	Y+20, r25	; 0x14
     314:	8b 8b       	std	Y+19, r24	; 0x13

    // calculate phase of two signals
    values.phase = functions->get_phase_difference(values.voltageTriggerTimes, voltageTriggerIndex,
     316:	4a 85       	ldd	r20, Y+10	; 0x0a
     318:	5b 85       	ldd	r21, Y+11	; 0x0b
     31a:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     31e:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     322:	04 8c       	ldd	r0, Z+28	; 0x1c
     324:	f5 8d       	ldd	r31, Z+29	; 0x1d
     326:	e0 2d       	mov	r30, r0
     328:	20 91 4d 01 	lds	r18, 0x014D	; 0x80014d <currentTriggerIndex>
     32c:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <__data_end>
     330:	88 85       	ldd	r24, Y+8	; 0x08
     332:	99 85       	ldd	r25, Y+9	; 0x09
     334:	09 95       	icall
     336:	9e 8b       	std	Y+22, r25	; 0x16
     338:	8d 8b       	std	Y+21, r24	; 0x15
            values.currentTriggerTimes, currentTriggerIndex);
    
    // place holder phase
    values.pf = functions->calculate_power_factor(values.phase);
     33a:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     33e:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     342:	06 8c       	ldd	r0, Z+30	; 0x1e
     344:	f7 8d       	ldd	r31, Z+31	; 0x1f
     346:	e0 2d       	mov	r30, r0
     348:	09 95       	icall
     34a:	8f 8b       	std	Y+23, r24	; 0x17
    values.power = functions->calculate_average_power(values.voltage, 
     34c:	48 2f       	mov	r20, r24
     34e:	88 0f       	add	r24, r24
     350:	55 0b       	sbc	r21, r21
     352:	6b 89       	ldd	r22, Y+19	; 0x13
     354:	7c 89       	ldd	r23, Y+20	; 0x14
     356:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     35a:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     35e:	00 a0       	ldd	r0, Z+32	; 0x20
     360:	f1 a1       	ldd	r31, Z+33	; 0x21
     362:	e0 2d       	mov	r30, r0
     364:	89 89       	ldd	r24, Y+17	; 0x11
     366:	9a 89       	ldd	r25, Y+18	; 0x12
     368:	09 95       	icall
     36a:	99 8f       	std	Y+25, r25	; 0x19
     36c:	88 8f       	std	Y+24, r24	; 0x18
            values.current, values.pf);
    
    // start iterating over the trigger arrays from zero
    // this effectively resets the array
    voltageTriggerIndex = 0;
     36e:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end>
    currentTriggerIndex = 0;
     372:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <currentTriggerIndex>
    
	// reset interrupt handler
	functions->int_init(values.voltageTriggerTimes, values.currentTriggerTimes, SIZE, functions->get_time);
     376:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     37a:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     37e:	24 89       	ldd	r18, Z+20	; 0x14
     380:	35 89       	ldd	r19, Z+21	; 0x15
     382:	6a 85       	ldd	r22, Y+10	; 0x0a
     384:	7b 85       	ldd	r23, Y+11	; 0x0b
     386:	00 84       	ldd	r0, Z+8	; 0x08
     388:	f1 85       	ldd	r31, Z+9	; 0x09
     38a:	e0 2d       	mov	r30, r0
     38c:	42 e3       	ldi	r20, 0x32	; 50
     38e:	88 85       	ldd	r24, Y+8	; 0x08
     390:	99 85       	ldd	r25, Y+9	; 0x09
     392:	09 95       	icall
    // new state needed to be added for correct transition
    state = STATE_TRANSMIT_POWER;
     394:	83 e0       	ldi	r24, 0x03	; 3
     396:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <state>
}
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	08 95       	ret

000003a0 <stateTransmitPower>:

// transmit the power over UART
void stateTransmitPower()
{
     3a0:	0f 93       	push	r16
     3a2:	1f 93       	push	r17
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
     3ac:	60 97       	sbiw	r28, 0x10	; 16
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	de bf       	out	0x3e, r29	; 62
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	cd bf       	out	0x3d, r28	; 61
    char dataString[16];
    functions->get_uart_string(values.power, dataString, 'P');
     3b8:	01 e3       	ldi	r16, 0x31	; 49
     3ba:	11 e0       	ldi	r17, 0x01	; 1
     3bc:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     3c0:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     3c4:	02 84       	ldd	r0, Z+10	; 0x0a
     3c6:	f3 85       	ldd	r31, Z+11	; 0x0b
     3c8:	e0 2d       	mov	r30, r0
     3ca:	40 e5       	ldi	r20, 0x50	; 80
     3cc:	be 01       	movw	r22, r28
     3ce:	6f 5f       	subi	r22, 0xFF	; 255
     3d0:	7f 4f       	sbci	r23, 0xFF	; 255
     3d2:	d8 01       	movw	r26, r16
     3d4:	58 96       	adiw	r26, 0x18	; 24
     3d6:	8d 91       	ld	r24, X+
     3d8:	9c 91       	ld	r25, X
     3da:	59 97       	sbiw	r26, 0x19	; 25
     3dc:	09 95       	icall
    functions->uart_write(dataString);
     3de:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     3e2:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     3e6:	04 84       	ldd	r0, Z+12	; 0x0c
     3e8:	f5 85       	ldd	r31, Z+13	; 0x0d
     3ea:	e0 2d       	mov	r30, r0
     3ec:	ce 01       	movw	r24, r28
     3ee:	01 96       	adiw	r24, 0x01	; 1
     3f0:	09 95       	icall
	functions->get_uart_string(values.pf, dataString, 'F');
     3f2:	f8 01       	movw	r30, r16
     3f4:	87 89       	ldd	r24, Z+23	; 0x17
     3f6:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     3fa:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     3fe:	02 84       	ldd	r0, Z+10	; 0x0a
     400:	f3 85       	ldd	r31, Z+11	; 0x0b
     402:	e0 2d       	mov	r30, r0
     404:	46 e4       	ldi	r20, 0x46	; 70
     406:	be 01       	movw	r22, r28
     408:	6f 5f       	subi	r22, 0xFF	; 255
     40a:	7f 4f       	sbci	r23, 0xFF	; 255
     40c:	08 2e       	mov	r0, r24
     40e:	00 0c       	add	r0, r0
     410:	99 0b       	sbc	r25, r25
     412:	09 95       	icall
	functions->uart_write(dataString);
     414:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     418:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     41c:	04 84       	ldd	r0, Z+12	; 0x0c
     41e:	f5 85       	ldd	r31, Z+13	; 0x0d
     420:	e0 2d       	mov	r30, r0
     422:	ce 01       	movw	r24, r28
     424:	01 96       	adiw	r24, 0x01	; 1
     426:	09 95       	icall
	functions->get_uart_string(values.voltage, dataString, 'V');
     428:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     42c:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     430:	02 84       	ldd	r0, Z+10	; 0x0a
     432:	f3 85       	ldd	r31, Z+11	; 0x0b
     434:	e0 2d       	mov	r30, r0
     436:	46 e5       	ldi	r20, 0x56	; 86
     438:	be 01       	movw	r22, r28
     43a:	6f 5f       	subi	r22, 0xFF	; 255
     43c:	7f 4f       	sbci	r23, 0xFF	; 255
     43e:	d8 01       	movw	r26, r16
     440:	51 96       	adiw	r26, 0x11	; 17
     442:	8d 91       	ld	r24, X+
     444:	9c 91       	ld	r25, X
     446:	52 97       	sbiw	r26, 0x12	; 18
     448:	09 95       	icall
	functions->uart_write(dataString);
     44a:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     44e:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     452:	04 84       	ldd	r0, Z+12	; 0x0c
     454:	f5 85       	ldd	r31, Z+13	; 0x0d
     456:	e0 2d       	mov	r30, r0
     458:	ce 01       	movw	r24, r28
     45a:	01 96       	adiw	r24, 0x01	; 1
     45c:	09 95       	icall
	functions->get_uart_string(values.current, dataString, 'I');
     45e:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     462:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     466:	02 84       	ldd	r0, Z+10	; 0x0a
     468:	f3 85       	ldd	r31, Z+11	; 0x0b
     46a:	e0 2d       	mov	r30, r0
     46c:	49 e4       	ldi	r20, 0x49	; 73
     46e:	be 01       	movw	r22, r28
     470:	6f 5f       	subi	r22, 0xFF	; 255
     472:	7f 4f       	sbci	r23, 0xFF	; 255
     474:	d8 01       	movw	r26, r16
     476:	53 96       	adiw	r26, 0x13	; 19
     478:	8d 91       	ld	r24, X+
     47a:	9c 91       	ld	r25, X
     47c:	54 97       	sbiw	r26, 0x14	; 20
     47e:	09 95       	icall
	functions->uart_write(dataString);
     480:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <functions>
     484:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <functions+0x1>
     488:	04 84       	ldd	r0, Z+12	; 0x0c
     48a:	f5 85       	ldd	r31, Z+13	; 0x0d
     48c:	e0 2d       	mov	r30, r0
     48e:	ce 01       	movw	r24, r28
     490:	01 96       	adiw	r24, 0x01	; 1
     492:	09 95       	icall

    state = STATE_READ_POWER;
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <state>
     49a:	60 96       	adiw	r28, 0x10	; 16
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	08 95       	ret

000004b0 <run>:
}
// main fsm function
int run()
{ 
    while (1) {
        switch(state) {
     4b0:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <state>
     4b4:	81 30       	cpi	r24, 0x01	; 1
     4b6:	49 f0       	breq	.+18     	; 0x4ca <run+0x1a>
     4b8:	28 f0       	brcs	.+10     	; 0x4c4 <run+0x14>
     4ba:	82 30       	cpi	r24, 0x02	; 2
     4bc:	49 f0       	breq	.+18     	; 0x4d0 <run+0x20>
     4be:	83 30       	cpi	r24, 0x03	; 3
     4c0:	51 f0       	breq	.+20     	; 0x4d6 <run+0x26>
     4c2:	0c c0       	rjmp	.+24     	; 0x4dc <run+0x2c>
            case STATE_INIT:
                // set this to correct ubbr
                stateInit();
     4c4:	0e 94 9f 00 	call	0x13e	; 0x13e <stateInit>
                break;
     4c8:	f3 cf       	rjmp	.-26     	; 0x4b0 <run>
            case STATE_READ_POWER:
                // read data from adc and store it
                stateReadPower();
     4ca:	0e 94 da 00 	call	0x1b4	; 0x1b4 <stateReadPower>
                break;
     4ce:	f0 cf       	rjmp	.-32     	; 0x4b0 <run>
            case STATE_CALCULATE_POWER:
                // use data from adc to calculate power
                stateCalculatePower();
     4d0:	0e 94 55 01 	call	0x2aa	; 0x2aa <stateCalculatePower>
                break;
     4d4:	ed cf       	rjmp	.-38     	; 0x4b0 <run>
            case STATE_TRANSMIT_POWER:
                // send power to bt module with uart
                stateTransmitPower();
     4d6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <stateTransmitPower>
                break;
     4da:	ea cf       	rjmp	.-44     	; 0x4b0 <run>
                break;
        }
    }

    return 0;
}
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	08 95       	ret

000004e2 <io_init>:

void io_init()
{

//Set all PORTC pins as inputs
DDRC = 0x00;
     4e2:	17 b8       	out	0x07, r1	; 7

//Set PORTD Pins 1 and 0 as outputs
DDRD = 0x03;
     4e4:	83 e0       	ldi	r24, 0x03	; 3
     4e6:	8a b9       	out	0x0a, r24	; 10
     4e8:	08 95       	ret

000004ea <enable_interrupts>:
	interrupt_handler(1);
}

void enable_interrupts()
{
	sei();
     4ea:	78 94       	sei
     4ec:	08 95       	ret

000004ee <disable_interrupts>:
}
void disable_interrupts()
{
	cli();
     4ee:	f8 94       	cli
     4f0:	08 95       	ret

000004f2 <interrupt_init>:
}

void interrupt_init(uint16_t *voltageTriggers, uint16_t *currentTriggers, uint8_t size, uint16_t (*get_time)(void))
{
	
	data.voltageTriggers = voltageTriggers;
     4f2:	ef e4       	ldi	r30, 0x4F	; 79
     4f4:	f1 e0       	ldi	r31, 0x01	; 1
     4f6:	91 83       	std	Z+1, r25	; 0x01
     4f8:	80 83       	st	Z, r24
	data.currentTriggers = currentTriggers;
     4fa:	73 83       	std	Z+3, r23	; 0x03
     4fc:	62 83       	std	Z+2, r22	; 0x02
	data.size = size;
     4fe:	44 83       	std	Z+4, r20	; 0x04
	data.get_time = get_time;
     500:	30 87       	std	Z+8, r19	; 0x08
     502:	27 83       	std	Z+7, r18	; 0x07
	data.currentIndex = 0;
     504:	16 82       	std	Z+6, r1	; 0x06
	data.voltageIndex = 0;
     506:	15 82       	std	Z+5, r1	; 0x05
     508:	08 95       	ret

0000050a <interrupt_handler>:
}

void interrupt_handler(uint8_t interruptPin)
{
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
	switch (interruptPin)
     50e:	88 23       	and	r24, r24
     510:	19 f0       	breq	.+6      	; 0x518 <interrupt_handler+0xe>
     512:	81 30       	cpi	r24, 0x01	; 1
     514:	d1 f0       	breq	.+52     	; 0x54a <interrupt_handler+0x40>
     516:	31 c0       	rjmp	.+98     	; 0x57a <interrupt_handler+0x70>
	{
		case 0:
			if (data.currentIndex == data.size)
     518:	ef e4       	ldi	r30, 0x4F	; 79
     51a:	f1 e0       	ldi	r31, 0x01	; 1
     51c:	96 81       	ldd	r25, Z+6	; 0x06
     51e:	84 81       	ldd	r24, Z+4	; 0x04
     520:	98 17       	cp	r25, r24
     522:	59 f1       	breq	.+86     	; 0x57a <interrupt_handler+0x70>
				break;
			data.currentTriggers[data.currentIndex++] = data.get_time();
     524:	22 81       	ldd	r18, Z+2	; 0x02
     526:	33 81       	ldd	r19, Z+3	; 0x03
     528:	86 81       	ldd	r24, Z+6	; 0x06
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	98 0f       	add	r25, r24
     52e:	96 83       	std	Z+6, r25	; 0x06
     530:	c8 2f       	mov	r28, r24
     532:	d0 e0       	ldi	r29, 0x00	; 0
     534:	cc 0f       	add	r28, r28
     536:	dd 1f       	adc	r29, r29
     538:	c2 0f       	add	r28, r18
     53a:	d3 1f       	adc	r29, r19
     53c:	07 80       	ldd	r0, Z+7	; 0x07
     53e:	f0 85       	ldd	r31, Z+8	; 0x08
     540:	e0 2d       	mov	r30, r0
     542:	09 95       	icall
     544:	99 83       	std	Y+1, r25	; 0x01
     546:	88 83       	st	Y, r24
			break;
     548:	18 c0       	rjmp	.+48     	; 0x57a <interrupt_handler+0x70>
		case 1:
			if (data.voltageIndex == data.size)
     54a:	ef e4       	ldi	r30, 0x4F	; 79
     54c:	f1 e0       	ldi	r31, 0x01	; 1
     54e:	95 81       	ldd	r25, Z+5	; 0x05
     550:	84 81       	ldd	r24, Z+4	; 0x04
     552:	98 17       	cp	r25, r24
     554:	91 f0       	breq	.+36     	; 0x57a <interrupt_handler+0x70>
				break;
			data.voltageTriggers[data.voltageIndex++] = data.get_time();
     556:	20 81       	ld	r18, Z
     558:	31 81       	ldd	r19, Z+1	; 0x01
     55a:	85 81       	ldd	r24, Z+5	; 0x05
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	98 0f       	add	r25, r24
     560:	95 83       	std	Z+5, r25	; 0x05
     562:	c8 2f       	mov	r28, r24
     564:	d0 e0       	ldi	r29, 0x00	; 0
     566:	cc 0f       	add	r28, r28
     568:	dd 1f       	adc	r29, r29
     56a:	c2 0f       	add	r28, r18
     56c:	d3 1f       	adc	r29, r19
     56e:	07 80       	ldd	r0, Z+7	; 0x07
     570:	f0 85       	ldd	r31, Z+8	; 0x08
     572:	e0 2d       	mov	r30, r0
     574:	09 95       	icall
     576:	99 83       	std	Y+1, r25	; 0x01
     578:	88 83       	st	Y, r24
			break;
		default:
			break;
	}
     57a:	df 91       	pop	r29
     57c:	cf 91       	pop	r28
     57e:	08 95       	ret

00000580 <__vector_1>:

#include "interrupt.h"

// handle interrupts during cycle
ISR(INT0_vect)
{
     580:	1f 92       	push	r1
     582:	0f 92       	push	r0
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	0f 92       	push	r0
     588:	11 24       	eor	r1, r1
     58a:	2f 93       	push	r18
     58c:	3f 93       	push	r19
     58e:	4f 93       	push	r20
     590:	5f 93       	push	r21
     592:	6f 93       	push	r22
     594:	7f 93       	push	r23
     596:	8f 93       	push	r24
     598:	9f 93       	push	r25
     59a:	af 93       	push	r26
     59c:	bf 93       	push	r27
     59e:	ef 93       	push	r30
     5a0:	ff 93       	push	r31
	interrupt_handler(0);
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	0e 94 85 02 	call	0x50a	; 0x50a <interrupt_handler>
}
     5a8:	ff 91       	pop	r31
     5aa:	ef 91       	pop	r30
     5ac:	bf 91       	pop	r27
     5ae:	af 91       	pop	r26
     5b0:	9f 91       	pop	r25
     5b2:	8f 91       	pop	r24
     5b4:	7f 91       	pop	r23
     5b6:	6f 91       	pop	r22
     5b8:	5f 91       	pop	r21
     5ba:	4f 91       	pop	r20
     5bc:	3f 91       	pop	r19
     5be:	2f 91       	pop	r18
     5c0:	0f 90       	pop	r0
     5c2:	0f be       	out	0x3f, r0	; 63
     5c4:	0f 90       	pop	r0
     5c6:	1f 90       	pop	r1
     5c8:	18 95       	reti

000005ca <__vector_2>:

ISR(INT1_vect)
{
     5ca:	1f 92       	push	r1
     5cc:	0f 92       	push	r0
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	0f 92       	push	r0
     5d2:	11 24       	eor	r1, r1
     5d4:	2f 93       	push	r18
     5d6:	3f 93       	push	r19
     5d8:	4f 93       	push	r20
     5da:	5f 93       	push	r21
     5dc:	6f 93       	push	r22
     5de:	7f 93       	push	r23
     5e0:	8f 93       	push	r24
     5e2:	9f 93       	push	r25
     5e4:	af 93       	push	r26
     5e6:	bf 93       	push	r27
     5e8:	ef 93       	push	r30
     5ea:	ff 93       	push	r31
	interrupt_handler(1);
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	0e 94 85 02 	call	0x50a	; 0x50a <interrupt_handler>
}
     5f2:	ff 91       	pop	r31
     5f4:	ef 91       	pop	r30
     5f6:	bf 91       	pop	r27
     5f8:	af 91       	pop	r26
     5fa:	9f 91       	pop	r25
     5fc:	8f 91       	pop	r24
     5fe:	7f 91       	pop	r23
     600:	6f 91       	pop	r22
     602:	5f 91       	pop	r21
     604:	4f 91       	pop	r20
     606:	3f 91       	pop	r19
     608:	2f 91       	pop	r18
     60a:	0f 90       	pop	r0
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	0f 90       	pop	r0
     610:	1f 90       	pop	r1
     612:	18 95       	reti

00000614 <get_uart_string>:

// convert adc value to real value
uint16_t convertADCValue(uint16_t sample, uint16_t maxVal, uint8_t bits)
{
	return (uint16_t)sample/pow(2,bits) * maxVal;
}
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	fc 01       	movw	r30, r24
     61c:	56 2f       	mov	r21, r22
     61e:	17 2f       	mov	r17, r23
     620:	ec 01       	movw	r28, r24
     622:	d6 95       	lsr	r29
     624:	c7 95       	ror	r28
     626:	d6 95       	lsr	r29
     628:	c7 95       	ror	r28
     62a:	9e 01       	movw	r18, r28
     62c:	ab e7       	ldi	r26, 0x7B	; 123
     62e:	b4 e1       	ldi	r27, 0x14	; 20
     630:	0e 94 80 07 	call	0xf00	; 0xf00 <__umulhisi3>
     634:	96 95       	lsr	r25
     636:	87 95       	ror	r24
     638:	64 e6       	ldi	r22, 0x64	; 100
     63a:	68 9f       	mul	r22, r24
     63c:	90 01       	movw	r18, r0
     63e:	69 9f       	mul	r22, r25
     640:	30 0d       	add	r19, r0
     642:	11 24       	eor	r1, r1
     644:	e2 1b       	sub	r30, r18
     646:	f3 0b       	sbc	r31, r19
     648:	ff 93       	push	r31
     64a:	ef 93       	push	r30
     64c:	9e 01       	movw	r18, r28
     64e:	0e 94 80 07 	call	0xf00	; 0xf00 <__umulhisi3>
     652:	96 95       	lsr	r25
     654:	87 95       	ror	r24
     656:	9f 93       	push	r25
     658:	8f 93       	push	r24
     65a:	1f 92       	push	r1
     65c:	4f 93       	push	r20
     65e:	82 e2       	ldi	r24, 0x22	; 34
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	9f 93       	push	r25
     664:	8f 93       	push	r24
     666:	1f 93       	push	r17
     668:	5f 93       	push	r21
     66a:	0e 94 8f 07 	call	0xf1e	; 0xf1e <sprintf>
     66e:	8d b7       	in	r24, 0x3d	; 61
     670:	9e b7       	in	r25, 0x3e	; 62
     672:	0a 96       	adiw	r24, 0x0a	; 10
     674:	0f b6       	in	r0, 0x3f	; 63
     676:	f8 94       	cli
     678:	9e bf       	out	0x3e, r25	; 62
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	8d bf       	out	0x3d, r24	; 61
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	08 95       	ret

00000686 <findPeak>:
// find peak value of sinusoidal wave
uint16_t findPeak(uint16_t *samples, uint8_t size)
{
	uint16_t peak = 0;
	// iterate over samples and use largest value as peak
	for (uint8_t i = 0; i < size; i++) {
     686:	66 23       	and	r22, r22
     688:	79 f0       	breq	.+30     	; 0x6a8 <findPeak+0x22>
     68a:	e8 2f       	mov	r30, r24
     68c:	f9 2f       	mov	r31, r25
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	40 e0       	ldi	r20, 0x00	; 0
     692:	50 e0       	ldi	r21, 0x00	; 0
		if (samples[i] > peak)
     694:	21 91       	ld	r18, Z+
     696:	31 91       	ld	r19, Z+
     698:	42 17       	cp	r20, r18
     69a:	53 07       	cpc	r21, r19
     69c:	08 f4       	brcc	.+2      	; 0x6a0 <findPeak+0x1a>
     69e:	a9 01       	movw	r20, r18
// find peak value of sinusoidal wave
uint16_t findPeak(uint16_t *samples, uint8_t size)
{
	uint16_t peak = 0;
	// iterate over samples and use largest value as peak
	for (uint8_t i = 0; i < size; i++) {
     6a0:	9f 5f       	subi	r25, 0xFF	; 255
     6a2:	69 13       	cpse	r22, r25
     6a4:	f7 cf       	rjmp	.-18     	; 0x694 <findPeak+0xe>
     6a6:	02 c0       	rjmp	.+4      	; 0x6ac <findPeak+0x26>
}

// find peak value of sinusoidal wave
uint16_t findPeak(uint16_t *samples, uint8_t size)
{
	uint16_t peak = 0;
     6a8:	40 e0       	ldi	r20, 0x00	; 0
     6aa:	50 e0       	ldi	r21, 0x00	; 0
		if (samples[i] > peak)
			peak = samples[i];
	}
	
	return peak;
}
     6ac:	ca 01       	movw	r24, r20
     6ae:	08 95       	ret

000006b0 <calculateRMS>:

// calculate the rms value from peak value of sinusoid
uint16_t calculateRMS(uint16_t peak)
{
	return peak/ROOT_2;
     6b0:	bc 01       	movw	r22, r24
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__floatunsisf>
     6ba:	2e ee       	ldi	r18, 0xEE	; 238
     6bc:	34 e0       	ldi	r19, 0x04	; 4
     6be:	45 eb       	ldi	r20, 0xB5	; 181
     6c0:	5f e3       	ldi	r21, 0x3F	; 63
     6c2:	0e 94 26 05 	call	0xa4c	; 0xa4c <__divsf3>
     6c6:	0e 94 98 05 	call	0xb30	; 0xb30 <__fixunssfsi>
}
     6ca:	cb 01       	movw	r24, r22
     6cc:	08 95       	ret

000006ce <getPhaseDifference>:
		uint16_t *crossTimes2, uint8_t size2) 
{
	uint16_t phaseDifference = 0;
	uint16_t Tz, Tp = 0;

	if (size1 < 3 || size2 < 3)
     6ce:	63 30       	cpi	r22, 0x03	; 3
     6d0:	d8 f1       	brcs	.+118    	; 0x748 <getPhaseDifference+0x7a>
     6d2:	23 30       	cpi	r18, 0x03	; 3
     6d4:	e0 f1       	brcs	.+120    	; 0x74e <getPhaseDifference+0x80>
		return phaseDifference;

	if (crossTimes1[0] > crossTimes2[0]) {
     6d6:	dc 01       	movw	r26, r24
     6d8:	6d 91       	ld	r22, X+
     6da:	7c 91       	ld	r23, X
     6dc:	da 01       	movw	r26, r20
     6de:	2d 91       	ld	r18, X+
     6e0:	3c 91       	ld	r19, X
     6e2:	11 97       	sbiw	r26, 0x01	; 1
     6e4:	26 17       	cp	r18, r22
     6e6:	37 07       	cpc	r19, r23
     6e8:	78 f4       	brcc	.+30     	; 0x708 <getPhaseDifference+0x3a>
		Tz = crossTimes2[0] - crossTimes2[2];
     6ea:	14 96       	adiw	r26, 0x04	; 4
     6ec:	4d 91       	ld	r20, X+
     6ee:	5c 91       	ld	r21, X
     6f0:	15 97       	sbiw	r26, 0x05	; 5
     6f2:	f9 01       	movw	r30, r18
     6f4:	e4 1b       	sub	r30, r20
     6f6:	f5 0b       	sbc	r31, r21
		Tp = crossTimes1[2] - crossTimes2[2];
     6f8:	dc 01       	movw	r26, r24
     6fa:	14 96       	adiw	r26, 0x04	; 4
     6fc:	6d 91       	ld	r22, X+
     6fe:	7c 91       	ld	r23, X
     700:	15 97       	sbiw	r26, 0x05	; 5
     702:	64 1b       	sub	r22, r20
     704:	75 0b       	sbc	r23, r21
     706:	13 c0       	rjmp	.+38     	; 0x72e <getPhaseDifference+0x60>
	} else if (crossTimes1[0] < crossTimes2[0]) {
     708:	62 17       	cp	r22, r18
     70a:	73 07       	cpc	r23, r19
     70c:	70 f4       	brcc	.+28     	; 0x72a <getPhaseDifference+0x5c>
		Tz = crossTimes1[0] - crossTimes1[2];
     70e:	fc 01       	movw	r30, r24
     710:	84 81       	ldd	r24, Z+4	; 0x04
     712:	95 81       	ldd	r25, Z+5	; 0x05
     714:	fb 01       	movw	r30, r22
     716:	e8 1b       	sub	r30, r24
     718:	f9 0b       	sbc	r31, r25
		Tp = crossTimes2[2] - crossTimes1[2];
     71a:	da 01       	movw	r26, r20
     71c:	14 96       	adiw	r26, 0x04	; 4
     71e:	6d 91       	ld	r22, X+
     720:	7c 91       	ld	r23, X
     722:	15 97       	sbiw	r26, 0x05	; 5
     724:	68 1b       	sub	r22, r24
     726:	79 0b       	sbc	r23, r25
     728:	02 c0       	rjmp	.+4      	; 0x72e <getPhaseDifference+0x60>
// since these are more accuratemake
uint16_t getPhaseDifference(uint16_t *crossTimes1, uint8_t size1, 
		uint16_t *crossTimes2, uint8_t size2) 
{
	uint16_t phaseDifference = 0;
	uint16_t Tz, Tp = 0;
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	70 e0       	ldi	r23, 0x00	; 0
	} else if (crossTimes1[0] < crossTimes2[0]) {
		Tz = crossTimes1[0] - crossTimes1[2];
		Tp = crossTimes2[2] - crossTimes1[2];
	}

	phaseDifference = 360 * (Tz/Tp);
     72e:	cf 01       	movw	r24, r30
     730:	0e 94 4a 07 	call	0xe94	; 0xe94 <__udivmodhi4>
     734:	28 e6       	ldi	r18, 0x68	; 104
     736:	31 e0       	ldi	r19, 0x01	; 1
     738:	62 9f       	mul	r22, r18
     73a:	c0 01       	movw	r24, r0
     73c:	63 9f       	mul	r22, r19
     73e:	90 0d       	add	r25, r0
     740:	72 9f       	mul	r23, r18
     742:	90 0d       	add	r25, r0
     744:	11 24       	eor	r1, r1

	return phaseDifference;
     746:	08 95       	ret
{
	uint16_t phaseDifference = 0;
	uint16_t Tz, Tp = 0;

	if (size1 < 3 || size2 < 3)
		return phaseDifference;
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	08 95       	ret
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
	}

	phaseDifference = 360 * (Tz/Tp);

	return phaseDifference;
}
     752:	08 95       	ret

00000754 <calculatePowerFactor>:

// calculate power factor
uint16_t calculatePowerFactor(uint16_t phase) 
{
	phase *= (PI/180);
     754:	bc 01       	movw	r22, r24
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__floatunsisf>
     75e:	2e e2       	ldi	r18, 0x2E	; 46
     760:	3a ef       	ldi	r19, 0xFA	; 250
     762:	4e e8       	ldi	r20, 0x8E	; 142
     764:	5c e3       	ldi	r21, 0x3C	; 60
     766:	0e 94 94 06 	call	0xd28	; 0xd28 <__mulsf3>
	return (cos(phase) * 100);
     76a:	0e 94 98 05 	call	0xb30	; 0xb30 <__fixunssfsi>
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__floatunsisf>
     776:	0e 94 21 05 	call	0xa42	; 0xa42 <cos>
     77a:	20 e0       	ldi	r18, 0x00	; 0
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	48 ec       	ldi	r20, 0xC8	; 200
     780:	52 e4       	ldi	r21, 0x42	; 66
     782:	0e 94 94 06 	call	0xd28	; 0xd28 <__mulsf3>
     786:	0e 94 98 05 	call	0xb30	; 0xb30 <__fixunssfsi>
}
     78a:	cb 01       	movw	r24, r22
     78c:	08 95       	ret

0000078e <calculateAveragePower>:

// calculate average power using standard equation
uint16_t calculateAveragePower(uint16_t Vrms, uint16_t Irms, uint16_t pf)
{
	return Vrms * Irms * pf;
     78e:	64 9f       	mul	r22, r20
     790:	90 01       	movw	r18, r0
     792:	65 9f       	mul	r22, r21
     794:	30 0d       	add	r19, r0
     796:	74 9f       	mul	r23, r20
     798:	30 0d       	add	r19, r0
     79a:	11 24       	eor	r1, r1
}
     79c:	ac 01       	movw	r20, r24
     79e:	24 9f       	mul	r18, r20
     7a0:	c0 01       	movw	r24, r0
     7a2:	25 9f       	mul	r18, r21
     7a4:	90 0d       	add	r25, r0
     7a6:	34 9f       	mul	r19, r20
     7a8:	90 0d       	add	r25, r0
     7aa:	11 24       	eor	r1, r1
     7ac:	08 95       	ret

000007ae <__vector_13>:
}

void resetTimerOverflowCount()
{
	// reset the overflow count
	timerOverFlowCount = 0;
     7ae:	1f 92       	push	r1
     7b0:	0f 92       	push	r0
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	0f 92       	push	r0
     7b6:	11 24       	eor	r1, r1
     7b8:	8f 93       	push	r24
     7ba:	9f 93       	push	r25
     7bc:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <timerOverFlowCount>
     7c0:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <timerOverFlowCount+0x1>
     7c4:	01 96       	adiw	r24, 0x01	; 1
     7c6:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <timerOverFlowCount+0x1>
     7ca:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <timerOverFlowCount>
     7ce:	9f 91       	pop	r25
     7d0:	8f 91       	pop	r24
     7d2:	0f 90       	pop	r0
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	0f 90       	pop	r0
     7d8:	1f 90       	pop	r1
     7da:	18 95       	reti

000007dc <timer_init>:
     7dc:	e1 e8       	ldi	r30, 0x81	; 129
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	80 81       	ld	r24, Z
     7e2:	84 60       	ori	r24, 0x04	; 4
     7e4:	80 83       	st	Z, r24
     7e6:	ef e6       	ldi	r30, 0x6F	; 111
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	80 81       	ld	r24, Z
     7ec:	81 60       	ori	r24, 0x01	; 1
     7ee:	80 83       	st	Z, r24
     7f0:	78 94       	sei
     7f2:	08 95       	ret

000007f4 <resetTimer>:
     7f4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     7f8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     7fc:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <timerOverFlowCount+0x1>
     800:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <timerOverFlowCount>
     804:	08 95       	ret

00000806 <calculateTime>:
     806:	8f 92       	push	r8
     808:	9f 92       	push	r9
     80a:	af 92       	push	r10
     80c:	bf 92       	push	r11
     80e:	cf 92       	push	r12
     810:	df 92       	push	r13
     812:	ef 92       	push	r14
     814:	ff 92       	push	r15
     816:	0f 93       	push	r16
     818:	1f 93       	push	r17
     81a:	cf 93       	push	r28
     81c:	df 93       	push	r29
     81e:	bc 01       	movw	r22, r24
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	34 e2       	ldi	r19, 0x24	; 36
     828:	44 ef       	ldi	r20, 0xF4	; 244
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	0e 94 5e 07 	call	0xebc	; 0xebc <__udivmodsi4>
     830:	ca 01       	movw	r24, r20
     832:	b9 01       	movw	r22, r18
     834:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__floatunsisf>
     838:	6b 01       	movw	r12, r22
     83a:	7c 01       	movw	r14, r24
     83c:	c0 91 84 00 	lds	r28, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     840:	d0 91 85 00 	lds	r29, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     844:	00 91 58 01 	lds	r16, 0x0158	; 0x800158 <timerOverFlowCount>
     848:	10 91 59 01 	lds	r17, 0x0159	; 0x800159 <timerOverFlowCount+0x1>
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	40 e8       	ldi	r20, 0x80	; 128
     852:	57 e4       	ldi	r21, 0x47	; 71
     854:	0e 94 94 06 	call	0xd28	; 0xd28 <__mulsf3>
     858:	4b 01       	movw	r8, r22
     85a:	5c 01       	movw	r10, r24
     85c:	b8 01       	movw	r22, r16
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__floatunsisf>
     866:	9b 01       	movw	r18, r22
     868:	ac 01       	movw	r20, r24
     86a:	c5 01       	movw	r24, r10
     86c:	b4 01       	movw	r22, r8
     86e:	0e 94 94 06 	call	0xd28	; 0xd28 <__mulsf3>
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	48 ec       	ldi	r20, 0xC8	; 200
     878:	52 e4       	ldi	r21, 0x42	; 66
     87a:	0e 94 94 06 	call	0xd28	; 0xd28 <__mulsf3>
     87e:	4b 01       	movw	r8, r22
     880:	5c 01       	movw	r10, r24
     882:	be 01       	movw	r22, r28
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__floatunsisf>
     88c:	a7 01       	movw	r20, r14
     88e:	96 01       	movw	r18, r12
     890:	0e 94 94 06 	call	0xd28	; 0xd28 <__mulsf3>
     894:	9b 01       	movw	r18, r22
     896:	ac 01       	movw	r20, r24
     898:	c5 01       	movw	r24, r10
     89a:	b4 01       	movw	r22, r8
     89c:	0e 94 b5 04 	call	0x96a	; 0x96a <__addsf3>
     8a0:	0e 94 98 05 	call	0xb30	; 0xb30 <__fixunssfsi>
     8a4:	cb 01       	movw	r24, r22
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	1f 91       	pop	r17
     8ac:	0f 91       	pop	r16
     8ae:	ff 90       	pop	r15
     8b0:	ef 90       	pop	r14
     8b2:	df 90       	pop	r13
     8b4:	cf 90       	pop	r12
     8b6:	bf 90       	pop	r11
     8b8:	af 90       	pop	r10
     8ba:	9f 90       	pop	r9
     8bc:	8f 90       	pop	r8
     8be:	08 95       	ret

000008c0 <get_time>:
}

uint16_t get_time()
{
	// returns the current timer count to the function caller
	return calculateTime(TIMER_PRESCALER);
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	0e 94 03 04 	call	0x806	; 0x806 <calculateTime>
     8c8:	08 95       	ret

000008ca <uart_init>:
 */ 
#include "uart.h"

// uart init function
void uart_init(uint16_t ubrr)
{
     8ca:	9c 01       	movw	r18, r24
	// Enable TX and RX
	UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
     8cc:	e1 ec       	ldi	r30, 0xC1	; 193
     8ce:	f0 e0       	ldi	r31, 0x00	; 0
     8d0:	90 81       	ld	r25, Z
     8d2:	98 61       	ori	r25, 0x18	; 24
     8d4:	90 83       	st	Z, r25
	// set character size to 8-bit
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
     8d6:	e2 ec       	ldi	r30, 0xC2	; 194
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	90 81       	ld	r25, Z
     8dc:	96 60       	ori	r25, 0x06	; 6
     8de:	90 83       	st	Z, r25
	UCSR0C &= ~(1<<UPM00);
     8e0:	90 81       	ld	r25, Z
     8e2:	9f 7e       	andi	r25, 0xEF	; 239
     8e4:	90 83       	st	Z, r25
	UCSR0C &= ~(1<<UPM01);
     8e6:	90 81       	ld	r25, Z
     8e8:	9f 7d       	andi	r25, 0xDF	; 223
     8ea:	90 83       	st	Z, r25
	// Set the baud rate
	UBRR0 = ubrr;
     8ec:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     8f0:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     8f4:	08 95       	ret

000008f6 <uart_transmit>:

// uart transmit function
void uart_transmit(uint8_t data)
{
	// wait until transmitter is ready
	while ((1<<UDRE0 & UCSR0A) == 0x00) {;} // do nothing
     8f6:	e0 ec       	ldi	r30, 0xC0	; 192
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	90 81       	ld	r25, Z
     8fc:	95 ff       	sbrs	r25, 5
     8fe:	fd cf       	rjmp	.-6      	; 0x8fa <uart_transmit+0x4>
	// transmit data
	UDR0 = data;
     900:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     904:	08 95       	ret

00000906 <uart_write>:
}

// uart write function
// write multiple characters at once
void uart_write(char *data) 
{
     906:	cf 93       	push	r28
     908:	df 93       	push	r29
     90a:	ec 01       	movw	r28, r24
	int i = 0;
	while (data[i] != '\0') {
     90c:	88 81       	ld	r24, Y
     90e:	88 23       	and	r24, r24
     910:	31 f0       	breq	.+12     	; 0x91e <uart_write+0x18>
     912:	21 96       	adiw	r28, 0x01	; 1
		uart_transmit(data[i]);
     914:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <uart_transmit>
// uart write function
// write multiple characters at once
void uart_write(char *data) 
{
	int i = 0;
	while (data[i] != '\0') {
     918:	89 91       	ld	r24, Y+
     91a:	81 11       	cpse	r24, r1
     91c:	fb cf       	rjmp	.-10     	; 0x914 <uart_write+0xe>
		uart_transmit(data[i]);
		i++;
	}
}
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <main>:

// finite state machines
#include "lib/fsm.h"

int main(void) 
{
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	cd b7       	in	r28, 0x3d	; 61
     92a:	de b7       	in	r29, 0x3e	; 62
     92c:	a2 97       	sbiw	r28, 0x22	; 34
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
	// create function pointer struct
	struct functionPointers funcs = {
     938:	82 e2       	ldi	r24, 0x22	; 34
     93a:	e0 e0       	ldi	r30, 0x00	; 0
     93c:	f1 e0       	ldi	r31, 0x01	; 1
     93e:	de 01       	movw	r26, r28
     940:	11 96       	adiw	r26, 0x01	; 1
     942:	01 90       	ld	r0, Z+
     944:	0d 92       	st	X+, r0
     946:	8a 95       	dec	r24
     948:	e1 f7       	brne	.-8      	; 0x942 <main+0x1e>
		.calculate_average_power = calculateAveragePower,
	};
	
	
	// init fsm by passing structs to it
	fsmInit(&funcs);
     94a:	ce 01       	movw	r24, r28
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	0e 94 94 00 	call	0x128	; 0x128 <fsmInit>
	
	return run();
     952:	0e 94 58 02 	call	0x4b0	; 0x4b0 <run>
}
     956:	a2 96       	adiw	r28, 0x22	; 34
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	f8 94       	cli
     95c:	de bf       	out	0x3e, r29	; 62
     95e:	0f be       	out	0x3f, r0	; 63
     960:	cd bf       	out	0x3d, r28	; 61
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	08 95       	ret

00000968 <__subsf3>:
     968:	50 58       	subi	r21, 0x80	; 128

0000096a <__addsf3>:
     96a:	bb 27       	eor	r27, r27
     96c:	aa 27       	eor	r26, r26
     96e:	0e 94 cc 04 	call	0x998	; 0x998 <__addsf3x>
     972:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__fp_round>
     976:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__fp_pscA>
     97a:	38 f0       	brcs	.+14     	; 0x98a <__addsf3+0x20>
     97c:	0e 94 14 06 	call	0xc28	; 0xc28 <__fp_pscB>
     980:	20 f0       	brcs	.+8      	; 0x98a <__addsf3+0x20>
     982:	39 f4       	brne	.+14     	; 0x992 <__addsf3+0x28>
     984:	9f 3f       	cpi	r25, 0xFF	; 255
     986:	19 f4       	brne	.+6      	; 0x98e <__addsf3+0x24>
     988:	26 f4       	brtc	.+8      	; 0x992 <__addsf3+0x28>
     98a:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_nan>
     98e:	0e f4       	brtc	.+2      	; 0x992 <__addsf3+0x28>
     990:	e0 95       	com	r30
     992:	e7 fb       	bst	r30, 7
     994:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_inf>

00000998 <__addsf3x>:
     998:	e9 2f       	mov	r30, r25
     99a:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__fp_split3>
     99e:	58 f3       	brcs	.-42     	; 0x976 <__addsf3+0xc>
     9a0:	ba 17       	cp	r27, r26
     9a2:	62 07       	cpc	r22, r18
     9a4:	73 07       	cpc	r23, r19
     9a6:	84 07       	cpc	r24, r20
     9a8:	95 07       	cpc	r25, r21
     9aa:	20 f0       	brcs	.+8      	; 0x9b4 <__addsf3x+0x1c>
     9ac:	79 f4       	brne	.+30     	; 0x9cc <__addsf3x+0x34>
     9ae:	a6 f5       	brtc	.+104    	; 0xa18 <__addsf3x+0x80>
     9b0:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__fp_zero>
     9b4:	0e f4       	brtc	.+2      	; 0x9b8 <__addsf3x+0x20>
     9b6:	e0 95       	com	r30
     9b8:	0b 2e       	mov	r0, r27
     9ba:	ba 2f       	mov	r27, r26
     9bc:	a0 2d       	mov	r26, r0
     9be:	0b 01       	movw	r0, r22
     9c0:	b9 01       	movw	r22, r18
     9c2:	90 01       	movw	r18, r0
     9c4:	0c 01       	movw	r0, r24
     9c6:	ca 01       	movw	r24, r20
     9c8:	a0 01       	movw	r20, r0
     9ca:	11 24       	eor	r1, r1
     9cc:	ff 27       	eor	r31, r31
     9ce:	59 1b       	sub	r21, r25
     9d0:	99 f0       	breq	.+38     	; 0x9f8 <__addsf3x+0x60>
     9d2:	59 3f       	cpi	r21, 0xF9	; 249
     9d4:	50 f4       	brcc	.+20     	; 0x9ea <__addsf3x+0x52>
     9d6:	50 3e       	cpi	r21, 0xE0	; 224
     9d8:	68 f1       	brcs	.+90     	; 0xa34 <__addsf3x+0x9c>
     9da:	1a 16       	cp	r1, r26
     9dc:	f0 40       	sbci	r31, 0x00	; 0
     9de:	a2 2f       	mov	r26, r18
     9e0:	23 2f       	mov	r18, r19
     9e2:	34 2f       	mov	r19, r20
     9e4:	44 27       	eor	r20, r20
     9e6:	58 5f       	subi	r21, 0xF8	; 248
     9e8:	f3 cf       	rjmp	.-26     	; 0x9d0 <__addsf3x+0x38>
     9ea:	46 95       	lsr	r20
     9ec:	37 95       	ror	r19
     9ee:	27 95       	ror	r18
     9f0:	a7 95       	ror	r26
     9f2:	f0 40       	sbci	r31, 0x00	; 0
     9f4:	53 95       	inc	r21
     9f6:	c9 f7       	brne	.-14     	; 0x9ea <__addsf3x+0x52>
     9f8:	7e f4       	brtc	.+30     	; 0xa18 <__addsf3x+0x80>
     9fa:	1f 16       	cp	r1, r31
     9fc:	ba 0b       	sbc	r27, r26
     9fe:	62 0b       	sbc	r22, r18
     a00:	73 0b       	sbc	r23, r19
     a02:	84 0b       	sbc	r24, r20
     a04:	ba f0       	brmi	.+46     	; 0xa34 <__addsf3x+0x9c>
     a06:	91 50       	subi	r25, 0x01	; 1
     a08:	a1 f0       	breq	.+40     	; 0xa32 <__addsf3x+0x9a>
     a0a:	ff 0f       	add	r31, r31
     a0c:	bb 1f       	adc	r27, r27
     a0e:	66 1f       	adc	r22, r22
     a10:	77 1f       	adc	r23, r23
     a12:	88 1f       	adc	r24, r24
     a14:	c2 f7       	brpl	.-16     	; 0xa06 <__addsf3x+0x6e>
     a16:	0e c0       	rjmp	.+28     	; 0xa34 <__addsf3x+0x9c>
     a18:	ba 0f       	add	r27, r26
     a1a:	62 1f       	adc	r22, r18
     a1c:	73 1f       	adc	r23, r19
     a1e:	84 1f       	adc	r24, r20
     a20:	48 f4       	brcc	.+18     	; 0xa34 <__addsf3x+0x9c>
     a22:	87 95       	ror	r24
     a24:	77 95       	ror	r23
     a26:	67 95       	ror	r22
     a28:	b7 95       	ror	r27
     a2a:	f7 95       	ror	r31
     a2c:	9e 3f       	cpi	r25, 0xFE	; 254
     a2e:	08 f0       	brcs	.+2      	; 0xa32 <__addsf3x+0x9a>
     a30:	b0 cf       	rjmp	.-160    	; 0x992 <__addsf3+0x28>
     a32:	93 95       	inc	r25
     a34:	88 0f       	add	r24, r24
     a36:	08 f0       	brcs	.+2      	; 0xa3a <__addsf3x+0xa2>
     a38:	99 27       	eor	r25, r25
     a3a:	ee 0f       	add	r30, r30
     a3c:	97 95       	ror	r25
     a3e:	87 95       	ror	r24
     a40:	08 95       	ret

00000a42 <cos>:
     a42:	0e 94 1d 06 	call	0xc3a	; 0xc3a <__fp_rempio2>
     a46:	e3 95       	inc	r30
     a48:	0c 94 57 06 	jmp	0xcae	; 0xcae <__fp_sinus>

00000a4c <__divsf3>:
     a4c:	0e 94 3a 05 	call	0xa74	; 0xa74 <__divsf3x>
     a50:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__fp_round>
     a54:	0e 94 14 06 	call	0xc28	; 0xc28 <__fp_pscB>
     a58:	58 f0       	brcs	.+22     	; 0xa70 <__divsf3+0x24>
     a5a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__fp_pscA>
     a5e:	40 f0       	brcs	.+16     	; 0xa70 <__divsf3+0x24>
     a60:	29 f4       	brne	.+10     	; 0xa6c <__divsf3+0x20>
     a62:	5f 3f       	cpi	r21, 0xFF	; 255
     a64:	29 f0       	breq	.+10     	; 0xa70 <__divsf3+0x24>
     a66:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_inf>
     a6a:	51 11       	cpse	r21, r1
     a6c:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__fp_szero>
     a70:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_nan>

00000a74 <__divsf3x>:
     a74:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__fp_split3>
     a78:	68 f3       	brcs	.-38     	; 0xa54 <__divsf3+0x8>

00000a7a <__divsf3_pse>:
     a7a:	99 23       	and	r25, r25
     a7c:	b1 f3       	breq	.-20     	; 0xa6a <__divsf3+0x1e>
     a7e:	55 23       	and	r21, r21
     a80:	91 f3       	breq	.-28     	; 0xa66 <__divsf3+0x1a>
     a82:	95 1b       	sub	r25, r21
     a84:	55 0b       	sbc	r21, r21
     a86:	bb 27       	eor	r27, r27
     a88:	aa 27       	eor	r26, r26
     a8a:	62 17       	cp	r22, r18
     a8c:	73 07       	cpc	r23, r19
     a8e:	84 07       	cpc	r24, r20
     a90:	38 f0       	brcs	.+14     	; 0xaa0 <__divsf3_pse+0x26>
     a92:	9f 5f       	subi	r25, 0xFF	; 255
     a94:	5f 4f       	sbci	r21, 0xFF	; 255
     a96:	22 0f       	add	r18, r18
     a98:	33 1f       	adc	r19, r19
     a9a:	44 1f       	adc	r20, r20
     a9c:	aa 1f       	adc	r26, r26
     a9e:	a9 f3       	breq	.-22     	; 0xa8a <__divsf3_pse+0x10>
     aa0:	35 d0       	rcall	.+106    	; 0xb0c <__divsf3_pse+0x92>
     aa2:	0e 2e       	mov	r0, r30
     aa4:	3a f0       	brmi	.+14     	; 0xab4 <__divsf3_pse+0x3a>
     aa6:	e0 e8       	ldi	r30, 0x80	; 128
     aa8:	32 d0       	rcall	.+100    	; 0xb0e <__divsf3_pse+0x94>
     aaa:	91 50       	subi	r25, 0x01	; 1
     aac:	50 40       	sbci	r21, 0x00	; 0
     aae:	e6 95       	lsr	r30
     ab0:	00 1c       	adc	r0, r0
     ab2:	ca f7       	brpl	.-14     	; 0xaa6 <__divsf3_pse+0x2c>
     ab4:	2b d0       	rcall	.+86     	; 0xb0c <__divsf3_pse+0x92>
     ab6:	fe 2f       	mov	r31, r30
     ab8:	29 d0       	rcall	.+82     	; 0xb0c <__divsf3_pse+0x92>
     aba:	66 0f       	add	r22, r22
     abc:	77 1f       	adc	r23, r23
     abe:	88 1f       	adc	r24, r24
     ac0:	bb 1f       	adc	r27, r27
     ac2:	26 17       	cp	r18, r22
     ac4:	37 07       	cpc	r19, r23
     ac6:	48 07       	cpc	r20, r24
     ac8:	ab 07       	cpc	r26, r27
     aca:	b0 e8       	ldi	r27, 0x80	; 128
     acc:	09 f0       	breq	.+2      	; 0xad0 <__divsf3_pse+0x56>
     ace:	bb 0b       	sbc	r27, r27
     ad0:	80 2d       	mov	r24, r0
     ad2:	bf 01       	movw	r22, r30
     ad4:	ff 27       	eor	r31, r31
     ad6:	93 58       	subi	r25, 0x83	; 131
     ad8:	5f 4f       	sbci	r21, 0xFF	; 255
     ada:	3a f0       	brmi	.+14     	; 0xaea <__divsf3_pse+0x70>
     adc:	9e 3f       	cpi	r25, 0xFE	; 254
     ade:	51 05       	cpc	r21, r1
     ae0:	78 f0       	brcs	.+30     	; 0xb00 <__divsf3_pse+0x86>
     ae2:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_inf>
     ae6:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__fp_szero>
     aea:	5f 3f       	cpi	r21, 0xFF	; 255
     aec:	e4 f3       	brlt	.-8      	; 0xae6 <__divsf3_pse+0x6c>
     aee:	98 3e       	cpi	r25, 0xE8	; 232
     af0:	d4 f3       	brlt	.-12     	; 0xae6 <__divsf3_pse+0x6c>
     af2:	86 95       	lsr	r24
     af4:	77 95       	ror	r23
     af6:	67 95       	ror	r22
     af8:	b7 95       	ror	r27
     afa:	f7 95       	ror	r31
     afc:	9f 5f       	subi	r25, 0xFF	; 255
     afe:	c9 f7       	brne	.-14     	; 0xaf2 <__divsf3_pse+0x78>
     b00:	88 0f       	add	r24, r24
     b02:	91 1d       	adc	r25, r1
     b04:	96 95       	lsr	r25
     b06:	87 95       	ror	r24
     b08:	97 f9       	bld	r25, 7
     b0a:	08 95       	ret
     b0c:	e1 e0       	ldi	r30, 0x01	; 1
     b0e:	66 0f       	add	r22, r22
     b10:	77 1f       	adc	r23, r23
     b12:	88 1f       	adc	r24, r24
     b14:	bb 1f       	adc	r27, r27
     b16:	62 17       	cp	r22, r18
     b18:	73 07       	cpc	r23, r19
     b1a:	84 07       	cpc	r24, r20
     b1c:	ba 07       	cpc	r27, r26
     b1e:	20 f0       	brcs	.+8      	; 0xb28 <__divsf3_pse+0xae>
     b20:	62 1b       	sub	r22, r18
     b22:	73 0b       	sbc	r23, r19
     b24:	84 0b       	sbc	r24, r20
     b26:	ba 0b       	sbc	r27, r26
     b28:	ee 1f       	adc	r30, r30
     b2a:	88 f7       	brcc	.-30     	; 0xb0e <__divsf3_pse+0x94>
     b2c:	e0 95       	com	r30
     b2e:	08 95       	ret

00000b30 <__fixunssfsi>:
     b30:	0e 94 73 06 	call	0xce6	; 0xce6 <__fp_splitA>
     b34:	88 f0       	brcs	.+34     	; 0xb58 <__fixunssfsi+0x28>
     b36:	9f 57       	subi	r25, 0x7F	; 127
     b38:	98 f0       	brcs	.+38     	; 0xb60 <__fixunssfsi+0x30>
     b3a:	b9 2f       	mov	r27, r25
     b3c:	99 27       	eor	r25, r25
     b3e:	b7 51       	subi	r27, 0x17	; 23
     b40:	b0 f0       	brcs	.+44     	; 0xb6e <__fixunssfsi+0x3e>
     b42:	e1 f0       	breq	.+56     	; 0xb7c <__fixunssfsi+0x4c>
     b44:	66 0f       	add	r22, r22
     b46:	77 1f       	adc	r23, r23
     b48:	88 1f       	adc	r24, r24
     b4a:	99 1f       	adc	r25, r25
     b4c:	1a f0       	brmi	.+6      	; 0xb54 <__fixunssfsi+0x24>
     b4e:	ba 95       	dec	r27
     b50:	c9 f7       	brne	.-14     	; 0xb44 <__fixunssfsi+0x14>
     b52:	14 c0       	rjmp	.+40     	; 0xb7c <__fixunssfsi+0x4c>
     b54:	b1 30       	cpi	r27, 0x01	; 1
     b56:	91 f0       	breq	.+36     	; 0xb7c <__fixunssfsi+0x4c>
     b58:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__fp_zero>
     b5c:	b1 e0       	ldi	r27, 0x01	; 1
     b5e:	08 95       	ret
     b60:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__fp_zero>
     b64:	67 2f       	mov	r22, r23
     b66:	78 2f       	mov	r23, r24
     b68:	88 27       	eor	r24, r24
     b6a:	b8 5f       	subi	r27, 0xF8	; 248
     b6c:	39 f0       	breq	.+14     	; 0xb7c <__fixunssfsi+0x4c>
     b6e:	b9 3f       	cpi	r27, 0xF9	; 249
     b70:	cc f3       	brlt	.-14     	; 0xb64 <__fixunssfsi+0x34>
     b72:	86 95       	lsr	r24
     b74:	77 95       	ror	r23
     b76:	67 95       	ror	r22
     b78:	b3 95       	inc	r27
     b7a:	d9 f7       	brne	.-10     	; 0xb72 <__fixunssfsi+0x42>
     b7c:	3e f4       	brtc	.+14     	; 0xb8c <__fixunssfsi+0x5c>
     b7e:	90 95       	com	r25
     b80:	80 95       	com	r24
     b82:	70 95       	com	r23
     b84:	61 95       	neg	r22
     b86:	7f 4f       	sbci	r23, 0xFF	; 255
     b88:	8f 4f       	sbci	r24, 0xFF	; 255
     b8a:	9f 4f       	sbci	r25, 0xFF	; 255
     b8c:	08 95       	ret

00000b8e <__floatunsisf>:
     b8e:	e8 94       	clt
     b90:	09 c0       	rjmp	.+18     	; 0xba4 <__floatsisf+0x12>

00000b92 <__floatsisf>:
     b92:	97 fb       	bst	r25, 7
     b94:	3e f4       	brtc	.+14     	; 0xba4 <__floatsisf+0x12>
     b96:	90 95       	com	r25
     b98:	80 95       	com	r24
     b9a:	70 95       	com	r23
     b9c:	61 95       	neg	r22
     b9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ba0:	8f 4f       	sbci	r24, 0xFF	; 255
     ba2:	9f 4f       	sbci	r25, 0xFF	; 255
     ba4:	99 23       	and	r25, r25
     ba6:	a9 f0       	breq	.+42     	; 0xbd2 <__floatsisf+0x40>
     ba8:	f9 2f       	mov	r31, r25
     baa:	96 e9       	ldi	r25, 0x96	; 150
     bac:	bb 27       	eor	r27, r27
     bae:	93 95       	inc	r25
     bb0:	f6 95       	lsr	r31
     bb2:	87 95       	ror	r24
     bb4:	77 95       	ror	r23
     bb6:	67 95       	ror	r22
     bb8:	b7 95       	ror	r27
     bba:	f1 11       	cpse	r31, r1
     bbc:	f8 cf       	rjmp	.-16     	; 0xbae <__floatsisf+0x1c>
     bbe:	fa f4       	brpl	.+62     	; 0xbfe <__floatsisf+0x6c>
     bc0:	bb 0f       	add	r27, r27
     bc2:	11 f4       	brne	.+4      	; 0xbc8 <__floatsisf+0x36>
     bc4:	60 ff       	sbrs	r22, 0
     bc6:	1b c0       	rjmp	.+54     	; 0xbfe <__floatsisf+0x6c>
     bc8:	6f 5f       	subi	r22, 0xFF	; 255
     bca:	7f 4f       	sbci	r23, 0xFF	; 255
     bcc:	8f 4f       	sbci	r24, 0xFF	; 255
     bce:	9f 4f       	sbci	r25, 0xFF	; 255
     bd0:	16 c0       	rjmp	.+44     	; 0xbfe <__floatsisf+0x6c>
     bd2:	88 23       	and	r24, r24
     bd4:	11 f0       	breq	.+4      	; 0xbda <__floatsisf+0x48>
     bd6:	96 e9       	ldi	r25, 0x96	; 150
     bd8:	11 c0       	rjmp	.+34     	; 0xbfc <__floatsisf+0x6a>
     bda:	77 23       	and	r23, r23
     bdc:	21 f0       	breq	.+8      	; 0xbe6 <__floatsisf+0x54>
     bde:	9e e8       	ldi	r25, 0x8E	; 142
     be0:	87 2f       	mov	r24, r23
     be2:	76 2f       	mov	r23, r22
     be4:	05 c0       	rjmp	.+10     	; 0xbf0 <__floatsisf+0x5e>
     be6:	66 23       	and	r22, r22
     be8:	71 f0       	breq	.+28     	; 0xc06 <__floatsisf+0x74>
     bea:	96 e8       	ldi	r25, 0x86	; 134
     bec:	86 2f       	mov	r24, r22
     bee:	70 e0       	ldi	r23, 0x00	; 0
     bf0:	60 e0       	ldi	r22, 0x00	; 0
     bf2:	2a f0       	brmi	.+10     	; 0xbfe <__floatsisf+0x6c>
     bf4:	9a 95       	dec	r25
     bf6:	66 0f       	add	r22, r22
     bf8:	77 1f       	adc	r23, r23
     bfa:	88 1f       	adc	r24, r24
     bfc:	da f7       	brpl	.-10     	; 0xbf4 <__floatsisf+0x62>
     bfe:	88 0f       	add	r24, r24
     c00:	96 95       	lsr	r25
     c02:	87 95       	ror	r24
     c04:	97 f9       	bld	r25, 7
     c06:	08 95       	ret

00000c08 <__fp_inf>:
     c08:	97 f9       	bld	r25, 7
     c0a:	9f 67       	ori	r25, 0x7F	; 127
     c0c:	80 e8       	ldi	r24, 0x80	; 128
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	08 95       	ret

00000c14 <__fp_nan>:
     c14:	9f ef       	ldi	r25, 0xFF	; 255
     c16:	80 ec       	ldi	r24, 0xC0	; 192
     c18:	08 95       	ret

00000c1a <__fp_pscA>:
     c1a:	00 24       	eor	r0, r0
     c1c:	0a 94       	dec	r0
     c1e:	16 16       	cp	r1, r22
     c20:	17 06       	cpc	r1, r23
     c22:	18 06       	cpc	r1, r24
     c24:	09 06       	cpc	r0, r25
     c26:	08 95       	ret

00000c28 <__fp_pscB>:
     c28:	00 24       	eor	r0, r0
     c2a:	0a 94       	dec	r0
     c2c:	12 16       	cp	r1, r18
     c2e:	13 06       	cpc	r1, r19
     c30:	14 06       	cpc	r1, r20
     c32:	05 06       	cpc	r0, r21
     c34:	08 95       	ret
     c36:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_nan>

00000c3a <__fp_rempio2>:
     c3a:	0e 94 73 06 	call	0xce6	; 0xce6 <__fp_splitA>
     c3e:	d8 f3       	brcs	.-10     	; 0xc36 <__fp_pscB+0xe>
     c40:	e8 94       	clt
     c42:	e0 e0       	ldi	r30, 0x00	; 0
     c44:	bb 27       	eor	r27, r27
     c46:	9f 57       	subi	r25, 0x7F	; 127
     c48:	f0 f0       	brcs	.+60     	; 0xc86 <__fp_rempio2+0x4c>
     c4a:	2a ed       	ldi	r18, 0xDA	; 218
     c4c:	3f e0       	ldi	r19, 0x0F	; 15
     c4e:	49 ec       	ldi	r20, 0xC9	; 201
     c50:	06 c0       	rjmp	.+12     	; 0xc5e <__fp_rempio2+0x24>
     c52:	ee 0f       	add	r30, r30
     c54:	bb 0f       	add	r27, r27
     c56:	66 1f       	adc	r22, r22
     c58:	77 1f       	adc	r23, r23
     c5a:	88 1f       	adc	r24, r24
     c5c:	28 f0       	brcs	.+10     	; 0xc68 <__fp_rempio2+0x2e>
     c5e:	b2 3a       	cpi	r27, 0xA2	; 162
     c60:	62 07       	cpc	r22, r18
     c62:	73 07       	cpc	r23, r19
     c64:	84 07       	cpc	r24, r20
     c66:	28 f0       	brcs	.+10     	; 0xc72 <__fp_rempio2+0x38>
     c68:	b2 5a       	subi	r27, 0xA2	; 162
     c6a:	62 0b       	sbc	r22, r18
     c6c:	73 0b       	sbc	r23, r19
     c6e:	84 0b       	sbc	r24, r20
     c70:	e3 95       	inc	r30
     c72:	9a 95       	dec	r25
     c74:	72 f7       	brpl	.-36     	; 0xc52 <__fp_rempio2+0x18>
     c76:	80 38       	cpi	r24, 0x80	; 128
     c78:	30 f4       	brcc	.+12     	; 0xc86 <__fp_rempio2+0x4c>
     c7a:	9a 95       	dec	r25
     c7c:	bb 0f       	add	r27, r27
     c7e:	66 1f       	adc	r22, r22
     c80:	77 1f       	adc	r23, r23
     c82:	88 1f       	adc	r24, r24
     c84:	d2 f7       	brpl	.-12     	; 0xc7a <__fp_rempio2+0x40>
     c86:	90 48       	sbci	r25, 0x80	; 128
     c88:	0c 94 03 07 	jmp	0xe06	; 0xe06 <__fp_mpack_finite>

00000c8c <__fp_round>:
     c8c:	09 2e       	mov	r0, r25
     c8e:	03 94       	inc	r0
     c90:	00 0c       	add	r0, r0
     c92:	11 f4       	brne	.+4      	; 0xc98 <__fp_round+0xc>
     c94:	88 23       	and	r24, r24
     c96:	52 f0       	brmi	.+20     	; 0xcac <__fp_round+0x20>
     c98:	bb 0f       	add	r27, r27
     c9a:	40 f4       	brcc	.+16     	; 0xcac <__fp_round+0x20>
     c9c:	bf 2b       	or	r27, r31
     c9e:	11 f4       	brne	.+4      	; 0xca4 <__fp_round+0x18>
     ca0:	60 ff       	sbrs	r22, 0
     ca2:	04 c0       	rjmp	.+8      	; 0xcac <__fp_round+0x20>
     ca4:	6f 5f       	subi	r22, 0xFF	; 255
     ca6:	7f 4f       	sbci	r23, 0xFF	; 255
     ca8:	8f 4f       	sbci	r24, 0xFF	; 255
     caa:	9f 4f       	sbci	r25, 0xFF	; 255
     cac:	08 95       	ret

00000cae <__fp_sinus>:
     cae:	ef 93       	push	r30
     cb0:	e0 ff       	sbrs	r30, 0
     cb2:	07 c0       	rjmp	.+14     	; 0xcc2 <__fp_sinus+0x14>
     cb4:	a2 ea       	ldi	r26, 0xA2	; 162
     cb6:	2a ed       	ldi	r18, 0xDA	; 218
     cb8:	3f e0       	ldi	r19, 0x0F	; 15
     cba:	49 ec       	ldi	r20, 0xC9	; 201
     cbc:	5f eb       	ldi	r21, 0xBF	; 191
     cbe:	0e 94 cc 04 	call	0x998	; 0x998 <__addsf3x>
     cc2:	0e 94 46 06 	call	0xc8c	; 0xc8c <__fp_round>
     cc6:	0f 90       	pop	r0
     cc8:	03 94       	inc	r0
     cca:	01 fc       	sbrc	r0, 1
     ccc:	90 58       	subi	r25, 0x80	; 128
     cce:	e8 e6       	ldi	r30, 0x68	; 104
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__fp_powsodd>

00000cd6 <__fp_split3>:
     cd6:	57 fd       	sbrc	r21, 7
     cd8:	90 58       	subi	r25, 0x80	; 128
     cda:	44 0f       	add	r20, r20
     cdc:	55 1f       	adc	r21, r21
     cde:	59 f0       	breq	.+22     	; 0xcf6 <__fp_splitA+0x10>
     ce0:	5f 3f       	cpi	r21, 0xFF	; 255
     ce2:	71 f0       	breq	.+28     	; 0xd00 <__fp_splitA+0x1a>
     ce4:	47 95       	ror	r20

00000ce6 <__fp_splitA>:
     ce6:	88 0f       	add	r24, r24
     ce8:	97 fb       	bst	r25, 7
     cea:	99 1f       	adc	r25, r25
     cec:	61 f0       	breq	.+24     	; 0xd06 <__fp_splitA+0x20>
     cee:	9f 3f       	cpi	r25, 0xFF	; 255
     cf0:	79 f0       	breq	.+30     	; 0xd10 <__fp_splitA+0x2a>
     cf2:	87 95       	ror	r24
     cf4:	08 95       	ret
     cf6:	12 16       	cp	r1, r18
     cf8:	13 06       	cpc	r1, r19
     cfa:	14 06       	cpc	r1, r20
     cfc:	55 1f       	adc	r21, r21
     cfe:	f2 cf       	rjmp	.-28     	; 0xce4 <__fp_split3+0xe>
     d00:	46 95       	lsr	r20
     d02:	f1 df       	rcall	.-30     	; 0xce6 <__fp_splitA>
     d04:	08 c0       	rjmp	.+16     	; 0xd16 <__fp_splitA+0x30>
     d06:	16 16       	cp	r1, r22
     d08:	17 06       	cpc	r1, r23
     d0a:	18 06       	cpc	r1, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	f1 cf       	rjmp	.-30     	; 0xcf2 <__fp_splitA+0xc>
     d10:	86 95       	lsr	r24
     d12:	71 05       	cpc	r23, r1
     d14:	61 05       	cpc	r22, r1
     d16:	08 94       	sec
     d18:	08 95       	ret

00000d1a <__fp_zero>:
     d1a:	e8 94       	clt

00000d1c <__fp_szero>:
     d1c:	bb 27       	eor	r27, r27
     d1e:	66 27       	eor	r22, r22
     d20:	77 27       	eor	r23, r23
     d22:	cb 01       	movw	r24, r22
     d24:	97 f9       	bld	r25, 7
     d26:	08 95       	ret

00000d28 <__mulsf3>:
     d28:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__mulsf3x>
     d2c:	0c 94 46 06 	jmp	0xc8c	; 0xc8c <__fp_round>
     d30:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__fp_pscA>
     d34:	38 f0       	brcs	.+14     	; 0xd44 <__mulsf3+0x1c>
     d36:	0e 94 14 06 	call	0xc28	; 0xc28 <__fp_pscB>
     d3a:	20 f0       	brcs	.+8      	; 0xd44 <__mulsf3+0x1c>
     d3c:	95 23       	and	r25, r21
     d3e:	11 f0       	breq	.+4      	; 0xd44 <__mulsf3+0x1c>
     d40:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_inf>
     d44:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <__fp_nan>
     d48:	11 24       	eor	r1, r1
     d4a:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__fp_szero>

00000d4e <__mulsf3x>:
     d4e:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__fp_split3>
     d52:	70 f3       	brcs	.-36     	; 0xd30 <__mulsf3+0x8>

00000d54 <__mulsf3_pse>:
     d54:	95 9f       	mul	r25, r21
     d56:	c1 f3       	breq	.-16     	; 0xd48 <__mulsf3+0x20>
     d58:	95 0f       	add	r25, r21
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	55 1f       	adc	r21, r21
     d5e:	62 9f       	mul	r22, r18
     d60:	f0 01       	movw	r30, r0
     d62:	72 9f       	mul	r23, r18
     d64:	bb 27       	eor	r27, r27
     d66:	f0 0d       	add	r31, r0
     d68:	b1 1d       	adc	r27, r1
     d6a:	63 9f       	mul	r22, r19
     d6c:	aa 27       	eor	r26, r26
     d6e:	f0 0d       	add	r31, r0
     d70:	b1 1d       	adc	r27, r1
     d72:	aa 1f       	adc	r26, r26
     d74:	64 9f       	mul	r22, r20
     d76:	66 27       	eor	r22, r22
     d78:	b0 0d       	add	r27, r0
     d7a:	a1 1d       	adc	r26, r1
     d7c:	66 1f       	adc	r22, r22
     d7e:	82 9f       	mul	r24, r18
     d80:	22 27       	eor	r18, r18
     d82:	b0 0d       	add	r27, r0
     d84:	a1 1d       	adc	r26, r1
     d86:	62 1f       	adc	r22, r18
     d88:	73 9f       	mul	r23, r19
     d8a:	b0 0d       	add	r27, r0
     d8c:	a1 1d       	adc	r26, r1
     d8e:	62 1f       	adc	r22, r18
     d90:	83 9f       	mul	r24, r19
     d92:	a0 0d       	add	r26, r0
     d94:	61 1d       	adc	r22, r1
     d96:	22 1f       	adc	r18, r18
     d98:	74 9f       	mul	r23, r20
     d9a:	33 27       	eor	r19, r19
     d9c:	a0 0d       	add	r26, r0
     d9e:	61 1d       	adc	r22, r1
     da0:	23 1f       	adc	r18, r19
     da2:	84 9f       	mul	r24, r20
     da4:	60 0d       	add	r22, r0
     da6:	21 1d       	adc	r18, r1
     da8:	82 2f       	mov	r24, r18
     daa:	76 2f       	mov	r23, r22
     dac:	6a 2f       	mov	r22, r26
     dae:	11 24       	eor	r1, r1
     db0:	9f 57       	subi	r25, 0x7F	; 127
     db2:	50 40       	sbci	r21, 0x00	; 0
     db4:	9a f0       	brmi	.+38     	; 0xddc <__mulsf3_pse+0x88>
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__mulsf3_pse+0xa0>
     db8:	88 23       	and	r24, r24
     dba:	4a f0       	brmi	.+18     	; 0xdce <__mulsf3_pse+0x7a>
     dbc:	ee 0f       	add	r30, r30
     dbe:	ff 1f       	adc	r31, r31
     dc0:	bb 1f       	adc	r27, r27
     dc2:	66 1f       	adc	r22, r22
     dc4:	77 1f       	adc	r23, r23
     dc6:	88 1f       	adc	r24, r24
     dc8:	91 50       	subi	r25, 0x01	; 1
     dca:	50 40       	sbci	r21, 0x00	; 0
     dcc:	a9 f7       	brne	.-22     	; 0xdb8 <__mulsf3_pse+0x64>
     dce:	9e 3f       	cpi	r25, 0xFE	; 254
     dd0:	51 05       	cpc	r21, r1
     dd2:	80 f0       	brcs	.+32     	; 0xdf4 <__mulsf3_pse+0xa0>
     dd4:	0c 94 04 06 	jmp	0xc08	; 0xc08 <__fp_inf>
     dd8:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__fp_szero>
     ddc:	5f 3f       	cpi	r21, 0xFF	; 255
     dde:	e4 f3       	brlt	.-8      	; 0xdd8 <__mulsf3_pse+0x84>
     de0:	98 3e       	cpi	r25, 0xE8	; 232
     de2:	d4 f3       	brlt	.-12     	; 0xdd8 <__mulsf3_pse+0x84>
     de4:	86 95       	lsr	r24
     de6:	77 95       	ror	r23
     de8:	67 95       	ror	r22
     dea:	b7 95       	ror	r27
     dec:	f7 95       	ror	r31
     dee:	e7 95       	ror	r30
     df0:	9f 5f       	subi	r25, 0xFF	; 255
     df2:	c1 f7       	brne	.-16     	; 0xde4 <__mulsf3_pse+0x90>
     df4:	fe 2b       	or	r31, r30
     df6:	88 0f       	add	r24, r24
     df8:	91 1d       	adc	r25, r1
     dfa:	96 95       	lsr	r25
     dfc:	87 95       	ror	r24
     dfe:	97 f9       	bld	r25, 7
     e00:	08 95       	ret

00000e02 <__fp_mpack>:
     e02:	9f 3f       	cpi	r25, 0xFF	; 255
     e04:	31 f0       	breq	.+12     	; 0xe12 <__fp_mpack_finite+0xc>

00000e06 <__fp_mpack_finite>:
     e06:	91 50       	subi	r25, 0x01	; 1
     e08:	20 f4       	brcc	.+8      	; 0xe12 <__fp_mpack_finite+0xc>
     e0a:	87 95       	ror	r24
     e0c:	77 95       	ror	r23
     e0e:	67 95       	ror	r22
     e10:	b7 95       	ror	r27
     e12:	88 0f       	add	r24, r24
     e14:	91 1d       	adc	r25, r1
     e16:	96 95       	lsr	r25
     e18:	87 95       	ror	r24
     e1a:	97 f9       	bld	r25, 7
     e1c:	08 95       	ret

00000e1e <__fp_powser>:
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	1f 93       	push	r17
     e24:	0f 93       	push	r16
     e26:	ff 92       	push	r15
     e28:	ef 92       	push	r14
     e2a:	df 92       	push	r13
     e2c:	7b 01       	movw	r14, r22
     e2e:	8c 01       	movw	r16, r24
     e30:	68 94       	set
     e32:	06 c0       	rjmp	.+12     	; 0xe40 <__fp_powser+0x22>
     e34:	da 2e       	mov	r13, r26
     e36:	ef 01       	movw	r28, r30
     e38:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__mulsf3x>
     e3c:	fe 01       	movw	r30, r28
     e3e:	e8 94       	clt
     e40:	a5 91       	lpm	r26, Z+
     e42:	25 91       	lpm	r18, Z+
     e44:	35 91       	lpm	r19, Z+
     e46:	45 91       	lpm	r20, Z+
     e48:	55 91       	lpm	r21, Z+
     e4a:	a6 f3       	brts	.-24     	; 0xe34 <__fp_powser+0x16>
     e4c:	ef 01       	movw	r28, r30
     e4e:	0e 94 cc 04 	call	0x998	; 0x998 <__addsf3x>
     e52:	fe 01       	movw	r30, r28
     e54:	97 01       	movw	r18, r14
     e56:	a8 01       	movw	r20, r16
     e58:	da 94       	dec	r13
     e5a:	69 f7       	brne	.-38     	; 0xe36 <__fp_powser+0x18>
     e5c:	df 90       	pop	r13
     e5e:	ef 90       	pop	r14
     e60:	ff 90       	pop	r15
     e62:	0f 91       	pop	r16
     e64:	1f 91       	pop	r17
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <__fp_powsodd>:
     e6c:	9f 93       	push	r25
     e6e:	8f 93       	push	r24
     e70:	7f 93       	push	r23
     e72:	6f 93       	push	r22
     e74:	ff 93       	push	r31
     e76:	ef 93       	push	r30
     e78:	9b 01       	movw	r18, r22
     e7a:	ac 01       	movw	r20, r24
     e7c:	0e 94 94 06 	call	0xd28	; 0xd28 <__mulsf3>
     e80:	ef 91       	pop	r30
     e82:	ff 91       	pop	r31
     e84:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__fp_powser>
     e88:	2f 91       	pop	r18
     e8a:	3f 91       	pop	r19
     e8c:	4f 91       	pop	r20
     e8e:	5f 91       	pop	r21
     e90:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__mulsf3>

00000e94 <__udivmodhi4>:
     e94:	aa 1b       	sub	r26, r26
     e96:	bb 1b       	sub	r27, r27
     e98:	51 e1       	ldi	r21, 0x11	; 17
     e9a:	07 c0       	rjmp	.+14     	; 0xeaa <__udivmodhi4_ep>

00000e9c <__udivmodhi4_loop>:
     e9c:	aa 1f       	adc	r26, r26
     e9e:	bb 1f       	adc	r27, r27
     ea0:	a6 17       	cp	r26, r22
     ea2:	b7 07       	cpc	r27, r23
     ea4:	10 f0       	brcs	.+4      	; 0xeaa <__udivmodhi4_ep>
     ea6:	a6 1b       	sub	r26, r22
     ea8:	b7 0b       	sbc	r27, r23

00000eaa <__udivmodhi4_ep>:
     eaa:	88 1f       	adc	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	5a 95       	dec	r21
     eb0:	a9 f7       	brne	.-22     	; 0xe9c <__udivmodhi4_loop>
     eb2:	80 95       	com	r24
     eb4:	90 95       	com	r25
     eb6:	bc 01       	movw	r22, r24
     eb8:	cd 01       	movw	r24, r26
     eba:	08 95       	ret

00000ebc <__udivmodsi4>:
     ebc:	a1 e2       	ldi	r26, 0x21	; 33
     ebe:	1a 2e       	mov	r1, r26
     ec0:	aa 1b       	sub	r26, r26
     ec2:	bb 1b       	sub	r27, r27
     ec4:	fd 01       	movw	r30, r26
     ec6:	0d c0       	rjmp	.+26     	; 0xee2 <__udivmodsi4_ep>

00000ec8 <__udivmodsi4_loop>:
     ec8:	aa 1f       	adc	r26, r26
     eca:	bb 1f       	adc	r27, r27
     ecc:	ee 1f       	adc	r30, r30
     ece:	ff 1f       	adc	r31, r31
     ed0:	a2 17       	cp	r26, r18
     ed2:	b3 07       	cpc	r27, r19
     ed4:	e4 07       	cpc	r30, r20
     ed6:	f5 07       	cpc	r31, r21
     ed8:	20 f0       	brcs	.+8      	; 0xee2 <__udivmodsi4_ep>
     eda:	a2 1b       	sub	r26, r18
     edc:	b3 0b       	sbc	r27, r19
     ede:	e4 0b       	sbc	r30, r20
     ee0:	f5 0b       	sbc	r31, r21

00000ee2 <__udivmodsi4_ep>:
     ee2:	66 1f       	adc	r22, r22
     ee4:	77 1f       	adc	r23, r23
     ee6:	88 1f       	adc	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	1a 94       	dec	r1
     eec:	69 f7       	brne	.-38     	; 0xec8 <__udivmodsi4_loop>
     eee:	60 95       	com	r22
     ef0:	70 95       	com	r23
     ef2:	80 95       	com	r24
     ef4:	90 95       	com	r25
     ef6:	9b 01       	movw	r18, r22
     ef8:	ac 01       	movw	r20, r24
     efa:	bd 01       	movw	r22, r26
     efc:	cf 01       	movw	r24, r30
     efe:	08 95       	ret

00000f00 <__umulhisi3>:
     f00:	a2 9f       	mul	r26, r18
     f02:	b0 01       	movw	r22, r0
     f04:	b3 9f       	mul	r27, r19
     f06:	c0 01       	movw	r24, r0
     f08:	a3 9f       	mul	r26, r19
     f0a:	70 0d       	add	r23, r0
     f0c:	81 1d       	adc	r24, r1
     f0e:	11 24       	eor	r1, r1
     f10:	91 1d       	adc	r25, r1
     f12:	b2 9f       	mul	r27, r18
     f14:	70 0d       	add	r23, r0
     f16:	81 1d       	adc	r24, r1
     f18:	11 24       	eor	r1, r1
     f1a:	91 1d       	adc	r25, r1
     f1c:	08 95       	ret

00000f1e <sprintf>:
     f1e:	ae e0       	ldi	r26, 0x0E	; 14
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e5 e9       	ldi	r30, 0x95	; 149
     f24:	f7 e0       	ldi	r31, 0x07	; 7
     f26:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <__prologue_saves__+0x1c>
     f2a:	0d 89       	ldd	r16, Y+21	; 0x15
     f2c:	1e 89       	ldd	r17, Y+22	; 0x16
     f2e:	86 e0       	ldi	r24, 0x06	; 6
     f30:	8c 83       	std	Y+4, r24	; 0x04
     f32:	1a 83       	std	Y+2, r17	; 0x02
     f34:	09 83       	std	Y+1, r16	; 0x01
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	9f e7       	ldi	r25, 0x7F	; 127
     f3a:	9e 83       	std	Y+6, r25	; 0x06
     f3c:	8d 83       	std	Y+5, r24	; 0x05
     f3e:	ae 01       	movw	r20, r28
     f40:	47 5e       	subi	r20, 0xE7	; 231
     f42:	5f 4f       	sbci	r21, 0xFF	; 255
     f44:	6f 89       	ldd	r22, Y+23	; 0x17
     f46:	78 8d       	ldd	r23, Y+24	; 0x18
     f48:	ce 01       	movw	r24, r28
     f4a:	01 96       	adiw	r24, 0x01	; 1
     f4c:	0e 94 b1 07 	call	0xf62	; 0xf62 <vfprintf>
     f50:	ef 81       	ldd	r30, Y+7	; 0x07
     f52:	f8 85       	ldd	r31, Y+8	; 0x08
     f54:	e0 0f       	add	r30, r16
     f56:	f1 1f       	adc	r31, r17
     f58:	10 82       	st	Z, r1
     f5a:	2e 96       	adiw	r28, 0x0e	; 14
     f5c:	e4 e0       	ldi	r30, 0x04	; 4
     f5e:	0c 94 6c 0a 	jmp	0x14d8	; 0x14d8 <__epilogue_restores__+0x1c>

00000f62 <vfprintf>:
     f62:	ab e0       	ldi	r26, 0x0B	; 11
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e7 eb       	ldi	r30, 0xB7	; 183
     f68:	f7 e0       	ldi	r31, 0x07	; 7
     f6a:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <__prologue_saves__>
     f6e:	6c 01       	movw	r12, r24
     f70:	7b 01       	movw	r14, r22
     f72:	8a 01       	movw	r16, r20
     f74:	fc 01       	movw	r30, r24
     f76:	17 82       	std	Z+7, r1	; 0x07
     f78:	16 82       	std	Z+6, r1	; 0x06
     f7a:	83 81       	ldd	r24, Z+3	; 0x03
     f7c:	81 ff       	sbrs	r24, 1
     f7e:	cc c1       	rjmp	.+920    	; 0x1318 <vfprintf+0x3b6>
     f80:	ce 01       	movw	r24, r28
     f82:	01 96       	adiw	r24, 0x01	; 1
     f84:	3c 01       	movw	r6, r24
     f86:	f6 01       	movw	r30, r12
     f88:	93 81       	ldd	r25, Z+3	; 0x03
     f8a:	f7 01       	movw	r30, r14
     f8c:	93 fd       	sbrc	r25, 3
     f8e:	85 91       	lpm	r24, Z+
     f90:	93 ff       	sbrs	r25, 3
     f92:	81 91       	ld	r24, Z+
     f94:	7f 01       	movw	r14, r30
     f96:	88 23       	and	r24, r24
     f98:	09 f4       	brne	.+2      	; 0xf9c <vfprintf+0x3a>
     f9a:	ba c1       	rjmp	.+884    	; 0x1310 <vfprintf+0x3ae>
     f9c:	85 32       	cpi	r24, 0x25	; 37
     f9e:	39 f4       	brne	.+14     	; 0xfae <vfprintf+0x4c>
     fa0:	93 fd       	sbrc	r25, 3
     fa2:	85 91       	lpm	r24, Z+
     fa4:	93 ff       	sbrs	r25, 3
     fa6:	81 91       	ld	r24, Z+
     fa8:	7f 01       	movw	r14, r30
     faa:	85 32       	cpi	r24, 0x25	; 37
     fac:	29 f4       	brne	.+10     	; 0xfb8 <vfprintf+0x56>
     fae:	b6 01       	movw	r22, r12
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	0e 94 a8 09 	call	0x1350	; 0x1350 <fputc>
     fb6:	e7 cf       	rjmp	.-50     	; 0xf86 <vfprintf+0x24>
     fb8:	91 2c       	mov	r9, r1
     fba:	21 2c       	mov	r2, r1
     fbc:	31 2c       	mov	r3, r1
     fbe:	ff e1       	ldi	r31, 0x1F	; 31
     fc0:	f3 15       	cp	r31, r3
     fc2:	d8 f0       	brcs	.+54     	; 0xffa <vfprintf+0x98>
     fc4:	8b 32       	cpi	r24, 0x2B	; 43
     fc6:	79 f0       	breq	.+30     	; 0xfe6 <vfprintf+0x84>
     fc8:	38 f4       	brcc	.+14     	; 0xfd8 <vfprintf+0x76>
     fca:	80 32       	cpi	r24, 0x20	; 32
     fcc:	79 f0       	breq	.+30     	; 0xfec <vfprintf+0x8a>
     fce:	83 32       	cpi	r24, 0x23	; 35
     fd0:	a1 f4       	brne	.+40     	; 0xffa <vfprintf+0x98>
     fd2:	23 2d       	mov	r18, r3
     fd4:	20 61       	ori	r18, 0x10	; 16
     fd6:	1d c0       	rjmp	.+58     	; 0x1012 <vfprintf+0xb0>
     fd8:	8d 32       	cpi	r24, 0x2D	; 45
     fda:	61 f0       	breq	.+24     	; 0xff4 <vfprintf+0x92>
     fdc:	80 33       	cpi	r24, 0x30	; 48
     fde:	69 f4       	brne	.+26     	; 0xffa <vfprintf+0x98>
     fe0:	23 2d       	mov	r18, r3
     fe2:	21 60       	ori	r18, 0x01	; 1
     fe4:	16 c0       	rjmp	.+44     	; 0x1012 <vfprintf+0xb0>
     fe6:	83 2d       	mov	r24, r3
     fe8:	82 60       	ori	r24, 0x02	; 2
     fea:	38 2e       	mov	r3, r24
     fec:	e3 2d       	mov	r30, r3
     fee:	e4 60       	ori	r30, 0x04	; 4
     ff0:	3e 2e       	mov	r3, r30
     ff2:	2a c0       	rjmp	.+84     	; 0x1048 <vfprintf+0xe6>
     ff4:	f3 2d       	mov	r31, r3
     ff6:	f8 60       	ori	r31, 0x08	; 8
     ff8:	1d c0       	rjmp	.+58     	; 0x1034 <vfprintf+0xd2>
     ffa:	37 fc       	sbrc	r3, 7
     ffc:	2d c0       	rjmp	.+90     	; 0x1058 <vfprintf+0xf6>
     ffe:	20 ed       	ldi	r18, 0xD0	; 208
    1000:	28 0f       	add	r18, r24
    1002:	2a 30       	cpi	r18, 0x0A	; 10
    1004:	40 f0       	brcs	.+16     	; 0x1016 <vfprintf+0xb4>
    1006:	8e 32       	cpi	r24, 0x2E	; 46
    1008:	b9 f4       	brne	.+46     	; 0x1038 <vfprintf+0xd6>
    100a:	36 fc       	sbrc	r3, 6
    100c:	81 c1       	rjmp	.+770    	; 0x1310 <vfprintf+0x3ae>
    100e:	23 2d       	mov	r18, r3
    1010:	20 64       	ori	r18, 0x40	; 64
    1012:	32 2e       	mov	r3, r18
    1014:	19 c0       	rjmp	.+50     	; 0x1048 <vfprintf+0xe6>
    1016:	36 fe       	sbrs	r3, 6
    1018:	06 c0       	rjmp	.+12     	; 0x1026 <vfprintf+0xc4>
    101a:	8a e0       	ldi	r24, 0x0A	; 10
    101c:	98 9e       	mul	r9, r24
    101e:	20 0d       	add	r18, r0
    1020:	11 24       	eor	r1, r1
    1022:	92 2e       	mov	r9, r18
    1024:	11 c0       	rjmp	.+34     	; 0x1048 <vfprintf+0xe6>
    1026:	ea e0       	ldi	r30, 0x0A	; 10
    1028:	2e 9e       	mul	r2, r30
    102a:	20 0d       	add	r18, r0
    102c:	11 24       	eor	r1, r1
    102e:	22 2e       	mov	r2, r18
    1030:	f3 2d       	mov	r31, r3
    1032:	f0 62       	ori	r31, 0x20	; 32
    1034:	3f 2e       	mov	r3, r31
    1036:	08 c0       	rjmp	.+16     	; 0x1048 <vfprintf+0xe6>
    1038:	8c 36       	cpi	r24, 0x6C	; 108
    103a:	21 f4       	brne	.+8      	; 0x1044 <vfprintf+0xe2>
    103c:	83 2d       	mov	r24, r3
    103e:	80 68       	ori	r24, 0x80	; 128
    1040:	38 2e       	mov	r3, r24
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <vfprintf+0xe6>
    1044:	88 36       	cpi	r24, 0x68	; 104
    1046:	41 f4       	brne	.+16     	; 0x1058 <vfprintf+0xf6>
    1048:	f7 01       	movw	r30, r14
    104a:	93 fd       	sbrc	r25, 3
    104c:	85 91       	lpm	r24, Z+
    104e:	93 ff       	sbrs	r25, 3
    1050:	81 91       	ld	r24, Z+
    1052:	7f 01       	movw	r14, r30
    1054:	81 11       	cpse	r24, r1
    1056:	b3 cf       	rjmp	.-154    	; 0xfbe <vfprintf+0x5c>
    1058:	98 2f       	mov	r25, r24
    105a:	9f 7d       	andi	r25, 0xDF	; 223
    105c:	95 54       	subi	r25, 0x45	; 69
    105e:	93 30       	cpi	r25, 0x03	; 3
    1060:	28 f4       	brcc	.+10     	; 0x106c <vfprintf+0x10a>
    1062:	0c 5f       	subi	r16, 0xFC	; 252
    1064:	1f 4f       	sbci	r17, 0xFF	; 255
    1066:	9f e3       	ldi	r25, 0x3F	; 63
    1068:	99 83       	std	Y+1, r25	; 0x01
    106a:	0d c0       	rjmp	.+26     	; 0x1086 <vfprintf+0x124>
    106c:	83 36       	cpi	r24, 0x63	; 99
    106e:	31 f0       	breq	.+12     	; 0x107c <vfprintf+0x11a>
    1070:	83 37       	cpi	r24, 0x73	; 115
    1072:	71 f0       	breq	.+28     	; 0x1090 <vfprintf+0x12e>
    1074:	83 35       	cpi	r24, 0x53	; 83
    1076:	09 f0       	breq	.+2      	; 0x107a <vfprintf+0x118>
    1078:	59 c0       	rjmp	.+178    	; 0x112c <vfprintf+0x1ca>
    107a:	21 c0       	rjmp	.+66     	; 0x10be <vfprintf+0x15c>
    107c:	f8 01       	movw	r30, r16
    107e:	80 81       	ld	r24, Z
    1080:	89 83       	std	Y+1, r24	; 0x01
    1082:	0e 5f       	subi	r16, 0xFE	; 254
    1084:	1f 4f       	sbci	r17, 0xFF	; 255
    1086:	88 24       	eor	r8, r8
    1088:	83 94       	inc	r8
    108a:	91 2c       	mov	r9, r1
    108c:	53 01       	movw	r10, r6
    108e:	13 c0       	rjmp	.+38     	; 0x10b6 <vfprintf+0x154>
    1090:	28 01       	movw	r4, r16
    1092:	f2 e0       	ldi	r31, 0x02	; 2
    1094:	4f 0e       	add	r4, r31
    1096:	51 1c       	adc	r5, r1
    1098:	f8 01       	movw	r30, r16
    109a:	a0 80       	ld	r10, Z
    109c:	b1 80       	ldd	r11, Z+1	; 0x01
    109e:	36 fe       	sbrs	r3, 6
    10a0:	03 c0       	rjmp	.+6      	; 0x10a8 <vfprintf+0x146>
    10a2:	69 2d       	mov	r22, r9
    10a4:	70 e0       	ldi	r23, 0x00	; 0
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <vfprintf+0x14a>
    10a8:	6f ef       	ldi	r22, 0xFF	; 255
    10aa:	7f ef       	ldi	r23, 0xFF	; 255
    10ac:	c5 01       	movw	r24, r10
    10ae:	0e 94 9d 09 	call	0x133a	; 0x133a <strnlen>
    10b2:	4c 01       	movw	r8, r24
    10b4:	82 01       	movw	r16, r4
    10b6:	f3 2d       	mov	r31, r3
    10b8:	ff 77       	andi	r31, 0x7F	; 127
    10ba:	3f 2e       	mov	r3, r31
    10bc:	16 c0       	rjmp	.+44     	; 0x10ea <vfprintf+0x188>
    10be:	28 01       	movw	r4, r16
    10c0:	22 e0       	ldi	r18, 0x02	; 2
    10c2:	42 0e       	add	r4, r18
    10c4:	51 1c       	adc	r5, r1
    10c6:	f8 01       	movw	r30, r16
    10c8:	a0 80       	ld	r10, Z
    10ca:	b1 80       	ldd	r11, Z+1	; 0x01
    10cc:	36 fe       	sbrs	r3, 6
    10ce:	03 c0       	rjmp	.+6      	; 0x10d6 <vfprintf+0x174>
    10d0:	69 2d       	mov	r22, r9
    10d2:	70 e0       	ldi	r23, 0x00	; 0
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <vfprintf+0x178>
    10d6:	6f ef       	ldi	r22, 0xFF	; 255
    10d8:	7f ef       	ldi	r23, 0xFF	; 255
    10da:	c5 01       	movw	r24, r10
    10dc:	0e 94 92 09 	call	0x1324	; 0x1324 <strnlen_P>
    10e0:	4c 01       	movw	r8, r24
    10e2:	f3 2d       	mov	r31, r3
    10e4:	f0 68       	ori	r31, 0x80	; 128
    10e6:	3f 2e       	mov	r3, r31
    10e8:	82 01       	movw	r16, r4
    10ea:	33 fc       	sbrc	r3, 3
    10ec:	1b c0       	rjmp	.+54     	; 0x1124 <vfprintf+0x1c2>
    10ee:	82 2d       	mov	r24, r2
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	88 16       	cp	r8, r24
    10f4:	99 06       	cpc	r9, r25
    10f6:	b0 f4       	brcc	.+44     	; 0x1124 <vfprintf+0x1c2>
    10f8:	b6 01       	movw	r22, r12
    10fa:	80 e2       	ldi	r24, 0x20	; 32
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	0e 94 a8 09 	call	0x1350	; 0x1350 <fputc>
    1102:	2a 94       	dec	r2
    1104:	f4 cf       	rjmp	.-24     	; 0x10ee <vfprintf+0x18c>
    1106:	f5 01       	movw	r30, r10
    1108:	37 fc       	sbrc	r3, 7
    110a:	85 91       	lpm	r24, Z+
    110c:	37 fe       	sbrs	r3, 7
    110e:	81 91       	ld	r24, Z+
    1110:	5f 01       	movw	r10, r30
    1112:	b6 01       	movw	r22, r12
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 a8 09 	call	0x1350	; 0x1350 <fputc>
    111a:	21 10       	cpse	r2, r1
    111c:	2a 94       	dec	r2
    111e:	21 e0       	ldi	r18, 0x01	; 1
    1120:	82 1a       	sub	r8, r18
    1122:	91 08       	sbc	r9, r1
    1124:	81 14       	cp	r8, r1
    1126:	91 04       	cpc	r9, r1
    1128:	71 f7       	brne	.-36     	; 0x1106 <vfprintf+0x1a4>
    112a:	e8 c0       	rjmp	.+464    	; 0x12fc <vfprintf+0x39a>
    112c:	84 36       	cpi	r24, 0x64	; 100
    112e:	11 f0       	breq	.+4      	; 0x1134 <vfprintf+0x1d2>
    1130:	89 36       	cpi	r24, 0x69	; 105
    1132:	41 f5       	brne	.+80     	; 0x1184 <vfprintf+0x222>
    1134:	f8 01       	movw	r30, r16
    1136:	37 fe       	sbrs	r3, 7
    1138:	07 c0       	rjmp	.+14     	; 0x1148 <vfprintf+0x1e6>
    113a:	60 81       	ld	r22, Z
    113c:	71 81       	ldd	r23, Z+1	; 0x01
    113e:	82 81       	ldd	r24, Z+2	; 0x02
    1140:	93 81       	ldd	r25, Z+3	; 0x03
    1142:	0c 5f       	subi	r16, 0xFC	; 252
    1144:	1f 4f       	sbci	r17, 0xFF	; 255
    1146:	08 c0       	rjmp	.+16     	; 0x1158 <vfprintf+0x1f6>
    1148:	60 81       	ld	r22, Z
    114a:	71 81       	ldd	r23, Z+1	; 0x01
    114c:	07 2e       	mov	r0, r23
    114e:	00 0c       	add	r0, r0
    1150:	88 0b       	sbc	r24, r24
    1152:	99 0b       	sbc	r25, r25
    1154:	0e 5f       	subi	r16, 0xFE	; 254
    1156:	1f 4f       	sbci	r17, 0xFF	; 255
    1158:	f3 2d       	mov	r31, r3
    115a:	ff 76       	andi	r31, 0x6F	; 111
    115c:	3f 2e       	mov	r3, r31
    115e:	97 ff       	sbrs	r25, 7
    1160:	09 c0       	rjmp	.+18     	; 0x1174 <vfprintf+0x212>
    1162:	90 95       	com	r25
    1164:	80 95       	com	r24
    1166:	70 95       	com	r23
    1168:	61 95       	neg	r22
    116a:	7f 4f       	sbci	r23, 0xFF	; 255
    116c:	8f 4f       	sbci	r24, 0xFF	; 255
    116e:	9f 4f       	sbci	r25, 0xFF	; 255
    1170:	f0 68       	ori	r31, 0x80	; 128
    1172:	3f 2e       	mov	r3, r31
    1174:	2a e0       	ldi	r18, 0x0A	; 10
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	a3 01       	movw	r20, r6
    117a:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__ultoa_invert>
    117e:	88 2e       	mov	r8, r24
    1180:	86 18       	sub	r8, r6
    1182:	45 c0       	rjmp	.+138    	; 0x120e <vfprintf+0x2ac>
    1184:	85 37       	cpi	r24, 0x75	; 117
    1186:	31 f4       	brne	.+12     	; 0x1194 <vfprintf+0x232>
    1188:	23 2d       	mov	r18, r3
    118a:	2f 7e       	andi	r18, 0xEF	; 239
    118c:	b2 2e       	mov	r11, r18
    118e:	2a e0       	ldi	r18, 0x0A	; 10
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	25 c0       	rjmp	.+74     	; 0x11de <vfprintf+0x27c>
    1194:	93 2d       	mov	r25, r3
    1196:	99 7f       	andi	r25, 0xF9	; 249
    1198:	b9 2e       	mov	r11, r25
    119a:	8f 36       	cpi	r24, 0x6F	; 111
    119c:	c1 f0       	breq	.+48     	; 0x11ce <vfprintf+0x26c>
    119e:	18 f4       	brcc	.+6      	; 0x11a6 <vfprintf+0x244>
    11a0:	88 35       	cpi	r24, 0x58	; 88
    11a2:	79 f0       	breq	.+30     	; 0x11c2 <vfprintf+0x260>
    11a4:	b5 c0       	rjmp	.+362    	; 0x1310 <vfprintf+0x3ae>
    11a6:	80 37       	cpi	r24, 0x70	; 112
    11a8:	19 f0       	breq	.+6      	; 0x11b0 <vfprintf+0x24e>
    11aa:	88 37       	cpi	r24, 0x78	; 120
    11ac:	21 f0       	breq	.+8      	; 0x11b6 <vfprintf+0x254>
    11ae:	b0 c0       	rjmp	.+352    	; 0x1310 <vfprintf+0x3ae>
    11b0:	e9 2f       	mov	r30, r25
    11b2:	e0 61       	ori	r30, 0x10	; 16
    11b4:	be 2e       	mov	r11, r30
    11b6:	b4 fe       	sbrs	r11, 4
    11b8:	0d c0       	rjmp	.+26     	; 0x11d4 <vfprintf+0x272>
    11ba:	fb 2d       	mov	r31, r11
    11bc:	f4 60       	ori	r31, 0x04	; 4
    11be:	bf 2e       	mov	r11, r31
    11c0:	09 c0       	rjmp	.+18     	; 0x11d4 <vfprintf+0x272>
    11c2:	34 fe       	sbrs	r3, 4
    11c4:	0a c0       	rjmp	.+20     	; 0x11da <vfprintf+0x278>
    11c6:	29 2f       	mov	r18, r25
    11c8:	26 60       	ori	r18, 0x06	; 6
    11ca:	b2 2e       	mov	r11, r18
    11cc:	06 c0       	rjmp	.+12     	; 0x11da <vfprintf+0x278>
    11ce:	28 e0       	ldi	r18, 0x08	; 8
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	05 c0       	rjmp	.+10     	; 0x11de <vfprintf+0x27c>
    11d4:	20 e1       	ldi	r18, 0x10	; 16
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <vfprintf+0x27c>
    11da:	20 e1       	ldi	r18, 0x10	; 16
    11dc:	32 e0       	ldi	r19, 0x02	; 2
    11de:	f8 01       	movw	r30, r16
    11e0:	b7 fe       	sbrs	r11, 7
    11e2:	07 c0       	rjmp	.+14     	; 0x11f2 <vfprintf+0x290>
    11e4:	60 81       	ld	r22, Z
    11e6:	71 81       	ldd	r23, Z+1	; 0x01
    11e8:	82 81       	ldd	r24, Z+2	; 0x02
    11ea:	93 81       	ldd	r25, Z+3	; 0x03
    11ec:	0c 5f       	subi	r16, 0xFC	; 252
    11ee:	1f 4f       	sbci	r17, 0xFF	; 255
    11f0:	06 c0       	rjmp	.+12     	; 0x11fe <vfprintf+0x29c>
    11f2:	60 81       	ld	r22, Z
    11f4:	71 81       	ldd	r23, Z+1	; 0x01
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	0e 5f       	subi	r16, 0xFE	; 254
    11fc:	1f 4f       	sbci	r17, 0xFF	; 255
    11fe:	a3 01       	movw	r20, r6
    1200:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__ultoa_invert>
    1204:	88 2e       	mov	r8, r24
    1206:	86 18       	sub	r8, r6
    1208:	fb 2d       	mov	r31, r11
    120a:	ff 77       	andi	r31, 0x7F	; 127
    120c:	3f 2e       	mov	r3, r31
    120e:	36 fe       	sbrs	r3, 6
    1210:	0d c0       	rjmp	.+26     	; 0x122c <vfprintf+0x2ca>
    1212:	23 2d       	mov	r18, r3
    1214:	2e 7f       	andi	r18, 0xFE	; 254
    1216:	a2 2e       	mov	r10, r18
    1218:	89 14       	cp	r8, r9
    121a:	58 f4       	brcc	.+22     	; 0x1232 <vfprintf+0x2d0>
    121c:	34 fe       	sbrs	r3, 4
    121e:	0b c0       	rjmp	.+22     	; 0x1236 <vfprintf+0x2d4>
    1220:	32 fc       	sbrc	r3, 2
    1222:	09 c0       	rjmp	.+18     	; 0x1236 <vfprintf+0x2d4>
    1224:	83 2d       	mov	r24, r3
    1226:	8e 7e       	andi	r24, 0xEE	; 238
    1228:	a8 2e       	mov	r10, r24
    122a:	05 c0       	rjmp	.+10     	; 0x1236 <vfprintf+0x2d4>
    122c:	b8 2c       	mov	r11, r8
    122e:	a3 2c       	mov	r10, r3
    1230:	03 c0       	rjmp	.+6      	; 0x1238 <vfprintf+0x2d6>
    1232:	b8 2c       	mov	r11, r8
    1234:	01 c0       	rjmp	.+2      	; 0x1238 <vfprintf+0x2d6>
    1236:	b9 2c       	mov	r11, r9
    1238:	a4 fe       	sbrs	r10, 4
    123a:	0f c0       	rjmp	.+30     	; 0x125a <vfprintf+0x2f8>
    123c:	fe 01       	movw	r30, r28
    123e:	e8 0d       	add	r30, r8
    1240:	f1 1d       	adc	r31, r1
    1242:	80 81       	ld	r24, Z
    1244:	80 33       	cpi	r24, 0x30	; 48
    1246:	21 f4       	brne	.+8      	; 0x1250 <vfprintf+0x2ee>
    1248:	9a 2d       	mov	r25, r10
    124a:	99 7e       	andi	r25, 0xE9	; 233
    124c:	a9 2e       	mov	r10, r25
    124e:	09 c0       	rjmp	.+18     	; 0x1262 <vfprintf+0x300>
    1250:	a2 fe       	sbrs	r10, 2
    1252:	06 c0       	rjmp	.+12     	; 0x1260 <vfprintf+0x2fe>
    1254:	b3 94       	inc	r11
    1256:	b3 94       	inc	r11
    1258:	04 c0       	rjmp	.+8      	; 0x1262 <vfprintf+0x300>
    125a:	8a 2d       	mov	r24, r10
    125c:	86 78       	andi	r24, 0x86	; 134
    125e:	09 f0       	breq	.+2      	; 0x1262 <vfprintf+0x300>
    1260:	b3 94       	inc	r11
    1262:	a3 fc       	sbrc	r10, 3
    1264:	11 c0       	rjmp	.+34     	; 0x1288 <vfprintf+0x326>
    1266:	a0 fe       	sbrs	r10, 0
    1268:	06 c0       	rjmp	.+12     	; 0x1276 <vfprintf+0x314>
    126a:	b2 14       	cp	r11, r2
    126c:	88 f4       	brcc	.+34     	; 0x1290 <vfprintf+0x32e>
    126e:	28 0c       	add	r2, r8
    1270:	92 2c       	mov	r9, r2
    1272:	9b 18       	sub	r9, r11
    1274:	0e c0       	rjmp	.+28     	; 0x1292 <vfprintf+0x330>
    1276:	b2 14       	cp	r11, r2
    1278:	60 f4       	brcc	.+24     	; 0x1292 <vfprintf+0x330>
    127a:	b6 01       	movw	r22, r12
    127c:	80 e2       	ldi	r24, 0x20	; 32
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 a8 09 	call	0x1350	; 0x1350 <fputc>
    1284:	b3 94       	inc	r11
    1286:	f7 cf       	rjmp	.-18     	; 0x1276 <vfprintf+0x314>
    1288:	b2 14       	cp	r11, r2
    128a:	18 f4       	brcc	.+6      	; 0x1292 <vfprintf+0x330>
    128c:	2b 18       	sub	r2, r11
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <vfprintf+0x332>
    1290:	98 2c       	mov	r9, r8
    1292:	21 2c       	mov	r2, r1
    1294:	a4 fe       	sbrs	r10, 4
    1296:	10 c0       	rjmp	.+32     	; 0x12b8 <vfprintf+0x356>
    1298:	b6 01       	movw	r22, r12
    129a:	80 e3       	ldi	r24, 0x30	; 48
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 a8 09 	call	0x1350	; 0x1350 <fputc>
    12a2:	a2 fe       	sbrs	r10, 2
    12a4:	17 c0       	rjmp	.+46     	; 0x12d4 <vfprintf+0x372>
    12a6:	a1 fc       	sbrc	r10, 1
    12a8:	03 c0       	rjmp	.+6      	; 0x12b0 <vfprintf+0x34e>
    12aa:	88 e7       	ldi	r24, 0x78	; 120
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <vfprintf+0x352>
    12b0:	88 e5       	ldi	r24, 0x58	; 88
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	b6 01       	movw	r22, r12
    12b6:	0c c0       	rjmp	.+24     	; 0x12d0 <vfprintf+0x36e>
    12b8:	8a 2d       	mov	r24, r10
    12ba:	86 78       	andi	r24, 0x86	; 134
    12bc:	59 f0       	breq	.+22     	; 0x12d4 <vfprintf+0x372>
    12be:	a1 fe       	sbrs	r10, 1
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <vfprintf+0x364>
    12c2:	8b e2       	ldi	r24, 0x2B	; 43
    12c4:	01 c0       	rjmp	.+2      	; 0x12c8 <vfprintf+0x366>
    12c6:	80 e2       	ldi	r24, 0x20	; 32
    12c8:	a7 fc       	sbrc	r10, 7
    12ca:	8d e2       	ldi	r24, 0x2D	; 45
    12cc:	b6 01       	movw	r22, r12
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 a8 09 	call	0x1350	; 0x1350 <fputc>
    12d4:	89 14       	cp	r8, r9
    12d6:	38 f4       	brcc	.+14     	; 0x12e6 <vfprintf+0x384>
    12d8:	b6 01       	movw	r22, r12
    12da:	80 e3       	ldi	r24, 0x30	; 48
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	0e 94 a8 09 	call	0x1350	; 0x1350 <fputc>
    12e2:	9a 94       	dec	r9
    12e4:	f7 cf       	rjmp	.-18     	; 0x12d4 <vfprintf+0x372>
    12e6:	8a 94       	dec	r8
    12e8:	f3 01       	movw	r30, r6
    12ea:	e8 0d       	add	r30, r8
    12ec:	f1 1d       	adc	r31, r1
    12ee:	80 81       	ld	r24, Z
    12f0:	b6 01       	movw	r22, r12
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	0e 94 a8 09 	call	0x1350	; 0x1350 <fputc>
    12f8:	81 10       	cpse	r8, r1
    12fa:	f5 cf       	rjmp	.-22     	; 0x12e6 <vfprintf+0x384>
    12fc:	22 20       	and	r2, r2
    12fe:	09 f4       	brne	.+2      	; 0x1302 <vfprintf+0x3a0>
    1300:	42 ce       	rjmp	.-892    	; 0xf86 <vfprintf+0x24>
    1302:	b6 01       	movw	r22, r12
    1304:	80 e2       	ldi	r24, 0x20	; 32
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 a8 09 	call	0x1350	; 0x1350 <fputc>
    130c:	2a 94       	dec	r2
    130e:	f6 cf       	rjmp	.-20     	; 0x12fc <vfprintf+0x39a>
    1310:	f6 01       	movw	r30, r12
    1312:	86 81       	ldd	r24, Z+6	; 0x06
    1314:	97 81       	ldd	r25, Z+7	; 0x07
    1316:	02 c0       	rjmp	.+4      	; 0x131c <vfprintf+0x3ba>
    1318:	8f ef       	ldi	r24, 0xFF	; 255
    131a:	9f ef       	ldi	r25, 0xFF	; 255
    131c:	2b 96       	adiw	r28, 0x0b	; 11
    131e:	e2 e1       	ldi	r30, 0x12	; 18
    1320:	0c 94 5e 0a 	jmp	0x14bc	; 0x14bc <__epilogue_restores__>

00001324 <strnlen_P>:
    1324:	fc 01       	movw	r30, r24
    1326:	05 90       	lpm	r0, Z+
    1328:	61 50       	subi	r22, 0x01	; 1
    132a:	70 40       	sbci	r23, 0x00	; 0
    132c:	01 10       	cpse	r0, r1
    132e:	d8 f7       	brcc	.-10     	; 0x1326 <strnlen_P+0x2>
    1330:	80 95       	com	r24
    1332:	90 95       	com	r25
    1334:	8e 0f       	add	r24, r30
    1336:	9f 1f       	adc	r25, r31
    1338:	08 95       	ret

0000133a <strnlen>:
    133a:	fc 01       	movw	r30, r24
    133c:	61 50       	subi	r22, 0x01	; 1
    133e:	70 40       	sbci	r23, 0x00	; 0
    1340:	01 90       	ld	r0, Z+
    1342:	01 10       	cpse	r0, r1
    1344:	d8 f7       	brcc	.-10     	; 0x133c <strnlen+0x2>
    1346:	80 95       	com	r24
    1348:	90 95       	com	r25
    134a:	8e 0f       	add	r24, r30
    134c:	9f 1f       	adc	r25, r31
    134e:	08 95       	ret

00001350 <fputc>:
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	fb 01       	movw	r30, r22
    135a:	23 81       	ldd	r18, Z+3	; 0x03
    135c:	21 fd       	sbrc	r18, 1
    135e:	03 c0       	rjmp	.+6      	; 0x1366 <fputc+0x16>
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	9f ef       	ldi	r25, 0xFF	; 255
    1364:	2c c0       	rjmp	.+88     	; 0x13be <fputc+0x6e>
    1366:	22 ff       	sbrs	r18, 2
    1368:	16 c0       	rjmp	.+44     	; 0x1396 <fputc+0x46>
    136a:	46 81       	ldd	r20, Z+6	; 0x06
    136c:	57 81       	ldd	r21, Z+7	; 0x07
    136e:	24 81       	ldd	r18, Z+4	; 0x04
    1370:	35 81       	ldd	r19, Z+5	; 0x05
    1372:	42 17       	cp	r20, r18
    1374:	53 07       	cpc	r21, r19
    1376:	44 f4       	brge	.+16     	; 0x1388 <fputc+0x38>
    1378:	a0 81       	ld	r26, Z
    137a:	b1 81       	ldd	r27, Z+1	; 0x01
    137c:	9d 01       	movw	r18, r26
    137e:	2f 5f       	subi	r18, 0xFF	; 255
    1380:	3f 4f       	sbci	r19, 0xFF	; 255
    1382:	31 83       	std	Z+1, r19	; 0x01
    1384:	20 83       	st	Z, r18
    1386:	8c 93       	st	X, r24
    1388:	26 81       	ldd	r18, Z+6	; 0x06
    138a:	37 81       	ldd	r19, Z+7	; 0x07
    138c:	2f 5f       	subi	r18, 0xFF	; 255
    138e:	3f 4f       	sbci	r19, 0xFF	; 255
    1390:	37 83       	std	Z+7, r19	; 0x07
    1392:	26 83       	std	Z+6, r18	; 0x06
    1394:	14 c0       	rjmp	.+40     	; 0x13be <fputc+0x6e>
    1396:	8b 01       	movw	r16, r22
    1398:	ec 01       	movw	r28, r24
    139a:	fb 01       	movw	r30, r22
    139c:	00 84       	ldd	r0, Z+8	; 0x08
    139e:	f1 85       	ldd	r31, Z+9	; 0x09
    13a0:	e0 2d       	mov	r30, r0
    13a2:	09 95       	icall
    13a4:	89 2b       	or	r24, r25
    13a6:	e1 f6       	brne	.-72     	; 0x1360 <fputc+0x10>
    13a8:	d8 01       	movw	r26, r16
    13aa:	16 96       	adiw	r26, 0x06	; 6
    13ac:	8d 91       	ld	r24, X+
    13ae:	9c 91       	ld	r25, X
    13b0:	17 97       	sbiw	r26, 0x07	; 7
    13b2:	01 96       	adiw	r24, 0x01	; 1
    13b4:	17 96       	adiw	r26, 0x07	; 7
    13b6:	9c 93       	st	X, r25
    13b8:	8e 93       	st	-X, r24
    13ba:	16 97       	sbiw	r26, 0x06	; 6
    13bc:	ce 01       	movw	r24, r28
    13be:	df 91       	pop	r29
    13c0:	cf 91       	pop	r28
    13c2:	1f 91       	pop	r17
    13c4:	0f 91       	pop	r16
    13c6:	08 95       	ret

000013c8 <__ultoa_invert>:
    13c8:	fa 01       	movw	r30, r20
    13ca:	aa 27       	eor	r26, r26
    13cc:	28 30       	cpi	r18, 0x08	; 8
    13ce:	51 f1       	breq	.+84     	; 0x1424 <__ultoa_invert+0x5c>
    13d0:	20 31       	cpi	r18, 0x10	; 16
    13d2:	81 f1       	breq	.+96     	; 0x1434 <__ultoa_invert+0x6c>
    13d4:	e8 94       	clt
    13d6:	6f 93       	push	r22
    13d8:	6e 7f       	andi	r22, 0xFE	; 254
    13da:	6e 5f       	subi	r22, 0xFE	; 254
    13dc:	7f 4f       	sbci	r23, 0xFF	; 255
    13de:	8f 4f       	sbci	r24, 0xFF	; 255
    13e0:	9f 4f       	sbci	r25, 0xFF	; 255
    13e2:	af 4f       	sbci	r26, 0xFF	; 255
    13e4:	b1 e0       	ldi	r27, 0x01	; 1
    13e6:	3e d0       	rcall	.+124    	; 0x1464 <__ultoa_invert+0x9c>
    13e8:	b4 e0       	ldi	r27, 0x04	; 4
    13ea:	3c d0       	rcall	.+120    	; 0x1464 <__ultoa_invert+0x9c>
    13ec:	67 0f       	add	r22, r23
    13ee:	78 1f       	adc	r23, r24
    13f0:	89 1f       	adc	r24, r25
    13f2:	9a 1f       	adc	r25, r26
    13f4:	a1 1d       	adc	r26, r1
    13f6:	68 0f       	add	r22, r24
    13f8:	79 1f       	adc	r23, r25
    13fa:	8a 1f       	adc	r24, r26
    13fc:	91 1d       	adc	r25, r1
    13fe:	a1 1d       	adc	r26, r1
    1400:	6a 0f       	add	r22, r26
    1402:	71 1d       	adc	r23, r1
    1404:	81 1d       	adc	r24, r1
    1406:	91 1d       	adc	r25, r1
    1408:	a1 1d       	adc	r26, r1
    140a:	20 d0       	rcall	.+64     	; 0x144c <__ultoa_invert+0x84>
    140c:	09 f4       	brne	.+2      	; 0x1410 <__ultoa_invert+0x48>
    140e:	68 94       	set
    1410:	3f 91       	pop	r19
    1412:	2a e0       	ldi	r18, 0x0A	; 10
    1414:	26 9f       	mul	r18, r22
    1416:	11 24       	eor	r1, r1
    1418:	30 19       	sub	r19, r0
    141a:	30 5d       	subi	r19, 0xD0	; 208
    141c:	31 93       	st	Z+, r19
    141e:	de f6       	brtc	.-74     	; 0x13d6 <__ultoa_invert+0xe>
    1420:	cf 01       	movw	r24, r30
    1422:	08 95       	ret
    1424:	46 2f       	mov	r20, r22
    1426:	47 70       	andi	r20, 0x07	; 7
    1428:	40 5d       	subi	r20, 0xD0	; 208
    142a:	41 93       	st	Z+, r20
    142c:	b3 e0       	ldi	r27, 0x03	; 3
    142e:	0f d0       	rcall	.+30     	; 0x144e <__ultoa_invert+0x86>
    1430:	c9 f7       	brne	.-14     	; 0x1424 <__ultoa_invert+0x5c>
    1432:	f6 cf       	rjmp	.-20     	; 0x1420 <__ultoa_invert+0x58>
    1434:	46 2f       	mov	r20, r22
    1436:	4f 70       	andi	r20, 0x0F	; 15
    1438:	40 5d       	subi	r20, 0xD0	; 208
    143a:	4a 33       	cpi	r20, 0x3A	; 58
    143c:	18 f0       	brcs	.+6      	; 0x1444 <__ultoa_invert+0x7c>
    143e:	49 5d       	subi	r20, 0xD9	; 217
    1440:	31 fd       	sbrc	r19, 1
    1442:	40 52       	subi	r20, 0x20	; 32
    1444:	41 93       	st	Z+, r20
    1446:	02 d0       	rcall	.+4      	; 0x144c <__ultoa_invert+0x84>
    1448:	a9 f7       	brne	.-22     	; 0x1434 <__ultoa_invert+0x6c>
    144a:	ea cf       	rjmp	.-44     	; 0x1420 <__ultoa_invert+0x58>
    144c:	b4 e0       	ldi	r27, 0x04	; 4
    144e:	a6 95       	lsr	r26
    1450:	97 95       	ror	r25
    1452:	87 95       	ror	r24
    1454:	77 95       	ror	r23
    1456:	67 95       	ror	r22
    1458:	ba 95       	dec	r27
    145a:	c9 f7       	brne	.-14     	; 0x144e <__ultoa_invert+0x86>
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	61 05       	cpc	r22, r1
    1460:	71 05       	cpc	r23, r1
    1462:	08 95       	ret
    1464:	9b 01       	movw	r18, r22
    1466:	ac 01       	movw	r20, r24
    1468:	0a 2e       	mov	r0, r26
    146a:	06 94       	lsr	r0
    146c:	57 95       	ror	r21
    146e:	47 95       	ror	r20
    1470:	37 95       	ror	r19
    1472:	27 95       	ror	r18
    1474:	ba 95       	dec	r27
    1476:	c9 f7       	brne	.-14     	; 0x146a <__ultoa_invert+0xa2>
    1478:	62 0f       	add	r22, r18
    147a:	73 1f       	adc	r23, r19
    147c:	84 1f       	adc	r24, r20
    147e:	95 1f       	adc	r25, r21
    1480:	a0 1d       	adc	r26, r0
    1482:	08 95       	ret

00001484 <__prologue_saves__>:
    1484:	2f 92       	push	r2
    1486:	3f 92       	push	r3
    1488:	4f 92       	push	r4
    148a:	5f 92       	push	r5
    148c:	6f 92       	push	r6
    148e:	7f 92       	push	r7
    1490:	8f 92       	push	r8
    1492:	9f 92       	push	r9
    1494:	af 92       	push	r10
    1496:	bf 92       	push	r11
    1498:	cf 92       	push	r12
    149a:	df 92       	push	r13
    149c:	ef 92       	push	r14
    149e:	ff 92       	push	r15
    14a0:	0f 93       	push	r16
    14a2:	1f 93       	push	r17
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
    14a8:	cd b7       	in	r28, 0x3d	; 61
    14aa:	de b7       	in	r29, 0x3e	; 62
    14ac:	ca 1b       	sub	r28, r26
    14ae:	db 0b       	sbc	r29, r27
    14b0:	0f b6       	in	r0, 0x3f	; 63
    14b2:	f8 94       	cli
    14b4:	de bf       	out	0x3e, r29	; 62
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	cd bf       	out	0x3d, r28	; 61
    14ba:	09 94       	ijmp

000014bc <__epilogue_restores__>:
    14bc:	2a 88       	ldd	r2, Y+18	; 0x12
    14be:	39 88       	ldd	r3, Y+17	; 0x11
    14c0:	48 88       	ldd	r4, Y+16	; 0x10
    14c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    14c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    14c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    14c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    14ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    14cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    14ce:	b9 84       	ldd	r11, Y+9	; 0x09
    14d0:	c8 84       	ldd	r12, Y+8	; 0x08
    14d2:	df 80       	ldd	r13, Y+7	; 0x07
    14d4:	ee 80       	ldd	r14, Y+6	; 0x06
    14d6:	fd 80       	ldd	r15, Y+5	; 0x05
    14d8:	0c 81       	ldd	r16, Y+4	; 0x04
    14da:	1b 81       	ldd	r17, Y+3	; 0x03
    14dc:	aa 81       	ldd	r26, Y+2	; 0x02
    14de:	b9 81       	ldd	r27, Y+1	; 0x01
    14e0:	ce 0f       	add	r28, r30
    14e2:	d1 1d       	adc	r29, r1
    14e4:	0f b6       	in	r0, 0x3f	; 63
    14e6:	f8 94       	cli
    14e8:	de bf       	out	0x3e, r29	; 62
    14ea:	0f be       	out	0x3f, r0	; 63
    14ec:	cd bf       	out	0x3d, r28	; 61
    14ee:	ed 01       	movw	r28, r26
    14f0:	08 95       	ret

000014f2 <_exit>:
    14f2:	f8 94       	cli

000014f4 <__stop_program>:
    14f4:	ff cf       	rjmp	.-2      	; 0x14f4 <__stop_program>
