
EE209.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  000015f6  0000168a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000277  00800130  00800130  000016ba  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001718  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e5a  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010c7  00000000  00000000  0000378a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cc7  00000000  00000000  00004851  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  00005518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000095e  00000000  00000000  0000595c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b63  00000000  00000000  000062ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00006e1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__vector_1>
       8:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <__vector_2>
       c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      34:	0c 94 30 04 	jmp	0x860	; 0x860 <__vector_13>
      38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      5c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      64:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      68:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      90:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      94:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
      b4:	05 a8       	ldd	r0, Z+53	; 0x35
      b6:	4c cd       	rjmp	.-1384   	; 0xfffffb50 <__eeprom_end+0xff7efb50>
      b8:	b2 d4       	rcall	.+2404   	; 0xa1e <uart_write+0x2a>
      ba:	4e b9       	out	0x0e, r20	; 14
      bc:	38 36       	cpi	r19, 0x68	; 104
      be:	a9 02       	muls	r26, r25
      c0:	0c 50       	subi	r16, 0x0C	; 12
      c2:	b9 91       	ld	r27, Y+
      c4:	86 88       	ldd	r8, Z+22	; 0x16
      c6:	08 3c       	cpi	r16, 0xC8	; 200
      c8:	a6 aa       	std	Z+54, r10	; 0x36
      ca:	aa 2a       	or	r10, r26
      cc:	be 00       	.word	0x00be	; ????
      ce:	00 00       	nop
      d0:	80 3f       	cpi	r24, 0xF0	; 240

000000d2 <__ctors_end>:
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
      de:	11 e0       	ldi	r17, 0x01	; 1
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	b1 e0       	ldi	r27, 0x01	; 1
      e4:	e6 ef       	ldi	r30, 0xF6	; 246
      e6:	f5 e1       	ldi	r31, 0x15	; 21
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
      ea:	05 90       	lpm	r0, Z+
      ec:	0d 92       	st	X+, r0
      ee:	a0 33       	cpi	r26, 0x30	; 48
      f0:	b1 07       	cpc	r27, r17
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
      f4:	23 e0       	ldi	r18, 0x03	; 3
      f6:	a0 e3       	ldi	r26, 0x30	; 48
      f8:	b1 e0       	ldi	r27, 0x01	; 1
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
      fe:	a7 3a       	cpi	r26, 0xA7	; 167
     100:	b2 07       	cpc	r27, r18
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
     104:	0e 94 10 05 	call	0xa20	; 0xa20 <main>
     108:	0c 94 f9 0a 	jmp	0x15f2	; 0x15f2 <_exit>

0000010c <__bad_interrupt>:
     10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <read_adc_mv>:


uint16_t read_adc_mv(uint8_t channel)
{
	// clear ADMUX
	ADMUX &= 0xF0;
     110:	ec e7       	ldi	r30, 0x7C	; 124
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	90 81       	ld	r25, Z
     116:	90 7f       	andi	r25, 0xF0	; 240
     118:	90 83       	st	Z, r25
	// set least significant 4 bits to channel
	ADMUX |= channel;
     11a:	90 81       	ld	r25, Z
     11c:	89 2b       	or	r24, r25
     11e:	80 83       	st	Z, r24
	// start conversion
	ADCSRA |= (1<<ADSC);
     120:	ea e7       	ldi	r30, 0x7A	; 122
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	80 81       	ld	r24, Z
     126:	80 64       	ori	r24, 0x40	; 64
     128:	80 83       	st	Z, r24
	// wait until conversion is finished
	while (ADCSRA & (1<<ADSC));
     12a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     12e:	86 fd       	sbrc	r24, 6
     130:	fc cf       	rjmp	.-8      	; 0x12a <read_adc_mv+0x1a>
	
	// read full 10 bits of ADC registers
	uint16_t adc_output = ADCW;
     132:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     136:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	// convert reading into millivolts
	uint32_t mv = (uint32_t)adc_output * ((uint32_t)5000/1023);
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b0 e0       	ldi	r27, 0x00	; 0
     13e:	88 0f       	add	r24, r24
     140:	99 1f       	adc	r25, r25
     142:	aa 1f       	adc	r26, r26
     144:	bb 1f       	adc	r27, r27
     146:	88 0f       	add	r24, r24
     148:	99 1f       	adc	r25, r25
     14a:	aa 1f       	adc	r26, r26
     14c:	bb 1f       	adc	r27, r27
	return (uint16_t)mv;
}
     14e:	08 95       	ret

00000150 <adc_init>:

void adc_init() 
{
	// set ADMUX to read from VCC
	ADMUX |= (1<<REFS0);
     150:	ec e7       	ldi	r30, 0x7C	; 124
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	80 64       	ori	r24, 0x40	; 64
     158:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     15a:	80 81       	ld	r24, Z
     15c:	8f 77       	andi	r24, 0x7F	; 127
     15e:	80 83       	st	Z, r24
	// clear channel selection
	ADMUX &= 0xF0;
     160:	80 81       	ld	r24, Z
     162:	80 7f       	andi	r24, 0xF0	; 240
     164:	80 83       	st	Z, r24
	// enable conversions, scale by system clock by 128
	ADCSRA |= (1<<ADEN) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2);
     166:	ea e7       	ldi	r30, 0x7A	; 122
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	80 81       	ld	r24, Z
     16c:	87 68       	ori	r24, 0x87	; 135
     16e:	80 83       	st	Z, r24
     170:	08 95       	ret

00000172 <fsmInit>:
#include "fsm.h"

// initialis fsm with function pointers
void fsmInit(struct functionPointers *fsmFunctions) 
{
    functions = fsmFunctions;
     172:	90 93 fc 01 	sts	0x01FC, r25	; 0x8001fc <functions+0x1>
     176:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <functions>
    state = STATE_INIT;
     17a:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <state>
    voltageTriggerIndex = 0;
     17e:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <voltageTriggerIndex>
    currentTriggerIndex = 0;
     182:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <currentTriggerIndex>
	
	triggerSize = 0;
     186:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <triggerSize>
	peakVoltage = 0;
     18a:	10 92 6d 02 	sts	0x026D, r1	; 0x80026d <peakVoltage+0x1>
     18e:	10 92 6c 02 	sts	0x026C, r1	; 0x80026c <peakVoltage>
	peakCurrent = 0;
     192:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <peakCurrent+0x1>
     196:	10 92 fd 01 	sts	0x01FD, r1	; 0x8001fd <peakCurrent>
	voltage = 0;
     19a:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <voltage+0x1>
     19e:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <voltage>
	current = 0;
     1a2:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <current+0x1>
     1a6:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <current>
	phase = 0;
     1aa:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <phase+0x1>
     1ae:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <phase>
	pf = 0;
     1b2:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <pf+0x1>
     1b6:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <pf>
	power = 0;
     1ba:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <power+0x1>
     1be:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <power>
     1c2:	08 95       	ret

000001c4 <stateInit>:

// init state
void stateInit()
{
    // init uart
    functions->uart_init(BAUD);
     1c4:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     1c8:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     1cc:	01 90       	ld	r0, Z+
     1ce:	f0 81       	ld	r31, Z
     1d0:	e0 2d       	mov	r30, r0
     1d2:	80 e8       	ldi	r24, 0x80	; 128
     1d4:	95 e2       	ldi	r25, 0x25	; 37
     1d6:	09 95       	icall
    // init io
    functions->io_init();
     1d8:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     1dc:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     1e0:	02 80       	ldd	r0, Z+2	; 0x02
     1e2:	f3 81       	ldd	r31, Z+3	; 0x03
     1e4:	e0 2d       	mov	r30, r0
     1e6:	09 95       	icall
    // init adc
    functions->adc_init();
     1e8:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     1ec:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     1f0:	04 80       	ldd	r0, Z+4	; 0x04
     1f2:	f5 81       	ldd	r31, Z+5	; 0x05
     1f4:	e0 2d       	mov	r30, r0
     1f6:	09 95       	icall
    // init timer
    functions->timer_init();
     1f8:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     1fc:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     200:	06 80       	ldd	r0, Z+6	; 0x06
     202:	f7 81       	ldd	r31, Z+7	; 0x07
     204:	e0 2d       	mov	r30, r0
     206:	09 95       	icall
    // init interrupts
    functions->int_init(voltageTriggerTimes, currentTriggerTimes, SIZE, functions->get_time);
     208:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <functions>
     20c:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <functions+0x1>
     210:	18 96       	adiw	r26, 0x08	; 8
     212:	ed 91       	ld	r30, X+
     214:	fc 91       	ld	r31, X
     216:	19 97       	sbiw	r26, 0x09	; 9
     218:	54 96       	adiw	r26, 0x14	; 20
     21a:	2d 91       	ld	r18, X+
     21c:	3c 91       	ld	r19, X
     21e:	55 97       	sbiw	r26, 0x15	; 21
     220:	42 e3       	ldi	r20, 0x32	; 50
     222:	67 e9       	ldi	r22, 0x97	; 151
     224:	71 e0       	ldi	r23, 0x01	; 1
     226:	82 ed       	ldi	r24, 0xD2	; 210
     228:	92 e0       	ldi	r25, 0x02	; 2
     22a:	09 95       	icall
    // change state on function completion
    state = STATE_READ_POWER;
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <state>
     232:	08 95       	ret

00000234 <stateReadPower>:
}

// read power state
void stateReadPower()
{
     234:	1f 93       	push	r17
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
    // enable interrupts and reset timer
	functions->timer_reset();
     23a:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     23e:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     242:	06 88       	ldd	r0, Z+22	; 0x16
     244:	f7 89       	ldd	r31, Z+23	; 0x17
     246:	e0 2d       	mov	r30, r0
     248:	09 95       	icall
	//functions->timer_init();
    functions->enable_interrupts();
     24a:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     24e:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     252:	00 88       	ldd	r0, Z+16	; 0x10
     254:	f1 89       	ldd	r31, Z+17	; 0x11
     256:	e0 2d       	mov	r30, r0
     258:	09 95       	icall
    for (int8_t j = 0; j < SIZE; j++) {
     25a:	10 e0       	ldi	r17, 0x00	; 0
     25c:	22 c0       	rjmp	.+68     	; 0x2a2 <stateReadPower+0x6e>
		voltages[j] = functions->read_adc(VOLTAGE_PIN);
     25e:	c1 2f       	mov	r28, r17
     260:	01 2e       	mov	r0, r17
     262:	00 0c       	add	r0, r0
     264:	dd 0b       	sbc	r29, r29
     266:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     26a:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     26e:	02 88       	ldd	r0, Z+18	; 0x12
     270:	f3 89       	ldd	r31, Z+19	; 0x13
     272:	e0 2d       	mov	r30, r0
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	09 95       	icall
     278:	cc 0f       	add	r28, r28
     27a:	dd 1f       	adc	r29, r29
     27c:	fe 01       	movw	r30, r28
     27e:	e0 5d       	subi	r30, 0xD0	; 208
     280:	fe 4f       	sbci	r31, 0xFE	; 254
     282:	91 83       	std	Z+1, r25	; 0x01
     284:	80 83       	st	Z, r24
        //voltageTimes[j] = functions->get_time();
        currents[j] = functions->read_adc(CURRENT_PIN);
     286:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     28a:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     28e:	02 88       	ldd	r0, Z+18	; 0x12
     290:	f3 89       	ldd	r31, Z+19	; 0x13
     292:	e0 2d       	mov	r30, r0
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	09 95       	icall
     298:	ca 5c       	subi	r28, 0xCA	; 202
     29a:	dc 4f       	sbci	r29, 0xFC	; 252
     29c:	99 83       	std	Y+1, r25	; 0x01
     29e:	88 83       	st	Y, r24
{
    // enable interrupts and reset timer
	functions->timer_reset();
	//functions->timer_init();
    functions->enable_interrupts();
    for (int8_t j = 0; j < SIZE; j++) {
     2a0:	1f 5f       	subi	r17, 0xFF	; 255
     2a2:	12 33       	cpi	r17, 0x32	; 50
     2a4:	e4 f2       	brlt	.-72     	; 0x25e <stateReadPower+0x2a>
        currents[j] = functions->read_adc(CURRENT_PIN);
        //currentTimes[j] = functions->get_time();
    }

    // disable interrupts - prevent the trigger array from overflowing
    functions->disable_interrupts();
     2a6:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     2aa:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     2ae:	06 84       	ldd	r0, Z+14	; 0x0e
     2b0:	f7 85       	ldd	r31, Z+15	; 0x0f
     2b2:	e0 2d       	mov	r30, r0
     2b4:	09 95       	icall

    // possible change the implementation to avoid interrupts by setting a 
    // volatile boolean with an int
    
    // need to add condition for state change
    state = STATE_CALCULATE_POWER;
     2b6:	82 e0       	ldi	r24, 0x02	; 2
     2b8:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <state>
}
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	1f 91       	pop	r17
     2c2:	08 95       	ret

000002c4 <stateCalculatePower>:

// calculate power state
void stateCalculatePower()
{  
    // calculate peak, RMS
    peakVoltage = functions->find_peak(voltages, SIZE);
     2c4:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     2c8:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     2cc:	00 8c       	ldd	r0, Z+24	; 0x18
     2ce:	f1 8d       	ldd	r31, Z+25	; 0x19
     2d0:	e0 2d       	mov	r30, r0
     2d2:	62 e3       	ldi	r22, 0x32	; 50
     2d4:	80 e3       	ldi	r24, 0x30	; 48
     2d6:	91 e0       	ldi	r25, 0x01	; 1
     2d8:	09 95       	icall
     2da:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <peakVoltage+0x1>
     2de:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <peakVoltage>
    peakCurrent = functions->find_peak(currents, SIZE);
     2e2:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     2e6:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     2ea:	00 8c       	ldd	r0, Z+24	; 0x18
     2ec:	f1 8d       	ldd	r31, Z+25	; 0x19
     2ee:	e0 2d       	mov	r30, r0
     2f0:	62 e3       	ldi	r22, 0x32	; 50
     2f2:	86 e3       	ldi	r24, 0x36	; 54
     2f4:	93 e0       	ldi	r25, 0x03	; 3
     2f6:	09 95       	icall
     2f8:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <peakCurrent+0x1>
     2fc:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <peakCurrent>
    voltage = functions->calculate_RMS(peakVoltage);
     300:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     304:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     308:	02 8c       	ldd	r0, Z+26	; 0x1a
     30a:	f3 8d       	ldd	r31, Z+27	; 0x1b
     30c:	e0 2d       	mov	r30, r0
     30e:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <peakVoltage>
     312:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <peakVoltage+0x1>
     316:	09 95       	icall
     318:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <voltage+0x1>
     31c:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <voltage>
    current = functions->calculate_RMS(peakCurrent);
     320:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     324:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     328:	02 8c       	ldd	r0, Z+26	; 0x1a
     32a:	f3 8d       	ldd	r31, Z+27	; 0x1b
     32c:	e0 2d       	mov	r30, r0
     32e:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <peakCurrent>
     332:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <peakCurrent+0x1>
     336:	09 95       	icall
     338:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <current+0x1>
     33c:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <current>

    // calculate phase of two signals
    phase = functions->get_phase_difference(voltageTriggerTimes, voltageTriggerIndex,
     340:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     344:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     348:	04 8c       	ldd	r0, Z+28	; 0x1c
     34a:	f5 8d       	ldd	r31, Z+29	; 0x1d
     34c:	e0 2d       	mov	r30, r0
     34e:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <currentTriggerIndex>
     352:	47 e9       	ldi	r20, 0x97	; 151
     354:	51 e0       	ldi	r21, 0x01	; 1
     356:	60 91 94 01 	lds	r22, 0x0194	; 0x800194 <voltageTriggerIndex>
     35a:	82 ed       	ldi	r24, 0xD2	; 210
     35c:	92 e0       	ldi	r25, 0x02	; 2
     35e:	09 95       	icall
     360:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <phase+0x1>
     364:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <phase>
            currentTriggerTimes, currentTriggerIndex);
    
    // place holder phase
    pf = functions->calculate_power_factor(phase);
     368:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     36c:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     370:	06 8c       	ldd	r0, Z+30	; 0x1e
     372:	f7 8d       	ldd	r31, Z+31	; 0x1f
     374:	e0 2d       	mov	r30, r0
     376:	09 95       	icall
     378:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <pf+0x1>
     37c:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <pf>
    power = functions->calculate_average_power(voltage, 
     380:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     384:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     388:	00 a0       	ldd	r0, Z+32	; 0x20
     38a:	f1 a1       	ldd	r31, Z+33	; 0x21
     38c:	e0 2d       	mov	r30, r0
     38e:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <current>
     392:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <current+0x1>
     396:	ac 01       	movw	r20, r24
     398:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <voltage>
     39c:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <voltage+0x1>
     3a0:	09 95       	icall
     3a2:	90 93 96 01 	sts	0x0196, r25	; 0x800196 <power+0x1>
     3a6:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <power>
            current, pf);
    
    // start iterating over the trigger arrays from zero
    // this effectively resets the array
    voltageTriggerIndex = 0;
     3aa:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <voltageTriggerIndex>
    currentTriggerIndex = 0;
     3ae:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <currentTriggerIndex>
    
	// reset interrupt handler
	functions->int_init(voltageTriggerTimes, currentTriggerTimes, SIZE, functions->get_time);
     3b2:	a0 91 fb 01 	lds	r26, 0x01FB	; 0x8001fb <functions>
     3b6:	b0 91 fc 01 	lds	r27, 0x01FC	; 0x8001fc <functions+0x1>
     3ba:	18 96       	adiw	r26, 0x08	; 8
     3bc:	ed 91       	ld	r30, X+
     3be:	fc 91       	ld	r31, X
     3c0:	19 97       	sbiw	r26, 0x09	; 9
     3c2:	54 96       	adiw	r26, 0x14	; 20
     3c4:	2d 91       	ld	r18, X+
     3c6:	3c 91       	ld	r19, X
     3c8:	55 97       	sbiw	r26, 0x15	; 21
     3ca:	42 e3       	ldi	r20, 0x32	; 50
     3cc:	67 e9       	ldi	r22, 0x97	; 151
     3ce:	71 e0       	ldi	r23, 0x01	; 1
     3d0:	82 ed       	ldi	r24, 0xD2	; 210
     3d2:	92 e0       	ldi	r25, 0x02	; 2
     3d4:	09 95       	icall
    // new state needed to be added for correct transition
    state = STATE_TRANSMIT_POWER;
     3d6:	83 e0       	ldi	r24, 0x03	; 3
     3d8:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <state>
     3dc:	08 95       	ret

000003de <stateTransmitPower>:
}

// transmit the power over UART
void stateTransmitPower()
{
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
     3e6:	60 97       	sbiw	r28, 0x10	; 16
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	cd bf       	out	0x3d, r28	; 61
    char dataString[16];
    functions->get_uart_string(power, dataString, 'P');
     3f2:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     3f6:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     3fa:	02 84       	ldd	r0, Z+10	; 0x0a
     3fc:	f3 85       	ldd	r31, Z+11	; 0x0b
     3fe:	e0 2d       	mov	r30, r0
     400:	40 e5       	ldi	r20, 0x50	; 80
     402:	be 01       	movw	r22, r28
     404:	6f 5f       	subi	r22, 0xFF	; 255
     406:	7f 4f       	sbci	r23, 0xFF	; 255
     408:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <power>
     40c:	90 91 96 01 	lds	r25, 0x0196	; 0x800196 <power+0x1>
     410:	09 95       	icall
    functions->uart_write(dataString);
     412:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     416:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     41a:	04 84       	ldd	r0, Z+12	; 0x0c
     41c:	f5 85       	ldd	r31, Z+13	; 0x0d
     41e:	e0 2d       	mov	r30, r0
     420:	ce 01       	movw	r24, r28
     422:	01 96       	adiw	r24, 0x01	; 1
     424:	09 95       	icall
	functions->get_uart_string(pf, dataString, 'F');
     426:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     42a:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     42e:	02 84       	ldd	r0, Z+10	; 0x0a
     430:	f3 85       	ldd	r31, Z+11	; 0x0b
     432:	e0 2d       	mov	r30, r0
     434:	46 e4       	ldi	r20, 0x46	; 70
     436:	be 01       	movw	r22, r28
     438:	6f 5f       	subi	r22, 0xFF	; 255
     43a:	7f 4f       	sbci	r23, 0xFF	; 255
     43c:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <pf>
     440:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <pf+0x1>
     444:	09 95       	icall
	functions->uart_write(dataString);
     446:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     44a:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     44e:	04 84       	ldd	r0, Z+12	; 0x0c
     450:	f5 85       	ldd	r31, Z+13	; 0x0d
     452:	e0 2d       	mov	r30, r0
     454:	ce 01       	movw	r24, r28
     456:	01 96       	adiw	r24, 0x01	; 1
     458:	09 95       	icall
	functions->get_uart_string(voltage, dataString, 'V');
     45a:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     45e:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     462:	02 84       	ldd	r0, Z+10	; 0x0a
     464:	f3 85       	ldd	r31, Z+11	; 0x0b
     466:	e0 2d       	mov	r30, r0
     468:	46 e5       	ldi	r20, 0x56	; 86
     46a:	be 01       	movw	r22, r28
     46c:	6f 5f       	subi	r22, 0xFF	; 255
     46e:	7f 4f       	sbci	r23, 0xFF	; 255
     470:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <voltage>
     474:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <voltage+0x1>
     478:	09 95       	icall
	functions->uart_write(dataString);
     47a:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     47e:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     482:	04 84       	ldd	r0, Z+12	; 0x0c
     484:	f5 85       	ldd	r31, Z+13	; 0x0d
     486:	e0 2d       	mov	r30, r0
     488:	ce 01       	movw	r24, r28
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	09 95       	icall
	functions->get_uart_string(current, dataString, 'I');
     48e:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     492:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     496:	02 84       	ldd	r0, Z+10	; 0x0a
     498:	f3 85       	ldd	r31, Z+11	; 0x0b
     49a:	e0 2d       	mov	r30, r0
     49c:	49 e4       	ldi	r20, 0x49	; 73
     49e:	be 01       	movw	r22, r28
     4a0:	6f 5f       	subi	r22, 0xFF	; 255
     4a2:	7f 4f       	sbci	r23, 0xFF	; 255
     4a4:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <current>
     4a8:	90 91 07 02 	lds	r25, 0x0207	; 0x800207 <current+0x1>
     4ac:	09 95       	icall
	functions->uart_write(dataString);
     4ae:	e0 91 fb 01 	lds	r30, 0x01FB	; 0x8001fb <functions>
     4b2:	f0 91 fc 01 	lds	r31, 0x01FC	; 0x8001fc <functions+0x1>
     4b6:	04 84       	ldd	r0, Z+12	; 0x0c
     4b8:	f5 85       	ldd	r31, Z+13	; 0x0d
     4ba:	e0 2d       	mov	r30, r0
     4bc:	ce 01       	movw	r24, r28
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	09 95       	icall

    state = STATE_READ_POWER;
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <state>
     4c8:	60 96       	adiw	r28, 0x10	; 16
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <run>:
}
// main fsm function
int run()
{ 
    while (1) {
        switch(state) {
     4da:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <state>
     4de:	81 30       	cpi	r24, 0x01	; 1
     4e0:	49 f0       	breq	.+18     	; 0x4f4 <run+0x1a>
     4e2:	28 f0       	brcs	.+10     	; 0x4ee <run+0x14>
     4e4:	82 30       	cpi	r24, 0x02	; 2
     4e6:	49 f0       	breq	.+18     	; 0x4fa <run+0x20>
     4e8:	83 30       	cpi	r24, 0x03	; 3
     4ea:	51 f0       	breq	.+20     	; 0x500 <run+0x26>
     4ec:	0c c0       	rjmp	.+24     	; 0x506 <run+0x2c>
            case STATE_INIT:
                // set this to correct ubbr
                stateInit();
     4ee:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <stateInit>
                break;
     4f2:	f3 cf       	rjmp	.-26     	; 0x4da <run>
            case STATE_READ_POWER:
                // read data from adc and store it
                stateReadPower();
     4f4:	0e 94 1a 01 	call	0x234	; 0x234 <stateReadPower>
                break;
     4f8:	f0 cf       	rjmp	.-32     	; 0x4da <run>
            case STATE_CALCULATE_POWER:
                // use data from adc to calculate power
                stateCalculatePower();
     4fa:	0e 94 62 01 	call	0x2c4	; 0x2c4 <stateCalculatePower>
                break;
     4fe:	ed cf       	rjmp	.-38     	; 0x4da <run>
            case STATE_TRANSMIT_POWER:
                // send power to bt module with uart
                stateTransmitPower();
     500:	0e 94 ef 01 	call	0x3de	; 0x3de <stateTransmitPower>
                break;
     504:	ea cf       	rjmp	.-44     	; 0x4da <run>
                break;
        }
    }

    return 0;
}
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	08 95       	ret

0000050c <io_init>:
#include "gpio.h"

void io_init()
{
	//Set all PORTC pins as inputs
	DDRC = 0x00;
     50c:	17 b8       	out	0x07, r1	; 7

	//Set PORTD Pins 1 and 0 as outputs
	DDRD = 0x00;
     50e:	1a b8       	out	0x0a, r1	; 10
	DDRD |= (1<<PIND0) | (1<<PIND1);
     510:	8a b1       	in	r24, 0x0a	; 10
     512:	83 60       	ori	r24, 0x03	; 3
     514:	8a b9       	out	0x0a, r24	; 10
     516:	08 95       	ret

00000518 <enable_interrupts>:
	interrupt_handler(1);
}

void enable_interrupts()
{
	sei();
     518:	78 94       	sei
     51a:	08 95       	ret

0000051c <disable_interrupts>:
}
void disable_interrupts()
{
	cli();
     51c:	f8 94       	cli
     51e:	08 95       	ret

00000520 <interrupt_init>:
{
	
	voltageTriggers = voltageTriggers;
	currentTriggers = currentTriggers;
	size = size;
	get_time_func = get_time_ptr;
     520:	30 93 9f 03 	sts	0x039F, r19	; 0x80039f <get_time_func+0x1>
     524:	20 93 9e 03 	sts	0x039E, r18	; 0x80039e <get_time_func>
	currentIndex = 0;
     528:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <currentIndex>
	voltageIndex = 0;
     52c:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <voltageIndex>
     530:	08 95       	ret

00000532 <interrupt_handler>:
}

void interrupt_handler(uint8_t interruptPin)
{
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
	switch (interruptPin)
     536:	88 23       	and	r24, r24
     538:	19 f0       	breq	.+6      	; 0x540 <interrupt_handler+0xe>
     53a:	81 30       	cpi	r24, 0x01	; 1
     53c:	e9 f0       	breq	.+58     	; 0x578 <interrupt_handler+0x46>
     53e:	37 c0       	rjmp	.+110    	; 0x5ae <interrupt_handler+0x7c>
	{
		case 0:
			if (currentIndex == size)
     540:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <currentIndex>
     544:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <size>
     548:	89 17       	cp	r24, r25
     54a:	89 f1       	breq	.+98     	; 0x5ae <interrupt_handler+0x7c>
				break;
			currentTriggers[currentIndex++] = get_time_func();
     54c:	20 91 a3 03 	lds	r18, 0x03A3	; 0x8003a3 <currentTriggers>
     550:	30 91 a4 03 	lds	r19, 0x03A4	; 0x8003a4 <currentTriggers+0x1>
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	98 0f       	add	r25, r24
     558:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <currentIndex>
     55c:	c8 2f       	mov	r28, r24
     55e:	d0 e0       	ldi	r29, 0x00	; 0
     560:	cc 0f       	add	r28, r28
     562:	dd 1f       	adc	r29, r29
     564:	c2 0f       	add	r28, r18
     566:	d3 1f       	adc	r29, r19
     568:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <get_time_func>
     56c:	f0 91 9f 03 	lds	r31, 0x039F	; 0x80039f <get_time_func+0x1>
     570:	09 95       	icall
     572:	99 83       	std	Y+1, r25	; 0x01
     574:	88 83       	st	Y, r24
			break;
     576:	1b c0       	rjmp	.+54     	; 0x5ae <interrupt_handler+0x7c>
		case 1:
			if (voltageIndex == size)
     578:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <voltageIndex>
     57c:	90 91 a2 03 	lds	r25, 0x03A2	; 0x8003a2 <size>
     580:	89 17       	cp	r24, r25
     582:	a9 f0       	breq	.+42     	; 0x5ae <interrupt_handler+0x7c>
				break;
			voltageTriggers[voltageIndex++] = get_time_func();
     584:	20 91 a0 03 	lds	r18, 0x03A0	; 0x8003a0 <voltageTriggers>
     588:	30 91 a1 03 	lds	r19, 0x03A1	; 0x8003a1 <voltageTriggers+0x1>
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	98 0f       	add	r25, r24
     590:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <voltageIndex>
     594:	c8 2f       	mov	r28, r24
     596:	d0 e0       	ldi	r29, 0x00	; 0
     598:	cc 0f       	add	r28, r28
     59a:	dd 1f       	adc	r29, r29
     59c:	c2 0f       	add	r28, r18
     59e:	d3 1f       	adc	r29, r19
     5a0:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <get_time_func>
     5a4:	f0 91 9f 03 	lds	r31, 0x039F	; 0x80039f <get_time_func+0x1>
     5a8:	09 95       	icall
     5aa:	99 83       	std	Y+1, r25	; 0x01
     5ac:	88 83       	st	Y, r24
			break;
		default:
			break;
	}
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <__vector_1>:

#include "interrupt.h"

// handle interrupts during cycle
ISR(INT0_vect)
{
     5b4:	1f 92       	push	r1
     5b6:	0f 92       	push	r0
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	0f 92       	push	r0
     5bc:	11 24       	eor	r1, r1
     5be:	2f 93       	push	r18
     5c0:	3f 93       	push	r19
     5c2:	4f 93       	push	r20
     5c4:	5f 93       	push	r21
     5c6:	6f 93       	push	r22
     5c8:	7f 93       	push	r23
     5ca:	8f 93       	push	r24
     5cc:	9f 93       	push	r25
     5ce:	af 93       	push	r26
     5d0:	bf 93       	push	r27
     5d2:	ef 93       	push	r30
     5d4:	ff 93       	push	r31
	interrupt_handler(0);
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	0e 94 99 02 	call	0x532	; 0x532 <interrupt_handler>
}
     5dc:	ff 91       	pop	r31
     5de:	ef 91       	pop	r30
     5e0:	bf 91       	pop	r27
     5e2:	af 91       	pop	r26
     5e4:	9f 91       	pop	r25
     5e6:	8f 91       	pop	r24
     5e8:	7f 91       	pop	r23
     5ea:	6f 91       	pop	r22
     5ec:	5f 91       	pop	r21
     5ee:	4f 91       	pop	r20
     5f0:	3f 91       	pop	r19
     5f2:	2f 91       	pop	r18
     5f4:	0f 90       	pop	r0
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	0f 90       	pop	r0
     5fa:	1f 90       	pop	r1
     5fc:	18 95       	reti

000005fe <__vector_2>:

ISR(INT1_vect)
{
     5fe:	1f 92       	push	r1
     600:	0f 92       	push	r0
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	0f 92       	push	r0
     606:	11 24       	eor	r1, r1
     608:	2f 93       	push	r18
     60a:	3f 93       	push	r19
     60c:	4f 93       	push	r20
     60e:	5f 93       	push	r21
     610:	6f 93       	push	r22
     612:	7f 93       	push	r23
     614:	8f 93       	push	r24
     616:	9f 93       	push	r25
     618:	af 93       	push	r26
     61a:	bf 93       	push	r27
     61c:	ef 93       	push	r30
     61e:	ff 93       	push	r31
	interrupt_handler(1);
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	0e 94 99 02 	call	0x532	; 0x532 <interrupt_handler>
}
     626:	ff 91       	pop	r31
     628:	ef 91       	pop	r30
     62a:	bf 91       	pop	r27
     62c:	af 91       	pop	r26
     62e:	9f 91       	pop	r25
     630:	8f 91       	pop	r24
     632:	7f 91       	pop	r23
     634:	6f 91       	pop	r22
     636:	5f 91       	pop	r21
     638:	4f 91       	pop	r20
     63a:	3f 91       	pop	r19
     63c:	2f 91       	pop	r18
     63e:	0f 90       	pop	r0
     640:	0f be       	out	0x3f, r0	; 63
     642:	0f 90       	pop	r0
     644:	1f 90       	pop	r1
     646:	18 95       	reti

00000648 <get_uart_string>:

// convert adc value to real value
uint16_t convertADCValue(uint16_t sample, uint16_t maxVal, uint8_t bits)
{
	return (uint16_t)sample/pow(2,bits) * maxVal;
}
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	fc 01       	movw	r30, r24
     650:	56 2f       	mov	r21, r22
     652:	17 2f       	mov	r17, r23
     654:	ec 01       	movw	r28, r24
     656:	d6 95       	lsr	r29
     658:	c7 95       	ror	r28
     65a:	d6 95       	lsr	r29
     65c:	c7 95       	ror	r28
     65e:	d6 95       	lsr	r29
     660:	c7 95       	ror	r28
     662:	9e 01       	movw	r18, r28
     664:	a5 ec       	ldi	r26, 0xC5	; 197
     666:	b0 e2       	ldi	r27, 0x20	; 32
     668:	0e 94 00 08 	call	0x1000	; 0x1000 <__umulhisi3>
     66c:	92 95       	swap	r25
     66e:	82 95       	swap	r24
     670:	8f 70       	andi	r24, 0x0F	; 15
     672:	89 27       	eor	r24, r25
     674:	9f 70       	andi	r25, 0x0F	; 15
     676:	89 27       	eor	r24, r25
     678:	68 ee       	ldi	r22, 0xE8	; 232
     67a:	73 e0       	ldi	r23, 0x03	; 3
     67c:	86 9f       	mul	r24, r22
     67e:	90 01       	movw	r18, r0
     680:	87 9f       	mul	r24, r23
     682:	30 0d       	add	r19, r0
     684:	96 9f       	mul	r25, r22
     686:	30 0d       	add	r19, r0
     688:	11 24       	eor	r1, r1
     68a:	e2 1b       	sub	r30, r18
     68c:	f3 0b       	sbc	r31, r19
     68e:	ff 93       	push	r31
     690:	ef 93       	push	r30
     692:	9e 01       	movw	r18, r28
     694:	0e 94 00 08 	call	0x1000	; 0x1000 <__umulhisi3>
     698:	92 95       	swap	r25
     69a:	82 95       	swap	r24
     69c:	8f 70       	andi	r24, 0x0F	; 15
     69e:	89 27       	eor	r24, r25
     6a0:	9f 70       	andi	r25, 0x0F	; 15
     6a2:	89 27       	eor	r24, r25
     6a4:	9f 93       	push	r25
     6a6:	8f 93       	push	r24
     6a8:	1f 92       	push	r1
     6aa:	4f 93       	push	r20
     6ac:	82 e2       	ldi	r24, 0x22	; 34
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	9f 93       	push	r25
     6b2:	8f 93       	push	r24
     6b4:	1f 93       	push	r17
     6b6:	5f 93       	push	r21
     6b8:	0e 94 0f 08 	call	0x101e	; 0x101e <sprintf>
     6bc:	8d b7       	in	r24, 0x3d	; 61
     6be:	9e b7       	in	r25, 0x3e	; 62
     6c0:	0a 96       	adiw	r24, 0x0a	; 10
     6c2:	0f b6       	in	r0, 0x3f	; 63
     6c4:	f8 94       	cli
     6c6:	9e bf       	out	0x3e, r25	; 62
     6c8:	0f be       	out	0x3f, r0	; 63
     6ca:	8d bf       	out	0x3d, r24	; 61
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	1f 91       	pop	r17
     6d2:	08 95       	ret

000006d4 <findPeak>:

// find peak value of sinusoidal wave
uint16_t findPeak(uint16_t *samples, uint8_t size)
{
     6d4:	dc 01       	movw	r26, r24
	uint16_t peak = 0;
	// iterate over samples and use largest value as peak
	for (uint8_t i = 0; i < size; i++) {
     6d6:	90 e0       	ldi	r25, 0x00	; 0
}

// find peak value of sinusoidal wave
uint16_t findPeak(uint16_t *samples, uint8_t size)
{
	uint16_t peak = 0;
     6d8:	40 e0       	ldi	r20, 0x00	; 0
     6da:	50 e0       	ldi	r21, 0x00	; 0
	// iterate over samples and use largest value as peak
	for (uint8_t i = 0; i < size; i++) {
     6dc:	0d c0       	rjmp	.+26     	; 0x6f8 <findPeak+0x24>
		if (samples[i] > peak)
     6de:	e9 2f       	mov	r30, r25
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	ee 0f       	add	r30, r30
     6e4:	ff 1f       	adc	r31, r31
     6e6:	ea 0f       	add	r30, r26
     6e8:	fb 1f       	adc	r31, r27
     6ea:	20 81       	ld	r18, Z
     6ec:	31 81       	ldd	r19, Z+1	; 0x01
     6ee:	42 17       	cp	r20, r18
     6f0:	53 07       	cpc	r21, r19
     6f2:	08 f4       	brcc	.+2      	; 0x6f6 <findPeak+0x22>
			peak = samples[i];
     6f4:	a9 01       	movw	r20, r18
// find peak value of sinusoidal wave
uint16_t findPeak(uint16_t *samples, uint8_t size)
{
	uint16_t peak = 0;
	// iterate over samples and use largest value as peak
	for (uint8_t i = 0; i < size; i++) {
     6f6:	9f 5f       	subi	r25, 0xFF	; 255
     6f8:	96 17       	cp	r25, r22
     6fa:	88 f3       	brcs	.-30     	; 0x6de <findPeak+0xa>
		if (samples[i] > peak)
			peak = samples[i];
	}
	
	return peak;
}
     6fc:	ca 01       	movw	r24, r20
     6fe:	08 95       	ret

00000700 <calculateRMS>:

// calculate the rms value from peak value of sinusoid
uint16_t calculateRMS(uint16_t peak)
{
	return peak/ROOT_2;
     700:	bc 01       	movw	r22, r24
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 47 06 	call	0xc8e	; 0xc8e <__floatunsisf>
     70a:	2e ee       	ldi	r18, 0xEE	; 238
     70c:	34 e0       	ldi	r19, 0x04	; 4
     70e:	45 eb       	ldi	r20, 0xB5	; 181
     710:	5f e3       	ldi	r21, 0x3F	; 63
     712:	0e 94 a6 05 	call	0xb4c	; 0xb4c <__divsf3>
     716:	0e 94 18 06 	call	0xc30	; 0xc30 <__fixunssfsi>
}
     71a:	cb 01       	movw	r24, r22
     71c:	08 95       	ret

0000071e <getPhaseDifference>:
{
	uint16_t phaseDifference = 0;
	uint16_t Tz = 0;
	uint16_t Tp = 0;

	if (size1 < 3 || size2 < 3)
     71e:	63 30       	cpi	r22, 0x03	; 3
     720:	a8 f1       	brcs	.+106    	; 0x78c <getPhaseDifference+0x6e>
     722:	23 30       	cpi	r18, 0x03	; 3
     724:	b0 f1       	brcs	.+108    	; 0x792 <getPhaseDifference+0x74>
		return phaseDifference;

	if (crossTimes1[0] > crossTimes2[0]) {
     726:	fc 01       	movw	r30, r24
     728:	60 81       	ld	r22, Z
     72a:	71 81       	ldd	r23, Z+1	; 0x01
     72c:	fa 01       	movw	r30, r20
     72e:	20 81       	ld	r18, Z
     730:	31 81       	ldd	r19, Z+1	; 0x01
     732:	26 17       	cp	r18, r22
     734:	37 07       	cpc	r19, r23
     736:	50 f4       	brcc	.+20     	; 0x74c <getPhaseDifference+0x2e>
		Tz = crossTimes2[0] - crossTimes2[2];
     738:	44 81       	ldd	r20, Z+4	; 0x04
     73a:	55 81       	ldd	r21, Z+5	; 0x05
     73c:	24 1b       	sub	r18, r20
     73e:	35 0b       	sbc	r19, r21
		Tp = crossTimes1[2] - crossTimes2[2];
     740:	fc 01       	movw	r30, r24
     742:	64 81       	ldd	r22, Z+4	; 0x04
     744:	75 81       	ldd	r23, Z+5	; 0x05
     746:	64 1b       	sub	r22, r20
     748:	75 0b       	sbc	r23, r21
     74a:	13 c0       	rjmp	.+38     	; 0x772 <getPhaseDifference+0x54>
	} else if (crossTimes1[0] < crossTimes2[0]) {
     74c:	62 17       	cp	r22, r18
     74e:	73 07       	cpc	r23, r19
     750:	60 f4       	brcc	.+24     	; 0x76a <getPhaseDifference+0x4c>
		Tz = crossTimes1[0] - crossTimes1[2];
     752:	fc 01       	movw	r30, r24
     754:	84 81       	ldd	r24, Z+4	; 0x04
     756:	95 81       	ldd	r25, Z+5	; 0x05
     758:	9b 01       	movw	r18, r22
     75a:	28 1b       	sub	r18, r24
     75c:	39 0b       	sbc	r19, r25
		Tp = crossTimes2[2] - crossTimes1[2];
     75e:	fa 01       	movw	r30, r20
     760:	64 81       	ldd	r22, Z+4	; 0x04
     762:	75 81       	ldd	r23, Z+5	; 0x05
     764:	68 1b       	sub	r22, r24
     766:	79 0b       	sbc	r23, r25
     768:	04 c0       	rjmp	.+8      	; 0x772 <getPhaseDifference+0x54>
uint16_t getPhaseDifference(uint16_t *crossTimes1, uint8_t size1, 
		uint16_t *crossTimes2, uint8_t size2) 
{
	uint16_t phaseDifference = 0;
	uint16_t Tz = 0;
	uint16_t Tp = 0;
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	70 e0       	ldi	r23, 0x00	; 0
// since these are more accurate
uint16_t getPhaseDifference(uint16_t *crossTimes1, uint8_t size1, 
		uint16_t *crossTimes2, uint8_t size2) 
{
	uint16_t phaseDifference = 0;
	uint16_t Tz = 0;
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
	} else if (crossTimes1[0] < crossTimes2[0]) {
		Tz = crossTimes1[0] - crossTimes1[2];
		Tp = crossTimes2[2] - crossTimes1[2];
	}

	phaseDifference = 360 * (Tz/Tp);
     772:	c9 01       	movw	r24, r18
     774:	0e 94 ca 07 	call	0xf94	; 0xf94 <__udivmodhi4>
     778:	28 e6       	ldi	r18, 0x68	; 104
     77a:	31 e0       	ldi	r19, 0x01	; 1
     77c:	62 9f       	mul	r22, r18
     77e:	c0 01       	movw	r24, r0
     780:	63 9f       	mul	r22, r19
     782:	90 0d       	add	r25, r0
     784:	72 9f       	mul	r23, r18
     786:	90 0d       	add	r25, r0
     788:	11 24       	eor	r1, r1

	return phaseDifference;
     78a:	08 95       	ret
	uint16_t phaseDifference = 0;
	uint16_t Tz = 0;
	uint16_t Tp = 0;

	if (size1 < 3 || size2 < 3)
		return phaseDifference;
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	08 95       	ret
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	90 e0       	ldi	r25, 0x00	; 0
	}

	phaseDifference = 360 * (Tz/Tp);

	return phaseDifference;
}
     796:	08 95       	ret

00000798 <calculatePowerFactor>:

// calculate power factor
uint16_t calculatePowerFactor(uint16_t phase) 
{
	phase *= (PI/180);
     798:	bc 01       	movw	r22, r24
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	0e 94 47 06 	call	0xc8e	; 0xc8e <__floatunsisf>
     7a2:	2e e2       	ldi	r18, 0x2E	; 46
     7a4:	3a ef       	ldi	r19, 0xFA	; 250
     7a6:	4e e8       	ldi	r20, 0x8E	; 142
     7a8:	5c e3       	ldi	r21, 0x3C	; 60
     7aa:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulsf3>
     7ae:	0e 94 18 06 	call	0xc30	; 0xc30 <__fixunssfsi>
	return (cos(phase) * 1000);
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	0e 94 47 06 	call	0xc8e	; 0xc8e <__floatunsisf>
     7ba:	0e 94 a1 05 	call	0xb42	; 0xb42 <cos>
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	4a e7       	ldi	r20, 0x7A	; 122
     7c4:	54 e4       	ldi	r21, 0x44	; 68
     7c6:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulsf3>
     7ca:	0e 94 18 06 	call	0xc30	; 0xc30 <__fixunssfsi>
}
     7ce:	cb 01       	movw	r24, r22
     7d0:	08 95       	ret

000007d2 <calculateAveragePower>:

// calculate average power using standard equation
uint16_t calculateAveragePower(uint16_t Vrms, uint16_t Irms, uint16_t pf)
{
     7d2:	fb 01       	movw	r30, r22
	double p = (Vrms/1000 * Irms/1000 * pf/1000);
     7d4:	9c 01       	movw	r18, r24
     7d6:	36 95       	lsr	r19
     7d8:	27 95       	ror	r18
     7da:	36 95       	lsr	r19
     7dc:	27 95       	ror	r18
     7de:	36 95       	lsr	r19
     7e0:	27 95       	ror	r18
     7e2:	a5 ec       	ldi	r26, 0xC5	; 197
     7e4:	b0 e2       	ldi	r27, 0x20	; 32
     7e6:	0e 94 00 08 	call	0x1000	; 0x1000 <__umulhisi3>
     7ea:	92 95       	swap	r25
     7ec:	82 95       	swap	r24
     7ee:	8f 70       	andi	r24, 0x0F	; 15
     7f0:	89 27       	eor	r24, r25
     7f2:	9f 70       	andi	r25, 0x0F	; 15
     7f4:	89 27       	eor	r24, r25
     7f6:	8e 9f       	mul	r24, r30
     7f8:	90 01       	movw	r18, r0
     7fa:	8f 9f       	mul	r24, r31
     7fc:	30 0d       	add	r19, r0
     7fe:	9e 9f       	mul	r25, r30
     800:	30 0d       	add	r19, r0
     802:	11 24       	eor	r1, r1
     804:	36 95       	lsr	r19
     806:	27 95       	ror	r18
     808:	36 95       	lsr	r19
     80a:	27 95       	ror	r18
     80c:	36 95       	lsr	r19
     80e:	27 95       	ror	r18
     810:	0e 94 00 08 	call	0x1000	; 0x1000 <__umulhisi3>
     814:	92 95       	swap	r25
     816:	82 95       	swap	r24
     818:	8f 70       	andi	r24, 0x0F	; 15
     81a:	89 27       	eor	r24, r25
     81c:	9f 70       	andi	r25, 0x0F	; 15
     81e:	89 27       	eor	r24, r25
     820:	84 9f       	mul	r24, r20
     822:	90 01       	movw	r18, r0
     824:	85 9f       	mul	r24, r21
     826:	30 0d       	add	r19, r0
     828:	94 9f       	mul	r25, r20
     82a:	30 0d       	add	r19, r0
     82c:	11 24       	eor	r1, r1
     82e:	36 95       	lsr	r19
     830:	27 95       	ror	r18
     832:	36 95       	lsr	r19
     834:	27 95       	ror	r18
     836:	36 95       	lsr	r19
     838:	27 95       	ror	r18
     83a:	0e 94 00 08 	call	0x1000	; 0x1000 <__umulhisi3>
     83e:	92 95       	swap	r25
     840:	82 95       	swap	r24
     842:	8f 70       	andi	r24, 0x0F	; 15
     844:	89 27       	eor	r24, r25
     846:	9f 70       	andi	r25, 0x0F	; 15
     848:	89 27       	eor	r24, r25
	return (uint16_t)p*1000;
}
     84a:	28 ee       	ldi	r18, 0xE8	; 232
     84c:	33 e0       	ldi	r19, 0x03	; 3
     84e:	ac 01       	movw	r20, r24
     850:	42 9f       	mul	r20, r18
     852:	c0 01       	movw	r24, r0
     854:	43 9f       	mul	r20, r19
     856:	90 0d       	add	r25, r0
     858:	52 9f       	mul	r21, r18
     85a:	90 0d       	add	r25, r0
     85c:	11 24       	eor	r1, r1
     85e:	08 95       	ret

00000860 <__vector_13>:
 */ 

#include "timer_driver.h"

// Interrupt service routines
ISR(TIMER1_OVF_vect) {
     860:	1f 92       	push	r1
     862:	0f 92       	push	r0
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	0f 92       	push	r0
     868:	11 24       	eor	r1, r1
     86a:	8f 93       	push	r24
     86c:	9f 93       	push	r25
	timerOverFlowCount++;
     86e:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <timerOverFlowCount>
     872:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <timerOverFlowCount+0x1>
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	90 93 a6 03 	sts	0x03A6, r25	; 0x8003a6 <timerOverFlowCount+0x1>
     87c:	80 93 a5 03 	sts	0x03A5, r24	; 0x8003a5 <timerOverFlowCount>
}
     880:	9f 91       	pop	r25
     882:	8f 91       	pop	r24
     884:	0f 90       	pop	r0
     886:	0f be       	out	0x3f, r0	; 63
     888:	0f 90       	pop	r0
     88a:	1f 90       	pop	r1
     88c:	18 95       	reti

0000088e <timer_init>:
void timer_init()
{
	//Sets a 256 prescaler, new Frequency = 62.5kHz
	//Time Period for 1 count = 0.000016s = 16us
	//Time Period for 65535 counts = 1.04856s
	TCCR1B |= (1<<CS12);
     88e:	e1 e8       	ldi	r30, 0x81	; 129
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	80 81       	ld	r24, Z
     894:	84 60       	ori	r24, 0x04	; 4
     896:	80 83       	st	Z, r24

	//Enables Timer Overflow interrupt (probably won't need it)
	TIMSK1 |= (1<<TOIE1);
     898:	ef e6       	ldi	r30, 0x6F	; 111
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	80 81       	ld	r24, Z
     89e:	81 60       	ori	r24, 0x01	; 1
     8a0:	80 83       	st	Z, r24
	
	// initialise timer overflow count
	timerOverFlowCount = 0;
     8a2:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <timerOverFlowCount+0x1>
     8a6:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <timerOverFlowCount>
     8aa:	08 95       	ret

000008ac <getTimerCount>:
}

uint16_t getTimerCount()
{
	//returns the current value stored in the two 8-bit TIMER1 Registers
	return TCNT1;
     8ac:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     8b0:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
}
     8b4:	08 95       	ret

000008b6 <calculateTime>:

uint16_t calculateTime(uint16_t scale)
{
     8b6:	8f 92       	push	r8
     8b8:	9f 92       	push	r9
     8ba:	af 92       	push	r10
     8bc:	bf 92       	push	r11
     8be:	cf 92       	push	r12
     8c0:	df 92       	push	r13
     8c2:	ef 92       	push	r14
     8c4:	ff 92       	push	r15
	// set scale into time
	double scaleFactor = scale * 1/F_CPU;
     8c6:	bc 01       	movw	r22, r24
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	34 e2       	ldi	r19, 0x24	; 36
     8d0:	44 ef       	ldi	r20, 0xF4	; 244
     8d2:	50 e0       	ldi	r21, 0x00	; 0
     8d4:	0e 94 de 07 	call	0xfbc	; 0xfbc <__udivmodsi4>
     8d8:	ca 01       	movw	r24, r20
     8da:	b9 01       	movw	r22, r18
     8dc:	0e 94 47 06 	call	0xc8e	; 0xc8e <__floatunsisf>
     8e0:	6b 01       	movw	r12, r22
     8e2:	7c 01       	movw	r14, r24
	uint32_t time = (getTimerCount() * scaleFactor + 65536 * scaleFactor * timerOverFlowCount*100);
     8e4:	0e 94 56 04 	call	0x8ac	; 0x8ac <getTimerCount>
     8e8:	bc 01       	movw	r22, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 47 06 	call	0xc8e	; 0xc8e <__floatunsisf>
     8f2:	a7 01       	movw	r20, r14
     8f4:	96 01       	movw	r18, r12
     8f6:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulsf3>
     8fa:	4b 01       	movw	r8, r22
     8fc:	5c 01       	movw	r10, r24
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	40 e8       	ldi	r20, 0x80	; 128
     904:	57 e4       	ldi	r21, 0x47	; 71
     906:	c7 01       	movw	r24, r14
     908:	b6 01       	movw	r22, r12
     90a:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulsf3>
     90e:	6b 01       	movw	r12, r22
     910:	7c 01       	movw	r14, r24
     912:	60 91 a5 03 	lds	r22, 0x03A5	; 0x8003a5 <timerOverFlowCount>
     916:	70 91 a6 03 	lds	r23, 0x03A6	; 0x8003a6 <timerOverFlowCount+0x1>
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 47 06 	call	0xc8e	; 0xc8e <__floatunsisf>
     922:	a7 01       	movw	r20, r14
     924:	96 01       	movw	r18, r12
     926:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulsf3>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	48 ec       	ldi	r20, 0xC8	; 200
     930:	52 e4       	ldi	r21, 0x42	; 66
     932:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulsf3>
     936:	9b 01       	movw	r18, r22
     938:	ac 01       	movw	r20, r24
     93a:	c5 01       	movw	r24, r10
     93c:	b4 01       	movw	r22, r8
     93e:	0e 94 35 05 	call	0xa6a	; 0xa6a <__addsf3>
     942:	0e 94 18 06 	call	0xc30	; 0xc30 <__fixunssfsi>
	return (uint16_t)time;
}
     946:	cb 01       	movw	r24, r22
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	df 90       	pop	r13
     94e:	cf 90       	pop	r12
     950:	bf 90       	pop	r11
     952:	af 90       	pop	r10
     954:	9f 90       	pop	r9
     956:	8f 90       	pop	r8
     958:	08 95       	ret

0000095a <resetTimerOverflowCount>:

void resetTimerOverflowCount()
{
	// reset the overflow count
	timerOverFlowCount = 0;
     95a:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <timerOverFlowCount+0x1>
     95e:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <timerOverFlowCount>
     962:	08 95       	ret

00000964 <resetTimer>:
}

void resetTimer()
{
	// clear the timer counter
	TCNT1 = 0;
     964:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     968:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	resetTimerOverflowCount();
     96c:	0e 94 ad 04 	call	0x95a	; 0x95a <resetTimerOverflowCount>
     970:	08 95       	ret

00000972 <get_time>:
}

uint16_t get_time()
{
	// returns the current timer count to the function caller
	return calculateTime(TIMER_PRESCALER);
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <calculateTime>
     97a:	08 95       	ret

0000097c <calculateUBRR>:
#include "uart.h"

// calculate corrext ubrr
uint16_t calculateUBRR(uint16_t baud)
{
	return (uint16_t)(F_CPU/(16*(unsigned long)baud) - 1);
     97c:	a0 e0       	ldi	r26, 0x00	; 0
     97e:	b0 e0       	ldi	r27, 0x00	; 0
     980:	88 0f       	add	r24, r24
     982:	99 1f       	adc	r25, r25
     984:	aa 1f       	adc	r26, r26
     986:	bb 1f       	adc	r27, r27
     988:	88 0f       	add	r24, r24
     98a:	99 1f       	adc	r25, r25
     98c:	aa 1f       	adc	r26, r26
     98e:	bb 1f       	adc	r27, r27
     990:	9c 01       	movw	r18, r24
     992:	ad 01       	movw	r20, r26
     994:	22 0f       	add	r18, r18
     996:	33 1f       	adc	r19, r19
     998:	44 1f       	adc	r20, r20
     99a:	55 1f       	adc	r21, r21
     99c:	22 0f       	add	r18, r18
     99e:	33 1f       	adc	r19, r19
     9a0:	44 1f       	adc	r20, r20
     9a2:	55 1f       	adc	r21, r21
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	74 e2       	ldi	r23, 0x24	; 36
     9a8:	84 ef       	ldi	r24, 0xF4	; 244
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 de 07 	call	0xfbc	; 0xfbc <__udivmodsi4>
}
     9b0:	c9 01       	movw	r24, r18
     9b2:	01 97       	sbiw	r24, 0x01	; 1
     9b4:	08 95       	ret

000009b6 <uart_init>:

// uart init function
void uart_init(uint16_t baud)
{	
	uint16_t ubrr = calculateUBRR(baud);
     9b6:	0e 94 be 04 	call	0x97c	; 0x97c <calculateUBRR>
     9ba:	9c 01       	movw	r18, r24
	// Enable TX and RX
	UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
     9bc:	e1 ec       	ldi	r30, 0xC1	; 193
     9be:	f0 e0       	ldi	r31, 0x00	; 0
     9c0:	90 81       	ld	r25, Z
     9c2:	98 61       	ori	r25, 0x18	; 24
     9c4:	90 83       	st	Z, r25
	// set character size to 8-bit
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);
     9c6:	e2 ec       	ldi	r30, 0xC2	; 194
     9c8:	f0 e0       	ldi	r31, 0x00	; 0
     9ca:	90 81       	ld	r25, Z
     9cc:	96 60       	ori	r25, 0x06	; 6
     9ce:	90 83       	st	Z, r25
	UCSR0C &= ~(1<<UPM00);
     9d0:	90 81       	ld	r25, Z
     9d2:	9f 7e       	andi	r25, 0xEF	; 239
     9d4:	90 83       	st	Z, r25
	UCSR0C &= ~(1<<UPM01);
     9d6:	90 81       	ld	r25, Z
     9d8:	9f 7d       	andi	r25, 0xDF	; 223
     9da:	90 83       	st	Z, r25
	// Set the baud rate
	UBRR0 = ubrr;
     9dc:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     9e0:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     9e4:	08 95       	ret

000009e6 <uart_transmit>:

// uart transmit function
void uart_transmit(uint8_t data)
{
	// wait until transmitter is ready
	while ((1<<UDRE0 & UCSR0A) == 0x00) {;} // do nothing
     9e6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     9ea:	95 ff       	sbrs	r25, 5
     9ec:	fc cf       	rjmp	.-8      	; 0x9e6 <uart_transmit>
	// transmit data
	UDR0 = data;
     9ee:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     9f2:	08 95       	ret

000009f4 <uart_write>:
}

// uart write function
// write multiple characters at once
void uart_write(char *data) 
{
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	8c 01       	movw	r16, r24
	int i = 0;
     9fe:	c0 e0       	ldi	r28, 0x00	; 0
     a00:	d0 e0       	ldi	r29, 0x00	; 0
	while (data[i] != '\0') {
     a02:	03 c0       	rjmp	.+6      	; 0xa0a <uart_write+0x16>
		uart_transmit(data[i]);
     a04:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <uart_transmit>
		i++;
     a08:	21 96       	adiw	r28, 0x01	; 1
// uart write function
// write multiple characters at once
void uart_write(char *data) 
{
	int i = 0;
	while (data[i] != '\0') {
     a0a:	f8 01       	movw	r30, r16
     a0c:	ec 0f       	add	r30, r28
     a0e:	fd 1f       	adc	r31, r29
     a10:	80 81       	ld	r24, Z
     a12:	81 11       	cpse	r24, r1
     a14:	f7 cf       	rjmp	.-18     	; 0xa04 <uart_write+0x10>
		uart_transmit(data[i]);
		i++;
	}
}
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	08 95       	ret

00000a20 <main>:

// finite state machines
#include "lib/fsm.h"

int main(void) 
{
     a20:	cf 93       	push	r28
     a22:	df 93       	push	r29
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	a2 97       	sbiw	r28, 0x22	; 34
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	cd bf       	out	0x3d, r28	; 61
	// create function pointer struct
	struct functionPointers funcs = {
     a34:	82 e2       	ldi	r24, 0x22	; 34
     a36:	e0 e0       	ldi	r30, 0x00	; 0
     a38:	f1 e0       	ldi	r31, 0x01	; 1
     a3a:	de 01       	movw	r26, r28
     a3c:	11 96       	adiw	r26, 0x01	; 1
     a3e:	01 90       	ld	r0, Z+
     a40:	0d 92       	st	X+, r0
     a42:	8a 95       	dec	r24
     a44:	e1 f7       	brne	.-8      	; 0xa3e <main+0x1e>
		.calculate_average_power = calculateAveragePower,
	};
	
	
	// init fsm by passing structs to it
	fsmInit(&funcs);
     a46:	ce 01       	movw	r24, r28
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	0e 94 b9 00 	call	0x172	; 0x172 <fsmInit>
	
	run();
     a4e:	0e 94 6d 02 	call	0x4da	; 0x4da <run>
}
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	a2 96       	adiw	r28, 0x22	; 34
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <__subsf3>:
     a68:	50 58       	subi	r21, 0x80	; 128

00000a6a <__addsf3>:
     a6a:	bb 27       	eor	r27, r27
     a6c:	aa 27       	eor	r26, r26
     a6e:	0e 94 4c 05 	call	0xa98	; 0xa98 <__addsf3x>
     a72:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__fp_round>
     a76:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__fp_pscA>
     a7a:	38 f0       	brcs	.+14     	; 0xa8a <__addsf3+0x20>
     a7c:	0e 94 94 06 	call	0xd28	; 0xd28 <__fp_pscB>
     a80:	20 f0       	brcs	.+8      	; 0xa8a <__addsf3+0x20>
     a82:	39 f4       	brne	.+14     	; 0xa92 <__addsf3+0x28>
     a84:	9f 3f       	cpi	r25, 0xFF	; 255
     a86:	19 f4       	brne	.+6      	; 0xa8e <__addsf3+0x24>
     a88:	26 f4       	brtc	.+8      	; 0xa92 <__addsf3+0x28>
     a8a:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_nan>
     a8e:	0e f4       	brtc	.+2      	; 0xa92 <__addsf3+0x28>
     a90:	e0 95       	com	r30
     a92:	e7 fb       	bst	r30, 7
     a94:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__fp_inf>

00000a98 <__addsf3x>:
     a98:	e9 2f       	mov	r30, r25
     a9a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fp_split3>
     a9e:	58 f3       	brcs	.-42     	; 0xa76 <__addsf3+0xc>
     aa0:	ba 17       	cp	r27, r26
     aa2:	62 07       	cpc	r22, r18
     aa4:	73 07       	cpc	r23, r19
     aa6:	84 07       	cpc	r24, r20
     aa8:	95 07       	cpc	r25, r21
     aaa:	20 f0       	brcs	.+8      	; 0xab4 <__addsf3x+0x1c>
     aac:	79 f4       	brne	.+30     	; 0xacc <__addsf3x+0x34>
     aae:	a6 f5       	brtc	.+104    	; 0xb18 <__addsf3x+0x80>
     ab0:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_zero>
     ab4:	0e f4       	brtc	.+2      	; 0xab8 <__addsf3x+0x20>
     ab6:	e0 95       	com	r30
     ab8:	0b 2e       	mov	r0, r27
     aba:	ba 2f       	mov	r27, r26
     abc:	a0 2d       	mov	r26, r0
     abe:	0b 01       	movw	r0, r22
     ac0:	b9 01       	movw	r22, r18
     ac2:	90 01       	movw	r18, r0
     ac4:	0c 01       	movw	r0, r24
     ac6:	ca 01       	movw	r24, r20
     ac8:	a0 01       	movw	r20, r0
     aca:	11 24       	eor	r1, r1
     acc:	ff 27       	eor	r31, r31
     ace:	59 1b       	sub	r21, r25
     ad0:	99 f0       	breq	.+38     	; 0xaf8 <__addsf3x+0x60>
     ad2:	59 3f       	cpi	r21, 0xF9	; 249
     ad4:	50 f4       	brcc	.+20     	; 0xaea <__addsf3x+0x52>
     ad6:	50 3e       	cpi	r21, 0xE0	; 224
     ad8:	68 f1       	brcs	.+90     	; 0xb34 <__addsf3x+0x9c>
     ada:	1a 16       	cp	r1, r26
     adc:	f0 40       	sbci	r31, 0x00	; 0
     ade:	a2 2f       	mov	r26, r18
     ae0:	23 2f       	mov	r18, r19
     ae2:	34 2f       	mov	r19, r20
     ae4:	44 27       	eor	r20, r20
     ae6:	58 5f       	subi	r21, 0xF8	; 248
     ae8:	f3 cf       	rjmp	.-26     	; 0xad0 <__addsf3x+0x38>
     aea:	46 95       	lsr	r20
     aec:	37 95       	ror	r19
     aee:	27 95       	ror	r18
     af0:	a7 95       	ror	r26
     af2:	f0 40       	sbci	r31, 0x00	; 0
     af4:	53 95       	inc	r21
     af6:	c9 f7       	brne	.-14     	; 0xaea <__addsf3x+0x52>
     af8:	7e f4       	brtc	.+30     	; 0xb18 <__addsf3x+0x80>
     afa:	1f 16       	cp	r1, r31
     afc:	ba 0b       	sbc	r27, r26
     afe:	62 0b       	sbc	r22, r18
     b00:	73 0b       	sbc	r23, r19
     b02:	84 0b       	sbc	r24, r20
     b04:	ba f0       	brmi	.+46     	; 0xb34 <__addsf3x+0x9c>
     b06:	91 50       	subi	r25, 0x01	; 1
     b08:	a1 f0       	breq	.+40     	; 0xb32 <__addsf3x+0x9a>
     b0a:	ff 0f       	add	r31, r31
     b0c:	bb 1f       	adc	r27, r27
     b0e:	66 1f       	adc	r22, r22
     b10:	77 1f       	adc	r23, r23
     b12:	88 1f       	adc	r24, r24
     b14:	c2 f7       	brpl	.-16     	; 0xb06 <__addsf3x+0x6e>
     b16:	0e c0       	rjmp	.+28     	; 0xb34 <__addsf3x+0x9c>
     b18:	ba 0f       	add	r27, r26
     b1a:	62 1f       	adc	r22, r18
     b1c:	73 1f       	adc	r23, r19
     b1e:	84 1f       	adc	r24, r20
     b20:	48 f4       	brcc	.+18     	; 0xb34 <__addsf3x+0x9c>
     b22:	87 95       	ror	r24
     b24:	77 95       	ror	r23
     b26:	67 95       	ror	r22
     b28:	b7 95       	ror	r27
     b2a:	f7 95       	ror	r31
     b2c:	9e 3f       	cpi	r25, 0xFE	; 254
     b2e:	08 f0       	brcs	.+2      	; 0xb32 <__addsf3x+0x9a>
     b30:	b0 cf       	rjmp	.-160    	; 0xa92 <__addsf3+0x28>
     b32:	93 95       	inc	r25
     b34:	88 0f       	add	r24, r24
     b36:	08 f0       	brcs	.+2      	; 0xb3a <__addsf3x+0xa2>
     b38:	99 27       	eor	r25, r25
     b3a:	ee 0f       	add	r30, r30
     b3c:	97 95       	ror	r25
     b3e:	87 95       	ror	r24
     b40:	08 95       	ret

00000b42 <cos>:
     b42:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fp_rempio2>
     b46:	e3 95       	inc	r30
     b48:	0c 94 d7 06 	jmp	0xdae	; 0xdae <__fp_sinus>

00000b4c <__divsf3>:
     b4c:	0e 94 ba 05 	call	0xb74	; 0xb74 <__divsf3x>
     b50:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__fp_round>
     b54:	0e 94 94 06 	call	0xd28	; 0xd28 <__fp_pscB>
     b58:	58 f0       	brcs	.+22     	; 0xb70 <__divsf3+0x24>
     b5a:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__fp_pscA>
     b5e:	40 f0       	brcs	.+16     	; 0xb70 <__divsf3+0x24>
     b60:	29 f4       	brne	.+10     	; 0xb6c <__divsf3+0x20>
     b62:	5f 3f       	cpi	r21, 0xFF	; 255
     b64:	29 f0       	breq	.+10     	; 0xb70 <__divsf3+0x24>
     b66:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__fp_inf>
     b6a:	51 11       	cpse	r21, r1
     b6c:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_szero>
     b70:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_nan>

00000b74 <__divsf3x>:
     b74:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fp_split3>
     b78:	68 f3       	brcs	.-38     	; 0xb54 <__divsf3+0x8>

00000b7a <__divsf3_pse>:
     b7a:	99 23       	and	r25, r25
     b7c:	b1 f3       	breq	.-20     	; 0xb6a <__divsf3+0x1e>
     b7e:	55 23       	and	r21, r21
     b80:	91 f3       	breq	.-28     	; 0xb66 <__divsf3+0x1a>
     b82:	95 1b       	sub	r25, r21
     b84:	55 0b       	sbc	r21, r21
     b86:	bb 27       	eor	r27, r27
     b88:	aa 27       	eor	r26, r26
     b8a:	62 17       	cp	r22, r18
     b8c:	73 07       	cpc	r23, r19
     b8e:	84 07       	cpc	r24, r20
     b90:	38 f0       	brcs	.+14     	; 0xba0 <__divsf3_pse+0x26>
     b92:	9f 5f       	subi	r25, 0xFF	; 255
     b94:	5f 4f       	sbci	r21, 0xFF	; 255
     b96:	22 0f       	add	r18, r18
     b98:	33 1f       	adc	r19, r19
     b9a:	44 1f       	adc	r20, r20
     b9c:	aa 1f       	adc	r26, r26
     b9e:	a9 f3       	breq	.-22     	; 0xb8a <__divsf3_pse+0x10>
     ba0:	35 d0       	rcall	.+106    	; 0xc0c <__divsf3_pse+0x92>
     ba2:	0e 2e       	mov	r0, r30
     ba4:	3a f0       	brmi	.+14     	; 0xbb4 <__divsf3_pse+0x3a>
     ba6:	e0 e8       	ldi	r30, 0x80	; 128
     ba8:	32 d0       	rcall	.+100    	; 0xc0e <__divsf3_pse+0x94>
     baa:	91 50       	subi	r25, 0x01	; 1
     bac:	50 40       	sbci	r21, 0x00	; 0
     bae:	e6 95       	lsr	r30
     bb0:	00 1c       	adc	r0, r0
     bb2:	ca f7       	brpl	.-14     	; 0xba6 <__divsf3_pse+0x2c>
     bb4:	2b d0       	rcall	.+86     	; 0xc0c <__divsf3_pse+0x92>
     bb6:	fe 2f       	mov	r31, r30
     bb8:	29 d0       	rcall	.+82     	; 0xc0c <__divsf3_pse+0x92>
     bba:	66 0f       	add	r22, r22
     bbc:	77 1f       	adc	r23, r23
     bbe:	88 1f       	adc	r24, r24
     bc0:	bb 1f       	adc	r27, r27
     bc2:	26 17       	cp	r18, r22
     bc4:	37 07       	cpc	r19, r23
     bc6:	48 07       	cpc	r20, r24
     bc8:	ab 07       	cpc	r26, r27
     bca:	b0 e8       	ldi	r27, 0x80	; 128
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <__divsf3_pse+0x56>
     bce:	bb 0b       	sbc	r27, r27
     bd0:	80 2d       	mov	r24, r0
     bd2:	bf 01       	movw	r22, r30
     bd4:	ff 27       	eor	r31, r31
     bd6:	93 58       	subi	r25, 0x83	; 131
     bd8:	5f 4f       	sbci	r21, 0xFF	; 255
     bda:	3a f0       	brmi	.+14     	; 0xbea <__divsf3_pse+0x70>
     bdc:	9e 3f       	cpi	r25, 0xFE	; 254
     bde:	51 05       	cpc	r21, r1
     be0:	78 f0       	brcs	.+30     	; 0xc00 <__divsf3_pse+0x86>
     be2:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__fp_inf>
     be6:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_szero>
     bea:	5f 3f       	cpi	r21, 0xFF	; 255
     bec:	e4 f3       	brlt	.-8      	; 0xbe6 <__divsf3_pse+0x6c>
     bee:	98 3e       	cpi	r25, 0xE8	; 232
     bf0:	d4 f3       	brlt	.-12     	; 0xbe6 <__divsf3_pse+0x6c>
     bf2:	86 95       	lsr	r24
     bf4:	77 95       	ror	r23
     bf6:	67 95       	ror	r22
     bf8:	b7 95       	ror	r27
     bfa:	f7 95       	ror	r31
     bfc:	9f 5f       	subi	r25, 0xFF	; 255
     bfe:	c9 f7       	brne	.-14     	; 0xbf2 <__divsf3_pse+0x78>
     c00:	88 0f       	add	r24, r24
     c02:	91 1d       	adc	r25, r1
     c04:	96 95       	lsr	r25
     c06:	87 95       	ror	r24
     c08:	97 f9       	bld	r25, 7
     c0a:	08 95       	ret
     c0c:	e1 e0       	ldi	r30, 0x01	; 1
     c0e:	66 0f       	add	r22, r22
     c10:	77 1f       	adc	r23, r23
     c12:	88 1f       	adc	r24, r24
     c14:	bb 1f       	adc	r27, r27
     c16:	62 17       	cp	r22, r18
     c18:	73 07       	cpc	r23, r19
     c1a:	84 07       	cpc	r24, r20
     c1c:	ba 07       	cpc	r27, r26
     c1e:	20 f0       	brcs	.+8      	; 0xc28 <__divsf3_pse+0xae>
     c20:	62 1b       	sub	r22, r18
     c22:	73 0b       	sbc	r23, r19
     c24:	84 0b       	sbc	r24, r20
     c26:	ba 0b       	sbc	r27, r26
     c28:	ee 1f       	adc	r30, r30
     c2a:	88 f7       	brcc	.-30     	; 0xc0e <__divsf3_pse+0x94>
     c2c:	e0 95       	com	r30
     c2e:	08 95       	ret

00000c30 <__fixunssfsi>:
     c30:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fp_splitA>
     c34:	88 f0       	brcs	.+34     	; 0xc58 <__fixunssfsi+0x28>
     c36:	9f 57       	subi	r25, 0x7F	; 127
     c38:	98 f0       	brcs	.+38     	; 0xc60 <__fixunssfsi+0x30>
     c3a:	b9 2f       	mov	r27, r25
     c3c:	99 27       	eor	r25, r25
     c3e:	b7 51       	subi	r27, 0x17	; 23
     c40:	b0 f0       	brcs	.+44     	; 0xc6e <__fixunssfsi+0x3e>
     c42:	e1 f0       	breq	.+56     	; 0xc7c <__fixunssfsi+0x4c>
     c44:	66 0f       	add	r22, r22
     c46:	77 1f       	adc	r23, r23
     c48:	88 1f       	adc	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	1a f0       	brmi	.+6      	; 0xc54 <__fixunssfsi+0x24>
     c4e:	ba 95       	dec	r27
     c50:	c9 f7       	brne	.-14     	; 0xc44 <__fixunssfsi+0x14>
     c52:	14 c0       	rjmp	.+40     	; 0xc7c <__fixunssfsi+0x4c>
     c54:	b1 30       	cpi	r27, 0x01	; 1
     c56:	91 f0       	breq	.+36     	; 0xc7c <__fixunssfsi+0x4c>
     c58:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fp_zero>
     c5c:	b1 e0       	ldi	r27, 0x01	; 1
     c5e:	08 95       	ret
     c60:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_zero>
     c64:	67 2f       	mov	r22, r23
     c66:	78 2f       	mov	r23, r24
     c68:	88 27       	eor	r24, r24
     c6a:	b8 5f       	subi	r27, 0xF8	; 248
     c6c:	39 f0       	breq	.+14     	; 0xc7c <__fixunssfsi+0x4c>
     c6e:	b9 3f       	cpi	r27, 0xF9	; 249
     c70:	cc f3       	brlt	.-14     	; 0xc64 <__fixunssfsi+0x34>
     c72:	86 95       	lsr	r24
     c74:	77 95       	ror	r23
     c76:	67 95       	ror	r22
     c78:	b3 95       	inc	r27
     c7a:	d9 f7       	brne	.-10     	; 0xc72 <__fixunssfsi+0x42>
     c7c:	3e f4       	brtc	.+14     	; 0xc8c <__fixunssfsi+0x5c>
     c7e:	90 95       	com	r25
     c80:	80 95       	com	r24
     c82:	70 95       	com	r23
     c84:	61 95       	neg	r22
     c86:	7f 4f       	sbci	r23, 0xFF	; 255
     c88:	8f 4f       	sbci	r24, 0xFF	; 255
     c8a:	9f 4f       	sbci	r25, 0xFF	; 255
     c8c:	08 95       	ret

00000c8e <__floatunsisf>:
     c8e:	e8 94       	clt
     c90:	09 c0       	rjmp	.+18     	; 0xca4 <__floatsisf+0x12>

00000c92 <__floatsisf>:
     c92:	97 fb       	bst	r25, 7
     c94:	3e f4       	brtc	.+14     	; 0xca4 <__floatsisf+0x12>
     c96:	90 95       	com	r25
     c98:	80 95       	com	r24
     c9a:	70 95       	com	r23
     c9c:	61 95       	neg	r22
     c9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ca0:	8f 4f       	sbci	r24, 0xFF	; 255
     ca2:	9f 4f       	sbci	r25, 0xFF	; 255
     ca4:	99 23       	and	r25, r25
     ca6:	a9 f0       	breq	.+42     	; 0xcd2 <__floatsisf+0x40>
     ca8:	f9 2f       	mov	r31, r25
     caa:	96 e9       	ldi	r25, 0x96	; 150
     cac:	bb 27       	eor	r27, r27
     cae:	93 95       	inc	r25
     cb0:	f6 95       	lsr	r31
     cb2:	87 95       	ror	r24
     cb4:	77 95       	ror	r23
     cb6:	67 95       	ror	r22
     cb8:	b7 95       	ror	r27
     cba:	f1 11       	cpse	r31, r1
     cbc:	f8 cf       	rjmp	.-16     	; 0xcae <__floatsisf+0x1c>
     cbe:	fa f4       	brpl	.+62     	; 0xcfe <__floatsisf+0x6c>
     cc0:	bb 0f       	add	r27, r27
     cc2:	11 f4       	brne	.+4      	; 0xcc8 <__floatsisf+0x36>
     cc4:	60 ff       	sbrs	r22, 0
     cc6:	1b c0       	rjmp	.+54     	; 0xcfe <__floatsisf+0x6c>
     cc8:	6f 5f       	subi	r22, 0xFF	; 255
     cca:	7f 4f       	sbci	r23, 0xFF	; 255
     ccc:	8f 4f       	sbci	r24, 0xFF	; 255
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	16 c0       	rjmp	.+44     	; 0xcfe <__floatsisf+0x6c>
     cd2:	88 23       	and	r24, r24
     cd4:	11 f0       	breq	.+4      	; 0xcda <__floatsisf+0x48>
     cd6:	96 e9       	ldi	r25, 0x96	; 150
     cd8:	11 c0       	rjmp	.+34     	; 0xcfc <__floatsisf+0x6a>
     cda:	77 23       	and	r23, r23
     cdc:	21 f0       	breq	.+8      	; 0xce6 <__floatsisf+0x54>
     cde:	9e e8       	ldi	r25, 0x8E	; 142
     ce0:	87 2f       	mov	r24, r23
     ce2:	76 2f       	mov	r23, r22
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <__floatsisf+0x5e>
     ce6:	66 23       	and	r22, r22
     ce8:	71 f0       	breq	.+28     	; 0xd06 <__floatsisf+0x74>
     cea:	96 e8       	ldi	r25, 0x86	; 134
     cec:	86 2f       	mov	r24, r22
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	2a f0       	brmi	.+10     	; 0xcfe <__floatsisf+0x6c>
     cf4:	9a 95       	dec	r25
     cf6:	66 0f       	add	r22, r22
     cf8:	77 1f       	adc	r23, r23
     cfa:	88 1f       	adc	r24, r24
     cfc:	da f7       	brpl	.-10     	; 0xcf4 <__floatsisf+0x62>
     cfe:	88 0f       	add	r24, r24
     d00:	96 95       	lsr	r25
     d02:	87 95       	ror	r24
     d04:	97 f9       	bld	r25, 7
     d06:	08 95       	ret

00000d08 <__fp_inf>:
     d08:	97 f9       	bld	r25, 7
     d0a:	9f 67       	ori	r25, 0x7F	; 127
     d0c:	80 e8       	ldi	r24, 0x80	; 128
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	60 e0       	ldi	r22, 0x00	; 0
     d12:	08 95       	ret

00000d14 <__fp_nan>:
     d14:	9f ef       	ldi	r25, 0xFF	; 255
     d16:	80 ec       	ldi	r24, 0xC0	; 192
     d18:	08 95       	ret

00000d1a <__fp_pscA>:
     d1a:	00 24       	eor	r0, r0
     d1c:	0a 94       	dec	r0
     d1e:	16 16       	cp	r1, r22
     d20:	17 06       	cpc	r1, r23
     d22:	18 06       	cpc	r1, r24
     d24:	09 06       	cpc	r0, r25
     d26:	08 95       	ret

00000d28 <__fp_pscB>:
     d28:	00 24       	eor	r0, r0
     d2a:	0a 94       	dec	r0
     d2c:	12 16       	cp	r1, r18
     d2e:	13 06       	cpc	r1, r19
     d30:	14 06       	cpc	r1, r20
     d32:	05 06       	cpc	r0, r21
     d34:	08 95       	ret
     d36:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_nan>

00000d3a <__fp_rempio2>:
     d3a:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fp_splitA>
     d3e:	d8 f3       	brcs	.-10     	; 0xd36 <__fp_pscB+0xe>
     d40:	e8 94       	clt
     d42:	e0 e0       	ldi	r30, 0x00	; 0
     d44:	bb 27       	eor	r27, r27
     d46:	9f 57       	subi	r25, 0x7F	; 127
     d48:	f0 f0       	brcs	.+60     	; 0xd86 <__fp_rempio2+0x4c>
     d4a:	2a ed       	ldi	r18, 0xDA	; 218
     d4c:	3f e0       	ldi	r19, 0x0F	; 15
     d4e:	49 ec       	ldi	r20, 0xC9	; 201
     d50:	06 c0       	rjmp	.+12     	; 0xd5e <__fp_rempio2+0x24>
     d52:	ee 0f       	add	r30, r30
     d54:	bb 0f       	add	r27, r27
     d56:	66 1f       	adc	r22, r22
     d58:	77 1f       	adc	r23, r23
     d5a:	88 1f       	adc	r24, r24
     d5c:	28 f0       	brcs	.+10     	; 0xd68 <__fp_rempio2+0x2e>
     d5e:	b2 3a       	cpi	r27, 0xA2	; 162
     d60:	62 07       	cpc	r22, r18
     d62:	73 07       	cpc	r23, r19
     d64:	84 07       	cpc	r24, r20
     d66:	28 f0       	brcs	.+10     	; 0xd72 <__fp_rempio2+0x38>
     d68:	b2 5a       	subi	r27, 0xA2	; 162
     d6a:	62 0b       	sbc	r22, r18
     d6c:	73 0b       	sbc	r23, r19
     d6e:	84 0b       	sbc	r24, r20
     d70:	e3 95       	inc	r30
     d72:	9a 95       	dec	r25
     d74:	72 f7       	brpl	.-36     	; 0xd52 <__fp_rempio2+0x18>
     d76:	80 38       	cpi	r24, 0x80	; 128
     d78:	30 f4       	brcc	.+12     	; 0xd86 <__fp_rempio2+0x4c>
     d7a:	9a 95       	dec	r25
     d7c:	bb 0f       	add	r27, r27
     d7e:	66 1f       	adc	r22, r22
     d80:	77 1f       	adc	r23, r23
     d82:	88 1f       	adc	r24, r24
     d84:	d2 f7       	brpl	.-12     	; 0xd7a <__fp_rempio2+0x40>
     d86:	90 48       	sbci	r25, 0x80	; 128
     d88:	0c 94 83 07 	jmp	0xf06	; 0xf06 <__fp_mpack_finite>

00000d8c <__fp_round>:
     d8c:	09 2e       	mov	r0, r25
     d8e:	03 94       	inc	r0
     d90:	00 0c       	add	r0, r0
     d92:	11 f4       	brne	.+4      	; 0xd98 <__fp_round+0xc>
     d94:	88 23       	and	r24, r24
     d96:	52 f0       	brmi	.+20     	; 0xdac <__fp_round+0x20>
     d98:	bb 0f       	add	r27, r27
     d9a:	40 f4       	brcc	.+16     	; 0xdac <__fp_round+0x20>
     d9c:	bf 2b       	or	r27, r31
     d9e:	11 f4       	brne	.+4      	; 0xda4 <__fp_round+0x18>
     da0:	60 ff       	sbrs	r22, 0
     da2:	04 c0       	rjmp	.+8      	; 0xdac <__fp_round+0x20>
     da4:	6f 5f       	subi	r22, 0xFF	; 255
     da6:	7f 4f       	sbci	r23, 0xFF	; 255
     da8:	8f 4f       	sbci	r24, 0xFF	; 255
     daa:	9f 4f       	sbci	r25, 0xFF	; 255
     dac:	08 95       	ret

00000dae <__fp_sinus>:
     dae:	ef 93       	push	r30
     db0:	e0 ff       	sbrs	r30, 0
     db2:	07 c0       	rjmp	.+14     	; 0xdc2 <__fp_sinus+0x14>
     db4:	a2 ea       	ldi	r26, 0xA2	; 162
     db6:	2a ed       	ldi	r18, 0xDA	; 218
     db8:	3f e0       	ldi	r19, 0x0F	; 15
     dba:	49 ec       	ldi	r20, 0xC9	; 201
     dbc:	5f eb       	ldi	r21, 0xBF	; 191
     dbe:	0e 94 4c 05 	call	0xa98	; 0xa98 <__addsf3x>
     dc2:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__fp_round>
     dc6:	0f 90       	pop	r0
     dc8:	03 94       	inc	r0
     dca:	01 fc       	sbrc	r0, 1
     dcc:	90 58       	subi	r25, 0x80	; 128
     dce:	e4 eb       	ldi	r30, 0xB4	; 180
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__fp_powsodd>

00000dd6 <__fp_split3>:
     dd6:	57 fd       	sbrc	r21, 7
     dd8:	90 58       	subi	r25, 0x80	; 128
     dda:	44 0f       	add	r20, r20
     ddc:	55 1f       	adc	r21, r21
     dde:	59 f0       	breq	.+22     	; 0xdf6 <__fp_splitA+0x10>
     de0:	5f 3f       	cpi	r21, 0xFF	; 255
     de2:	71 f0       	breq	.+28     	; 0xe00 <__fp_splitA+0x1a>
     de4:	47 95       	ror	r20

00000de6 <__fp_splitA>:
     de6:	88 0f       	add	r24, r24
     de8:	97 fb       	bst	r25, 7
     dea:	99 1f       	adc	r25, r25
     dec:	61 f0       	breq	.+24     	; 0xe06 <__fp_splitA+0x20>
     dee:	9f 3f       	cpi	r25, 0xFF	; 255
     df0:	79 f0       	breq	.+30     	; 0xe10 <__fp_splitA+0x2a>
     df2:	87 95       	ror	r24
     df4:	08 95       	ret
     df6:	12 16       	cp	r1, r18
     df8:	13 06       	cpc	r1, r19
     dfa:	14 06       	cpc	r1, r20
     dfc:	55 1f       	adc	r21, r21
     dfe:	f2 cf       	rjmp	.-28     	; 0xde4 <__fp_split3+0xe>
     e00:	46 95       	lsr	r20
     e02:	f1 df       	rcall	.-30     	; 0xde6 <__fp_splitA>
     e04:	08 c0       	rjmp	.+16     	; 0xe16 <__fp_splitA+0x30>
     e06:	16 16       	cp	r1, r22
     e08:	17 06       	cpc	r1, r23
     e0a:	18 06       	cpc	r1, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	f1 cf       	rjmp	.-30     	; 0xdf2 <__fp_splitA+0xc>
     e10:	86 95       	lsr	r24
     e12:	71 05       	cpc	r23, r1
     e14:	61 05       	cpc	r22, r1
     e16:	08 94       	sec
     e18:	08 95       	ret

00000e1a <__fp_zero>:
     e1a:	e8 94       	clt

00000e1c <__fp_szero>:
     e1c:	bb 27       	eor	r27, r27
     e1e:	66 27       	eor	r22, r22
     e20:	77 27       	eor	r23, r23
     e22:	cb 01       	movw	r24, r22
     e24:	97 f9       	bld	r25, 7
     e26:	08 95       	ret

00000e28 <__mulsf3>:
     e28:	0e 94 27 07 	call	0xe4e	; 0xe4e <__mulsf3x>
     e2c:	0c 94 c6 06 	jmp	0xd8c	; 0xd8c <__fp_round>
     e30:	0e 94 8d 06 	call	0xd1a	; 0xd1a <__fp_pscA>
     e34:	38 f0       	brcs	.+14     	; 0xe44 <__mulsf3+0x1c>
     e36:	0e 94 94 06 	call	0xd28	; 0xd28 <__fp_pscB>
     e3a:	20 f0       	brcs	.+8      	; 0xe44 <__mulsf3+0x1c>
     e3c:	95 23       	and	r25, r21
     e3e:	11 f0       	breq	.+4      	; 0xe44 <__mulsf3+0x1c>
     e40:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__fp_inf>
     e44:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <__fp_nan>
     e48:	11 24       	eor	r1, r1
     e4a:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_szero>

00000e4e <__mulsf3x>:
     e4e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fp_split3>
     e52:	70 f3       	brcs	.-36     	; 0xe30 <__mulsf3+0x8>

00000e54 <__mulsf3_pse>:
     e54:	95 9f       	mul	r25, r21
     e56:	c1 f3       	breq	.-16     	; 0xe48 <__mulsf3+0x20>
     e58:	95 0f       	add	r25, r21
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	55 1f       	adc	r21, r21
     e5e:	62 9f       	mul	r22, r18
     e60:	f0 01       	movw	r30, r0
     e62:	72 9f       	mul	r23, r18
     e64:	bb 27       	eor	r27, r27
     e66:	f0 0d       	add	r31, r0
     e68:	b1 1d       	adc	r27, r1
     e6a:	63 9f       	mul	r22, r19
     e6c:	aa 27       	eor	r26, r26
     e6e:	f0 0d       	add	r31, r0
     e70:	b1 1d       	adc	r27, r1
     e72:	aa 1f       	adc	r26, r26
     e74:	64 9f       	mul	r22, r20
     e76:	66 27       	eor	r22, r22
     e78:	b0 0d       	add	r27, r0
     e7a:	a1 1d       	adc	r26, r1
     e7c:	66 1f       	adc	r22, r22
     e7e:	82 9f       	mul	r24, r18
     e80:	22 27       	eor	r18, r18
     e82:	b0 0d       	add	r27, r0
     e84:	a1 1d       	adc	r26, r1
     e86:	62 1f       	adc	r22, r18
     e88:	73 9f       	mul	r23, r19
     e8a:	b0 0d       	add	r27, r0
     e8c:	a1 1d       	adc	r26, r1
     e8e:	62 1f       	adc	r22, r18
     e90:	83 9f       	mul	r24, r19
     e92:	a0 0d       	add	r26, r0
     e94:	61 1d       	adc	r22, r1
     e96:	22 1f       	adc	r18, r18
     e98:	74 9f       	mul	r23, r20
     e9a:	33 27       	eor	r19, r19
     e9c:	a0 0d       	add	r26, r0
     e9e:	61 1d       	adc	r22, r1
     ea0:	23 1f       	adc	r18, r19
     ea2:	84 9f       	mul	r24, r20
     ea4:	60 0d       	add	r22, r0
     ea6:	21 1d       	adc	r18, r1
     ea8:	82 2f       	mov	r24, r18
     eaa:	76 2f       	mov	r23, r22
     eac:	6a 2f       	mov	r22, r26
     eae:	11 24       	eor	r1, r1
     eb0:	9f 57       	subi	r25, 0x7F	; 127
     eb2:	50 40       	sbci	r21, 0x00	; 0
     eb4:	9a f0       	brmi	.+38     	; 0xedc <__mulsf3_pse+0x88>
     eb6:	f1 f0       	breq	.+60     	; 0xef4 <__mulsf3_pse+0xa0>
     eb8:	88 23       	and	r24, r24
     eba:	4a f0       	brmi	.+18     	; 0xece <__mulsf3_pse+0x7a>
     ebc:	ee 0f       	add	r30, r30
     ebe:	ff 1f       	adc	r31, r31
     ec0:	bb 1f       	adc	r27, r27
     ec2:	66 1f       	adc	r22, r22
     ec4:	77 1f       	adc	r23, r23
     ec6:	88 1f       	adc	r24, r24
     ec8:	91 50       	subi	r25, 0x01	; 1
     eca:	50 40       	sbci	r21, 0x00	; 0
     ecc:	a9 f7       	brne	.-22     	; 0xeb8 <__mulsf3_pse+0x64>
     ece:	9e 3f       	cpi	r25, 0xFE	; 254
     ed0:	51 05       	cpc	r21, r1
     ed2:	80 f0       	brcs	.+32     	; 0xef4 <__mulsf3_pse+0xa0>
     ed4:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__fp_inf>
     ed8:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_szero>
     edc:	5f 3f       	cpi	r21, 0xFF	; 255
     ede:	e4 f3       	brlt	.-8      	; 0xed8 <__mulsf3_pse+0x84>
     ee0:	98 3e       	cpi	r25, 0xE8	; 232
     ee2:	d4 f3       	brlt	.-12     	; 0xed8 <__mulsf3_pse+0x84>
     ee4:	86 95       	lsr	r24
     ee6:	77 95       	ror	r23
     ee8:	67 95       	ror	r22
     eea:	b7 95       	ror	r27
     eec:	f7 95       	ror	r31
     eee:	e7 95       	ror	r30
     ef0:	9f 5f       	subi	r25, 0xFF	; 255
     ef2:	c1 f7       	brne	.-16     	; 0xee4 <__mulsf3_pse+0x90>
     ef4:	fe 2b       	or	r31, r30
     ef6:	88 0f       	add	r24, r24
     ef8:	91 1d       	adc	r25, r1
     efa:	96 95       	lsr	r25
     efc:	87 95       	ror	r24
     efe:	97 f9       	bld	r25, 7
     f00:	08 95       	ret

00000f02 <__fp_mpack>:
     f02:	9f 3f       	cpi	r25, 0xFF	; 255
     f04:	31 f0       	breq	.+12     	; 0xf12 <__fp_mpack_finite+0xc>

00000f06 <__fp_mpack_finite>:
     f06:	91 50       	subi	r25, 0x01	; 1
     f08:	20 f4       	brcc	.+8      	; 0xf12 <__fp_mpack_finite+0xc>
     f0a:	87 95       	ror	r24
     f0c:	77 95       	ror	r23
     f0e:	67 95       	ror	r22
     f10:	b7 95       	ror	r27
     f12:	88 0f       	add	r24, r24
     f14:	91 1d       	adc	r25, r1
     f16:	96 95       	lsr	r25
     f18:	87 95       	ror	r24
     f1a:	97 f9       	bld	r25, 7
     f1c:	08 95       	ret

00000f1e <__fp_powser>:
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	1f 93       	push	r17
     f24:	0f 93       	push	r16
     f26:	ff 92       	push	r15
     f28:	ef 92       	push	r14
     f2a:	df 92       	push	r13
     f2c:	7b 01       	movw	r14, r22
     f2e:	8c 01       	movw	r16, r24
     f30:	68 94       	set
     f32:	06 c0       	rjmp	.+12     	; 0xf40 <__fp_powser+0x22>
     f34:	da 2e       	mov	r13, r26
     f36:	ef 01       	movw	r28, r30
     f38:	0e 94 27 07 	call	0xe4e	; 0xe4e <__mulsf3x>
     f3c:	fe 01       	movw	r30, r28
     f3e:	e8 94       	clt
     f40:	a5 91       	lpm	r26, Z+
     f42:	25 91       	lpm	r18, Z+
     f44:	35 91       	lpm	r19, Z+
     f46:	45 91       	lpm	r20, Z+
     f48:	55 91       	lpm	r21, Z+
     f4a:	a6 f3       	brts	.-24     	; 0xf34 <__fp_powser+0x16>
     f4c:	ef 01       	movw	r28, r30
     f4e:	0e 94 4c 05 	call	0xa98	; 0xa98 <__addsf3x>
     f52:	fe 01       	movw	r30, r28
     f54:	97 01       	movw	r18, r14
     f56:	a8 01       	movw	r20, r16
     f58:	da 94       	dec	r13
     f5a:	69 f7       	brne	.-38     	; 0xf36 <__fp_powser+0x18>
     f5c:	df 90       	pop	r13
     f5e:	ef 90       	pop	r14
     f60:	ff 90       	pop	r15
     f62:	0f 91       	pop	r16
     f64:	1f 91       	pop	r17
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <__fp_powsodd>:
     f6c:	9f 93       	push	r25
     f6e:	8f 93       	push	r24
     f70:	7f 93       	push	r23
     f72:	6f 93       	push	r22
     f74:	ff 93       	push	r31
     f76:	ef 93       	push	r30
     f78:	9b 01       	movw	r18, r22
     f7a:	ac 01       	movw	r20, r24
     f7c:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulsf3>
     f80:	ef 91       	pop	r30
     f82:	ff 91       	pop	r31
     f84:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__fp_powser>
     f88:	2f 91       	pop	r18
     f8a:	3f 91       	pop	r19
     f8c:	4f 91       	pop	r20
     f8e:	5f 91       	pop	r21
     f90:	0c 94 14 07 	jmp	0xe28	; 0xe28 <__mulsf3>

00000f94 <__udivmodhi4>:
     f94:	aa 1b       	sub	r26, r26
     f96:	bb 1b       	sub	r27, r27
     f98:	51 e1       	ldi	r21, 0x11	; 17
     f9a:	07 c0       	rjmp	.+14     	; 0xfaa <__udivmodhi4_ep>

00000f9c <__udivmodhi4_loop>:
     f9c:	aa 1f       	adc	r26, r26
     f9e:	bb 1f       	adc	r27, r27
     fa0:	a6 17       	cp	r26, r22
     fa2:	b7 07       	cpc	r27, r23
     fa4:	10 f0       	brcs	.+4      	; 0xfaa <__udivmodhi4_ep>
     fa6:	a6 1b       	sub	r26, r22
     fa8:	b7 0b       	sbc	r27, r23

00000faa <__udivmodhi4_ep>:
     faa:	88 1f       	adc	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	5a 95       	dec	r21
     fb0:	a9 f7       	brne	.-22     	; 0xf9c <__udivmodhi4_loop>
     fb2:	80 95       	com	r24
     fb4:	90 95       	com	r25
     fb6:	bc 01       	movw	r22, r24
     fb8:	cd 01       	movw	r24, r26
     fba:	08 95       	ret

00000fbc <__udivmodsi4>:
     fbc:	a1 e2       	ldi	r26, 0x21	; 33
     fbe:	1a 2e       	mov	r1, r26
     fc0:	aa 1b       	sub	r26, r26
     fc2:	bb 1b       	sub	r27, r27
     fc4:	fd 01       	movw	r30, r26
     fc6:	0d c0       	rjmp	.+26     	; 0xfe2 <__udivmodsi4_ep>

00000fc8 <__udivmodsi4_loop>:
     fc8:	aa 1f       	adc	r26, r26
     fca:	bb 1f       	adc	r27, r27
     fcc:	ee 1f       	adc	r30, r30
     fce:	ff 1f       	adc	r31, r31
     fd0:	a2 17       	cp	r26, r18
     fd2:	b3 07       	cpc	r27, r19
     fd4:	e4 07       	cpc	r30, r20
     fd6:	f5 07       	cpc	r31, r21
     fd8:	20 f0       	brcs	.+8      	; 0xfe2 <__udivmodsi4_ep>
     fda:	a2 1b       	sub	r26, r18
     fdc:	b3 0b       	sbc	r27, r19
     fde:	e4 0b       	sbc	r30, r20
     fe0:	f5 0b       	sbc	r31, r21

00000fe2 <__udivmodsi4_ep>:
     fe2:	66 1f       	adc	r22, r22
     fe4:	77 1f       	adc	r23, r23
     fe6:	88 1f       	adc	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	1a 94       	dec	r1
     fec:	69 f7       	brne	.-38     	; 0xfc8 <__udivmodsi4_loop>
     fee:	60 95       	com	r22
     ff0:	70 95       	com	r23
     ff2:	80 95       	com	r24
     ff4:	90 95       	com	r25
     ff6:	9b 01       	movw	r18, r22
     ff8:	ac 01       	movw	r20, r24
     ffa:	bd 01       	movw	r22, r26
     ffc:	cf 01       	movw	r24, r30
     ffe:	08 95       	ret

00001000 <__umulhisi3>:
    1000:	a2 9f       	mul	r26, r18
    1002:	b0 01       	movw	r22, r0
    1004:	b3 9f       	mul	r27, r19
    1006:	c0 01       	movw	r24, r0
    1008:	a3 9f       	mul	r26, r19
    100a:	70 0d       	add	r23, r0
    100c:	81 1d       	adc	r24, r1
    100e:	11 24       	eor	r1, r1
    1010:	91 1d       	adc	r25, r1
    1012:	b2 9f       	mul	r27, r18
    1014:	70 0d       	add	r23, r0
    1016:	81 1d       	adc	r24, r1
    1018:	11 24       	eor	r1, r1
    101a:	91 1d       	adc	r25, r1
    101c:	08 95       	ret

0000101e <sprintf>:
    101e:	ae e0       	ldi	r26, 0x0E	; 14
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e5 e1       	ldi	r30, 0x15	; 21
    1024:	f8 e0       	ldi	r31, 0x08	; 8
    1026:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__prologue_saves__+0x1c>
    102a:	0d 89       	ldd	r16, Y+21	; 0x15
    102c:	1e 89       	ldd	r17, Y+22	; 0x16
    102e:	86 e0       	ldi	r24, 0x06	; 6
    1030:	8c 83       	std	Y+4, r24	; 0x04
    1032:	1a 83       	std	Y+2, r17	; 0x02
    1034:	09 83       	std	Y+1, r16	; 0x01
    1036:	8f ef       	ldi	r24, 0xFF	; 255
    1038:	9f e7       	ldi	r25, 0x7F	; 127
    103a:	9e 83       	std	Y+6, r25	; 0x06
    103c:	8d 83       	std	Y+5, r24	; 0x05
    103e:	ae 01       	movw	r20, r28
    1040:	47 5e       	subi	r20, 0xE7	; 231
    1042:	5f 4f       	sbci	r21, 0xFF	; 255
    1044:	6f 89       	ldd	r22, Y+23	; 0x17
    1046:	78 8d       	ldd	r23, Y+24	; 0x18
    1048:	ce 01       	movw	r24, r28
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	0e 94 31 08 	call	0x1062	; 0x1062 <vfprintf>
    1050:	ef 81       	ldd	r30, Y+7	; 0x07
    1052:	f8 85       	ldd	r31, Y+8	; 0x08
    1054:	e0 0f       	add	r30, r16
    1056:	f1 1f       	adc	r31, r17
    1058:	10 82       	st	Z, r1
    105a:	2e 96       	adiw	r28, 0x0e	; 14
    105c:	e4 e0       	ldi	r30, 0x04	; 4
    105e:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__epilogue_restores__+0x1c>

00001062 <vfprintf>:
    1062:	ab e0       	ldi	r26, 0x0B	; 11
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e7 e3       	ldi	r30, 0x37	; 55
    1068:	f8 e0       	ldi	r31, 0x08	; 8
    106a:	0c 94 c2 0a 	jmp	0x1584	; 0x1584 <__prologue_saves__>
    106e:	6c 01       	movw	r12, r24
    1070:	7b 01       	movw	r14, r22
    1072:	8a 01       	movw	r16, r20
    1074:	fc 01       	movw	r30, r24
    1076:	17 82       	std	Z+7, r1	; 0x07
    1078:	16 82       	std	Z+6, r1	; 0x06
    107a:	83 81       	ldd	r24, Z+3	; 0x03
    107c:	81 ff       	sbrs	r24, 1
    107e:	cc c1       	rjmp	.+920    	; 0x1418 <vfprintf+0x3b6>
    1080:	ce 01       	movw	r24, r28
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	3c 01       	movw	r6, r24
    1086:	f6 01       	movw	r30, r12
    1088:	93 81       	ldd	r25, Z+3	; 0x03
    108a:	f7 01       	movw	r30, r14
    108c:	93 fd       	sbrc	r25, 3
    108e:	85 91       	lpm	r24, Z+
    1090:	93 ff       	sbrs	r25, 3
    1092:	81 91       	ld	r24, Z+
    1094:	7f 01       	movw	r14, r30
    1096:	88 23       	and	r24, r24
    1098:	09 f4       	brne	.+2      	; 0x109c <vfprintf+0x3a>
    109a:	ba c1       	rjmp	.+884    	; 0x1410 <vfprintf+0x3ae>
    109c:	85 32       	cpi	r24, 0x25	; 37
    109e:	39 f4       	brne	.+14     	; 0x10ae <vfprintf+0x4c>
    10a0:	93 fd       	sbrc	r25, 3
    10a2:	85 91       	lpm	r24, Z+
    10a4:	93 ff       	sbrs	r25, 3
    10a6:	81 91       	ld	r24, Z+
    10a8:	7f 01       	movw	r14, r30
    10aa:	85 32       	cpi	r24, 0x25	; 37
    10ac:	29 f4       	brne	.+10     	; 0x10b8 <vfprintf+0x56>
    10ae:	b6 01       	movw	r22, r12
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	0e 94 28 0a 	call	0x1450	; 0x1450 <fputc>
    10b6:	e7 cf       	rjmp	.-50     	; 0x1086 <vfprintf+0x24>
    10b8:	91 2c       	mov	r9, r1
    10ba:	21 2c       	mov	r2, r1
    10bc:	31 2c       	mov	r3, r1
    10be:	ff e1       	ldi	r31, 0x1F	; 31
    10c0:	f3 15       	cp	r31, r3
    10c2:	d8 f0       	brcs	.+54     	; 0x10fa <vfprintf+0x98>
    10c4:	8b 32       	cpi	r24, 0x2B	; 43
    10c6:	79 f0       	breq	.+30     	; 0x10e6 <vfprintf+0x84>
    10c8:	38 f4       	brcc	.+14     	; 0x10d8 <vfprintf+0x76>
    10ca:	80 32       	cpi	r24, 0x20	; 32
    10cc:	79 f0       	breq	.+30     	; 0x10ec <vfprintf+0x8a>
    10ce:	83 32       	cpi	r24, 0x23	; 35
    10d0:	a1 f4       	brne	.+40     	; 0x10fa <vfprintf+0x98>
    10d2:	23 2d       	mov	r18, r3
    10d4:	20 61       	ori	r18, 0x10	; 16
    10d6:	1d c0       	rjmp	.+58     	; 0x1112 <vfprintf+0xb0>
    10d8:	8d 32       	cpi	r24, 0x2D	; 45
    10da:	61 f0       	breq	.+24     	; 0x10f4 <vfprintf+0x92>
    10dc:	80 33       	cpi	r24, 0x30	; 48
    10de:	69 f4       	brne	.+26     	; 0x10fa <vfprintf+0x98>
    10e0:	23 2d       	mov	r18, r3
    10e2:	21 60       	ori	r18, 0x01	; 1
    10e4:	16 c0       	rjmp	.+44     	; 0x1112 <vfprintf+0xb0>
    10e6:	83 2d       	mov	r24, r3
    10e8:	82 60       	ori	r24, 0x02	; 2
    10ea:	38 2e       	mov	r3, r24
    10ec:	e3 2d       	mov	r30, r3
    10ee:	e4 60       	ori	r30, 0x04	; 4
    10f0:	3e 2e       	mov	r3, r30
    10f2:	2a c0       	rjmp	.+84     	; 0x1148 <vfprintf+0xe6>
    10f4:	f3 2d       	mov	r31, r3
    10f6:	f8 60       	ori	r31, 0x08	; 8
    10f8:	1d c0       	rjmp	.+58     	; 0x1134 <vfprintf+0xd2>
    10fa:	37 fc       	sbrc	r3, 7
    10fc:	2d c0       	rjmp	.+90     	; 0x1158 <vfprintf+0xf6>
    10fe:	20 ed       	ldi	r18, 0xD0	; 208
    1100:	28 0f       	add	r18, r24
    1102:	2a 30       	cpi	r18, 0x0A	; 10
    1104:	40 f0       	brcs	.+16     	; 0x1116 <vfprintf+0xb4>
    1106:	8e 32       	cpi	r24, 0x2E	; 46
    1108:	b9 f4       	brne	.+46     	; 0x1138 <vfprintf+0xd6>
    110a:	36 fc       	sbrc	r3, 6
    110c:	81 c1       	rjmp	.+770    	; 0x1410 <vfprintf+0x3ae>
    110e:	23 2d       	mov	r18, r3
    1110:	20 64       	ori	r18, 0x40	; 64
    1112:	32 2e       	mov	r3, r18
    1114:	19 c0       	rjmp	.+50     	; 0x1148 <vfprintf+0xe6>
    1116:	36 fe       	sbrs	r3, 6
    1118:	06 c0       	rjmp	.+12     	; 0x1126 <vfprintf+0xc4>
    111a:	8a e0       	ldi	r24, 0x0A	; 10
    111c:	98 9e       	mul	r9, r24
    111e:	20 0d       	add	r18, r0
    1120:	11 24       	eor	r1, r1
    1122:	92 2e       	mov	r9, r18
    1124:	11 c0       	rjmp	.+34     	; 0x1148 <vfprintf+0xe6>
    1126:	ea e0       	ldi	r30, 0x0A	; 10
    1128:	2e 9e       	mul	r2, r30
    112a:	20 0d       	add	r18, r0
    112c:	11 24       	eor	r1, r1
    112e:	22 2e       	mov	r2, r18
    1130:	f3 2d       	mov	r31, r3
    1132:	f0 62       	ori	r31, 0x20	; 32
    1134:	3f 2e       	mov	r3, r31
    1136:	08 c0       	rjmp	.+16     	; 0x1148 <vfprintf+0xe6>
    1138:	8c 36       	cpi	r24, 0x6C	; 108
    113a:	21 f4       	brne	.+8      	; 0x1144 <vfprintf+0xe2>
    113c:	83 2d       	mov	r24, r3
    113e:	80 68       	ori	r24, 0x80	; 128
    1140:	38 2e       	mov	r3, r24
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <vfprintf+0xe6>
    1144:	88 36       	cpi	r24, 0x68	; 104
    1146:	41 f4       	brne	.+16     	; 0x1158 <vfprintf+0xf6>
    1148:	f7 01       	movw	r30, r14
    114a:	93 fd       	sbrc	r25, 3
    114c:	85 91       	lpm	r24, Z+
    114e:	93 ff       	sbrs	r25, 3
    1150:	81 91       	ld	r24, Z+
    1152:	7f 01       	movw	r14, r30
    1154:	81 11       	cpse	r24, r1
    1156:	b3 cf       	rjmp	.-154    	; 0x10be <vfprintf+0x5c>
    1158:	98 2f       	mov	r25, r24
    115a:	9f 7d       	andi	r25, 0xDF	; 223
    115c:	95 54       	subi	r25, 0x45	; 69
    115e:	93 30       	cpi	r25, 0x03	; 3
    1160:	28 f4       	brcc	.+10     	; 0x116c <vfprintf+0x10a>
    1162:	0c 5f       	subi	r16, 0xFC	; 252
    1164:	1f 4f       	sbci	r17, 0xFF	; 255
    1166:	9f e3       	ldi	r25, 0x3F	; 63
    1168:	99 83       	std	Y+1, r25	; 0x01
    116a:	0d c0       	rjmp	.+26     	; 0x1186 <vfprintf+0x124>
    116c:	83 36       	cpi	r24, 0x63	; 99
    116e:	31 f0       	breq	.+12     	; 0x117c <vfprintf+0x11a>
    1170:	83 37       	cpi	r24, 0x73	; 115
    1172:	71 f0       	breq	.+28     	; 0x1190 <vfprintf+0x12e>
    1174:	83 35       	cpi	r24, 0x53	; 83
    1176:	09 f0       	breq	.+2      	; 0x117a <vfprintf+0x118>
    1178:	59 c0       	rjmp	.+178    	; 0x122c <vfprintf+0x1ca>
    117a:	21 c0       	rjmp	.+66     	; 0x11be <vfprintf+0x15c>
    117c:	f8 01       	movw	r30, r16
    117e:	80 81       	ld	r24, Z
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	0e 5f       	subi	r16, 0xFE	; 254
    1184:	1f 4f       	sbci	r17, 0xFF	; 255
    1186:	88 24       	eor	r8, r8
    1188:	83 94       	inc	r8
    118a:	91 2c       	mov	r9, r1
    118c:	53 01       	movw	r10, r6
    118e:	13 c0       	rjmp	.+38     	; 0x11b6 <vfprintf+0x154>
    1190:	28 01       	movw	r4, r16
    1192:	f2 e0       	ldi	r31, 0x02	; 2
    1194:	4f 0e       	add	r4, r31
    1196:	51 1c       	adc	r5, r1
    1198:	f8 01       	movw	r30, r16
    119a:	a0 80       	ld	r10, Z
    119c:	b1 80       	ldd	r11, Z+1	; 0x01
    119e:	36 fe       	sbrs	r3, 6
    11a0:	03 c0       	rjmp	.+6      	; 0x11a8 <vfprintf+0x146>
    11a2:	69 2d       	mov	r22, r9
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <vfprintf+0x14a>
    11a8:	6f ef       	ldi	r22, 0xFF	; 255
    11aa:	7f ef       	ldi	r23, 0xFF	; 255
    11ac:	c5 01       	movw	r24, r10
    11ae:	0e 94 1d 0a 	call	0x143a	; 0x143a <strnlen>
    11b2:	4c 01       	movw	r8, r24
    11b4:	82 01       	movw	r16, r4
    11b6:	f3 2d       	mov	r31, r3
    11b8:	ff 77       	andi	r31, 0x7F	; 127
    11ba:	3f 2e       	mov	r3, r31
    11bc:	16 c0       	rjmp	.+44     	; 0x11ea <vfprintf+0x188>
    11be:	28 01       	movw	r4, r16
    11c0:	22 e0       	ldi	r18, 0x02	; 2
    11c2:	42 0e       	add	r4, r18
    11c4:	51 1c       	adc	r5, r1
    11c6:	f8 01       	movw	r30, r16
    11c8:	a0 80       	ld	r10, Z
    11ca:	b1 80       	ldd	r11, Z+1	; 0x01
    11cc:	36 fe       	sbrs	r3, 6
    11ce:	03 c0       	rjmp	.+6      	; 0x11d6 <vfprintf+0x174>
    11d0:	69 2d       	mov	r22, r9
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <vfprintf+0x178>
    11d6:	6f ef       	ldi	r22, 0xFF	; 255
    11d8:	7f ef       	ldi	r23, 0xFF	; 255
    11da:	c5 01       	movw	r24, r10
    11dc:	0e 94 12 0a 	call	0x1424	; 0x1424 <strnlen_P>
    11e0:	4c 01       	movw	r8, r24
    11e2:	f3 2d       	mov	r31, r3
    11e4:	f0 68       	ori	r31, 0x80	; 128
    11e6:	3f 2e       	mov	r3, r31
    11e8:	82 01       	movw	r16, r4
    11ea:	33 fc       	sbrc	r3, 3
    11ec:	1b c0       	rjmp	.+54     	; 0x1224 <vfprintf+0x1c2>
    11ee:	82 2d       	mov	r24, r2
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	88 16       	cp	r8, r24
    11f4:	99 06       	cpc	r9, r25
    11f6:	b0 f4       	brcc	.+44     	; 0x1224 <vfprintf+0x1c2>
    11f8:	b6 01       	movw	r22, r12
    11fa:	80 e2       	ldi	r24, 0x20	; 32
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	0e 94 28 0a 	call	0x1450	; 0x1450 <fputc>
    1202:	2a 94       	dec	r2
    1204:	f4 cf       	rjmp	.-24     	; 0x11ee <vfprintf+0x18c>
    1206:	f5 01       	movw	r30, r10
    1208:	37 fc       	sbrc	r3, 7
    120a:	85 91       	lpm	r24, Z+
    120c:	37 fe       	sbrs	r3, 7
    120e:	81 91       	ld	r24, Z+
    1210:	5f 01       	movw	r10, r30
    1212:	b6 01       	movw	r22, r12
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	0e 94 28 0a 	call	0x1450	; 0x1450 <fputc>
    121a:	21 10       	cpse	r2, r1
    121c:	2a 94       	dec	r2
    121e:	21 e0       	ldi	r18, 0x01	; 1
    1220:	82 1a       	sub	r8, r18
    1222:	91 08       	sbc	r9, r1
    1224:	81 14       	cp	r8, r1
    1226:	91 04       	cpc	r9, r1
    1228:	71 f7       	brne	.-36     	; 0x1206 <vfprintf+0x1a4>
    122a:	e8 c0       	rjmp	.+464    	; 0x13fc <vfprintf+0x39a>
    122c:	84 36       	cpi	r24, 0x64	; 100
    122e:	11 f0       	breq	.+4      	; 0x1234 <vfprintf+0x1d2>
    1230:	89 36       	cpi	r24, 0x69	; 105
    1232:	41 f5       	brne	.+80     	; 0x1284 <vfprintf+0x222>
    1234:	f8 01       	movw	r30, r16
    1236:	37 fe       	sbrs	r3, 7
    1238:	07 c0       	rjmp	.+14     	; 0x1248 <vfprintf+0x1e6>
    123a:	60 81       	ld	r22, Z
    123c:	71 81       	ldd	r23, Z+1	; 0x01
    123e:	82 81       	ldd	r24, Z+2	; 0x02
    1240:	93 81       	ldd	r25, Z+3	; 0x03
    1242:	0c 5f       	subi	r16, 0xFC	; 252
    1244:	1f 4f       	sbci	r17, 0xFF	; 255
    1246:	08 c0       	rjmp	.+16     	; 0x1258 <vfprintf+0x1f6>
    1248:	60 81       	ld	r22, Z
    124a:	71 81       	ldd	r23, Z+1	; 0x01
    124c:	07 2e       	mov	r0, r23
    124e:	00 0c       	add	r0, r0
    1250:	88 0b       	sbc	r24, r24
    1252:	99 0b       	sbc	r25, r25
    1254:	0e 5f       	subi	r16, 0xFE	; 254
    1256:	1f 4f       	sbci	r17, 0xFF	; 255
    1258:	f3 2d       	mov	r31, r3
    125a:	ff 76       	andi	r31, 0x6F	; 111
    125c:	3f 2e       	mov	r3, r31
    125e:	97 ff       	sbrs	r25, 7
    1260:	09 c0       	rjmp	.+18     	; 0x1274 <vfprintf+0x212>
    1262:	90 95       	com	r25
    1264:	80 95       	com	r24
    1266:	70 95       	com	r23
    1268:	61 95       	neg	r22
    126a:	7f 4f       	sbci	r23, 0xFF	; 255
    126c:	8f 4f       	sbci	r24, 0xFF	; 255
    126e:	9f 4f       	sbci	r25, 0xFF	; 255
    1270:	f0 68       	ori	r31, 0x80	; 128
    1272:	3f 2e       	mov	r3, r31
    1274:	2a e0       	ldi	r18, 0x0A	; 10
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	a3 01       	movw	r20, r6
    127a:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__ultoa_invert>
    127e:	88 2e       	mov	r8, r24
    1280:	86 18       	sub	r8, r6
    1282:	45 c0       	rjmp	.+138    	; 0x130e <vfprintf+0x2ac>
    1284:	85 37       	cpi	r24, 0x75	; 117
    1286:	31 f4       	brne	.+12     	; 0x1294 <vfprintf+0x232>
    1288:	23 2d       	mov	r18, r3
    128a:	2f 7e       	andi	r18, 0xEF	; 239
    128c:	b2 2e       	mov	r11, r18
    128e:	2a e0       	ldi	r18, 0x0A	; 10
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	25 c0       	rjmp	.+74     	; 0x12de <vfprintf+0x27c>
    1294:	93 2d       	mov	r25, r3
    1296:	99 7f       	andi	r25, 0xF9	; 249
    1298:	b9 2e       	mov	r11, r25
    129a:	8f 36       	cpi	r24, 0x6F	; 111
    129c:	c1 f0       	breq	.+48     	; 0x12ce <vfprintf+0x26c>
    129e:	18 f4       	brcc	.+6      	; 0x12a6 <vfprintf+0x244>
    12a0:	88 35       	cpi	r24, 0x58	; 88
    12a2:	79 f0       	breq	.+30     	; 0x12c2 <vfprintf+0x260>
    12a4:	b5 c0       	rjmp	.+362    	; 0x1410 <vfprintf+0x3ae>
    12a6:	80 37       	cpi	r24, 0x70	; 112
    12a8:	19 f0       	breq	.+6      	; 0x12b0 <vfprintf+0x24e>
    12aa:	88 37       	cpi	r24, 0x78	; 120
    12ac:	21 f0       	breq	.+8      	; 0x12b6 <vfprintf+0x254>
    12ae:	b0 c0       	rjmp	.+352    	; 0x1410 <vfprintf+0x3ae>
    12b0:	e9 2f       	mov	r30, r25
    12b2:	e0 61       	ori	r30, 0x10	; 16
    12b4:	be 2e       	mov	r11, r30
    12b6:	b4 fe       	sbrs	r11, 4
    12b8:	0d c0       	rjmp	.+26     	; 0x12d4 <vfprintf+0x272>
    12ba:	fb 2d       	mov	r31, r11
    12bc:	f4 60       	ori	r31, 0x04	; 4
    12be:	bf 2e       	mov	r11, r31
    12c0:	09 c0       	rjmp	.+18     	; 0x12d4 <vfprintf+0x272>
    12c2:	34 fe       	sbrs	r3, 4
    12c4:	0a c0       	rjmp	.+20     	; 0x12da <vfprintf+0x278>
    12c6:	29 2f       	mov	r18, r25
    12c8:	26 60       	ori	r18, 0x06	; 6
    12ca:	b2 2e       	mov	r11, r18
    12cc:	06 c0       	rjmp	.+12     	; 0x12da <vfprintf+0x278>
    12ce:	28 e0       	ldi	r18, 0x08	; 8
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	05 c0       	rjmp	.+10     	; 0x12de <vfprintf+0x27c>
    12d4:	20 e1       	ldi	r18, 0x10	; 16
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <vfprintf+0x27c>
    12da:	20 e1       	ldi	r18, 0x10	; 16
    12dc:	32 e0       	ldi	r19, 0x02	; 2
    12de:	f8 01       	movw	r30, r16
    12e0:	b7 fe       	sbrs	r11, 7
    12e2:	07 c0       	rjmp	.+14     	; 0x12f2 <vfprintf+0x290>
    12e4:	60 81       	ld	r22, Z
    12e6:	71 81       	ldd	r23, Z+1	; 0x01
    12e8:	82 81       	ldd	r24, Z+2	; 0x02
    12ea:	93 81       	ldd	r25, Z+3	; 0x03
    12ec:	0c 5f       	subi	r16, 0xFC	; 252
    12ee:	1f 4f       	sbci	r17, 0xFF	; 255
    12f0:	06 c0       	rjmp	.+12     	; 0x12fe <vfprintf+0x29c>
    12f2:	60 81       	ld	r22, Z
    12f4:	71 81       	ldd	r23, Z+1	; 0x01
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0e 5f       	subi	r16, 0xFE	; 254
    12fc:	1f 4f       	sbci	r17, 0xFF	; 255
    12fe:	a3 01       	movw	r20, r6
    1300:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <__ultoa_invert>
    1304:	88 2e       	mov	r8, r24
    1306:	86 18       	sub	r8, r6
    1308:	fb 2d       	mov	r31, r11
    130a:	ff 77       	andi	r31, 0x7F	; 127
    130c:	3f 2e       	mov	r3, r31
    130e:	36 fe       	sbrs	r3, 6
    1310:	0d c0       	rjmp	.+26     	; 0x132c <vfprintf+0x2ca>
    1312:	23 2d       	mov	r18, r3
    1314:	2e 7f       	andi	r18, 0xFE	; 254
    1316:	a2 2e       	mov	r10, r18
    1318:	89 14       	cp	r8, r9
    131a:	58 f4       	brcc	.+22     	; 0x1332 <vfprintf+0x2d0>
    131c:	34 fe       	sbrs	r3, 4
    131e:	0b c0       	rjmp	.+22     	; 0x1336 <vfprintf+0x2d4>
    1320:	32 fc       	sbrc	r3, 2
    1322:	09 c0       	rjmp	.+18     	; 0x1336 <vfprintf+0x2d4>
    1324:	83 2d       	mov	r24, r3
    1326:	8e 7e       	andi	r24, 0xEE	; 238
    1328:	a8 2e       	mov	r10, r24
    132a:	05 c0       	rjmp	.+10     	; 0x1336 <vfprintf+0x2d4>
    132c:	b8 2c       	mov	r11, r8
    132e:	a3 2c       	mov	r10, r3
    1330:	03 c0       	rjmp	.+6      	; 0x1338 <vfprintf+0x2d6>
    1332:	b8 2c       	mov	r11, r8
    1334:	01 c0       	rjmp	.+2      	; 0x1338 <vfprintf+0x2d6>
    1336:	b9 2c       	mov	r11, r9
    1338:	a4 fe       	sbrs	r10, 4
    133a:	0f c0       	rjmp	.+30     	; 0x135a <vfprintf+0x2f8>
    133c:	fe 01       	movw	r30, r28
    133e:	e8 0d       	add	r30, r8
    1340:	f1 1d       	adc	r31, r1
    1342:	80 81       	ld	r24, Z
    1344:	80 33       	cpi	r24, 0x30	; 48
    1346:	21 f4       	brne	.+8      	; 0x1350 <vfprintf+0x2ee>
    1348:	9a 2d       	mov	r25, r10
    134a:	99 7e       	andi	r25, 0xE9	; 233
    134c:	a9 2e       	mov	r10, r25
    134e:	09 c0       	rjmp	.+18     	; 0x1362 <vfprintf+0x300>
    1350:	a2 fe       	sbrs	r10, 2
    1352:	06 c0       	rjmp	.+12     	; 0x1360 <vfprintf+0x2fe>
    1354:	b3 94       	inc	r11
    1356:	b3 94       	inc	r11
    1358:	04 c0       	rjmp	.+8      	; 0x1362 <vfprintf+0x300>
    135a:	8a 2d       	mov	r24, r10
    135c:	86 78       	andi	r24, 0x86	; 134
    135e:	09 f0       	breq	.+2      	; 0x1362 <vfprintf+0x300>
    1360:	b3 94       	inc	r11
    1362:	a3 fc       	sbrc	r10, 3
    1364:	11 c0       	rjmp	.+34     	; 0x1388 <vfprintf+0x326>
    1366:	a0 fe       	sbrs	r10, 0
    1368:	06 c0       	rjmp	.+12     	; 0x1376 <vfprintf+0x314>
    136a:	b2 14       	cp	r11, r2
    136c:	88 f4       	brcc	.+34     	; 0x1390 <vfprintf+0x32e>
    136e:	28 0c       	add	r2, r8
    1370:	92 2c       	mov	r9, r2
    1372:	9b 18       	sub	r9, r11
    1374:	0e c0       	rjmp	.+28     	; 0x1392 <vfprintf+0x330>
    1376:	b2 14       	cp	r11, r2
    1378:	60 f4       	brcc	.+24     	; 0x1392 <vfprintf+0x330>
    137a:	b6 01       	movw	r22, r12
    137c:	80 e2       	ldi	r24, 0x20	; 32
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 28 0a 	call	0x1450	; 0x1450 <fputc>
    1384:	b3 94       	inc	r11
    1386:	f7 cf       	rjmp	.-18     	; 0x1376 <vfprintf+0x314>
    1388:	b2 14       	cp	r11, r2
    138a:	18 f4       	brcc	.+6      	; 0x1392 <vfprintf+0x330>
    138c:	2b 18       	sub	r2, r11
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <vfprintf+0x332>
    1390:	98 2c       	mov	r9, r8
    1392:	21 2c       	mov	r2, r1
    1394:	a4 fe       	sbrs	r10, 4
    1396:	10 c0       	rjmp	.+32     	; 0x13b8 <vfprintf+0x356>
    1398:	b6 01       	movw	r22, r12
    139a:	80 e3       	ldi	r24, 0x30	; 48
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	0e 94 28 0a 	call	0x1450	; 0x1450 <fputc>
    13a2:	a2 fe       	sbrs	r10, 2
    13a4:	17 c0       	rjmp	.+46     	; 0x13d4 <vfprintf+0x372>
    13a6:	a1 fc       	sbrc	r10, 1
    13a8:	03 c0       	rjmp	.+6      	; 0x13b0 <vfprintf+0x34e>
    13aa:	88 e7       	ldi	r24, 0x78	; 120
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <vfprintf+0x352>
    13b0:	88 e5       	ldi	r24, 0x58	; 88
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	b6 01       	movw	r22, r12
    13b6:	0c c0       	rjmp	.+24     	; 0x13d0 <vfprintf+0x36e>
    13b8:	8a 2d       	mov	r24, r10
    13ba:	86 78       	andi	r24, 0x86	; 134
    13bc:	59 f0       	breq	.+22     	; 0x13d4 <vfprintf+0x372>
    13be:	a1 fe       	sbrs	r10, 1
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <vfprintf+0x364>
    13c2:	8b e2       	ldi	r24, 0x2B	; 43
    13c4:	01 c0       	rjmp	.+2      	; 0x13c8 <vfprintf+0x366>
    13c6:	80 e2       	ldi	r24, 0x20	; 32
    13c8:	a7 fc       	sbrc	r10, 7
    13ca:	8d e2       	ldi	r24, 0x2D	; 45
    13cc:	b6 01       	movw	r22, r12
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 28 0a 	call	0x1450	; 0x1450 <fputc>
    13d4:	89 14       	cp	r8, r9
    13d6:	38 f4       	brcc	.+14     	; 0x13e6 <vfprintf+0x384>
    13d8:	b6 01       	movw	r22, r12
    13da:	80 e3       	ldi	r24, 0x30	; 48
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	0e 94 28 0a 	call	0x1450	; 0x1450 <fputc>
    13e2:	9a 94       	dec	r9
    13e4:	f7 cf       	rjmp	.-18     	; 0x13d4 <vfprintf+0x372>
    13e6:	8a 94       	dec	r8
    13e8:	f3 01       	movw	r30, r6
    13ea:	e8 0d       	add	r30, r8
    13ec:	f1 1d       	adc	r31, r1
    13ee:	80 81       	ld	r24, Z
    13f0:	b6 01       	movw	r22, r12
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 28 0a 	call	0x1450	; 0x1450 <fputc>
    13f8:	81 10       	cpse	r8, r1
    13fa:	f5 cf       	rjmp	.-22     	; 0x13e6 <vfprintf+0x384>
    13fc:	22 20       	and	r2, r2
    13fe:	09 f4       	brne	.+2      	; 0x1402 <vfprintf+0x3a0>
    1400:	42 ce       	rjmp	.-892    	; 0x1086 <vfprintf+0x24>
    1402:	b6 01       	movw	r22, r12
    1404:	80 e2       	ldi	r24, 0x20	; 32
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	0e 94 28 0a 	call	0x1450	; 0x1450 <fputc>
    140c:	2a 94       	dec	r2
    140e:	f6 cf       	rjmp	.-20     	; 0x13fc <vfprintf+0x39a>
    1410:	f6 01       	movw	r30, r12
    1412:	86 81       	ldd	r24, Z+6	; 0x06
    1414:	97 81       	ldd	r25, Z+7	; 0x07
    1416:	02 c0       	rjmp	.+4      	; 0x141c <vfprintf+0x3ba>
    1418:	8f ef       	ldi	r24, 0xFF	; 255
    141a:	9f ef       	ldi	r25, 0xFF	; 255
    141c:	2b 96       	adiw	r28, 0x0b	; 11
    141e:	e2 e1       	ldi	r30, 0x12	; 18
    1420:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__epilogue_restores__>

00001424 <strnlen_P>:
    1424:	fc 01       	movw	r30, r24
    1426:	05 90       	lpm	r0, Z+
    1428:	61 50       	subi	r22, 0x01	; 1
    142a:	70 40       	sbci	r23, 0x00	; 0
    142c:	01 10       	cpse	r0, r1
    142e:	d8 f7       	brcc	.-10     	; 0x1426 <strnlen_P+0x2>
    1430:	80 95       	com	r24
    1432:	90 95       	com	r25
    1434:	8e 0f       	add	r24, r30
    1436:	9f 1f       	adc	r25, r31
    1438:	08 95       	ret

0000143a <strnlen>:
    143a:	fc 01       	movw	r30, r24
    143c:	61 50       	subi	r22, 0x01	; 1
    143e:	70 40       	sbci	r23, 0x00	; 0
    1440:	01 90       	ld	r0, Z+
    1442:	01 10       	cpse	r0, r1
    1444:	d8 f7       	brcc	.-10     	; 0x143c <strnlen+0x2>
    1446:	80 95       	com	r24
    1448:	90 95       	com	r25
    144a:	8e 0f       	add	r24, r30
    144c:	9f 1f       	adc	r25, r31
    144e:	08 95       	ret

00001450 <fputc>:
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	fb 01       	movw	r30, r22
    145a:	23 81       	ldd	r18, Z+3	; 0x03
    145c:	21 fd       	sbrc	r18, 1
    145e:	03 c0       	rjmp	.+6      	; 0x1466 <fputc+0x16>
    1460:	8f ef       	ldi	r24, 0xFF	; 255
    1462:	9f ef       	ldi	r25, 0xFF	; 255
    1464:	2c c0       	rjmp	.+88     	; 0x14be <fputc+0x6e>
    1466:	22 ff       	sbrs	r18, 2
    1468:	16 c0       	rjmp	.+44     	; 0x1496 <fputc+0x46>
    146a:	46 81       	ldd	r20, Z+6	; 0x06
    146c:	57 81       	ldd	r21, Z+7	; 0x07
    146e:	24 81       	ldd	r18, Z+4	; 0x04
    1470:	35 81       	ldd	r19, Z+5	; 0x05
    1472:	42 17       	cp	r20, r18
    1474:	53 07       	cpc	r21, r19
    1476:	44 f4       	brge	.+16     	; 0x1488 <fputc+0x38>
    1478:	a0 81       	ld	r26, Z
    147a:	b1 81       	ldd	r27, Z+1	; 0x01
    147c:	9d 01       	movw	r18, r26
    147e:	2f 5f       	subi	r18, 0xFF	; 255
    1480:	3f 4f       	sbci	r19, 0xFF	; 255
    1482:	31 83       	std	Z+1, r19	; 0x01
    1484:	20 83       	st	Z, r18
    1486:	8c 93       	st	X, r24
    1488:	26 81       	ldd	r18, Z+6	; 0x06
    148a:	37 81       	ldd	r19, Z+7	; 0x07
    148c:	2f 5f       	subi	r18, 0xFF	; 255
    148e:	3f 4f       	sbci	r19, 0xFF	; 255
    1490:	37 83       	std	Z+7, r19	; 0x07
    1492:	26 83       	std	Z+6, r18	; 0x06
    1494:	14 c0       	rjmp	.+40     	; 0x14be <fputc+0x6e>
    1496:	8b 01       	movw	r16, r22
    1498:	ec 01       	movw	r28, r24
    149a:	fb 01       	movw	r30, r22
    149c:	00 84       	ldd	r0, Z+8	; 0x08
    149e:	f1 85       	ldd	r31, Z+9	; 0x09
    14a0:	e0 2d       	mov	r30, r0
    14a2:	09 95       	icall
    14a4:	89 2b       	or	r24, r25
    14a6:	e1 f6       	brne	.-72     	; 0x1460 <fputc+0x10>
    14a8:	d8 01       	movw	r26, r16
    14aa:	16 96       	adiw	r26, 0x06	; 6
    14ac:	8d 91       	ld	r24, X+
    14ae:	9c 91       	ld	r25, X
    14b0:	17 97       	sbiw	r26, 0x07	; 7
    14b2:	01 96       	adiw	r24, 0x01	; 1
    14b4:	17 96       	adiw	r26, 0x07	; 7
    14b6:	9c 93       	st	X, r25
    14b8:	8e 93       	st	-X, r24
    14ba:	16 97       	sbiw	r26, 0x06	; 6
    14bc:	ce 01       	movw	r24, r28
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	08 95       	ret

000014c8 <__ultoa_invert>:
    14c8:	fa 01       	movw	r30, r20
    14ca:	aa 27       	eor	r26, r26
    14cc:	28 30       	cpi	r18, 0x08	; 8
    14ce:	51 f1       	breq	.+84     	; 0x1524 <__ultoa_invert+0x5c>
    14d0:	20 31       	cpi	r18, 0x10	; 16
    14d2:	81 f1       	breq	.+96     	; 0x1534 <__ultoa_invert+0x6c>
    14d4:	e8 94       	clt
    14d6:	6f 93       	push	r22
    14d8:	6e 7f       	andi	r22, 0xFE	; 254
    14da:	6e 5f       	subi	r22, 0xFE	; 254
    14dc:	7f 4f       	sbci	r23, 0xFF	; 255
    14de:	8f 4f       	sbci	r24, 0xFF	; 255
    14e0:	9f 4f       	sbci	r25, 0xFF	; 255
    14e2:	af 4f       	sbci	r26, 0xFF	; 255
    14e4:	b1 e0       	ldi	r27, 0x01	; 1
    14e6:	3e d0       	rcall	.+124    	; 0x1564 <__ultoa_invert+0x9c>
    14e8:	b4 e0       	ldi	r27, 0x04	; 4
    14ea:	3c d0       	rcall	.+120    	; 0x1564 <__ultoa_invert+0x9c>
    14ec:	67 0f       	add	r22, r23
    14ee:	78 1f       	adc	r23, r24
    14f0:	89 1f       	adc	r24, r25
    14f2:	9a 1f       	adc	r25, r26
    14f4:	a1 1d       	adc	r26, r1
    14f6:	68 0f       	add	r22, r24
    14f8:	79 1f       	adc	r23, r25
    14fa:	8a 1f       	adc	r24, r26
    14fc:	91 1d       	adc	r25, r1
    14fe:	a1 1d       	adc	r26, r1
    1500:	6a 0f       	add	r22, r26
    1502:	71 1d       	adc	r23, r1
    1504:	81 1d       	adc	r24, r1
    1506:	91 1d       	adc	r25, r1
    1508:	a1 1d       	adc	r26, r1
    150a:	20 d0       	rcall	.+64     	; 0x154c <__ultoa_invert+0x84>
    150c:	09 f4       	brne	.+2      	; 0x1510 <__ultoa_invert+0x48>
    150e:	68 94       	set
    1510:	3f 91       	pop	r19
    1512:	2a e0       	ldi	r18, 0x0A	; 10
    1514:	26 9f       	mul	r18, r22
    1516:	11 24       	eor	r1, r1
    1518:	30 19       	sub	r19, r0
    151a:	30 5d       	subi	r19, 0xD0	; 208
    151c:	31 93       	st	Z+, r19
    151e:	de f6       	brtc	.-74     	; 0x14d6 <__ultoa_invert+0xe>
    1520:	cf 01       	movw	r24, r30
    1522:	08 95       	ret
    1524:	46 2f       	mov	r20, r22
    1526:	47 70       	andi	r20, 0x07	; 7
    1528:	40 5d       	subi	r20, 0xD0	; 208
    152a:	41 93       	st	Z+, r20
    152c:	b3 e0       	ldi	r27, 0x03	; 3
    152e:	0f d0       	rcall	.+30     	; 0x154e <__ultoa_invert+0x86>
    1530:	c9 f7       	brne	.-14     	; 0x1524 <__ultoa_invert+0x5c>
    1532:	f6 cf       	rjmp	.-20     	; 0x1520 <__ultoa_invert+0x58>
    1534:	46 2f       	mov	r20, r22
    1536:	4f 70       	andi	r20, 0x0F	; 15
    1538:	40 5d       	subi	r20, 0xD0	; 208
    153a:	4a 33       	cpi	r20, 0x3A	; 58
    153c:	18 f0       	brcs	.+6      	; 0x1544 <__ultoa_invert+0x7c>
    153e:	49 5d       	subi	r20, 0xD9	; 217
    1540:	31 fd       	sbrc	r19, 1
    1542:	40 52       	subi	r20, 0x20	; 32
    1544:	41 93       	st	Z+, r20
    1546:	02 d0       	rcall	.+4      	; 0x154c <__ultoa_invert+0x84>
    1548:	a9 f7       	brne	.-22     	; 0x1534 <__ultoa_invert+0x6c>
    154a:	ea cf       	rjmp	.-44     	; 0x1520 <__ultoa_invert+0x58>
    154c:	b4 e0       	ldi	r27, 0x04	; 4
    154e:	a6 95       	lsr	r26
    1550:	97 95       	ror	r25
    1552:	87 95       	ror	r24
    1554:	77 95       	ror	r23
    1556:	67 95       	ror	r22
    1558:	ba 95       	dec	r27
    155a:	c9 f7       	brne	.-14     	; 0x154e <__ultoa_invert+0x86>
    155c:	00 97       	sbiw	r24, 0x00	; 0
    155e:	61 05       	cpc	r22, r1
    1560:	71 05       	cpc	r23, r1
    1562:	08 95       	ret
    1564:	9b 01       	movw	r18, r22
    1566:	ac 01       	movw	r20, r24
    1568:	0a 2e       	mov	r0, r26
    156a:	06 94       	lsr	r0
    156c:	57 95       	ror	r21
    156e:	47 95       	ror	r20
    1570:	37 95       	ror	r19
    1572:	27 95       	ror	r18
    1574:	ba 95       	dec	r27
    1576:	c9 f7       	brne	.-14     	; 0x156a <__ultoa_invert+0xa2>
    1578:	62 0f       	add	r22, r18
    157a:	73 1f       	adc	r23, r19
    157c:	84 1f       	adc	r24, r20
    157e:	95 1f       	adc	r25, r21
    1580:	a0 1d       	adc	r26, r0
    1582:	08 95       	ret

00001584 <__prologue_saves__>:
    1584:	2f 92       	push	r2
    1586:	3f 92       	push	r3
    1588:	4f 92       	push	r4
    158a:	5f 92       	push	r5
    158c:	6f 92       	push	r6
    158e:	7f 92       	push	r7
    1590:	8f 92       	push	r8
    1592:	9f 92       	push	r9
    1594:	af 92       	push	r10
    1596:	bf 92       	push	r11
    1598:	cf 92       	push	r12
    159a:	df 92       	push	r13
    159c:	ef 92       	push	r14
    159e:	ff 92       	push	r15
    15a0:	0f 93       	push	r16
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	ca 1b       	sub	r28, r26
    15ae:	db 0b       	sbc	r29, r27
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	09 94       	ijmp

000015bc <__epilogue_restores__>:
    15bc:	2a 88       	ldd	r2, Y+18	; 0x12
    15be:	39 88       	ldd	r3, Y+17	; 0x11
    15c0:	48 88       	ldd	r4, Y+16	; 0x10
    15c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    15c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    15c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    15c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    15ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    15cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    15ce:	b9 84       	ldd	r11, Y+9	; 0x09
    15d0:	c8 84       	ldd	r12, Y+8	; 0x08
    15d2:	df 80       	ldd	r13, Y+7	; 0x07
    15d4:	ee 80       	ldd	r14, Y+6	; 0x06
    15d6:	fd 80       	ldd	r15, Y+5	; 0x05
    15d8:	0c 81       	ldd	r16, Y+4	; 0x04
    15da:	1b 81       	ldd	r17, Y+3	; 0x03
    15dc:	aa 81       	ldd	r26, Y+2	; 0x02
    15de:	b9 81       	ldd	r27, Y+1	; 0x01
    15e0:	ce 0f       	add	r28, r30
    15e2:	d1 1d       	adc	r29, r1
    15e4:	0f b6       	in	r0, 0x3f	; 63
    15e6:	f8 94       	cli
    15e8:	de bf       	out	0x3e, r29	; 62
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	cd bf       	out	0x3d, r28	; 61
    15ee:	ed 01       	movw	r28, r26
    15f0:	08 95       	ret

000015f2 <_exit>:
    15f2:	f8 94       	cli

000015f4 <__stop_program>:
    15f4:	ff cf       	rjmp	.-2      	; 0x15f4 <__stop_program>
